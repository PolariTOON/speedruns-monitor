<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Record count by player (bears)</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-01-08</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-28</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">33</text>
		</svg>
		<svg viewBox="0 0 2820 33" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 33) scale(1 -1)" style="--count: 44;">
				<g>
					<rect x="0" y="0" width="2820" height="33"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,1L1,1L1,4L5,4L5,1L7,1L7,3L9,3L9,6L10,6L10,3L11,3L11,4L14,4L14,3L16,3L16,4L17,4L17,4L18,4L18,4L19,4L19,4L23,4L23,4L24,4L24,3L25,3L25,3L26,3L26,2L28,2L28,1L30,1L30,3L31,3L31,5L57,5L57,7L59,7L59,8L60,8L60,10L66,10L66,9L69,9L69,8L70,8L70,7L71,7L71,6L93,6L93,7L94,7L94,6L95,6L95,5L99,5L99,4L101,4L101,3L103,3L103,2L104,2L104,1L181,1L181,3L182,3L182,1L186,1L186,0L418,0L418,2L759,2L759,1L842,1L842,0L2820,0" tabindex="0">
						<title>qj2pq1p8</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L1,0L1,1L5,1L5,0L83,0L83,1L94,1L94,1L95,1L95,3L97,3L97,2L101,2L101,0L175,0L175,1L180,1L180,0L2820,0" tabindex="0">
						<title>e8e935oj</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L1,0L1,1L106,1L106,0L2820,0" tabindex="0">
						<title>7j47r25j</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L5,0L5,5L6,5L6,5L7,5L7,5L9,5L9,4L11,4L11,3L14,3L14,4L16,4L16,3L31,3L31,2L104,2L104,1L106,1L106,0L2820,0" tabindex="0">
						<title>5j5gggn8</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L7,0L7,1L8,1L8,1L16,1L16,1L18,1L18,2L27,2L27,1L57,1L57,0L66,0L66,1L91,1L91,2L93,2L93,2L94,2L94,0L95,0L95,1L181,1L181,0L2820,0" tabindex="0">
						<title>48grel1x</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L10,0L10,3L11,3L11,3L18,3L18,2L25,2L25,1L59,1L59,0L2820,0" tabindex="0">
						<title>0jm3onz8</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L24,0L24,1L25,1L25,2L26,2L26,3L27,3L27,4L28,4L28,6L30,6L30,4L31,4L31,3L60,3L60,2L99,2L99,0L2820,0" tabindex="0">
						<title>kj9kz6r8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L69,0L69,1L70,1L70,2L71,2L71,3L83,3L83,2L91,2L91,4L93,4L93,5L94,5L94,10L95,10L95,8L97,8L97,9L99,9L99,8L100,8L100,6L101,6L101,5L103,5L103,4L106,4L106,3L183,3L183,0L2820,0" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L99,0L99,4L100,4L100,6L101,6L101,10L103,10L103,12L104,12L104,14L105,14L105,14L106,14L106,17L107,17L107,17L175,17L175,16L180,16L180,17L181,17L181,16L182,16L182,18L183,18L183,21L186,21L186,23L187,23L187,23L251,23L251,23L252,23L252,23L253,23L253,23L255,23L255,23L260,23L260,23L263,23L263,23L389,23L389,23L416,23L416,22L418,22L418,20L434,20L434,19L574,19L574,22L578,22L578,23L643,23L643,22L840,22L840,21L844,21L844,21L846,21L846,21L853,21L853,20L854,20L854,19L857,19L857,18L862,18L862,17L863,17L863,16L869,16L869,15L870,15L870,14L871,14L871,12L875,12L875,9L888,9L888,8L923,8L923,7L957,7L957,8L959,8L959,10L963,10L963,12L965,12L965,13L967,13L967,15L968,15L968,14L970,14L970,15L996,15L996,14L1005,14L1005,13L1013,13L1013,12L1019,12L1019,11L1023,11L1023,10L1027,10L1027,9L1047,9L1047,6L1048,6L1048,5L1055,5L1055,5L1056,5L1056,4L1059,4L1059,5L1078,5L1078,4L1094,4L1094,3L1104,3L1104,2L1111,2L1111,1L1143,1L1143,2L1146,2L1146,3L1151,3L1151,2L1182,2L1182,1L1373,1L1373,0L2820,0" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L416,0L416,1L854,1L854,0L2820,0" tabindex="0">
						<title>1xye35n8</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L434,0L434,1L435,1L435,1L524,1L524,0L2820,0" tabindex="0">
						<title>dx3k6eej</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L524,0L524,1L872,1L872,0L1052,0L1052,0L1053,0L1053,1L1054,1L1054,1L1056,1L1056,2L1073,2L1073,3L1074,3L1074,3L1078,3L1078,3L1112,3L1112,2L1145,2L1145,1L1154,1L1154,0L2085,0L2085,1L2099,1L2099,0L2820,0" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L643,0L643,1L714,1L714,1L857,1L857,0L2820,0" tabindex="0">
						<title>7j4y0zmj</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L758,0L758,1L759,1L759,2L766,2L766,2L769,2L769,2L777,2L777,2L823,2L823,2L842,2L842,3L855,3L855,2L862,2L862,3L864,3L864,2L868,2L868,1L873,1L873,0L896,0L896,1L968,1L968,2L970,2L970,1L1050,1L1050,0L2820,0" tabindex="0">
						<title>8146r4r8</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L840,0L840,1L853,1L853,2L854,2L854,4L855,4L855,6L857,6L857,8L863,8L863,9L864,9L864,10L865,10L865,9L868,9L868,10L869,10L869,12L870,12L870,13L871,13L871,16L872,16L872,15L873,15L873,16L875,16L875,19L888,19L888,20L896,20L896,19L922,19L922,18L923,18L923,19L925,19L925,18L931,18L931,17L959,17L959,15L965,15L965,11L995,11L995,11L1005,11L1005,12L1013,12L1013,13L1015,13L1015,13L1019,13L1019,14L1023,14L1023,15L1028,15L1028,12L1033,12L1033,11L1036,11L1036,12L1037,12L1037,11L1042,11L1042,10L1047,10L1047,7L1050,7L1050,6L1051,6L1051,7L1054,7L1054,7L1055,7L1055,6L1059,6L1059,5L1061,5L1061,4L1076,4L1076,3L1080,3L1080,2L1104,2L1104,1L1115,1L1115,0L2820,0" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L865,0L865,1L963,1L963,0L2820,0" tabindex="0">
						<title>8rp1o2qj</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L872,0L872,2L957,2L957,1L967,1L967,0L2820,0" tabindex="0">
						<title>xz9mo9n8</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L922,0L922,1L925,1L925,2L963,2L963,1L966,1L966,1L1048,1L1048,0L2820,0" tabindex="0">
						<title>18vm2258</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L931,0L931,1L971,1L971,1L987,1L987,1L1023,1L1023,2L1027,2L1027,3L1028,3L1028,6L1036,6L1036,5L1037,5L1037,6L1042,6L1042,7L1045,7L1045,6L1046,6L1046,6L1047,6L1047,4L1048,4L1048,5L1049,5L1049,6L1054,6L1054,8L1055,8L1055,9L1060,9L1060,9L1061,9L1061,10L1066,10L1066,9L1071,9L1071,11L1074,11L1074,11L1076,11L1076,13L1077,13L1077,13L1078,13L1078,14L1079,14L1079,15L1080,15L1080,16L1082,16L1082,17L1085,17L1085,16L1086,16L1086,16L1087,16L1087,17L1088,17L1088,19L1089,19L1089,19L1090,19L1090,19L1091,19L1091,19L1092,19L1092,20L1094,20L1094,21L1095,21L1095,20L1097,20L1097,21L1103,21L1103,20L1104,20L1104,19L1105,19L1105,18L1111,18L1111,20L1112,20L1112,24L1114,24L1114,23L1115,23L1115,25L1116,25L1116,26L1118,26L1118,26L1119,26L1119,27L1125,27L1125,25L1131,25L1131,27L1132,27L1132,25L1133,25L1133,26L1134,26L1134,27L1138,27L1138,26L1140,26L1140,25L1143,25L1143,24L1145,24L1145,21L1146,21L1146,20L1150,20L1150,19L1156,19L1156,18L1164,18L1164,17L1174,17L1174,18L1178,18L1178,17L1182,17L1182,16L1183,16L1183,15L1186,15L1186,13L1199,13L1199,11L1287,11L1287,13L1288,13L1288,14L1306,14L1306,13L1312,13L1312,12L1369,12L1369,11L1438,11L1438,10L1477,10L1477,9L1514,9L1514,8L1515,8L1515,6L1516,6L1516,5L1594,5L1594,4L1600,4L1600,3L1608,3L1608,1L1609,1L1609,2L1629,2L1629,1L1763,1L1763,0L1953,0L1953,0L1979,0L1979,1L1981,1L1981,0L1987,0L1987,1L1993,1L1993,0L2820,0" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L965,0L965,3L967,3L967,2L996,2L996,3L1023,3L1023,2L1047,2L1047,9L1048,9L1048,11L1049,11L1049,10L1052,10L1052,10L1053,10L1053,9L1054,9L1054,7L1071,7L1071,6L1073,6L1073,5L1076,5L1076,4L1078,4L1078,3L1082,3L1082,2L1088,2L1088,1L1090,1L1090,0L1140,0L1140,1L1141,1L1141,2L1144,2L1144,2L1145,2L1145,6L1146,6L1146,6L1151,6L1151,7L1154,7L1154,8L1156,8L1156,9L1158,9L1158,10L1164,10L1164,11L1166,11L1166,10L1173,10L1173,10L1174,10L1174,9L1178,9L1178,10L1182,10L1182,11L1186,11L1186,13L1199,13L1199,15L1288,15L1288,14L1312,14L1312,15L1369,15L1369,16L1438,16L1438,17L1476,17L1476,17L1477,17L1477,18L1514,18L1514,19L1515,19L1515,21L1516,21L1516,22L1599,22L1599,21L1600,21L1600,23L1601,23L1601,22L1602,22L1602,23L1608,23L1608,26L1609,26L1609,25L1619,25L1619,24L1620,24L1620,25L1622,25L1622,24L1623,24L1623,25L1629,25L1629,25L1631,25L1631,26L1634,26L1634,26L1636,26L1636,24L1637,24L1637,25L1640,25L1640,24L1641,24L1641,26L1705,26L1705,26L1766,26L1766,25L1775,25L1775,24L1787,24L1787,23L1791,23L1791,21L1807,21L1807,20L1817,20L1817,19L1828,19L1828,18L1893,18L1893,15L1894,15L1894,14L1899,14L1899,13L1908,13L1908,12L1911,12L1911,11L1913,11L1913,10L1914,10L1914,8L1925,8L1925,7L1930,7L1930,6L1940,6L1940,5L1948,5L1948,4L1987,4L1987,3L2054,3L2054,2L2176,2L2176,1L2207,1L2207,0L2820,0" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L1033,0L1033,1L1047,1L1047,0L2820,0" tabindex="0">
						<title>8e94kq6j</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L1045,0L1045,1L1046,1L1046,1L1047,1L1047,3L1048,3L1048,2L1050,2L1050,3L1061,3L1061,3L1066,3L1066,4L1071,4L1071,3L1078,3L1078,3L1079,3L1079,2L1085,2L1085,3L1086,3L1086,3L1087,3L1087,2L1088,2L1088,1L1090,1L1090,2L1091,2L1091,2L1092,2L1092,1L1095,1L1095,2L1097,2L1097,1L1101,1L1101,2L1102,2L1102,1L1106,1L1106,2L1108,2L1108,1L1116,1L1116,0L1166,0L1166,1L1608,1L1608,0L2820,0" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L1050,0L1050,1L1051,1L1051,0L2820,0" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L1078,0L1078,1L1079,1L1079,1L1099,1L1099,1L1101,1L1101,0L1102,0L1102,1L1103,1L1103,2L1104,2L1104,5L1105,5L1105,6L1106,6L1106,5L1108,5L1108,6L1111,6L1111,5L1112,5L1112,2L1115,2L1115,1L1118,1L1118,0L1138,0L1138,1L1150,1L1150,2L1158,2L1158,1L1182,1L1182,2L1183,2L1183,3L1253,3L1253,3L1287,3L1287,1L1306,1L1306,2L1373,2L1373,3L1593,3L1593,2L1642,2L1642,1L2175,1L2175,0L2820,0" tabindex="0">
						<title>814zn7l8</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L1114,0L1114,1L1118,1L1118,2L1119,2L1119,1L1125,1L1125,3L1131,3L1131,1L1132,1L1132,3L1133,3L1133,2L1134,2L1134,1L1141,1L1141,0L2820,0" tabindex="0">
						<title>jnzg27dj</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L1593,0L1593,1L1594,1L1594,2L1599,2L1599,3L1600,3L1600,2L1601,2L1601,3L1602,3L1602,2L1619,2L1619,3L1620,3L1620,2L1622,2L1622,3L1623,3L1623,2L1629,2L1629,3L1631,3L1631,2L1634,2L1634,2L1636,2L1636,4L1637,4L1637,3L1640,3L1640,4L1641,4L1641,2L1642,2L1642,3L1818,3L1818,2L2009,2L2009,1L2190,1L2190,0L2820,0" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L1763,0L1763,1L1766,1L1766,2L1775,2L1775,3L1787,3L1787,4L1791,4L1791,6L1794,6L1794,5L1800,5L1800,6L1807,6L1807,7L1817,7L1817,8L1818,8L1818,9L1826,9L1826,9L1828,9L1828,10L1854,10L1854,10L1878,10L1878,10L1893,10L1893,13L1894,13L1894,14L1899,14L1899,15L1900,15L1900,15L1902,15L1902,15L1907,15L1907,15L1908,15L1908,16L1909,16L1909,16L1911,16L1911,17L1913,17L1913,18L1914,18L1914,20L1925,20L1925,21L1930,21L1930,22L1931,22L1931,22L1940,22L1940,23L1948,23L1948,24L1949,24L1949,24L1950,24L1950,24L1951,24L1951,24L1953,24L1953,24L1955,24L1955,24L1981,24L1981,25L1982,25L1982,25L1984,25L1984,25L1987,25L1987,25L2007,25L2007,24L2013,24L2013,24L2054,24L2054,25L2062,25L2062,25L2077,25L2077,25L2084,25L2084,26L2085,26L2085,25L2099,25L2099,26L2175,26L2175,27L2176,27L2176,28L2178,28L2178,29L2184,29L2184,30L2190,30L2190,31L2207,31L2207,32L2229,32L2229,32L2230,32L2230,32L2376,32L2376,33L2380,33L2380,33L2411,33L2411,33L2412,33L2412,32L2413,32L2413,32L2417,32L2417,33L2431,33L2431,32L2432,32L2432,33L2434,33L2434,32L2452,32L2452,31L2459,31L2459,32L2460,32L2460,31L2463,31L2463,32L2520,32L2520,31L2538,31L2538,31L2541,31L2541,32L2548,32L2548,32L2549,32L2549,32L2552,32L2552,31L2555,31L2555,32L2614,32L2614,30L2615,30L2615,31L2616,31L2616,30L2627,30L2627,29L2633,29L2633,28L2635,28L2635,29L2639,29L2639,28L2642,28L2642,27L2644,27L2644,26L2646,26L2646,28L2651,28L2651,28L2661,28L2661,27L2662,27L2662,28L2679,28L2679,27L2680,27L2680,28L2692,28L2692,27L2701,27L2701,28L2706,28L2706,29L2707,29L2707,30L2712,30L2712,29L2718,29L2718,30L2724,30L2724,29L2730,29L2730,28L2732,28L2732,27L2733,27L2733,26L2734,26L2734,25L2738,25L2738,24L2740,24L2740,23L2741,23L2741,22L2747,22L2747,23L2749,23L2749,26L2750,26L2750,24L2751,24L2751,23L2753,23L2753,24L2756,24L2756,27L2757,27L2757,27L2760,27L2760,26L2761,26L2761,26L2762,26L2762,27L2763,27L2763,25L2765,25L2765,26L2766,26L2766,27L2773,27L2773,28L2774,28L2774,29L2778,29L2778,29L2779,29L2779,30L2780,30L2780,26L2781,26L2781,27L2782,27L2782,29L2785,29L2785,31L2787,31L2787,32L2790,32L2790,31L2791,31L2791,31L2793,31L2793,29L2794,29L2794,30L2795,30L2795,31L2797,31L2797,30L2798,30L2798,31L2799,31L2799,30L2804,30L2804,31L2806,31L2806,32L2820,32L2820,32L2820,32" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L1794,0L1794,1L1800,1L1800,0L2007,0L2007,1L2009,1L2009,2L2178,2L2178,1L2184,1L2184,0L2820,0" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L1993,0L1993,1L2084,1L2084,0L2820,0" tabindex="0">
						<title>8g0ppzrx</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L2308,0L2308,1L2309,1L2309,0L2820,0" tabindex="0">
						<title>j465mqd8</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L2309,0L2309,0L2820,0" tabindex="0">
						<title>j5959zwx</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L2309,0L2309,1L2310,1L2310,0L2820,0" tabindex="0">
						<title>jmz5yyex</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L2310,0L2310,1L2353,1L2353,0L2820,0" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L2353,0L2353,1L2354,1L2354,1L2376,1L2376,0L2820,0" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L2412,0L2412,1L2413,1L2413,1L2414,1L2414,1L2417,1L2417,0L2520,0L2520,1L2541,1L2541,0L2552,0L2552,1L2555,1L2555,0L2820,0" tabindex="0">
						<title>86rpw3p8</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L2431,0L2431,1L2432,1L2432,0L2434,0L2434,1L2435,1L2435,1L2459,1L2459,0L2460,0L2460,1L2463,1L2463,0L2820,0" tabindex="0">
						<title>jonm5ol8</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L2452,0L2452,1L2496,1L2496,1L2707,1L2707,0L2820,0" tabindex="0">
						<title>jm62e748</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L2614,0L2614,2L2615,2L2615,1L2616,1L2616,2L2617,2L2617,2L2627,2L2627,3L2630,3L2630,3L2633,3L2633,4L2634,4L2634,4L2635,4L2635,3L2636,3L2636,3L2638,3L2638,3L2642,3L2642,4L2643,4L2643,4L2644,4L2644,5L2646,5L2646,3L2661,3L2661,4L2662,4L2662,3L2680,3L2680,2L2705,2L2705,3L2706,3L2706,2L2707,2L2707,2L2730,2L2730,3L2731,3L2731,3L2732,3L2732,3L2733,3L2733,5L2734,5L2734,6L2736,6L2736,5L2737,5L2737,4L2744,4L2744,3L2747,3L2747,2L2749,2L2749,0L2820,0" tabindex="0">
						<title>jo19m63x</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L2639,0L2639,1L2643,1L2643,1L2687,1L2687,1L2692,1L2692,2L2705,2L2705,1L2712,1L2712,2L2718,2L2718,1L2724,1L2724,2L2729,2L2729,2L2730,2L2730,2L2734,2L2734,2L2735,2L2735,2L2736,2L2736,3L2738,3L2738,4L2739,4L2739,4L2740,4L2740,5L2742,5L2742,4L2743,4L2743,4L2744,4L2744,3L2749,3L2749,2L2751,2L2751,3L2752,3L2752,3L2753,3L2753,2L2756,2L2756,0L2820,0" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L2679,0L2679,1L2700,1L2700,1L2701,1L2701,0L2820,0" tabindex="0">
						<title>x361ozex</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L2732,0L2732,1L2733,1L2733,0L2739,0L2739,1L2760,1L2760,1L2763,1L2763,2L2764,2L2764,2L2768,2L2768,2L2774,2L2774,1L2782,1L2782,0L2820,0" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L2735,0L2735,0L2736,0L2736,0L2737,0L2737,1L2739,1L2739,0L2741,0L2741,1L2742,1L2742,2L2744,2L2744,4L2750,4L2750,6L2751,6L2751,6L2752,6L2752,6L2754,6L2754,6L2756,6L2756,5L2757,5L2757,4L2760,4L2760,5L2761,5L2761,4L2762,4L2762,3L2764,3L2764,4L2765,4L2765,4L2766,4L2766,3L2773,3L2773,2L2774,2L2774,1L2775,1L2775,2L2776,2L2776,2L2778,2L2778,3L2779,3L2779,2L2780,2L2780,6L2781,6L2781,5L2782,5L2782,4L2785,4L2785,2L2787,2L2787,1L2790,1L2790,2L2791,2L2791,2L2793,2L2793,4L2794,4L2794,3L2795,3L2795,2L2797,2L2797,3L2798,3L2798,2L2806,2L2806,1L2820,1" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L2757,0L2757,1L2764,1L2764,1L2765,1L2765,0L2774,0L2774,1L2775,1L2775,0L2791,0L2791,0L2820,0" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L2761,0L2761,1L2762,1L2762,1L2763,1L2763,2L2764,2L2764,1L2778,1L2778,0L2799,0L2799,1L2804,1L2804,0L2820,0" tabindex="0">
						<title>86pek6wj</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
