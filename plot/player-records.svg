<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Record count by player</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2017-12-25</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-07-31</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">51</text>
		</svg>
		<svg viewBox="0 0 2775 51" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 51) scale(1 -1)" style="--count: 74;">
				<g>
					<rect x="0" y="0" width="2775" height="51"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,1L4,1L4,2L6,2L6,1L9,1L9,0L10,0L10,1L12,1L12,0L21,0L21,1L22,1L22,1L30,1L30,1L32,1L32,2L41,2L41,1L71,1L71,0L80,0L80,1L105,1L105,2L107,2L107,2L108,2L108,0L109,0L109,1L195,1L195,0L249,0L249,0L252,0L252,1L262,1L262,0L2775,0" tabindex="0">
						<title>48grel1x</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L6,0L6,0L7,0L7,1L9,1L9,4L10,4L10,3L11,3L11,3L12,3L12,3L13,3L13,3L14,3L14,3L15,3L15,6L19,6L19,3L21,3L21,5L23,5L23,10L24,10L24,7L25,7L25,8L28,8L28,7L30,7L30,8L31,8L31,8L32,8L32,8L33,8L33,8L37,8L37,8L38,8L38,7L39,7L39,7L40,7L40,6L42,6L42,5L44,5L44,7L45,7L45,9L46,9L46,10L71,10L71,12L73,12L73,13L74,13L74,15L80,15L80,14L83,14L83,13L84,13L84,12L85,12L85,11L107,11L107,12L108,12L108,11L109,11L109,10L113,10L113,9L115,9L115,8L117,8L117,7L118,7L118,6L192,6L192,7L195,7L195,9L196,9L196,7L197,7L197,6L200,6L200,4L201,4L201,3L202,3L202,2L430,2L430,3L431,3L431,3L432,3L432,6L478,6L478,7L570,7L570,6L773,6L773,5L856,5L856,4L1009,4L1009,3L1068,3L1068,2L2629,2L2629,1L2635,1L2635,0L2775,0" tabindex="0">
						<title>qj2pq1p8</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L6,0L6,2L7,2L7,1L9,1L9,0L15,0L15,1L19,1L19,0L97,0L97,1L108,1L108,1L109,1L109,3L111,3L111,2L115,2L115,0L189,0L189,1L194,1L194,0L2775,0" tabindex="0">
						<title>e8e935oj</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L12,0L12,1L13,1L13,1L14,1L14,2L15,2L15,3L120,3L120,2L2629,2L2629,1L2635,1L2635,0L2775,0" tabindex="0">
						<title>7j47r25j</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L19,0L19,5L20,5L20,5L21,5L21,5L23,5L23,4L25,4L25,3L28,3L28,4L30,4L30,3L45,3L45,2L118,2L118,1L120,1L120,0L2775,0" tabindex="0">
						<title>5j5gggn8</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L24,0L24,3L25,3L25,3L32,3L32,2L39,2L39,1L73,1L73,0L2775,0" tabindex="0">
						<title>0jm3onz8</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L38,0L38,1L39,1L39,2L40,2L40,3L41,3L41,4L42,4L42,6L44,6L44,4L45,4L45,3L74,3L74,2L113,2L113,0L2775,0" tabindex="0">
						<title>kj9kz6r8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L83,0L83,1L84,1L84,2L85,2L85,3L97,3L97,2L105,2L105,4L106,4L106,5L107,5L107,6L108,6L108,11L109,11L109,9L111,9L111,10L113,10L113,9L114,9L114,7L115,7L115,6L117,6L117,5L120,5L120,4L192,4L192,3L197,3L197,0L249,0L249,1L252,1L252,0L279,0L279,1L280,1L280,1L388,1L388,0L2775,0" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L113,0L113,4L114,4L114,6L115,6L115,10L117,10L117,12L118,12L118,14L119,14L119,14L120,14L120,17L121,17L121,17L189,17L189,16L194,16L194,17L195,17L195,16L196,16L196,18L197,18L197,22L200,22L200,25L201,25L201,26L202,26L202,27L262,27L262,28L264,28L264,28L265,28L265,28L266,28L266,28L267,28L267,28L269,28L269,28L274,28L274,28L277,28L277,28L388,28L388,29L403,29L403,29L430,29L430,28L432,28L432,26L448,26L448,25L478,25L478,24L588,24L588,27L592,27L592,28L657,28L657,27L854,27L854,26L858,26L858,26L860,26L860,27L867,27L867,25L868,25L868,24L871,24L871,23L876,23L876,22L877,22L877,21L883,21L883,20L884,20L884,19L885,19L885,17L889,17L889,14L902,14L902,13L937,13L937,12L971,12L971,13L973,13L973,15L975,15L975,16L977,16L977,19L978,19L978,18L979,18L979,19L980,19L980,20L981,20L981,22L982,22L982,21L984,21L984,22L1010,22L1010,21L1011,21L1011,20L1019,20L1019,19L1027,19L1027,18L1033,18L1033,17L1037,17L1037,16L1041,16L1041,15L1044,15L1044,14L1061,14L1061,11L1062,11L1062,10L1068,10L1068,8L1069,8L1069,8L1070,8L1070,7L1073,7L1073,7L1092,7L1092,6L1108,6L1108,5L1118,5L1118,3L1125,3L1125,2L1157,2L1157,3L1160,3L1160,4L1165,4L1165,3L1196,3L1196,2L1266,2L1266,1L1387,1L1387,0L2390,0L2390,4L2610,4L2610,3L2775,3" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L430,0L430,1L868,1L868,0L2775,0" tabindex="0">
						<title>1xye35n8</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L448,0L448,1L449,1L449,1L538,1L538,0L2775,0" tabindex="0">
						<title>dx3k6eej</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L538,0L538,1L570,1L570,2L572,2L572,2L756,2L756,3L853,3L853,3L886,3L886,2L891,2L891,2L902,2L902,2L904,2L904,1L1011,1L1011,2L1038,2L1038,2L1055,2L1055,3L1066,3L1066,2L1067,2L1067,4L1068,4L1068,7L1069,7L1069,8L1070,8L1070,9L1087,9L1087,10L1088,10L1088,10L1092,10L1092,10L1099,10L1099,9L1108,9L1108,8L1109,8L1109,7L1117,7L1117,7L1120,7L1120,6L1126,6L1126,5L1155,5L1155,4L1156,4L1156,5L1157,5L1157,4L1159,4L1159,3L1168,3L1168,2L1190,2L1190,3L1191,3L1191,4L1192,4L1192,3L1194,3L1194,2L1290,2L1290,3L1330,3L1330,2L1448,2L1448,1L1785,1L1785,2L1918,2L1918,1L1936,1L1936,0L1964,0L1964,1L1967,1L1967,1L1970,1L1970,2L2003,2L2003,1L2099,1L2099,2L2113,2L2113,1L2181,1L2181,2L2446,2L2446,3L2449,3L2449,2L2451,2L2451,3L2624,3L2624,4L2654,4L2654,3L2671,3L2671,2L2720,2L2720,1L2729,1L2729,0L2775,0" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L657,0L657,1L728,1L728,1L871,1L871,0L2775,0" tabindex="0">
						<title>7j4y0zmj</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L772,0L772,1L773,1L773,2L780,2L780,2L783,2L783,2L791,2L791,2L837,2L837,2L856,2L856,3L869,3L869,2L876,2L876,3L878,3L878,2L882,2L882,1L884,1L884,2L887,2L887,1L906,1L906,2L908,2L908,3L909,3L909,4L910,4L910,5L911,5L911,5L920,5L920,5L975,5L975,4L977,4L977,3L982,3L982,4L984,4L984,3L1050,3L1050,2L1064,2L1064,1L1105,1L1105,0L2775,0" tabindex="0">
						<title>8146r4r8</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path dtabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L879,0L879,1L977,1L977,0L2775,0" tabindex="0">
						<title>8rp1o2qj</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L886,0L886,2L971,2L971,1L981,1L981,0L2775,0" tabindex="0">
						<title>xz9mo9n8</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L936,0L936,2L939,2L939,3L977,3L977,2L980,2L980,2L1046,2L1046,1L1062,1L1062,0L2775,0" tabindex="0">
						<title>18vm2258</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L945,0L945,1L985,1L985,1L1001,1L1001,1L1023,1L1023,2L1024,2L1024,3L1037,3L1037,5L1041,5L1041,6L1042,6L1042,9L1044,9L1044,11L1045,11L1045,12L1050,12L1050,11L1051,11L1051,12L1055,12L1055,13L1056,13L1056,14L1059,14L1059,13L1060,13L1060,14L1061,14L1061,11L1062,11L1062,13L1063,13L1063,15L1066,15L1066,16L1067,16L1067,15L1068,15L1068,18L1069,18L1069,19L1070,19L1070,20L1073,20L1073,21L1074,21L1074,21L1075,21L1075,22L1077,22L1077,22L1080,22L1080,21L1084,21L1084,20L1085,20L1085,23L1088,23L1088,23L1090,23L1090,25L1091,25L1091,25L1092,25L1092,26L1093,26L1093,27L1094,27L1094,29L1096,29L1096,30L1097,30L1097,30L1099,30L1099,30L1100,30L1100,32L1101,32L1101,33L1102,33L1102,35L1103,35L1103,35L1104,35L1104,34L1105,34L1105,34L1106,34L1106,35L1108,35L1108,36L1109,36L1109,34L1110,34L1110,33L1111,33L1111,32L1112,32L1112,35L1117,35L1117,34L1118,34L1118,34L1119,34L1119,33L1125,33L1125,37L1126,37L1126,41L1128,41L1128,40L1129,40L1129,42L1130,42L1130,47L1131,47L1131,48L1132,48L1132,48L1133,48L1133,49L1139,49L1139,46L1144,46L1144,47L1145,47L1145,51L1146,51L1146,49L1147,49L1147,50L1148,50L1148,51L1152,51L1152,50L1154,50L1154,48L1155,48L1155,49L1156,49L1156,48L1157,48L1157,47L1158,47L1158,46L1159,46L1159,43L1160,43L1160,42L1164,42L1164,41L1165,41L1165,40L1170,40L1170,39L1178,39L1178,38L1187,38L1187,37L1188,37L1188,38L1190,38L1190,37L1192,37L1192,37L1194,37L1194,38L1196,38L1196,37L1197,37L1197,35L1200,35L1200,33L1204,33L1204,32L1205,32L1205,31L1208,31L1208,29L1211,29L1211,28L1213,28L1213,26L1284,26L1284,25L1290,25L1290,24L1301,24L1301,27L1302,27L1302,28L1320,28L1320,27L1326,27L1326,26L1383,26L1383,25L1385,25L1385,24L1391,24L1391,23L1426,23L1426,22L1452,22L1452,21L1491,21L1491,20L1528,20L1528,19L1529,19L1529,17L1530,17L1530,16L1534,16L1534,15L1537,15L1537,14L1608,14L1608,13L1614,13L1614,12L1622,12L1622,10L1623,10L1623,11L1629,11L1629,9L1643,9L1643,8L1700,8L1700,7L1707,7L1707,6L1742,6L1742,5L1777,5L1777,4L1967,4L1967,4L1993,4L1993,6L1994,6L1994,10L1995,10L1995,9L2001,9L2001,9L2007,9L2007,8L2045,8L2045,10L2069,10L2069,11L2075,11L2075,10L2112,10L2112,9L2171,9L2171,8L2191,8L2191,9L2194,9L2194,8L2454,8L2454,9L2473,9L2473,8L2596,8L2596,9L2628,9L2628,8L2630,8L2630,6L2633,6L2633,5L2721,5L2721,4L2732,4L2732,3L2764,3L2764,2L2775,2" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L979,0L979,3L981,3L981,2L1010,2L1010,3L1037,3L1037,2L1061,2L1061,13L1062,13L1062,15L1063,15L1063,14L1066,14L1066,14L1067,14L1067,13L1068,13L1068,11L1069,11L1069,10L1075,10L1075,10L1085,10L1085,9L1087,9L1087,8L1090,8L1090,7L1092,7L1092,6L1096,6L1096,5L1102,5L1102,4L1104,4L1104,3L1106,3L1106,2L1154,2L1154,3L1155,3L1155,4L1157,4L1157,5L1158,5L1158,7L1159,7L1159,11L1160,11L1160,12L1161,12L1161,11L1165,11L1165,13L1168,13L1168,14L1170,14L1170,15L1172,15L1172,16L1178,16L1178,17L1180,17L1180,16L1182,16L1182,17L1187,17L1187,17L1188,17L1188,16L1192,16L1192,17L1196,17L1196,18L1200,18L1200,20L1213,20L1213,22L1225,22L1225,23L1227,23L1227,24L1237,24L1237,25L1247,25L1247,26L1252,26L1252,27L1300,27L1300,28L1302,28L1302,27L1319,27L1319,29L1326,29L1326,30L1361,30L1361,29L1383,29L1383,30L1398,30L1398,29L1452,29L1452,30L1490,30L1490,30L1491,30L1491,31L1528,31L1528,32L1529,32L1529,35L1530,35L1530,36L1605,36L1605,37L1608,37L1608,36L1613,36L1613,35L1614,35L1614,38L1615,38L1615,37L1616,37L1616,37L1622,37L1622,40L1623,40L1623,39L1625,39L1625,40L1633,40L1633,39L1634,39L1634,40L1636,40L1636,39L1637,39L1637,39L1642,39L1642,40L1643,40L1643,40L1645,40L1645,41L1646,41L1646,42L1648,42L1648,42L1650,42L1650,40L1651,40L1651,41L1654,41L1654,40L1655,40L1655,42L1661,42L1661,40L1705,40L1705,42L1717,42L1717,41L1719,41L1719,41L1769,41L1769,40L1770,40L1770,41L1771,41L1771,40L1778,40L1778,39L1780,39L1780,38L1789,38L1789,37L1801,37L1801,36L1805,36L1805,34L1821,34L1821,33L1831,33L1831,32L1842,32L1842,31L1907,31L1907,27L1908,27L1908,26L1913,26L1913,25L1922,25L1922,24L1925,24L1925,23L1927,23L1927,22L1928,22L1928,20L1937,20L1937,19L1938,19L1938,18L1939,18L1939,17L1944,17L1944,16L1954,16L1954,15L1962,15L1962,14L1973,14L1973,13L1977,13L1977,12L1978,12L1978,11L2001,11L2001,10L2068,10L2068,9L2132,9L2132,8L2163,8L2163,7L2178,7L2178,6L2190,6L2190,5L2221,5L2221,4L2664,4L2664,3L2775,3" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L1040,0L1040,1L1046,1L1046,3L1047,3L1047,4L1060,4L1060,3L1061,3L1061,2L1062,2L1062,3L1075,3L1075,3L1091,3L1091,3L1100,3L1100,3L1113,3L1113,1L1124,1L1124,2L1125,2L1125,1L1126,1L1126,2L1132,2L1132,1L1158,1L1158,0L2775,0" tabindex="0">
						<title>8e94kq6j</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L1054,0L1054,1L1064,1L1064,2L1065,2L1065,1L1084,1L1084,1L1085,1L1085,0L1099,0L1099,1L1100,1L1100,0L1110,0L1110,1L1111,1L1111,0L1139,0L1139,1L1145,1L1145,0L1200,0L1200,1L1300,1L1300,2L1301,2L1301,1L1605,1L1605,0L2775,0" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L1059,0L1059,1L1060,1L1060,1L1061,1L1061,3L1062,3L1062,2L1064,2L1064,3L1072,3L1072,4L1075,4L1075,4L1080,4L1080,5L1082,5L1082,6L1084,6L1084,7L1085,7L1085,6L1092,6L1092,6L1093,6L1093,5L1098,5L1098,6L1099,6L1099,7L1100,7L1100,7L1101,7L1101,6L1102,6L1102,5L1104,5L1104,6L1105,6L1105,6L1106,6L1106,6L1109,6L1109,7L1111,7L1111,6L1115,6L1115,7L1116,7L1116,6L1120,6L1120,7L1122,7L1122,6L1130,6L1130,5L1131,5L1131,4L1132,4L1132,5L1133,5L1133,5L1144,5L1144,4L1160,4L1160,3L1161,3L1161,4L1180,4L1180,5L1182,5L1182,4L1187,4L1187,5L1197,5L1197,6L1200,6L1200,5L1252,5L1252,4L1326,4L1326,4L1361,4L1361,5L1590,5L1590,4L1622,4L1622,3L1631,3L1631,2L1646,2L1646,1L1711,1L1711,2L1744,2L1744,1L2775,1" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L1069,0L1069,1L1070,1L1070,0L1426,0L1426,1L1526,1L1526,1L1529,1L1529,0L1608,0L1608,1L1613,1L1613,1L1614,1L1614,0L1616,0L1616,1L1642,1L1642,0L2775,0" tabindex="0">
						<title>8e9kl5dj</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L1092,0L1092,1L1093,1L1093,1L1104,1L1104,2L1105,2L1105,3L1108,3L1108,4L1109,4L1109,5L1112,5L1112,6L1113,6L1113,6L1115,6L1115,5L1116,5L1116,6L1117,6L1117,7L1118,7L1118,10L1119,10L1119,11L1120,11L1120,11L1122,11L1122,12L1125,12L1125,10L1126,10L1126,6L1129,6L1129,5L1130,5L1130,1L1132,1L1132,0L1152,0L1152,1L1154,1L1154,2L1164,2L1164,3L1172,3L1172,2L1196,2L1196,3L1197,3L1197,4L1267,4L1267,4L1301,4L1301,2L1320,2L1320,3L1385,3L1385,4L1387,4L1387,5L1391,5L1391,6L1398,6L1398,7L1607,7L1607,6L1656,6L1656,5L1970,5L1970,4L1993,4L1993,3L2105,3L2105,2L2189,2L2189,1L2775,1" tabindex="0">
						<title>814zn7l8</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L1128,0L1128,1L1132,1L1132,2L1133,2L1133,1L1139,1L1139,3L1145,3L1145,1L1146,1L1146,3L1147,3L1147,2L1148,2L1148,1L1155,1L1155,0L2775,0" tabindex="0">
						<title>jnzg27dj</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L1135,0L1135,3L1136,3L1136,4L1265,4L1265,2L1273,2L1273,1L1288,1L1288,0L2775,0" tabindex="0">
						<title>jnz1zy2j</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L1191,0L1191,0L2775,0" tabindex="0">
						<title>j42m66lx</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L1265,0L1265,0L1273,0L1273,1L1276,1L1276,2L1284,2L1284,3L1299,3L1299,4L1300,4L1300,3L1319,3L1319,1L1622,1L1622,1L1625,1L1625,0L1661,0L1661,2L1705,2L1705,0L1717,0L1717,1L1743,1L1743,2L1972,2L1972,1L1974,1L1974,2L1976,2L1976,1L2586,1L2586,0L2775,0" tabindex="0">
						<title>jnzen32j</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L1390,0L1390,1L1535,1L1535,0L2775,0" tabindex="0">
						<title>8w16l2zx</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L1535,0L1535,1L1651,1L1651,0L2775,0" tabindex="0">
						<title>866gn938</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L1590,0L1590,1L1601,1L1601,1L1602,1L1602,1L1733,1L1733,1L1843,1L1843,1L1845,1L1845,1L2775,1" tabindex="0">
						<title>x3m3kle8</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L1607,0L1607,1L1608,1L1608,2L1609,2L1609,3L1613,3L1613,4L1614,4L1614,3L1615,3L1615,4L1616,4L1616,3L1629,3L1629,5L1631,5L1631,6L1633,6L1633,7L1634,7L1634,6L1636,6L1636,7L1637,7L1637,7L1643,7L1643,8L1645,8L1645,7L1648,7L1648,7L1650,7L1650,9L1651,9L1651,8L1654,8L1654,9L1655,9L1655,7L1656,7L1656,8L1832,8L1832,7L2023,7L2023,6L2136,6L2136,5L2204,5L2204,4L2544,4L2544,3L2595,3L2595,2L2601,2L2601,1L2775,1" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L1651,0L1651,1L1875,1L1875,2L1891,2L1891,1L1905,1L1905,2L1921,2L1921,1L2437,1L2437,0L2775,0" tabindex="0">
						<title>joovynnj</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L1742,0L1742,1L1744,1L1744,2L1749,2L1749,2L1769,2L1769,3L1770,3L1770,2L1771,2L1771,3L1777,3L1777,4L1778,4L1778,5L1780,5L1780,6L1789,6L1789,7L1801,7L1801,8L1805,8L1805,10L1808,10L1808,9L1814,9L1814,10L1821,10L1821,11L1831,11L1831,12L1832,12L1832,13L1840,13L1840,13L1842,13L1842,14L1868,14L1868,14L1892,14L1892,14L1907,14L1907,18L1908,18L1908,19L1913,19L1913,20L1914,20L1914,20L1916,20L1916,20L1918,20L1918,21L1921,21L1921,21L1922,21L1922,22L1923,22L1923,22L1925,22L1925,23L1927,23L1927,24L1928,24L1928,26L1932,26L1932,26L1936,26L1936,27L1937,27L1937,28L1938,28L1938,29L1939,29L1939,30L1944,30L1944,31L1945,31L1945,31L1947,31L1947,30L1948,30L1948,31L1954,31L1954,32L1962,32L1962,33L1963,33L1963,33L1964,33L1964,32L1965,32L1965,32L1967,32L1967,32L1977,32L1977,33L1994,33L1994,32L1995,32L1995,33L1996,33L1996,33L1998,33L1998,33L2001,33L2001,34L2003,34L2003,35L2021,35L2021,34L2027,34L2027,34L2068,34L2068,35L2075,35L2075,36L2076,36L2076,36L2091,36L2091,36L2094,36L2094,36L2098,36L2098,37L2099,37L2099,36L2112,36L2112,37L2113,37L2113,38L2132,38L2132,39L2171,39L2171,40L2189,40L2189,41L2190,41L2190,42L2191,42L2191,41L2192,41L2192,42L2194,42L2194,43L2198,43L2198,44L2204,44L2204,45L2221,45L2221,46L2243,46L2243,46L2244,46L2244,46L2321,46L2321,47L2325,47L2325,46L2327,46L2327,46L2390,46L2390,47L2394,47L2394,47L2425,47L2425,47L2426,47L2426,46L2427,46L2427,46L2431,46L2431,47L2437,47L2437,48L2445,48L2445,47L2446,47L2446,47L2448,47L2448,46L2449,46L2449,47L2454,47L2454,46L2462,46L2462,45L2466,45L2466,44L2473,44L2473,46L2474,46L2474,45L2475,45L2475,44L2477,44L2477,45L2481,45L2481,46L2534,46L2534,45L2552,45L2552,45L2555,45L2555,46L2562,46L2562,46L2563,46L2563,46L2566,46L2566,45L2569,45L2569,46L2599,46L2599,45L2608,45L2608,46L2620,46L2620,45L2628,45L2628,43L2629,43L2629,44L2630,44L2630,42L2641,42L2641,41L2647,41L2647,40L2649,40L2649,41L2653,41L2653,40L2656,40L2656,39L2658,39L2658,38L2660,38L2660,40L2665,40L2665,40L2675,40L2675,39L2676,39L2676,40L2693,40L2693,39L2694,39L2694,40L2706,40L2706,39L2715,39L2715,40L2720,40L2720,41L2721,41L2721,42L2726,42L2726,41L2732,41L2732,42L2738,42L2738,41L2741,41L2741,40L2744,40L2744,39L2746,39L2746,38L2748,38L2748,37L2752,37L2752,36L2754,36L2754,34L2755,34L2755,33L2764,33L2764,31L2765,31L2765,30L2771,30L2771,29L2774,29L2774,28L2775,28L2775,27L2775,27" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L1808,0L1808,1L1814,1L1814,0L2021,0L2021,1L2023,1L2023,2L2031,2L2031,3L2060,3L2060,2L2192,2L2192,1L2198,1L2198,0L2461,0L2461,1L2462,1L2462,2L2475,2L2475,3L2481,3L2481,2L2635,2L2635,1L2721,1L2721,0L2775,0" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L1827,0L1827,1L1875,1L1875,0L2775,0" tabindex="0">
						<title>jm3y0go8</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L1846,0L1846,1L1852,1L1852,1L1902,1L1902,2L1943,2L1943,2L1946,2L1946,2L2067,2L2067,1L2181,1L2181,0L2775,0" tabindex="0">
						<title>810y31qx</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L1891,0L1891,1L1905,1L1905,0L2775,0" tabindex="0">
						<title>8q6k30oj</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L1921,0L1921,1L1922,1L1922,1L1994,1L1994,0L2775,0" tabindex="0">
						<title>8wlq9g3j</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L1935,0L1935,1L2028,1L2028,0L2775,0" tabindex="0">
						<title>8g0d51rx</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L1947,0L1947,1L1948,1L1948,0L2610,0L2610,1L2620,1L2620,2L2666,2L2666,2L2716,2L2716,2L2775,2L2775,3L2775,3" tabindex="0">
						<title>8ek6z678</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L1972,0L1972,1L1973,1L1973,2L1974,2L1974,1L1976,1L1976,2L1977,2L1977,2L1978,2L1978,3L2199,3L2199,2L2321,2L2321,1L2326,1L2326,0L2775,0" tabindex="0">
						<title>jmz3rlox</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L2007,0L2007,1L2098,1L2098,0L2775,0" tabindex="0">
						<title>8g0ppzrx</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,0L2018,0L2018,1L2029,1L2029,0L2032,0L2032,1L2035,1L2035,0L2775,0" tabindex="0">
						<title>xz1nv0ej</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,0L2028,0L2028,1L2029,1L2029,2L2030,2L2030,1L2031,1L2031,0L2035,0L2035,1L2039,1L2039,0L2044,0L2044,2L2045,2L2045,0L2060,0L2060,1L2091,1L2091,2L2178,2L2178,3L2199,3L2199,4L2203,4L2203,3L2205,3L2205,4L2230,4L2230,3L2274,3L2274,2L2324,2L2324,3L2367,3L2367,2L2385,2L2385,1L2596,1L2596,0L2747,0L2747,1L2748,1L2748,0L2775,0" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,0L2030,0L2030,1L2031,1L2031,0L2775,0" tabindex="0">
						<title>j9k252w8</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,0L2031,0L2031,1L2039,1L2039,2L2044,2L2044,0L2775,0" tabindex="0">
						<title>8v23g7yj</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,0L2115,0L2115,2L2178,2L2178,2L2179,2L2179,2L2182,2L2182,2L2203,2L2203,3L2205,3L2205,2L2358,2L2358,2L2618,2L2618,3L2621,3L2621,3L2622,3L2622,3L2623,3L2623,3L2627,3L2627,2L2628,2L2628,1L2634,1L2634,0L2749,0L2749,1L2757,1L2757,2L2767,2L2767,3L2768,3L2768,2L2769,2L2769,2L2770,2L2770,1L2771,1L2771,2L2772,2L2772,1L2775,1" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,0L2230,0L2230,1L2299,1L2299,0L2775,0" tabindex="0">
						<title>8lpv0drj</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,0L2274,0L2274,1L2299,1L2299,2L2300,2L2300,2L2323,2L2323,1L2325,1L2325,0L2775,0" tabindex="0">
						<title>8rme6wwj</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,0L2321,0L2321,0L2323,0L2323,1L2325,1L2325,3L2326,3L2326,4L2342,4L2342,4L2349,4L2349,3L2390,3L2390,0L2775,0" tabindex="0">
						<title>jokwe3l8</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path d="M0,0L2321,0L2321,1L2323,1L2323,1L2462,1L2462,1L2493,1L2493,0L2775,0" tabindex="0">
						<title>xkpw7g6j</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,0L2322,0L2322,1L2323,1L2323,0L2775,0" tabindex="0">
						<title>j465mqd8</title>
					</path>
				</g>
				<g style="--index: 54;">
					<path d="M0,0L2323,0L2323,0L2775,0" tabindex="0">
						<title>j5959zwx</title>
					</path>
				</g>
				<g style="--index: 55;">
					<path d="M0,0L2323,0L2323,1L2324,1L2324,0L2775,0" tabindex="0">
						<title>jmz5yyex</title>
					</path>
				</g>
				<g style="--index: 56;">
					<path d="M0,0L2349,0L2349,1L2390,1L2390,0L2775,0" tabindex="0">
						<title>8l0n2l78</title>
					</path>
				</g>
				<g style="--index: 57;">
					<path d="M0,0L2367,0L2367,1L2368,1L2368,1L2385,1L2385,2L2390,2L2390,1L2444,1L2444,2L2453,2L2453,1L2454,1L2454,2L2458,2L2458,1L2459,1L2459,2L2460,2L2460,1L2544,1L2544,0L2570,0L2570,1L2614,1L2614,0L2775,0" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 58;">
					<path d="M0,0L2426,0L2426,1L2427,1L2427,1L2428,1L2428,1L2431,1L2431,0L2453,0L2453,1L2454,1L2454,0L2458,0L2458,1L2459,1L2459,0L2460,0L2460,1L2461,1L2461,0L2534,0L2534,1L2544,1L2544,2L2555,2L2555,1L2566,1L2566,2L2569,2L2569,1L2599,1L2599,2L2608,2L2608,1L2630,1L2630,2L2631,2L2631,1L2637,1L2637,0L2775,0" tabindex="0">
						<title>86rpw3p8</title>
					</path>
				</g>
				<g style="--index: 59;">
					<path d="M0,0L2445,0L2445,1L2446,1L2446,0L2448,0L2448,1L2449,1L2449,2L2473,2L2473,1L2474,1L2474,2L2477,2L2477,1L2775,1" tabindex="0">
						<title>jonm5ol8</title>
					</path>
				</g>
				<g style="--index: 60;">
					<path d="M0,0L2466,0L2466,1L2510,1L2510,1L2721,1L2721,0L2775,0" tabindex="0">
						<title>jm62e748</title>
					</path>
				</g>
				<g style="--index: 61;">
					<path d="M0,0L2493,0L2493,1L2507,1L2507,0L2775,0" tabindex="0">
						<title>8qpp42qx</title>
					</path>
				</g>
				<g style="--index: 62;">
					<path d="M0,0L2507,0L2507,1L2775,1" tabindex="0">
						<title>8l6zoll8</title>
					</path>
				</g>
				<g style="--index: 63;">
					<path d="M0,0L2544,0L2544,1L2570,1L2570,0L2584,0L2584,2L2586,2L2586,3L2589,3L2589,4L2593,4L2593,3L2594,3L2594,4L2595,4L2595,5L2614,5L2614,6L2615,6L2615,6L2621,6L2621,6L2622,6L2622,6L2628,6L2628,6L2629,6L2629,8L2630,8L2630,7L2631,7L2631,6L2632,6L2632,4L2635,4L2635,6L2636,6L2636,7L2639,7L2639,7L2642,7L2642,7L2650,7L2650,7L2657,7L2657,7L2663,7L2663,7L2664,7L2664,8L2666,8L2666,7L2671,7L2671,8L2685,8L2685,9L2691,9L2691,10L2692,10L2692,10L2698,10L2698,10L2699,10L2699,10L2705,10L2705,10L2775,10" tabindex="0">
						<title>8eeod1p8</title>
					</path>
				</g>
				<g style="--index: 64;">
					<path d="M0,0L2593,0L2593,1L2595,1L2595,1L2775,1" tabindex="0">
						<title>8g2pg71j</title>
					</path>
				</g>
				<g style="--index: 65;">
					<path d="M0,0L2601,0L2601,1L2606,1L2606,1L2608,1L2608,1L2627,1L2627,2L2628,2L2628,6L2629,6L2629,5L2630,5L2630,11L2631,11L2631,15L2632,15L2632,17L2633,17L2633,20L2634,20L2634,21L2635,21L2635,22L2637,22L2637,23L2641,23L2641,24L2644,24L2644,24L2645,24L2645,24L2647,24L2647,25L2648,25L2648,25L2649,25L2649,24L2650,24L2650,24L2652,24L2652,24L2654,24L2654,25L2656,25L2656,26L2657,26L2657,26L2658,26L2658,27L2660,27L2660,25L2671,25L2671,24L2672,24L2672,25L2675,25L2675,26L2676,26L2676,25L2694,25L2694,24L2714,24L2714,23L2719,23L2719,25L2720,25L2720,25L2721,25L2721,25L2730,25L2730,26L2733,26L2733,27L2734,27L2734,27L2735,27L2735,27L2736,27L2736,28L2741,28L2741,29L2744,29L2744,30L2745,30L2745,30L2746,30L2746,29L2747,29L2747,31L2748,31L2748,33L2750,33L2750,31L2751,31L2751,30L2752,30L2752,30L2757,30L2757,29L2758,29L2758,28L2766,28L2766,27L2767,27L2767,26L2772,26L2772,25L2773,25L2773,23L2775,23" tabindex="0">
						<title>jo19m63x</title>
					</path>
				</g>
				<g style="--index: 66;">
					<path d="M0,0L2619,0L2619,1L2630,1L2630,0L2775,0" tabindex="0">
						<title>x3q6432j</title>
					</path>
				</g>
				<g style="--index: 67;">
					<path d="M0,0L2653,0L2653,1L2657,1L2657,1L2701,1L2701,1L2706,1L2706,2L2719,2L2719,1L2726,1L2726,2L2732,2L2732,1L2738,1L2738,2L2743,2L2743,2L2744,2L2744,2L2748,2L2748,2L2749,2L2749,2L2750,2L2750,3L2751,3L2751,4L2752,4L2752,5L2753,5L2753,5L2754,5L2754,6L2756,6L2756,5L2757,5L2757,5L2758,5L2758,4L2762,4L2762,4L2765,4L2765,5L2766,5L2766,5L2767,5L2767,4L2770,4L2770,3L2775,3L2775,2L2775,2" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 68;">
					<path d="M0,0L2666,0L2666,1L2691,1L2691,0L2746,0L2746,1L2747,1L2747,0L2753,0L2753,1L2774,1L2774,1L2775,1" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 69;">
					<path d="M0,0L2693,0L2693,1L2714,1L2714,1L2715,1L2715,0L2775,0" tabindex="0">
						<title>x361ozex</title>
					</path>
				</g>
				<g style="--index: 70;">
					<path d="M0,0L2707,0L2707,1L2757,1L2757,2L2771,2L2771,4L2772,4L2772,3L2773,3L2773,4L2775,4" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 71;">
					<path d="M0,0L2732,0L2732,1L2733,1L2733,1L2736,1L2736,0L2746,0L2746,1L2749,1L2749,1L2750,1L2750,2L2751,2L2751,3L2753,3L2753,2L2754,2L2754,3L2755,3L2755,4L2756,4L2756,5L2758,5L2758,7L2764,7L2764,9L2765,9L2765,9L2766,9L2766,10L2767,10L2767,11L2768,11L2768,12L2770,12L2770,13L2772,13L2772,14L2773,14L2773,15L2774,15L2774,17L2775,17L2775,17L2775,17" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 72;">
					<path d="M0,0L2764,0L2764,1L2774,1L2774,0L2775,0" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 73;">
					<path d="M0,0L2772,0L2772,0L2775,0L2775,1L2775,1" tabindex="0">
						<title>86pek6wj</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
