<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Total score by player (missions)</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2020-10-27</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-30</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">111</text>
		</svg>
		<svg viewBox="0 0 1799 111" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 111) scale(1 -1)" style="--count: 41;">
				<g>
					<rect x="0" y="0" width="1799" height="111"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,1L1,1L1,2L2,2L2,3L3,3L3,4L4,4L4,5L5,5L5,6L6,6L6,7L7,7L7,8L9,8L9,9L11,9L11,12L12,12L12,13L17,13L17,12L23,12L23,12L24,12L24,12L32,12L32,12L35,12L35,12L37,12L37,12L43,12L43,12L44,12L44,13L45,13L45,13L47,13L47,13L51,13L51,14L61,14L61,14L67,14L67,16L85,16L85,18L87,18L87,19L95,19L95,23L96,23L96,22L99,22L99,22L121,22L121,22L123,22L123,21L125,21L125,21L126,21L126,22L236,22L236,22L284,22L284,22L317,22L317,23L342,23L342,24L553,24L553,24L558,24L558,24L568,24L568,24L588,24L588,24L686,24L686,24L705,24L705,24L707,24L707,24L732,24L732,24L741,24L741,24L774,24L774,25L782,25L782,26L791,26L791,25L873,25L873,26L900,26L900,26L901,26L901,26L940,26L940,26L1087,26L1087,27L1122,27L1122,27L1138,27L1138,29L1140,29L1140,30L1287,30L1287,30L1291,30L1291,30L1376,30L1376,31L1472,31L1472,31L1562,31L1562,31L1582,31L1582,31L1588,31L1588,31L1610,31L1610,31L1637,31L1637,31L1703,31L1703,31L1704,31L1704,31L1706,31L1706,32L1707,32L1707,32L1708,32L1708,32L1709,32L1709,33L1710,33L1710,33L1717,33L1717,33L1723,33L1723,33L1726,33L1726,33L1731,33L1731,32L1736,32L1736,32L1737,32L1737,32L1738,32L1738,33L1741,33L1741,33L1742,33L1742,34L1743,34L1743,34L1747,34L1747,54L1748,54L1748,78L1749,78L1749,82L1750,82L1750,82L1753,82L1753,81L1754,81L1754,82L1755,82L1755,83L1756,83L1756,83L1760,83L1760,83L1762,83L1762,84L1766,84L1766,85L1768,85L1768,86L1780,86L1780,87L1781,87L1781,87L1799,87L1799,89L1799,89" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L3,0L3,2L11,2L11,3L23,3L23,3L25,3L25,4L38,4L38,4L44,4L44,5L54,5L54,5L63,5L63,5L87,5L87,6L88,6L88,5L89,5L89,6L92,6L92,7L95,7L95,6L121,6L121,6L568,6L568,6L782,6L782,7L940,7L940,7L1087,7L1087,8L1122,8L1122,9L1287,9L1287,10L1562,10L1562,10L1708,10L1708,10L1723,10L1723,10L1738,10L1738,12L1747,12L1747,12L1750,12L1750,12L1756,12L1756,12L1760,12L1760,12L1799,12" tabindex="0">
						<title>8e94kq6j</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L11,0L11,3L12,3L12,4L17,4L17,5L23,5L23,5L35,5L35,5L44,5L44,5L47,5L47,5L67,5L67,7L81,7L81,7L85,7L85,10L87,10L87,11L92,11L92,12L95,12L95,13L96,13L96,15L99,15L99,15L110,15L110,15L121,15L121,15L123,15L123,16L125,16L125,18L126,18L126,18L163,18L163,19L236,19L236,19L284,19L284,19L289,19L289,19L317,19L317,19L342,19L342,19L553,19L553,19L558,19L558,19L568,19L568,19L588,19L588,19L686,19L686,19L705,19L705,19L707,19L707,19L732,19L732,19L741,19L741,19L774,19L774,20L782,20L782,21L791,21L791,22L873,22L873,23L900,23L900,23L901,23L901,23L940,23L940,23L1087,23L1087,24L1122,24L1122,24L1138,24L1138,25L1140,25L1140,26L1287,26L1287,26L1291,26L1291,26L1376,26L1376,27L1472,27L1472,27L1562,27L1562,27L1582,27L1582,27L1588,27L1588,27L1610,27L1610,27L1637,27L1637,27L1703,27L1703,27L1704,27L1704,27L1706,27L1706,27L1707,27L1707,27L1708,27L1708,27L1709,27L1709,28L1710,28L1710,28L1717,28L1717,28L1723,28L1723,28L1726,28L1726,28L1731,28L1731,27L1736,27L1736,27L1737,27L1737,27L1738,27L1738,28L1741,28L1741,29L1742,29L1742,30L1743,30L1743,30L1747,30L1747,29L1748,29L1748,26L1750,26L1750,26L1753,26L1753,26L1754,26L1754,26L1755,26L1755,26L1756,26L1756,27L1760,27L1760,27L1762,27L1762,28L1763,28L1763,27L1768,27L1768,28L1780,28L1780,28L1781,28L1781,28L1799,28" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L23,0L23,4L25,4L25,3L32,3L32,6L33,6L33,6L43,6L43,7L44,7L44,8L54,8L54,8L63,8L63,8L67,8L67,9L88,9L88,10L89,10L89,9L95,9L95,12L96,12L96,15L107,15L107,16L120,16L120,15L121,15L121,15L318,15L318,14L558,14L558,15L568,15L568,15L705,15L705,15L712,15L712,14L741,14L741,14L782,14L782,15L940,15L940,15L1087,15L1087,16L1122,16L1122,17L1138,17L1138,18L1287,18L1287,19L1562,19L1562,19L1637,19L1637,20L1704,20L1704,21L1708,21L1708,21L1723,21L1723,21L1726,21L1726,21L1737,21L1737,22L1738,22L1738,22L1747,22L1747,21L1750,21L1750,21L1756,21L1756,21L1760,21L1760,21L1768,21L1768,22L1780,22L1780,22L1799,22" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L24,0L24,6L32,6L32,6L37,6L37,7L43,7L43,8L67,8L67,10L87,10L87,11L120,11L120,12L121,12L121,18L122,18L122,18L123,18L123,22L124,22L124,21L125,21L125,22L145,22L145,23L284,23L284,24L317,24L317,25L324,25L324,24L568,24L568,30L588,30L588,36L609,36L609,37L686,37L686,38L732,38L732,38L733,38L733,39L734,39L734,38L741,38L741,38L774,38L774,39L782,39L782,40L873,40L873,41L900,41L900,41L901,41L901,41L940,41L940,41L1087,41L1087,42L1122,42L1122,43L1138,43L1138,45L1140,45L1140,46L1287,46L1287,47L1291,47L1291,48L1472,48L1472,49L1562,49L1562,49L1582,49L1582,50L1588,50L1588,50L1610,50L1610,51L1703,51L1703,52L1704,52L1704,53L1707,53L1707,54L1708,54L1708,55L1709,55L1709,56L1710,56L1710,57L1723,57L1723,58L1726,58L1726,58L1731,58L1731,58L1736,58L1736,59L1737,59L1737,60L1738,60L1738,61L1741,61L1741,62L1742,62L1742,64L1743,64L1743,64L1747,64L1747,64L1748,64L1748,62L1749,62L1749,61L1750,61L1750,61L1753,61L1753,62L1754,62L1754,62L1755,62L1755,63L1756,63L1756,63L1760,63L1760,63L1762,63L1762,64L1769,64L1769,63L1780,63L1780,63L1781,63L1781,64L1799,64" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L35,0L35,3L37,3L37,5L43,5L43,7L44,7L44,9L45,9L45,11L47,11L47,14L61,14L61,17L67,17L67,19L85,19L85,21L95,21L95,26L96,26L96,27L107,27L107,26L121,26L121,26L123,26L123,26L124,26L124,27L125,27L125,28L145,28L145,27L150,27L150,27L163,27L163,26L284,26L284,29L289,29L289,29L317,29L317,30L318,30L318,31L324,31L324,32L342,32L342,33L553,33L553,33L558,33L558,34L568,34L568,34L609,34L609,33L686,33L686,34L705,34L705,34L707,34L707,34L712,34L712,33L741,33L741,33L774,33L774,34L782,34L782,35L873,35L873,36L900,36L900,36L901,36L901,36L940,36L940,36L1087,36L1087,37L1122,37L1122,37L1138,37L1138,39L1287,39L1287,39L1291,39L1291,40L1376,40L1376,42L1472,42L1472,42L1562,42L1562,42L1582,42L1582,43L1588,43L1588,43L1610,43L1610,44L1637,44L1637,45L1703,45L1703,45L1704,45L1704,46L1706,46L1706,47L1707,47L1707,48L1708,48L1708,48L1709,48L1709,49L1710,49L1710,50L1717,50L1717,50L1723,50L1723,50L1726,50L1726,50L1731,50L1731,50L1736,50L1736,51L1737,51L1737,52L1738,52L1738,52L1741,52L1741,54L1742,54L1742,56L1743,56L1743,56L1747,56L1747,55L1748,55L1748,51L1750,51L1750,51L1753,51L1753,51L1756,51L1756,52L1760,52L1760,52L1762,52L1762,53L1763,53L1763,52L1768,52L1768,53L1780,53L1780,53L1781,53L1781,53L1799,53" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L51,0L51,1L61,1L61,1L85,1L85,1L96,1L96,1L558,1L558,1L705,1L705,1L1637,1L1637,1L1747,1L1747,1L1768,1L1768,2L1780,2L1780,2L1799,2" tabindex="0">
						<title>8en1p568</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L99,0L99,3L126,3L126,4L236,4L236,4L588,4L588,4L732,4L732,4L1140,4L1140,5L1749,5L1749,4L1754,4L1754,4L1755,4L1755,4L1799,4" tabindex="0">
						<title>jnz1zy2j</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L125,0L125,1L126,1L126,3L236,3L236,3L317,3L317,5L588,5L588,5L686,5L686,5L732,5L732,5L774,5L774,5L873,5L873,5L900,5L900,5L901,5L901,5L1138,5L1138,6L1140,6L1140,7L1291,7L1291,7L1472,7L1472,7L1582,7L1582,7L1588,7L1588,7L1610,7L1610,7L1703,7L1703,7L1709,7L1709,7L1710,7L1710,7L1731,7L1731,7L1736,7L1736,7L1742,7L1742,7L1743,7L1743,7L1753,7L1753,7L1754,7L1754,7L1755,7L1755,7L1780,7L1780,7L1781,7L1781,7L1799,7" tabindex="0">
						<title>j9rlkzoj</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L236,0L236,5L585,5L585,5L588,5L588,5L732,5L732,5L1140,5L1140,6L1749,6L1749,5L1754,5L1754,5L1755,5L1755,5L1799,5" tabindex="0">
						<title>jnzen32j</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L342,0L342,2L707,2L707,2L1376,2L1376,3L1706,3L1706,4L1717,4L1717,4L1799,4" tabindex="0">
						<title>j9r7v6vj</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L553,0L553,4L564,4L564,4L565,4L565,4L696,4L696,4L806,4L806,4L808,4L808,4L1741,4L1741,5L1742,5L1742,6L1799,6" tabindex="0">
						<title>x3m3kle8</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L558,0L558,4L705,4L705,4L712,4L712,6L1637,6L1637,7L1747,7L1747,7L1768,7L1768,8L1780,8L1780,8L1799,8" tabindex="0">
						<title>j5vg1ez8</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L686,0L686,4L774,4L774,5L873,5L873,6L900,6L900,6L1291,6L1291,7L1588,7L1588,7L1610,7L1610,8L1709,8L1709,9L1710,9L1710,10L1731,10L1731,10L1742,10L1742,11L1743,11L1743,11L1748,11L1748,10L1753,10L1753,10L1780,10L1780,10L1799,10" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L705,0L705,7L707,7L707,12L712,12L712,12L732,12L732,19L733,19L733,18L734,18L734,19L741,19L741,25L900,25L900,34L901,34L901,40L902,40L902,40L940,40L940,48L990,48L990,48L1087,48L1087,49L1122,49L1122,50L1138,50L1138,52L1140,52L1140,53L1287,53L1287,54L1290,54L1290,54L1291,54L1291,55L1357,55L1357,55L1376,55L1376,57L1472,57L1472,58L1562,58L1562,58L1571,58L1571,59L1582,59L1582,60L1588,60L1588,61L1610,61L1610,62L1637,62L1637,63L1703,63L1703,64L1704,64L1704,65L1706,65L1706,67L1708,67L1708,68L1709,68L1709,69L1710,69L1710,70L1717,70L1717,71L1726,71L1726,72L1731,72L1731,73L1736,73L1736,74L1737,74L1737,75L1738,75L1738,77L1742,77L1742,78L1743,78L1743,79L1747,79L1747,79L1748,79L1748,78L1749,78L1749,77L1750,77L1750,78L1753,78L1753,80L1754,80L1754,80L1755,80L1755,81L1759,81L1759,80L1760,80L1760,80L1762,80L1762,81L1765,81L1765,80L1768,80L1768,81L1780,81L1780,83L1781,83L1781,84L1784,84L1784,85L1799,85" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L774,0L774,2L873,2L873,2L900,2L900,2L1291,2L1291,2L1588,2L1588,2L1610,2L1610,2L1709,2L1709,2L1710,2L1710,2L1731,2L1731,2L1742,2L1742,2L1743,2L1743,2L1753,2L1753,2L1780,2L1780,2L1799,2" tabindex="0">
						<title>8g0ezgyx</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L782,0L782,1L940,1L940,1L1087,1L1087,2L1122,2L1122,2L1287,2L1287,2L1562,2L1562,2L1708,2L1708,2L1738,2L1738,3L1750,3L1750,3L1760,3L1760,3L1799,3" tabindex="0">
						<title>8lonqn28</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L873,0L873,3L900,3L900,3L1291,3L1291,3L1588,3L1588,3L1610,3L1610,3L1709,3L1709,3L1710,3L1710,3L1731,3L1731,3L1742,3L1742,3L1743,3L1743,3L1753,3L1753,3L1780,3L1780,3L1799,3" tabindex="0">
						<title>x7w44nr8</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L1078,0L1078,1L1087,1L1087,2L1122,2L1122,2L1138,2L1138,5L1140,5L1140,6L1144,6L1144,6L1287,6L1287,6L1376,6L1376,7L1403,7L1403,7L1472,7L1472,7L1562,7L1562,7L1582,7L1582,7L1624,7L1624,7L1703,7L1703,7L1704,7L1704,7L1706,7L1706,7L1708,7L1708,7L1717,7L1717,7L1726,7L1726,7L1733,7L1733,7L1736,7L1736,7L1737,7L1737,7L1738,7L1738,7L1744,7L1744,7L1747,7L1747,7L1750,7L1750,7L1753,7L1753,7L1754,7L1754,7L1755,7L1755,7L1760,7L1760,7L1766,7L1766,7L1780,7L1780,7L1781,7L1781,7L1799,7L1799,7L1799,7" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L1122,0L1122,6L1287,6L1287,7L1403,7L1403,10L1472,10L1472,16L1562,16L1562,16L1582,16L1582,17L1588,17L1588,27L1610,27L1610,28L1624,28L1624,29L1703,29L1703,29L1708,29L1708,29L1709,29L1709,30L1710,30L1710,31L1731,31L1731,31L1733,31L1733,32L1736,32L1736,33L1738,33L1738,34L1742,34L1742,35L1743,35L1743,35L1744,35L1744,36L1747,36L1747,38L1748,38L1748,37L1750,37L1750,37L1753,37L1753,38L1760,38L1760,38L1766,38L1766,39L1769,39L1769,38L1780,38L1780,38L1781,38L1781,39L1799,39L1799,41L1799,41" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L1287,0L1287,6L1291,6L1291,12L1562,12L1562,12L1588,12L1588,12L1610,12L1610,12L1708,12L1708,12L1709,12L1709,13L1710,13L1710,14L1731,14L1731,14L1738,14L1738,15L1742,15L1742,16L1743,16L1743,16L1747,16L1747,15L1748,15L1748,14L1750,14L1750,14L1753,14L1753,15L1760,15L1760,15L1780,15L1780,15L1799,15" tabindex="0">
						<title>xkpw7g6j</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L1376,0L1376,5L1706,5L1706,6L1717,6L1717,6L1748,6L1748,5L1799,5" tabindex="0">
						<title>jm6lwl48</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L1403,0L1403,2L1562,2L1562,14L1571,14L1571,13L1624,13L1624,14L1708,14L1708,15L1733,15L1733,15L1738,15L1738,17L1744,17L1744,18L1747,18L1747,19L1750,19L1750,20L1760,20L1760,20L1766,20L1766,21L1780,21L1780,20L1799,20L1799,22L1799,22" tabindex="0">
						<title>86rpw3p8</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L1582,0L1582,5L1703,5L1703,5L1736,5L1736,5L1747,5L1747,4L1753,4L1753,4L1781,4L1781,4L1799,4" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L1610,0L1610,7L1709,7L1709,8L1710,8L1710,9L1731,9L1731,9L1742,9L1742,10L1743,10L1743,10L1747,10L1747,13L1748,13L1748,12L1753,12L1753,19L1756,19L1756,19L1780,19L1780,19L1799,19" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L1624,0L1624,2L1733,2L1733,2L1744,2L1744,2L1747,2L1747,2L1766,2L1766,2L1780,2L1780,2L1799,2L1799,4L1799,4" tabindex="0">
						<title>8ezm5928</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L1637,0L1637,4L1747,4L1747,3L1768,3L1768,4L1780,4L1780,4L1799,4" tabindex="0">
						<title>jo1g777x</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L1703,0L1703,8L1708,8L1708,18L1736,18L1736,19L1738,19L1738,21L1747,21L1747,20L1750,20L1750,20L1753,20L1753,21L1760,21L1760,21L1769,21L1769,20L1781,20L1781,21L1799,21" tabindex="0">
						<title>jo19m63x</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L1704,0L1704,4L1706,4L1706,12L1707,12L1707,15L1717,15L1717,15L1718,15L1718,15L1726,15L1726,15L1733,15L1733,19L1737,19L1737,19L1738,19L1738,23L1741,23L1741,24L1742,24L1742,25L1743,25L1743,41L1744,41L1744,42L1747,42L1747,43L1748,43L1748,41L1753,41L1753,40L1754,40L1754,48L1755,48L1755,49L1762,49L1762,50L1766,50L1766,51L1780,51L1780,51L1799,51L1799,53L1799,53" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L1706,0L1706,3L1717,3L1717,3L1799,3" tabindex="0">
						<title>joz11qe8</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L1709,0L1709,4L1710,4L1710,4L1731,4L1731,7L1742,7L1742,8L1743,8L1743,8L1748,8L1748,7L1753,7L1753,7L1780,7L1780,7L1799,7" tabindex="0">
						<title>x3pk7pk8</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L1710,0L1710,7L1731,7L1731,6L1742,6L1742,7L1743,7L1743,7L1748,7L1748,6L1753,6L1753,6L1780,6L1780,6L1799,6" tabindex="0">
						<title>8wggkpzx</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L1717,0L1717,11L1723,11L1723,17L1726,17L1726,25L1731,25L1731,39L1737,39L1737,40L1742,40L1742,50L1743,50L1743,50L1744,50L1744,57L1745,57L1745,57L1747,57L1747,64L1748,64L1748,62L1753,62L1753,73L1755,73L1755,79L1756,79L1756,82L1759,82L1759,83L1760,83L1760,100L1762,100L1762,100L1765,100L1765,101L1766,101L1766,102L1768,102L1768,103L1769,103L1769,106L1770,106L1770,106L1780,106L1780,109L1781,109L1781,110L1784,110L1784,109L1799,109L1799,111L1799,111" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L1717,0L1717,9L1748,9L1748,8L1750,8L1750,22L1760,22L1760,22L1780,22L1780,68L1781,68L1781,76L1799,76L1799,78L1799,78" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L1736,0L1736,6L1737,6L1737,11L1738,11L1738,10L1741,10L1741,12L1742,12L1742,16L1743,16L1743,16L1747,16L1747,14L1748,14L1748,13L1753,13L1753,13L1756,13L1756,17L1762,17L1762,18L1763,18L1763,20L1766,20L1766,23L1780,23L1780,23L1781,23L1781,23L1799,23L1799,25L1799,25" tabindex="0">
						<title>8logk9r8</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L1738,0L1738,10L1741,10L1741,13L1742,13L1742,13L1748,13L1748,12L1750,12L1750,12L1760,12L1760,12L1762,12L1762,13L1799,13" tabindex="0">
						<title>86pek6wj</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L1738,0L1738,2L1750,2L1750,2L1760,2L1760,2L1799,2" tabindex="0">
						<title>jn15mm18</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L1744,0L1744,3L1747,3L1747,3L1753,3L1753,11L1766,11L1766,12L1780,12L1780,12L1799,12L1799,14L1799,14" tabindex="0">
						<title>j2pmdqp8</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L1768,0L1768,1L1780,1L1780,1L1799,1" tabindex="0">
						<title>8v7p6328</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L1799,0L1799,2L1799,2" tabindex="0">
						<title>jpp2kwyj</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L1799,0L1799,3L1799,3" tabindex="0">
						<title>8lzyz54x</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
