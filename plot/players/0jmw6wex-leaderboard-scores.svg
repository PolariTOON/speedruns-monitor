<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player 0jmw6wex</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2019-06-15</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-30</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">269</text>
		</svg>
		<svg viewBox="0 0 2299 269" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 269) scale(1 -1)" style="--count: 47;">
				<g>
					<rect x="0" y="0" width="2299" height="269"/>
				</g>
				<g style="--index: 0;">
					<path dtabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L4,0L4,2L33,2L33,4L35,4L35,4L531,4L531,4L791,4L791,5L793,5L793,5L2099,5L2099,5L2177,5L2177,5L2299,5" tabindex="0">
						<title>xd17x94d-9l71pv4l.81wrgm5l</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L219,0L219,1L316,1L316,1L320,1L320,2L354,2L354,2L365,2L365,2L367,2L367,2L370,2L370,1L440,1L440,1L441,1L441,1L474,1L474,4L501,4L501,4L502,4L502,5L529,5L529,4L530,4L530,5L543,5L543,6L547,6L547,7L555,7L555,8L561,8L561,9L564,9L564,10L568,10L568,11L578,11L578,12L580,12L580,12L581,12L581,13L590,13L590,14L618,14L618,13L619,13L619,14L620,14L620,13L624,13L624,14L653,14L653,15L657,15L657,14L701,14L701,15L735,15L735,16L737,16L737,17L753,17L753,18L844,18L844,19L925,19L925,21L954,21L954,22L957,22L957,23L1019,23L1019,24L1056,24L1056,25L1088,25L1088,26L1112,26L1112,27L1124,27L1124,28L1131,28L1131,29L1141,29L1141,30L1164,30L1164,31L1170,31L1170,32L1172,32L1172,33L1399,33L1399,32L2235,32L2235,33L2277,33L2277,34L2282,34L2282,35L2283,35L2283,36L2290,36L2290,35L2299,35" tabindex="0">
						<title>xd17x94d-9l71pv4l.zqo20y2l</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L323,0L323,1L581,1L581,1L605,1L605,1L606,1L606,3L657,3L657,3L684,3L684,4L688,4L688,5L766,5L766,6L767,6L767,5L787,5L787,5L817,5L817,5L876,5L876,6L1013,6L1013,6L1050,6L1050,6L1066,6L1066,6L1116,6L1116,6L1171,6L1171,7L1274,7L1274,8L1384,8L1384,19L1500,19L1500,20L1508,20L1508,21L2252,21L2252,22L2275,22L2275,22L2299,22" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.jq6d86v1</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L518,0L518,1L562,1L562,1L747,1L747,1L2299,1" tabindex="0">
						<title>xd1v018d-68k7x44l.zqo74r41</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L531,0L531,4L571,4L571,4L577,4L577,5L593,5L593,5L1184,5L1184,6L1640,6L1640,7L1738,7L1738,6L1847,6L1847,7L1898,7L1898,7L1907,7L1907,8L2045,8L2045,8L2120,8L2120,8L2121,8L2121,8L2195,8L2195,8L2196,8L2196,8L2226,8L2226,8L2227,8L2227,8L2250,8L2250,9L2262,9L2262,10L2289,10L2289,10L2292,10L2292,11L2299,11" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L531,0L531,2L567,2L567,3L583,3L583,3L593,3L593,3L667,3L667,3L1408,3L1408,4L1549,4L1549,5L1594,5L1594,6L1640,6L1640,6L1748,6L1748,7L1938,7L1938,8L2045,8L2045,9L2087,9L2087,10L2093,10L2093,10L2160,10L2160,11L2230,11L2230,12L2262,12L2262,13L2266,13L2266,13L2277,13L2277,13L2299,13" tabindex="0">
						<title>l_r9gn1qpd-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L531,0L531,3L571,3L571,4L572,4L572,4L593,4L593,4L1846,4L1846,5L2152,5L2152,6L2227,6L2227,6L2237,6L2237,6L2265,6L2265,6L2281,6L2281,6L2299,6" tabindex="0">
						<title>l_o9xo3rp9-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L532,0L532,1L911,1L911,1L2148,1L2148,1L2299,1" tabindex="0">
						<title>7dg65oxk-r8r1zm0n.xqk0drn1</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path dtabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L550,0L550,11L551,11L551,11L555,11L555,10L625,10L625,11L991,11L991,10L1096,10L1096,10L1120,10L1120,11L1162,11L1162,12L1268,12L1268,12L1271,12L1271,11L1275,11L1275,12L1334,12L1334,13L1392,13L1392,14L1416,14L1416,15L1527,15L1527,16L1574,16L1574,16L1596,16L1596,17L1724,17L1724,18L1888,18L1888,18L2085,18L2085,19L2104,19L2104,19L2105,19L2105,19L2106,19L2106,20L2137,20L2137,21L2140,21L2140,20L2202,20L2202,20L2206,20L2206,20L2231,20L2231,22L2236,22L2236,22L2237,22L2237,22L2242,22L2242,22L2246,22L2246,22L2263,22L2263,23L2299,23" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L550,0L550,10L555,10L555,11L631,11L631,10L733,10L733,11L1004,11L1004,12L1096,12L1096,12L1179,12L1179,12L1274,12L1274,13L1275,13L1275,14L1319,14L1319,15L1390,15L1390,16L1691,16L1691,17L1782,17L1782,18L1783,18L1783,19L1792,19L1792,20L1830,20L1830,21L1841,21L1841,22L1887,22L1887,23L1897,23L1897,24L1941,24L1941,25L2017,25L2017,26L2018,26L2018,27L2044,27L2044,28L2048,28L2048,29L2050,29L2050,30L2051,30L2051,31L2053,31L2053,32L2059,32L2059,33L2066,33L2066,34L2070,34L2070,35L2085,35L2085,36L2094,36L2094,37L2100,37L2100,38L2103,38L2103,39L2105,39L2105,40L2118,40L2118,40L2119,40L2119,40L2125,40L2125,41L2144,41L2144,42L2149,42L2149,43L2152,43L2152,44L2162,44L2162,45L2190,45L2190,45L2202,45L2202,44L2211,44L2211,45L2213,45L2213,45L2214,45L2214,45L2217,45L2217,46L2218,46L2218,47L2219,47L2219,48L2224,48L2224,48L2227,48L2227,49L2230,49L2230,50L2231,50L2231,51L2232,51L2232,52L2233,52L2233,52L2235,52L2235,51L2246,51L2246,52L2249,52L2249,53L2251,53L2251,54L2254,54L2254,55L2255,55L2255,56L2256,56L2256,57L2262,57L2262,58L2265,58L2265,59L2267,59L2267,60L2268,60L2268,61L2284,61L2284,62L2291,62L2291,63L2296,63L2296,63L2297,63L2297,62L2299,62" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L654,0L654,2L655,2L655,3L685,3L685,4L787,4L787,4L1240,4L1240,6L1373,6L1373,7L1528,7L1528,8L2252,8L2252,8L2275,8L2275,8L2299,8" tabindex="0">
						<title>rkl9qwrk-6njkg4el.z19p2o8l</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L1240,0L1240,10L1328,10L1328,11L1402,11L1402,12L1403,12L1403,13L1434,13L1434,14L1597,14L1597,15L1749,15L1749,16L1759,16L1759,17L1792,17L1792,18L1929,18L1929,18L1939,18L1939,19L1941,19L1941,20L2027,20L2027,21L2029,21L2029,22L2089,22L2089,23L2100,23L2100,23L2202,23L2202,24L2205,24L2205,23L2211,23L2211,23L2212,23L2212,22L2221,22L2221,22L2222,22L2222,22L2227,22L2227,22L2230,22L2230,23L2231,23L2231,23L2232,23L2232,23L2233,23L2233,22L2235,22L2235,21L2246,21L2246,22L2260,22L2260,23L2268,23L2268,24L2270,24L2270,26L2284,26L2284,27L2292,27L2292,28L2299,28" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path dtabindex="0">
						<title>xd17x94d-9l71pv4l.21gpn081</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L1433,0L1433,7L2134,7L2134,7L2276,7L2276,7L2299,7" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.ln8rzznl</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L1562,0L1562,28L1576,28L1576,27L1638,27L1638,28L1644,28L1644,29L1739,29L1739,30L1812,30L1812,31L1856,31L1856,32L1884,32L1884,33L1906,33L1906,34L1976,34L1976,35L2026,35L2026,36L2059,36L2059,37L2060,37L2060,37L2125,37L2125,37L2131,37L2131,38L2136,38L2136,39L2147,39L2147,40L2162,40L2162,41L2179,41L2179,42L2195,42L2195,43L2211,43L2211,44L2219,44L2219,45L2228,45L2228,46L2230,46L2230,47L2232,47L2232,48L2236,48L2236,47L2237,47L2237,48L2238,48L2238,49L2244,49L2244,50L2254,50L2254,49L2256,49L2256,50L2272,50L2272,52L2286,52L2286,53L2291,53L2291,54L2297,54L2297,55L2299,55" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L1644,0L1644,4L2117,4L2117,4L2292,4L2292,3L2299,3" tabindex="0">
						<title>7dg65oxk-r8r1zm0n.5q89kv31</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L1914,0L1914,4L2183,4L2183,4L2264,4L2264,4L2299,4" tabindex="0">
						<title>xd1v018d-68k7x44l.mlno8vjq</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L1933,0L1933,34L1956,34L1956,35L1969,35L1969,36L2005,36L2005,37L2008,37L2008,38L2034,38L2034,39L2040,39L2040,40L2050,40L2050,41L2052,41L2052,42L2053,42L2053,43L2077,43L2077,44L2079,44L2079,45L2080,45L2080,46L2081,46L2081,46L2092,46L2092,45L2098,45L2098,46L2099,46L2099,46L2100,46L2100,47L2103,47L2103,47L2137,47L2137,48L2206,48L2206,48L2209,48L2209,48L2212,48L2212,48L2213,48L2213,48L2214,48L2214,48L2219,48L2219,48L2220,48L2220,48L2225,48L2225,48L2229,48L2229,48L2230,48L2230,48L2234,48L2234,48L2235,48L2235,48L2238,48L2238,48L2240,48L2240,48L2246,48L2246,48L2248,48L2248,48L2258,48L2258,48L2259,48L2259,48L2261,48L2261,48L2273,48L2273,48L2283,48L2283,48L2289,48L2289,48L2299,48" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L1933,0L1933,5L2051,5L2051,6L2062,6L2062,7L2089,7L2089,8L2132,8L2132,8L2201,8L2201,8L2206,8L2206,7L2217,7L2217,7L2229,7L2229,6L2299,6" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21dzoj3l</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L1933,0L1933,12L2040,12L2040,14L2081,14L2081,15L2109,15L2109,16L2118,16L2118,16L2204,16L2204,16L2206,16L2206,15L2215,15L2215,15L2217,15L2217,15L2221,15L2221,15L2229,15L2229,15L2230,15L2230,14L2236,14L2236,14L2238,14L2238,14L2242,14L2242,13L2251,13L2251,13L2269,13L2269,13L2284,13L2284,13L2299,13" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyrgl</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L1933,0L1933,20L1941,20L1941,21L1980,21L1980,22L1982,22L1982,23L2001,23L2001,24L2006,24L2006,25L2096,25L2096,26L2100,26L2100,27L2108,27L2108,28L2110,28L2110,29L2138,29L2138,28L2149,28L2149,28L2194,28L2194,28L2205,28L2205,27L2210,27L2210,28L2216,28L2216,28L2219,28L2219,28L2230,28L2230,29L2232,29L2232,30L2233,30L2233,31L2235,31L2235,29L2240,29L2240,30L2249,30L2249,30L2254,30L2254,31L2255,31L2255,32L2262,32L2262,34L2266,34L2266,34L2268,34L2268,35L2284,35L2284,36L2290,36L2290,36L2291,36L2291,37L2299,37" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L1933,0L1933,176L1941,176L1941,177L1961,177L1961,178L1966,178L1966,179L1967,179L1967,181L1968,181L1968,180L1982,180L1982,181L1994,181L1994,182L2000,182L2000,183L2003,183L2003,184L2009,184L2009,185L2012,185L2012,186L2040,186L2040,187L2046,187L2046,188L2048,188L2048,189L2058,189L2058,190L2059,190L2059,191L2063,191L2063,192L2069,192L2069,194L2071,194L2071,195L2074,195L2074,196L2079,196L2079,197L2088,197L2088,198L2095,198L2095,197L2097,197L2097,199L2102,199L2102,200L2103,200L2103,202L2106,202L2106,203L2109,203L2109,204L2112,204L2112,203L2113,203L2113,203L2124,203L2124,202L2126,202L2126,203L2127,203L2127,204L2129,204L2129,204L2130,204L2130,205L2131,205L2131,206L2135,206L2135,207L2136,207L2136,208L2138,208L2138,209L2143,209L2143,210L2147,210L2147,211L2183,211L2183,212L2204,212L2204,212L2210,212L2210,213L2215,213L2215,215L2222,215L2222,216L2227,216L2227,216L2231,216L2231,217L2235,217L2235,218L2237,218L2237,220L2239,220L2239,221L2252,221L2252,222L2260,222L2260,223L2262,223L2262,224L2271,224L2271,225L2282,225L2282,226L2286,226L2286,227L2289,227L2289,228L2299,228" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L1933,0L1933,37L1946,37L1946,38L2009,38L2009,39L2058,39L2058,40L2070,40L2070,41L2071,41L2071,42L2074,42L2074,43L2081,43L2081,44L2086,44L2086,45L2096,45L2096,45L2115,45L2115,45L2118,45L2118,44L2137,44L2137,45L2161,45L2161,46L2186,46L2186,47L2196,47L2196,48L2199,48L2199,47L2202,47L2202,47L2216,47L2216,47L2226,47L2226,48L2227,48L2227,48L2228,48L2228,49L2230,49L2230,50L2231,50L2231,50L2234,50L2234,50L2235,50L2235,51L2247,51L2247,52L2254,52L2254,52L2255,52L2255,53L2290,53L2290,54L2299,54" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L1933,0L1933,4L2062,4L2062,5L2091,5L2091,6L2104,6L2104,6L2127,6L2127,6L2206,6L2206,5L2219,5L2219,5L2220,5L2220,5L2299,5" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6ejq</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L1933,0L1933,19L2026,19L2026,20L2059,20L2059,21L2124,21L2124,21L2125,21L2125,21L2126,21L2126,22L2130,22L2130,21L2137,21L2137,22L2147,22L2147,22L2154,22L2154,23L2217,23L2217,23L2238,23L2238,23L2240,23L2240,24L2259,24L2259,24L2265,24L2265,23L2283,23L2283,24L2299,24" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L1933,0L1933,9L2006,9L2006,9L2011,9L2011,10L2019,10L2019,11L2029,11L2029,12L2091,12L2091,11L2095,11L2095,12L2116,12L2116,13L2206,13L2206,13L2241,13L2241,13L2284,13L2284,14L2299,14" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.p12dx07q</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L1933,0L1933,12L2093,12L2093,12L2104,12L2104,13L2124,13L2124,14L2129,14L2129,13L2208,13L2208,12L2276,12L2276,12L2283,12L2283,13L2299,13" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L1933,0L1933,55L1938,55L1938,54L1994,54L1994,55L1995,55L1995,56L2030,56L2030,57L2041,57L2041,58L2050,58L2050,59L2055,59L2055,60L2059,60L2059,61L2085,61L2085,62L2086,62L2086,63L2087,63L2087,64L2090,64L2090,65L2091,65L2091,66L2119,66L2119,66L2136,66L2136,67L2147,67L2147,68L2149,68L2149,69L2178,69L2178,69L2186,69L2186,69L2199,69L2199,70L2203,70L2203,70L2211,70L2211,70L2213,70L2213,71L2238,71L2238,71L2241,71L2241,72L2244,72L2244,73L2249,73L2249,74L2255,74L2255,75L2261,75L2261,76L2263,76L2263,76L2273,76L2273,77L2286,77L2286,78L2289,78L2289,78L2290,78L2290,77L2294,77L2294,77L2298,77L2298,78L2299,78" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L1933,0L1933,7L1941,7L1941,8L2017,8L2017,9L2080,9L2080,9L2087,9L2087,10L2100,10L2100,11L2116,11L2116,10L2121,10L2121,10L2155,10L2155,10L2190,10L2190,10L2195,10L2195,10L2205,10L2205,10L2231,10L2231,11L2232,11L2232,12L2234,12L2234,12L2268,12L2268,14L2282,14L2282,15L2291,15L2291,16L2299,16" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.qj7zdm3q</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L1933,0L1933,23L2092,23L2092,22L2100,22L2100,22L2104,22L2104,22L2137,22L2137,23L2139,23L2139,23L2194,23L2194,23L2198,23L2198,23L2199,23L2199,22L2206,22L2206,22L2234,22L2234,22L2235,22L2235,23L2254,23L2254,24L2262,24L2262,25L2269,25L2269,26L2283,26L2283,26L2296,26L2296,26L2299,26" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L1933,0L1933,14L1982,14L1982,15L2083,15L2083,16L2089,16L2089,17L2099,17L2099,18L2110,18L2110,18L2113,18L2113,18L2114,18L2114,17L2116,17L2116,18L2136,18L2136,19L2147,19L2147,20L2155,20L2155,21L2179,21L2179,22L2206,22L2206,22L2211,22L2211,23L2219,23L2219,24L2243,24L2243,25L2255,25L2255,26L2266,26L2266,25L2272,25L2272,26L2282,26L2282,27L2286,27L2286,28L2293,28L2293,29L2299,29" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L1933,0L1933,4L2059,4L2059,5L2071,5L2071,6L2081,6L2081,7L2095,7L2095,8L2107,8L2107,9L2110,9L2110,9L2111,9L2111,8L2126,8L2126,7L2206,7L2206,6L2229,6L2229,6L2254,6L2254,6L2284,6L2284,7L2299,7" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6e0q</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L1933,0L1933,21L1941,21L1941,22L1942,22L1942,21L2063,21L2063,22L2099,22L2099,22L2123,22L2123,21L2161,21L2161,22L2171,22L2171,22L2208,22L2208,21L2216,21L2216,21L2218,21L2218,21L2219,21L2219,21L2230,21L2230,21L2231,21L2231,22L2245,22L2245,23L2249,23L2249,23L2284,23L2284,25L2290,25L2290,25L2292,25L2292,25L2298,25L2298,25L2299,25" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L1933,0L1933,11L2017,11L2017,12L2032,12L2032,13L2062,13L2062,14L2090,14L2090,15L2118,15L2118,14L2148,14L2148,15L2149,15L2149,16L2206,16L2206,15L2207,15L2207,15L2229,15L2229,14L2279,14L2279,14L2280,14L2280,14L2284,14L2284,15L2299,15" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.5q86rxr1</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L1933,0L1933,5L2081,5L2081,5L2091,5L2091,5L2117,5L2117,5L2206,5L2206,4L2207,4L2207,4L2284,4L2284,5L2289,5L2289,5L2299,5" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21g8owxl</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L1933,0L1933,27L2021,27L2021,26L2025,26L2025,27L2027,27L2027,28L2061,28L2061,29L2089,29L2089,29L2103,29L2103,28L2127,28L2127,28L2128,28L2128,28L2137,28L2137,29L2139,29L2139,29L2199,29L2199,28L2206,28L2206,28L2214,28L2214,28L2216,28L2216,28L2226,28L2226,29L2229,29L2229,29L2231,29L2231,29L2232,29L2232,29L2234,29L2234,29L2241,29L2241,29L2244,29L2244,29L2252,29L2252,29L2259,29L2259,29L2262,29L2262,29L2280,29L2280,29L2283,29L2283,29L2297,29L2297,29L2299,29" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L1933,0L1933,7L1968,7L1968,7L2059,7L2059,8L2103,8L2103,9L2128,9L2128,8L2149,8L2149,9L2206,9L2206,9L2218,9L2218,9L2229,9L2229,8L2230,8L2230,8L2254,8L2254,8L2284,8L2284,9L2299,9" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L1933,0L1933,76L1947,76L1947,77L1976,77L1976,78L1992,78L1992,79L2001,79L2001,80L2014,80L2014,81L2017,81L2017,83L2035,83L2035,85L2040,85L2040,86L2055,86L2055,87L2063,87L2063,88L2070,88L2070,89L2071,89L2071,91L2073,91L2073,92L2076,92L2076,93L2079,93L2079,94L2080,94L2080,95L2085,95L2085,95L2091,95L2091,95L2101,95L2101,95L2121,95L2121,96L2125,96L2125,96L2131,96L2131,97L2135,97L2135,98L2136,98L2136,99L2147,99L2147,100L2149,100L2149,100L2166,100L2166,101L2210,101L2210,101L2227,101L2227,102L2230,102L2230,102L2249,102L2249,102L2252,102L2252,102L2256,102L2256,103L2259,103L2259,104L2264,104L2264,105L2272,105L2272,106L2277,106L2277,106L2278,106L2278,106L2283,106L2283,107L2286,107L2286,108L2288,108L2288,109L2290,109L2290,109L2292,109L2292,109L2299,109" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L1933,0L1933,53L1981,53L1981,54L1982,54L1982,55L2018,55L2018,56L2044,56L2044,55L2048,55L2048,57L2049,57L2049,56L2056,56L2056,57L2058,57L2058,58L2069,58L2069,59L2075,59L2075,60L2077,60L2077,61L2079,61L2079,62L2086,62L2086,63L2088,63L2088,64L2098,64L2098,65L2102,65L2102,67L2103,67L2103,68L2107,68L2107,69L2117,69L2117,69L2125,69L2125,70L2134,70L2134,71L2137,71L2137,72L2138,72L2138,71L2147,71L2147,72L2152,72L2152,73L2191,73L2191,74L2195,74L2195,75L2196,75L2196,77L2198,77L2198,76L2200,76L2200,77L2201,77L2201,78L2207,78L2207,78L2214,78L2214,80L2220,80L2220,81L2228,81L2228,81L2229,81L2229,80L2240,80L2240,80L2242,80L2242,80L2246,80L2246,82L2250,82L2250,85L2251,85L2251,85L2254,85L2254,86L2262,86L2262,88L2269,88L2269,89L2274,89L2274,90L2284,90L2284,91L2289,91L2289,92L2295,92L2295,93L2299,93" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L1933,0L1933,13L1941,13L1941,14L2111,14L2111,14L2128,14L2128,14L2185,14L2185,14L2205,14L2205,13L2206,13L2206,13L2222,13L2222,13L2239,13L2239,13L2284,13L2284,14L2299,14" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.xqkjmnnl</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L1933,0L1933,42L1963,42L1963,43L1983,43L1983,44L2016,44L2016,45L2020,45L2020,46L2026,46L2026,47L2028,47L2028,48L2050,48L2050,49L2066,49L2066,50L2070,50L2070,51L2074,51L2074,52L2075,52L2075,53L2079,53L2079,54L2086,54L2086,55L2087,55L2087,56L2088,56L2088,57L2094,57L2094,57L2095,57L2095,57L2107,57L2107,56L2113,56L2113,57L2115,57L2115,57L2128,57L2128,56L2131,56L2131,57L2136,57L2136,58L2147,58L2147,59L2149,59L2149,60L2162,60L2162,60L2167,60L2167,60L2170,60L2170,61L2171,61L2171,61L2178,61L2178,60L2181,60L2181,61L2182,61L2182,61L2198,61L2198,60L2209,60L2209,61L2210,61L2210,61L2213,61L2213,62L2224,62L2224,63L2232,63L2232,64L2237,64L2237,63L2238,63L2238,63L2249,63L2249,64L2255,64L2255,65L2256,65L2256,66L2261,66L2261,67L2273,67L2273,68L2286,68L2286,69L2289,69L2289,69L2297,69L2297,69L2299,69" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L1933,0L1933,16L1997,16L1997,16L2009,16L2009,17L2040,17L2040,18L2058,18L2058,18L2097,18L2097,19L2168,19L2168,19L2172,19L2172,19L2184,19L2184,19L2199,19L2199,17L2202,17L2202,17L2205,17L2205,16L2207,16L2207,16L2231,16L2231,16L2254,16L2254,16L2265,16L2265,17L2279,17L2279,18L2284,18L2284,19L2299,19" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,0L1933,0L1933,7L2062,7L2062,8L2114,8L2114,8L2130,8L2130,8L2206,8L2206,7L2207,7L2207,7L2223,7L2223,7L2228,7L2228,6L2229,6L2229,6L2254,6L2254,6L2284,6L2284,7L2299,7" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.gq7jzvnq</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,0L1933,0L1933,9L1962,9L1962,10L2006,10L2006,11L2025,11L2025,12L2028,12L2028,13L2039,13L2039,14L2040,14L2040,15L2056,15L2056,16L2097,16L2097,17L2126,17L2126,18L2134,18L2134,19L2149,19L2149,20L2185,20L2185,20L2187,20L2187,19L2207,19L2207,19L2231,19L2231,20L2236,20L2236,21L2239,21L2239,22L2240,22L2240,23L2246,23L2246,24L2255,24L2255,23L2256,23L2256,24L2272,24L2272,25L2282,25L2282,26L2283,26L2283,26L2285,26L2285,27L2290,27L2290,27L2299,27" tabindex="0">
						<title>l_gdr5onk9-rkl3znrk-rn1g06dn.qj77o50q</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,0L2087,0L2087,1L2192,1L2192,2L2193,2L2193,2L2195,2L2195,3L2196,3L2196,3L2198,3L2198,3L2205,3L2205,3L2238,3L2238,4L2251,4L2251,5L2299,5" tabindex="0">
						<title>zd39lqyd-yn26k2jl.qoxwn4pq</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
