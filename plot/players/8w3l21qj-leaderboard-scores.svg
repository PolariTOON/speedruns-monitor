<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player 8w3l21qj</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2023-07-26</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-31</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">270</text>
		</svg>
		<svg viewBox="0 0 767 270" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 270) scale(1 -1)" style="--count: 76;">
				<g>
					<rect x="0" y="0" width="767" height="270"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,1L5,1L5,1L9,1L9,1L11,1L11,1L13,1L13,1L20,1L20,1L27,1L27,1L63,1L63,1L67,1L67,1L72,1L72,1L74,1L74,1L81,1L81,1L87,1L87,1L93,1L93,1L109,1L109,1L114,1L114,1L122,1L122,1L129,1L129,1L135,1L135,1L178,1L178,1L223,1L223,1L240,1L240,1L241,1L241,1L245,1L245,1L258,1L258,1L259,1L259,1L282,1L282,1L283,1L283,1L288,1L288,1L290,1L290,1L305,1L305,1L309,1L309,1L327,1L327,1L335,1L335,1L354,1L354,1L355,1L355,1L361,1L361,1L368,1L368,1L370,1L370,1L394,1L394,1L395,1L395,1L401,1L401,1L402,1L402,1L403,1L403,1L411,1L411,1L413,1L413,1L418,1L418,1L428,1L428,1L434,1L434,1L452,1L452,1L479,1L479,1L482,1L482,1L486,1L486,1L490,1L490,1L492,1L492,1L493,1L493,1L496,1L496,1L524,1L524,1L528,1L528,1L531,1L531,1L533,1L533,1L540,1L540,1L542,1L542,1L548,1L548,1L552,1L552,1L553,1L553,1L557,1L557,1L558,1L558,1L562,1L562,1L566,1L566,1L567,1L567,1L571,1L571,1L572,1L572,1L573,1L573,1L574,1L574,1L577,1L577,1L584,1L584,1L586,1L586,1L590,1L590,1L592,1L592,1L604,1L604,1L605,1L605,1L613,1L613,1L628,1L628,1L635,1L635,1L644,1L644,1L647,1L647,1L655,1L655,1L656,1L656,1L660,1L660,1L662,1L662,1L668,1L668,1L670,1L670,1L672,1L672,1L674,1L674,1L680,1L680,1L684,1L684,1L690,1L690,1L691,1L691,1L698,1L698,1L699,1L699,1L712,1L712,1L713,1L713,1L717,1L717,33L719,33L719,33L720,33L720,33L725,33L725,142L728,142L728,143L732,143L732,143L733,143L733,146L735,146L735,147L739,147L739,148L740,148L740,149L741,149L741,150L743,150L743,152L744,152L744,153L745,153L745,154L747,154L747,155L755,155L755,156L760,156L760,158L764,158L764,160L767,160" tabindex="0">
						<title>xd17x94d-9l71pv4l.21gpn081</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L4,0L4,1L142,1L142,1L209,1L209,3L254,3L254,3L336,3L336,3L615,3L615,3L686,3L686,3L689,3L689,3L767,3" tabindex="0">
						<title>7dg65oxk-r8r1zm0n.5q89kv31</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L30,0L30,1L37,1L37,2L90,2L90,2L107,2L107,2L216,2L216,2L383,2L383,2L409,2L409,2L456,2L456,2L550,2L550,2L557,2L557,2L574,2L574,2L595,2L595,2L610,2L610,2L612,2L612,2L648,2L648,3L660,3L660,3L682,3L682,3L703,3L703,3L707,3L707,3L712,3L712,3L714,3L714,3L726,3L726,3L732,3L732,3L737,3L737,3L749,3L749,3L756,3L756,3L760,3L760,3L767,3" tabindex="0">
						<title>rkl9qwrk-6njkg4el.lr3x560l</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L30,0L30,2L66,2L66,2L71,2L71,2L73,2L73,2L127,2L127,2L257,2L257,2L288,2L288,2L336,2L336,2L340,2L340,2L371,2L371,2L374,2L374,2L381,2L381,2L435,2L435,2L470,2L470,2L475,2L475,3L482,3L482,3L506,3L506,3L524,3L524,3L546,3L546,3L547,3L547,3L553,3L553,3L578,3L578,3L581,3L581,3L584,3L584,3L587,3L587,3L592,3L592,3L599,3L599,3L607,3L607,3L647,3L647,3L656,3L656,3L674,3L674,3L682,3L682,3L693,3L693,3L697,3L697,3L703,3L703,3L711,3L711,3L718,3L718,3L725,3L725,3L727,3L727,3L732,3L732,3L734,3L734,3L736,3L736,3L741,3L741,3L749,3L749,3L756,3L756,3L759,3L759,3L766,3L766,3L767,3" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.1dk62o3l</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L33,0L33,1L195,1L195,2L412,2L412,2L681,2L681,2L762,2L762,2L767,2" tabindex="0">
						<title>xd1v018d-68k7x44l.mlno8vjq</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L37,0L37,1L141,1L141,2L143,2L143,3L144,3L144,3L272,3L272,4L343,4L343,5L345,5L345,6L406,6L406,6L417,6L417,7L431,7L431,7L460,7L460,8L504,8L504,9L523,9L523,10L526,10L526,11L537,11L537,12L538,12L538,13L554,13L554,14L591,14L591,13L595,13L595,14L624,14L624,15L630,15L630,15L632,15L632,17L647,17L647,18L683,18L683,18L705,18L705,18L729,18L729,19L734,19L734,20L737,20L737,21L738,21L738,22L744,22L744,23L753,23L753,22L754,22L754,23L767,23" tabindex="0">
						<title>l_gdr5onk9-rkl3znrk-rn1g06dn.qj77o50q</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L37,0L37,1L95,1L95,1L393,1L393,1L569,1L569,1L580,1L580,1L621,1L621,1L633,1L633,4L684,4L684,4L696,4L696,4L702,4L702,4L766,4L766,4L767,4" tabindex="0">
						<title>l_xd0mnpjw-rkl3znrk-wley4prn.192xe54q</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L76,0L76,1L139,1L139,1L140,1L140,1L143,1L143,1L319,1L319,1L529,1L529,2L588,2L588,2L589,2L589,2L632,2L632,2L675,2L675,2L732,2L732,2L754,2L754,2L767,2" tabindex="0">
						<title>l_gdr5onk9-rkl3znrk-rn1g06dn.lmooe9y1</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L76,0L76,1L140,1L140,1L143,1L143,1L588,1L588,1L632,1L632,1L767,1" tabindex="0">
						<title>l_gdr5onk9-rkl3znrk-rn1g06dn.q655wjnl</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L76,0L76,1L401,1L401,1L731,1L731,1L742,1L742,1L764,1L764,1L767,1" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.jq606z3q</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L85,0L85,1L120,1L120,1L142,1L142,1L285,1L285,1L560,1L560,1L706,1L706,1L736,1L736,1L748,1L748,1L758,1L758,1L767,1" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.rqvp5e7q</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L88,0L88,2L141,2L141,9L160,9L160,9L161,9L161,9L164,9L164,17L191,17L191,16L260,16L260,16L284,16L284,16L351,16L351,15L496,15L496,16L571,16L571,16L576,16L576,17L586,17L586,18L593,18L593,18L712,18L712,17L726,17L726,17L732,17L732,17L752,17L752,16L767,16" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.4qypgj4q</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L88,0L88,1L142,1L142,4L164,4L164,5L255,5L255,5L285,5L285,5L286,5L286,5L351,5L351,5L494,5L494,5L623,5L623,6L730,6L730,6L767,6" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.mlnwjz0l</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L94,0L94,1L142,1L142,3L164,3L164,3L233,3L233,3L281,3L281,3L282,3L282,3L351,3L351,3L660,3L660,3L730,3L730,3L732,3L732,3L767,3" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.810zkwwq</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L97,0L97,1L139,1L139,1L142,1L142,5L164,5L164,7L166,7L166,6L235,6L235,6L256,6L256,7L262,7L262,7L286,7L286,7L310,7L310,7L351,7L351,7L389,7L389,7L576,7L576,8L730,8L730,8L753,8L753,7L767,7" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.9qj0kxel</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L100,0L100,77L114,77L114,78L126,78L126,79L129,79L129,81L193,81L193,82L194,82L194,83L195,83L195,114L218,114L218,115L237,115L237,116L251,116L251,117L260,117L260,118L263,118L263,119L277,119L277,120L280,120L280,121L283,121L283,122L297,122L297,123L298,123L298,125L306,125L306,126L315,126L315,128L328,128L328,129L333,129L333,130L335,130L335,131L336,131L336,132L337,132L337,133L338,133L338,134L341,134L341,135L345,135L345,136L348,136L348,137L349,137L349,138L352,138L352,140L355,140L355,141L360,141L360,142L364,142L364,143L366,143L366,144L370,144L370,145L376,145L376,147L378,147L378,148L381,148L381,149L383,149L383,148L386,148L386,149L389,149L389,150L400,150L400,151L402,151L402,153L409,153L409,154L410,154L410,156L419,156L419,162L421,162L421,163L427,163L427,162L431,162L431,161L441,161L441,162L444,162L444,163L452,163L452,163L458,163L458,165L464,165L464,166L474,166L474,166L475,166L475,167L479,167L479,168L480,168L480,169L483,169L483,170L487,170L487,171L490,171L490,173L500,173L500,174L501,174L501,175L509,175L509,176L511,176L511,177L515,177L515,178L518,178L518,179L519,179L519,181L525,181L525,181L529,181L529,182L531,182L531,184L534,184L534,186L540,186L540,188L544,188L544,189L548,189L548,190L555,190L555,192L558,192L558,193L560,193L560,197L569,197L569,198L571,198L571,199L573,199L573,200L575,200L575,201L576,201L576,202L586,202L586,203L591,203L591,204L595,204L595,205L597,205L597,205L601,205L601,206L604,206L604,207L608,207L608,208L613,208L613,209L618,209L618,209L621,209L621,210L623,210L623,211L629,211L629,212L632,212L632,213L634,213L634,214L640,214L640,215L645,215L645,216L648,216L648,217L651,217L651,218L654,218L654,220L655,220L655,221L659,221L659,222L660,222L660,224L662,224L662,225L667,225L667,226L669,226L669,227L678,227L678,229L683,229L683,230L690,230L690,231L691,231L691,233L698,233L698,235L700,235L700,235L703,235L703,235L704,235L704,237L705,237L705,241L706,241L706,241L707,241L707,242L712,242L712,243L713,243L713,245L715,245L715,246L716,246L716,247L722,247L722,248L724,248L724,249L725,249L725,250L728,250L728,251L730,251L730,252L734,252L734,254L735,254L735,256L739,256L739,258L746,258L746,261L747,261L747,262L750,262L750,263L751,263L751,265L753,265L753,266L758,266L758,267L761,267L761,268L762,268L762,268L764,268L764,270L767,270" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L136,0L136,19L142,19L142,20L148,20L148,19L195,19L195,19L237,19L237,20L310,20L310,20L354,20L354,21L382,21L382,21L404,21L404,22L411,22L411,23L432,23L432,23L436,23L436,24L439,24L439,27L474,27L474,28L524,28L524,29L557,29L557,30L558,30L558,30L623,30L623,30L629,30L629,31L634,31L634,32L645,32L645,33L660,33L660,34L661,34L661,33L677,33L677,33L693,33L693,34L706,34L706,33L709,33L709,34L717,34L717,35L726,35L726,35L728,35L728,35L729,35L729,35L730,35L730,36L735,36L735,36L742,36L742,37L754,37L754,38L758,38L758,45L767,45" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L136,0L136,1L200,1L200,2L232,2L232,2L236,2L236,3L591,3L591,3L767,3" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.810zdxoq</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L136,0L136,8L150,8L150,10L254,10L254,13L332,13L332,13L387,13L387,14L431,14L431,15L480,15L480,16L581,16L581,17L587,17L587,18L597,18L597,19L608,19L608,19L611,19L611,19L612,19L612,18L614,18L614,19L634,19L634,20L645,20L645,21L653,21L653,22L677,22L677,23L704,23L704,23L709,23L709,24L717,24L717,25L741,25L741,26L753,26L753,27L764,27L764,26L767,26" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L136,0L136,51L143,51L143,52L173,52L173,52L195,52L195,68L282,68L282,69L293,69L293,70L298,70L298,71L313,71L313,72L326,72L326,73L328,73L328,73L339,73L339,74L345,74L345,75L347,75L347,77L401,77L401,78L431,78L431,79L432,79L432,80L445,80L445,81L474,81L474,82L490,82L490,83L499,83L499,84L512,84L512,85L515,85L515,87L532,87L532,86L533,86L533,88L538,88L538,89L553,89L553,90L561,90L561,91L568,91L568,92L569,92L569,94L571,94L571,95L574,95L574,96L577,96L577,97L578,97L578,98L583,98L583,99L589,99L589,101L599,101L599,102L619,102L619,103L623,103L623,103L624,103L624,102L629,102L629,103L633,103L633,104L634,104L634,105L645,105L645,106L647,106L647,107L664,107L664,108L690,108L690,107L708,107L708,108L725,108L725,110L728,110L728,110L747,110L747,110L750,110L750,110L754,110L754,111L757,111L757,112L759,112L759,116L762,116L762,117L764,117L764,116L767,116" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L136,0L136,113L152,113L152,144L165,144L165,145L190,145L190,146L232,146L232,147L233,147L233,148L253,148L253,149L256,149L256,150L263,150L263,151L288,151L288,152L298,152L298,153L300,153L300,154L306,154L306,155L336,155L336,155L362,155L362,157L369,157L369,158L377,158L377,159L390,159L390,160L391,160L391,159L398,159L398,160L403,160L403,161L407,161L407,162L409,162L409,163L419,163L419,177L431,177L431,178L439,178L439,179L459,179L459,180L464,180L464,181L465,181L465,183L469,183L469,182L480,182L480,183L492,183L492,184L498,184L498,185L501,185L501,186L507,186L507,187L510,187L510,188L538,188L538,189L544,189L544,190L546,190L546,191L556,191L556,192L557,192L557,193L561,193L561,194L567,194L567,196L569,196L569,197L572,197L572,198L577,198L577,199L586,199L586,200L593,200L593,199L595,199L595,201L600,201L600,202L601,202L601,204L604,204L604,205L607,205L607,206L611,206L611,207L617,207L617,206L624,206L624,207L625,207L625,208L627,208L627,207L628,207L628,208L629,208L629,208L633,208L633,209L634,209L634,210L636,210L636,213L641,213L641,214L645,214L645,215L681,215L681,216L702,216L702,216L708,216L708,217L713,217L713,219L720,219L720,220L725,220L725,221L729,221L729,222L733,222L733,223L735,223L735,225L737,225L737,226L750,226L750,227L758,227L758,228L760,228L760,229L767,229" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L136,0L136,16L139,16L139,17L161,17L161,18L175,18L175,17L200,17L200,18L203,18L203,18L213,18L213,31L269,31L269,32L280,32L280,33L284,33L284,34L346,34L346,35L356,35L356,37L374,37L374,37L378,37L378,37L379,37L379,38L382,38L382,39L401,39L401,40L410,40L410,44L431,44L431,46L432,46L432,47L461,47L461,48L481,48L481,49L514,49L514,50L518,50L518,51L524,51L524,52L526,52L526,53L548,53L548,54L564,54L564,55L568,55L568,56L572,56L572,57L573,57L573,58L577,58L577,59L584,59L584,60L585,60L585,61L586,61L586,62L592,62L592,63L593,63L593,64L611,64L611,65L613,65L613,65L617,65L617,64L629,64L629,65L631,65L631,64L634,64L634,65L645,65L645,66L647,66L647,67L660,67L660,68L665,68L665,68L668,68L668,69L669,69L669,70L676,70L676,69L679,69L679,70L680,70L680,70L696,70L696,70L707,70L707,71L708,71L708,71L711,71L711,72L722,72L722,73L724,73L724,74L730,74L730,75L736,75L736,75L753,75L753,76L754,76L754,77L758,77L758,86L759,86L759,87L762,87L762,86L767,86" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L136,0L136,10L140,10L140,10L191,10L191,10L192,10L192,10L194,10L194,10L195,10L195,10L196,10L196,67L210,67L210,68L215,68L215,69L237,69L237,70L243,70L243,71L249,71L249,72L260,72L260,73L282,73L282,74L297,74L297,75L302,75L302,76L312,76L312,78L329,78L329,79L342,79L342,80L348,80L348,81L349,81L349,82L352,82L352,82L354,82L354,82L376,82L376,82L378,82L378,83L380,83L380,84L392,84L392,85L393,85L393,85L394,85L394,84L402,84L402,85L409,85L409,86L410,86L410,87L419,87L419,91L435,91L435,106L445,106L445,107L472,107L472,108L487,108L487,109L495,109L495,110L496,110L496,111L508,111L508,112L546,112L546,113L554,113L554,115L558,115L558,116L564,116L564,117L582,117L582,119L602,119L602,119L604,119L604,120L613,120L613,121L620,121L620,120L623,120L623,121L631,121L631,122L633,122L633,123L636,123L636,127L639,127L639,128L645,128L645,129L646,129L646,130L647,130L647,131L674,131L674,132L676,132L676,131L690,131L690,133L693,133L693,134L699,134L699,135L708,135L708,136L709,136L709,137L711,137L711,139L712,139L712,140L713,140L713,142L720,142L720,143L723,143L723,144L724,144L724,145L725,145L725,146L730,146L730,147L735,147L735,148L744,148L744,149L752,149L752,150L754,150L754,151L759,151L759,150L766,150L766,151L767,151L767,153L767,153" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L136,0L136,38L138,38L138,39L171,39L171,40L193,40L193,41L194,41L194,45L201,45L201,45L280,45L280,46L284,46L284,47L347,47L347,47L378,47L378,47L411,47L411,52L417,52L417,53L431,53L431,53L432,53L432,54L436,54L436,57L492,57L492,58L493,58L493,59L528,59L528,60L539,60L539,61L548,61L548,62L553,62L553,63L557,63L557,64L583,64L583,65L584,65L584,66L585,66L585,67L588,67L588,68L589,68L589,69L617,69L617,69L634,69L634,70L645,70L645,71L647,71L647,72L676,72L676,72L684,72L684,73L696,73L696,72L697,72L697,73L701,73L701,73L709,73L709,73L711,73L711,74L724,74L724,75L736,75L736,75L739,75L739,76L742,76L742,77L750,77L750,79L753,79L753,80L758,80L758,82L759,82L759,83L761,83L761,83L767,83" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L136,0L136,2L470,2L470,2L580,2L580,2L701,2L701,2L734,2L734,2L751,2L751,2L767,2" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.zqop6rp1</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L136,0L136,1L702,1L702,1L724,1L724,1L735,1L735,1L767,1" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0138n5dq</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L138,0L138,1L236,1L236,7L345,7L345,8L396,8L396,9L405,9L405,10L543,10L543,10L618,10L618,10L619,10L619,10L693,10L693,10L694,10L694,10L724,10L724,10L725,10L725,10L748,10L748,11L760,11L760,12L767,12" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L138,0L138,2L170,2L170,3L196,3L196,6L197,6L197,7L244,7L244,8L403,8L403,9L565,9L565,9L566,9L566,11L568,11L568,12L571,12L571,11L588,11L588,12L591,12L591,11L609,11L609,12L697,12L697,13L738,13L738,13L754,13L754,14L767,14" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.5leogx5q</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L138,0L138,7L199,7L199,7L236,7L236,8L246,8L246,9L436,9L436,10L543,10L543,11L585,11L585,12L591,12L591,12L658,12L658,13L728,13L728,14L760,14L760,15L764,15L764,15L767,15" tabindex="0">
						<title>l_r9gn1qpd-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L138,0L138,4L197,4L197,4L210,4L210,5L591,5L591,5L740,5L740,5L767,5" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.z19md2jl</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L138,0L138,1L752,1L752,1L753,1L753,1L767,1" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.z19mo80l</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L221,0L221,6L289,6L289,7L387,7L387,8L404,8L404,9L431,9L431,9L591,9L591,9L602,9L602,10L609,10L609,9L622,9L622,9L636,9L636,9L706,9L706,8L765,8L765,11L767,11" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L221,0L221,21L234,21L234,22L266,22L266,23L316,23L316,24L317,24L317,25L319,25L319,26L328,26L328,26L363,26L363,26L374,26L374,27L400,27L400,27L401,27L401,28L431,28L431,28L454,28L454,29L467,29L467,30L503,30L503,31L506,31L506,32L532,32L532,32L538,32L538,33L548,33L548,34L550,34L550,35L551,35L551,36L575,36L575,37L577,37L577,38L578,38L578,39L579,39L579,39L590,39L590,48L596,48L596,49L597,49L597,50L598,50L598,51L601,51L601,51L604,51L604,50L615,50L615,52L635,52L635,53L704,53L704,53L707,53L707,53L710,53L710,53L711,53L711,53L712,53L712,53L717,53L717,53L718,53L718,53L723,53L723,53L727,53L727,53L728,53L728,53L732,53L732,53L733,53L733,53L736,53L736,53L738,53L738,53L744,53L744,53L746,53L746,53L756,53L756,53L757,53L757,53L759,53L759,53L763,53L763,82L767,82" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L222,0L222,16L386,16L386,16L547,16L547,17L583,17L583,18L602,18L602,18L603,18L603,18L604,18L604,19L616,19L616,19L635,19L635,20L638,20L638,22L700,22L700,22L704,22L704,22L729,22L729,24L734,24L734,24L735,24L735,24L740,24L740,24L744,24L744,24L761,24L761,25L765,25L765,33L767,33" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L222,0L222,7L284,7L284,8L378,8L378,8L431,8L431,8L524,8L524,8L547,8L547,19L557,19L557,20L622,20L622,20L623,20L623,20L624,20L624,20L635,20L635,21L645,21L645,21L652,21L652,22L715,22L715,22L736,22L736,22L738,22L738,23L757,23L757,23L763,23L763,26L767,26" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L222,0L222,7L310,7L310,7L362,7L362,7L381,7L381,7L395,7L395,8L413,8L413,8L431,8L431,8L519,8L519,31L523,31L523,33L525,33L525,34L559,34L559,35L587,35L587,35L601,35L601,34L625,34L625,34L626,34L626,34L635,34L635,35L637,35L637,35L638,35L638,38L704,38L704,38L712,38L712,38L714,38L714,38L724,38L724,39L727,39L727,40L729,40L729,41L730,41L730,41L732,41L732,41L739,41L739,41L742,41L742,40L750,40L750,40L757,40L757,40L760,40L760,40L763,40L763,45L767,45" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L222,0L222,7L282,7L282,8L291,8L291,8L322,8L322,8L375,8L375,8L376,8L376,8L385,8L385,8L431,8L431,8L444,8L444,8L507,8L507,8L519,8L519,38L556,38L556,39L568,39L568,40L569,40L569,41L572,41L572,42L579,42L579,43L584,43L584,44L594,44L594,44L613,44L613,44L616,44L616,47L635,47L635,48L659,48L659,49L684,49L684,50L694,50L694,51L700,51L700,51L714,51L714,52L724,52L724,53L725,53L725,53L726,53L726,54L728,54L728,56L729,56L729,56L732,56L732,56L733,56L733,57L735,57L735,56L745,56L745,57L752,57L752,58L753,58L753,59L765,59L765,59L767,59" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L222,0L222,38L249,38L249,39L251,39L251,40L265,40L265,41L281,41L281,42L282,42L282,43L299,43L299,44L304,44L304,45L308,45L308,46L356,46L356,47L375,47L375,47L385,47L385,48L408,48L408,49L413,49L413,50L418,50L418,49L431,49L431,49L479,49L479,50L480,50L480,51L516,51L516,52L542,52L542,51L546,51L546,53L547,53L547,57L554,57L554,58L556,58L556,59L567,59L567,60L573,60L573,61L575,61L575,62L577,62L577,63L584,63L584,64L586,64L586,65L596,65L596,66L600,66L600,68L601,68L601,69L605,69L605,70L615,70L615,70L623,70L623,71L632,71L632,72L635,72L635,73L636,73L636,72L638,72L638,73L645,73L645,74L650,74L650,75L689,75L689,76L693,76L693,77L694,77L694,79L696,79L696,78L698,78L698,79L699,79L699,80L705,80L705,80L712,80L712,82L713,82L713,83L718,83L718,84L726,84L726,84L738,84L738,85L740,85L740,85L744,85L744,87L748,87L748,90L749,90L749,89L752,89L752,90L760,90L760,92L763,92L763,97L767,97L767,98L767,98" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L222,0L222,11L279,11L279,12L282,12L282,13L318,13L318,13L386,13L386,13L390,13L390,13L413,13L413,13L431,13L431,13L547,13L547,20L590,20L590,30L598,30L598,30L602,30L602,30L635,30L635,31L637,31L637,31L692,31L692,32L696,32L696,32L704,32L704,32L732,32L732,32L733,32L733,33L752,33L752,35L760,35L760,36L763,36L763,40L767,40L767,41L767,41" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L336,0L336,2L592,2L592,2L694,2L694,2L767,2" tabindex="0">
						<title>l_o9xo3rp9-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L344,0L344,2L405,2L405,2L505,2L505,2L593,2L593,2L734,2L734,2L767,2" tabindex="0">
						<title>l_o9xo3rp9-9kv66g32-onv7r45n.810zdxoq</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L344,0L344,3L650,3L650,3L725,3L725,3L735,3L735,3L763,3L763,3L767,3" tabindex="0">
						<title>l_o9xo3rp9-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L374,0L374,1L704,1L704,1L715,1L715,1L767,1" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.5ler7m5q</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L381,0L381,1L545,1L545,1L593,1L593,1L767,1" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.10v3wwpl</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,0L439,0L439,6L515,6L515,7L578,7L578,7L585,7L585,7L598,7L598,8L614,8L614,8L619,8L619,8L653,8L653,8L688,8L688,8L693,8L693,8L703,8L703,9L729,9L729,10L730,10L730,11L732,11L732,11L739,11L739,10L766,10L766,12L767,12" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.qj7zdm3q</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,0L439,0L439,16L515,16L515,17L516,17L516,17L542,17L542,18L546,18L546,19L548,19L548,20L549,20L549,21L551,21L551,21L557,21L557,22L564,22L564,23L568,23L568,24L583,24L583,24L592,24L592,24L598,24L598,25L601,25L601,26L603,26L603,26L616,26L616,26L617,26L617,26L623,26L623,35L642,35L642,36L647,36L647,36L650,36L650,36L660,36L660,37L688,37L688,37L703,37L703,36L709,36L709,37L711,37L711,37L712,37L712,38L714,38L714,39L715,39L715,40L716,40L716,41L717,41L717,42L722,42L722,42L725,42L725,43L728,43L728,43L729,43L729,46L730,46L730,47L731,47L731,47L733,47L733,46L744,46L744,47L749,47L749,48L752,48L752,49L753,49L753,50L754,50L754,51L758,51L758,50L760,50L760,51L763,51L763,52L765,52L765,53L766,53L766,54L767,54" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,0L439,0L439,14L478,14L478,15L480,15L480,15L499,15L499,16L504,16L504,17L594,17L594,17L598,17L598,18L606,18L606,19L608,19L608,20L623,20L623,28L636,28L636,27L647,27L647,27L692,27L692,27L703,27L703,26L708,26L708,27L713,27L713,28L714,28L714,28L717,28L717,28L728,28L728,29L730,29L730,30L731,30L731,31L733,31L733,34L738,34L738,35L747,35L747,35L748,35L748,34L752,34L752,35L753,35L753,36L760,36L760,38L764,38L764,38L766,38L766,40L767,40" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,0L439,0L439,8L525,8L525,8L527,8L527,8L587,8L587,8L598,8L598,8L623,8L623,12L700,12L700,12L709,12L709,12L719,12L719,12L720,12L720,12L725,12L725,12L728,12L728,12L729,12L729,12L730,12L730,12L731,12L731,11L733,11L733,23L744,23L744,24L758,24L758,25L766,25L766,26L767,26" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,0L439,0L439,9L609,9L609,9L622,9L622,13L626,13L626,13L683,13L683,13L703,13L703,12L704,12L704,12L720,12L720,12L737,12L737,12L767,12" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.xqkjmnnl</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,0L439,0L439,8L440,8L440,8L561,8L561,8L597,8L597,8L621,8L621,22L659,22L659,23L669,23L669,23L706,23L706,22L714,22L714,22L716,22L716,22L717,22L717,23L728,23L728,23L729,23L729,24L743,24L743,25L747,25L747,25L767,25" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,0L507,0L507,8L538,8L538,8L556,8L556,8L595,8L595,8L666,8L666,8L670,8L670,8L682,8L682,8L697,8L697,18L699,18L699,24L700,24L700,24L705,24L705,24L729,24L729,25L752,25L752,26L763,26L763,27L767,27" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,0L509,0L509,6L517,6L517,7L527,7L527,7L593,7L593,7L614,7L614,7L703,7L703,6L704,6L704,6L739,6L739,6L767,6" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.p12dx07q</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path d="M0,0L509,0L509,3L555,3L555,3L591,3L591,3L752,3L752,3L767,3" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.1w43556q</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,0L509,0L509,1L562,1L562,1L745,1L745,1L752,1L752,1L767,1" tabindex="0">
						<title>l_495zlx39-9kv66g32-onv7r45n.810zdxoq</title>
					</path>
				</g>
				<g style="--index: 54;">
					<path d="M0,0L509,0L509,2L592,2L592,2L686,2L686,3L696,3L696,3L746,3L746,3L752,3L752,3L767,3" tabindex="0">
						<title>l_495zlx39-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 55;">
					<path d="M0,0L510,0L510,3L533,3L533,3L592,3L592,3L699,3L699,7L703,7L703,8L718,8L718,8L751,8L751,8L767,8" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.qoxdrr4q</title>
					</path>
				</g>
				<g style="--index: 56;">
					<path d="M0,0L510,0L510,2L592,2L592,2L695,2L695,2L767,2" tabindex="0">
						<title>l_495zlx39-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 57;">
					<path d="M0,0L514,0L514,2L594,2L594,2L596,2L596,2L609,2L609,2L625,2L625,2L727,2L727,2L757,2L757,2L760,2L760,2L767,2" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.qj7jxxoq</title>
					</path>
				</g>
				<g style="--index: 58;">
					<path d="M0,0L557,0L557,2L601,2L601,2L647,2L647,2L704,2L704,2L716,2L716,2L727,2L727,13L728,13L728,13L729,13L729,14L748,14L748,13L752,13L752,13L767,13" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
				</g>
				<g style="--index: 59;">
					<path d="M0,0L557,0L557,1L569,1L569,1L579,1L579,1L593,1L593,1L605,1L605,1L608,1L608,1L609,1L609,1L704,1L704,1L726,1L726,4L727,4L727,4L752,4L752,4L767,4" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6e0q</title>
					</path>
				</g>
				<g style="--index: 60;">
					<path d="M0,0L560,0L560,1L612,1L612,1L628,1L628,1L705,1L705,1L721,1L721,1L726,1L726,7L727,7L727,7L741,7L741,7L752,7L752,7L767,7" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.gq7jzvnq</title>
					</path>
				</g>
				<g style="--index: 61;">
					<path d="M0,0L560,0L560,8L588,8L588,8L646,8L646,8L647,8L647,9L704,9L704,9L705,9L705,9L727,9L727,17L767,17" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.5q86rxr1</title>
					</path>
				</g>
				<g style="--index: 62;">
					<path d="M0,0L560,0L560,1L589,1L589,1L602,1L602,1L625,1L625,1L704,1L704,1L717,1L717,1L718,1L718,1L727,1L727,1L767,1" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6ejq</title>
					</path>
				</g>
				<g style="--index: 63;">
					<path d="M0,0L560,0L560,3L587,3L587,3L630,3L630,3L699,3L699,3L704,3L704,3L715,3L715,3L727,3L727,11L752,11L752,10L767,10" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21dzoj3l</title>
					</path>
				</g>
				<g style="--index: 64;">
					<path d="M0,0L579,0L579,8L607,8L607,9L616,9L616,9L702,9L702,9L704,9L704,9L713,9L713,9L715,9L715,9L719,9L719,9L727,9L727,9L728,9L728,24L734,24L734,24L736,24L736,25L738,25L738,24L740,24L740,23L748,23L748,22L749,22L749,22L767,22L767,22L767,22" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyrgl</title>
					</path>
				</g>
				<g style="--index: 65;">
					<path d="M0,0L579,0L579,7L589,7L589,7L615,7L615,8L621,8L621,7L704,7L704,6L705,6L705,6L728,6L728,6L767,6" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21g8owxl</title>
					</path>
				</g>
				<g style="--index: 66;">
					<path d="M0,0L579,0L579,2L582,2L582,2L583,2L583,2L584,2L584,2L588,2L588,2L595,2L595,2L767,2" tabindex="0">
						<title>l_rdqo542w-9kv66g32-onv7r45n.810zdxoq</title>
					</path>
				</g>
				<g style="--index: 67;">
					<path d="M0,0L581,0L581,2L594,2L594,2L728,2L728,4L767,4" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.le2dmv6l</title>
					</path>
				</g>
				<g style="--index: 68;">
					<path d="M0,0L588,0L588,3L594,3L594,3L688,3L688,4L767,4" tabindex="0">
						<title>l_rdqo542w-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 69;">
					<path d="M0,0L590,0L590,2L594,2L594,2L724,2L724,2L737,2L737,2L767,2" tabindex="0">
						<title>l_rdqo542w-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 70;">
					<path d="M0,0L590,0L590,1L728,1L728,6L729,6L729,6L752,6L752,6L766,6L766,5L767,5" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.q5vkg7vl</title>
					</path>
				</g>
				<g style="--index: 71;">
					<path d="M0,0L615,0L615,2L766,2L766,2L767,2" tabindex="0">
						<title>9kv6lno2-wl3v33o8.qyz82z61</title>
					</path>
				</g>
				<g style="--index: 72;">
					<path d="M0,0L710,0L710,2L713,2L713,2L714,2L714,2L717,2L717,2L729,2L729,2L754,2L754,2L759,2L759,3L763,3L763,3L767,3" tabindex="0">
						<title>l_dy1gjkkd-rkl3znrk-wle345e8.q65k767l</title>
					</path>
				</g>
				<g style="--index: 73;">
					<path d="M0,0L710,0L710,1L730,1L730,1L731,1L731,1L732,1L732,2L756,2L756,2L767,2" tabindex="0">
						<title>l_dy1gjkkd-rkl3znrk-wle345e8.lmojn041</title>
					</path>
				</g>
				<g style="--index: 74;">
					<path d="M0,0L718,0L718,1L758,1L758,1L767,1" tabindex="0">
						<title>l_drpxgo6w-rkl3znrk-68kwx3z8.1w4w8x5q</title>
					</path>
				</g>
				<g style="--index: 75;">
					<path d="M0,0L718,0L718,1L733,1L733,1L767,1" tabindex="0">
						<title>l_drpxgo6w-rkl3znrk-68kwx3z8.qoxwn62q</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
