<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player xkon93k8</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2020-07-15</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-31</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">253</text>
		</svg>
		<svg viewBox="0 0 1873 253" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 253) scale(1 -1)" style="--count: 66;">
				<g>
					<rect x="0" y="0" width="1873" height="253"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,13L40,13L40,12L115,12L115,13L131,13L131,13L132,13L132,14L192,14L192,18L199,18L199,18L200,18L200,19L206,19L206,19L207,19L207,20L211,20L211,21L212,21L212,22L213,22L213,21L215,21L215,22L221,22L221,23L230,23L230,24L247,24L247,25L267,25L267,25L275,25L275,26L278,26L278,27L288,27L288,28L290,28L290,29L444,29L444,30L476,30L476,31L547,31L547,32L552,32L552,33L562,33L562,34L563,34L563,35L583,35L583,36L599,36L599,38L603,38L603,39L605,39L605,40L654,40L654,41L685,41L685,42L713,42L713,43L720,43L720,44L724,44L724,45L725,45L725,46L743,46L743,47L756,47L756,48L768,48L768,49L772,49L772,50L783,50L783,51L784,51L784,52L818,52L818,53L837,53L837,54L840,54L840,55L886,55L886,56L927,56L927,57L975,57L975,57L979,57L979,58L990,58L990,59L1019,59L1019,61L1026,61L1026,62L1033,62L1033,63L1068,63L1068,64L1080,64L1080,65L1125,65L1125,66L1131,66L1131,67L1136,67L1136,68L1242,68L1242,69L1249,69L1249,70L1279,70L1279,71L1388,71L1388,72L1399,72L1399,73L1404,73L1404,74L1419,74L1419,75L1432,75L1432,76L1434,76L1434,77L1445,77L1445,78L1451,78L1451,79L1453,79L1453,81L1507,81L1507,82L1537,82L1537,83L1551,83L1551,84L1580,84L1580,85L1596,85L1596,86L1605,86L1605,87L1618,87L1618,88L1621,88L1621,90L1638,90L1638,89L1639,89L1639,91L1644,91L1644,92L1659,92L1659,93L1667,93L1667,94L1674,94L1674,95L1675,95L1675,97L1677,97L1677,98L1680,98L1680,99L1683,99L1683,100L1684,100L1684,101L1689,101L1689,102L1695,102L1695,104L1705,104L1705,105L1725,105L1725,106L1729,106L1729,107L1735,107L1735,108L1739,108L1739,110L1740,110L1740,111L1751,111L1751,112L1753,112L1753,113L1770,113L1770,114L1796,114L1796,113L1814,113L1814,114L1831,114L1831,116L1834,116L1834,116L1853,116L1853,117L1856,117L1856,118L1860,118L1860,119L1863,119L1863,120L1868,120L1868,121L1870,121L1870,120L1873,120" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L6,0L6,1L12,1L12,3L52,3L52,3L68,3L68,3L126,3L126,3L127,3L127,3L128,3L128,4L227,4L227,5L689,5L689,5L690,5L690,6L696,6L696,7L710,7L710,6L717,6L717,6L721,6L721,6L723,6L723,7L1021,7L1021,7L1034,7L1034,8L1194,8L1194,9L1505,9L1505,10L1532,10L1532,11L1537,11L1537,12L1572,12L1572,13L1663,13L1663,14L1707,14L1707,15L1753,15L1753,16L1810,16L1810,17L1822,17L1822,17L1834,17L1834,17L1858,17L1858,17L1865,17L1865,16L1873,16" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L90,0L90,1L177,1L177,1L178,1L178,2L179,2L179,3L254,3L254,3L698,3L698,3L731,3L731,4L1662,4L1662,4L1873,4" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.lmozgg01</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L91,0L91,1L166,1L166,1L167,1L167,2L206,2L206,1L212,1L212,2L767,2L767,2L772,2L772,3L1487,3L1487,4L1651,4L1651,4L1699,4L1699,4L1873,4" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.10v3wwpl</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L104,0L104,7L129,7L129,8L131,8L131,9L135,9L135,10L136,10L136,9L137,9L137,11L138,11L138,12L144,12L144,12L151,12L151,11L152,11L152,12L164,12L164,12L218,12L218,13L232,13L232,12L280,12L280,13L367,13L367,12L368,12L368,14L493,14L493,13L581,13L581,14L596,14L596,13L609,13L609,14L619,14L619,15L622,15L622,16L647,16L647,17L678,17L678,16L693,16L693,17L728,17L728,18L866,18L866,19L879,19L879,20L940,20L940,21L991,21L991,22L1132,22L1132,23L1199,23L1199,23L1493,23L1493,24L1731,24L1731,25L1873,25" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L104,0L104,3L117,3L117,2L123,2L123,3L128,3L128,4L129,4L129,3L130,3L130,4L141,4L141,4L158,4L158,4L214,4L214,5L689,5L689,4L878,4L878,5L995,5L995,5L1194,5L1194,6L1392,6L1392,7L1485,7L1485,8L1537,8L1537,9L1666,9L1666,10L1718,10L1718,10L1734,10L1734,10L1811,10L1811,10L1827,10L1827,10L1831,10L1831,9L1833,9L1833,9L1847,9L1847,9L1858,9L1858,10L1873,10" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.gq7jzvnq</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L106,0L106,4L109,4L109,4L133,4L133,5L134,5L134,4L139,4L139,3L147,3L147,4L151,4L151,5L159,5L159,6L165,6L165,7L168,7L168,8L172,8L172,9L182,9L182,10L185,10L185,11L194,11L194,12L222,12L222,14L223,14L223,13L224,13L224,14L228,14L228,15L257,15L257,14L261,14L261,15L264,15L264,15L305,15L305,16L339,16L339,17L341,17L341,18L357,18L357,17L448,17L448,18L529,18L529,20L558,20L558,21L561,21L561,22L623,22L623,23L660,23L660,24L692,24L692,25L716,25L716,26L728,26L728,27L735,27L735,28L745,28L745,29L768,29L768,30L774,30L774,31L776,31L776,32L1003,32L1003,31L1839,31L1839,32L1873,32" tabindex="0">
						<title>xd17x94d-9l71pv4l.zqo20y2l</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L108,0L108,12L126,12L126,13L128,13L128,13L133,13L133,14L135,14L135,15L152,15L152,16L184,16L184,16L193,16L193,17L231,17L231,18L263,18L263,17L475,17L475,18L533,18L533,19L718,19L718,20L724,20L724,21L744,21L744,22L774,22L774,23L796,23L796,24L798,24L798,25L812,25L812,26L878,26L878,27L909,27L909,27L911,27L911,28L995,28L995,29L1020,29L1020,30L1140,30L1140,31L1157,31L1157,32L1200,32L1200,33L1254,33L1254,34L1328,34L1328,35L1388,35L1388,36L1397,36L1397,37L1428,37L1428,38L1481,38L1481,39L1482,39L1482,40L1491,40L1491,41L1537,41L1537,42L1550,42L1550,43L1613,43L1613,44L1662,44L1662,45L1674,45L1674,46L1675,46L1675,47L1678,47L1678,49L1685,49L1685,50L1690,50L1690,51L1700,51L1700,52L1719,52L1719,52L1720,52L1720,51L1741,51L1741,52L1765,52L1765,53L1790,53L1790,54L1800,54L1800,55L1806,55L1806,56L1820,56L1820,56L1830,56L1830,57L1831,57L1831,58L1832,58L1832,59L1834,59L1834,61L1835,61L1835,62L1838,62L1838,61L1839,61L1839,62L1841,62L1841,61L1851,61L1851,63L1858,63L1858,64L1859,64L1859,65L1873,65" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L108,0L108,6L126,6L126,7L128,7L128,7L135,7L135,8L154,8L154,10L155,10L155,10L159,10L159,11L229,11L229,12L595,12L595,11L700,11L700,11L724,11L724,12L766,12L766,13L872,13L872,13L875,13L875,12L879,12L879,13L938,13L938,14L996,14L996,15L1020,15L1020,16L1131,16L1131,17L1178,17L1178,17L1200,17L1200,18L1328,18L1328,19L1492,19L1492,19L1689,19L1689,20L1708,20L1708,20L1709,20L1709,20L1710,20L1710,21L1741,21L1741,22L1744,22L1744,21L1806,21L1806,21L1810,21L1810,21L1835,21L1835,23L1840,23L1840,23L1841,23L1841,23L1846,23L1846,23L1850,23L1850,23L1867,23L1867,24L1873,24" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L109,0L109,4L135,4L135,5L164,5L164,6L172,6L172,7L176,7L176,6L178,6L178,7L186,7L186,6L193,6L193,7L237,7L237,7L721,7L721,7L724,7L724,8L1090,8L1090,7L1259,7L1259,7L1327,7L1327,8L1395,8L1395,9L1493,9L1493,10L1510,10L1510,11L1537,11L1537,11L1697,11L1697,11L1708,11L1708,12L1728,12L1728,12L1812,12L1812,11L1871,11L1871,10L1873,10" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L109,0L109,3L128,3L128,3L152,3L152,4L174,4L174,5L245,5L245,5L247,5L247,4L1288,4L1288,4L1402,4L1402,5L1537,5L1537,6L1685,6L1685,6L1695,6L1695,6L1721,6L1721,6L1810,6L1810,5L1811,5L1811,5L1873,5" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21g8owxl</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L109,0L109,4L128,4L128,4L129,4L129,5L166,5L166,4L167,4L167,4L168,4L168,5L180,5L180,6L675,6L675,6L899,6L899,6L1493,6L1493,7L1537,7L1537,7L1610,7L1610,7L1615,7L1615,8L1623,8L1623,9L1633,9L1633,10L1695,10L1695,9L1699,9L1699,10L1720,10L1720,11L1727,11L1727,10L1809,10L1809,9L1810,9L1810,9L1845,9L1845,9L1873,9" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.p12dx07q</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L111,0L111,3L135,3L135,5L176,5L176,6L179,6L179,7L296,7L296,8L308,8L308,9L458,9L458,9L478,9L478,10L773,10L773,11L1739,11L1739,11L1873,11" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.814y45w1</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L111,0L111,1L178,1L178,1L179,1L179,2L181,2L181,3L696,3L696,3L1873,3" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.qvv3eeyq</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L111,0L111,3L175,3L175,4L178,4L178,4L179,4L179,5L192,5L192,6L221,6L221,5L1037,5L1037,5L1738,5L1738,5L1873,5" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.ln8rzznl</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L111,0L111,5L128,5L128,6L133,6L133,7L158,7L158,8L185,8L185,8L187,8L187,7L192,7L192,10L219,10L219,9L239,9L239,9L254,9L254,10L255,10L255,10L419,10L419,11L724,11L724,12L783,12L783,12L810,12L810,13L816,13L816,12L879,12L879,13L990,13L990,14L1046,14L1046,15L1064,15L1064,16L1131,16L1131,17L1170,17L1170,18L1328,18L1328,19L1390,19L1390,20L1484,20L1484,21L1537,21L1537,22L1630,22L1630,23L1663,23L1663,24L1728,24L1728,24L1729,24L1729,24L1730,24L1730,25L1741,25L1741,26L1751,26L1751,26L1758,26L1758,27L1821,27L1821,28L1842,28L1842,28L1844,28L1844,29L1863,29L1863,29L1873,29" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L112,0L112,1L209,1L209,2L604,2L604,2L705,2L705,2L1615,2L1615,2L1661,2L1661,2L1697,2L1697,2L1858,2L1858,2L1873,2" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.1w43556q</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L118,0L118,3L131,3L131,4L163,4L163,4L178,4L178,5L267,5L267,5L336,5L336,6L723,6L723,7L760,7L760,8L894,8L894,9L942,9L942,10L950,10L950,11L958,11L958,12L988,12L988,13L1238,13L1238,14L1257,14L1257,13L1395,13L1395,14L1502,14L1502,15L1537,15L1537,16L1644,16L1644,18L1685,18L1685,19L1713,19L1713,20L1722,20L1722,21L1808,21L1808,22L1810,22L1810,23L1814,23L1814,22L1819,22L1819,22L1820,22L1820,21L1821,21L1821,21L1825,21L1825,21L1833,21L1833,21L1834,21L1834,20L1840,20L1840,20L1842,20L1842,20L1846,20L1846,19L1854,19L1854,18L1855,18L1855,18L1873,18L1873,18L1873,18" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyrgl</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L122,0L122,3L128,3L128,3L142,3L142,3L173,3L173,3L198,3L198,5L231,5L231,6L264,6L264,5L319,5L319,4L1182,4L1182,5L1507,5L1507,7L1837,7L1837,8L1848,8L1848,10L1870,10L1870,11L1873,11" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.jq606z3q</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L127,0L127,4L129,4L129,3L137,3L137,3L148,3L148,4L158,4L158,4L167,4L167,4L192,4L192,5L193,5L193,4L225,4L225,4L886,4L886,5L1044,5L1044,5L1191,5L1191,6L1226,6L1226,7L1391,7L1391,8L1666,8L1666,8L1812,8L1812,8L1842,8L1842,9L1854,9L1854,9L1864,9L1864,9L1873,9" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.rqvp5e7q</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L129,0L129,1L278,1L278,1L1218,1L1218,1L1694,1L1694,1L1700,1L1700,1L1873,1" tabindex="0">
						<title>l_rdqo542w-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L129,0L129,1L202,1L202,2L774,2L774,2L1687,2L1687,3L1700,3L1700,3L1834,3L1834,2L1873,2" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.le2dmv6l</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L129,0L129,4L142,4L142,4L171,4L171,3L172,3L172,4L214,4L214,5L558,5L558,5L989,5L989,5L1537,5L1537,6L1663,6L1663,7L1675,7L1675,8L1685,8L1685,9L1699,9L1699,10L1711,10L1711,11L1714,11L1714,11L1715,11L1715,11L1734,11L1734,10L1810,10L1810,9L1833,9L1833,9L1858,9L1858,9L1873,9" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6e0q</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L130,0L130,1L275,1L275,1L1615,1L1615,1L1698,1L1698,1L1852,1L1852,1L1858,1L1858,1L1873,1" tabindex="0">
						<title>l_495zlx39-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L135,0L135,9L168,9L168,10L226,10L226,10L229,10L229,11L254,11L254,11L255,11L255,12L566,12L566,13L620,13L620,14L681,14L681,13L688,13L688,14L706,14L706,15L724,15L724,16L725,16L725,17L746,17L746,18L752,18L752,19L782,19L782,19L787,19L787,20L855,20L855,21L861,21L861,22L968,22L968,23L1020,23L1020,24L1095,24L1095,25L1289,25L1289,26L1328,26L1328,27L1385,27L1385,28L1388,28L1388,29L1424,29L1424,30L1492,30L1492,30L1496,30L1496,31L1518,31L1518,30L1519,30L1519,31L1537,31L1537,32L1704,32L1704,32L1708,32L1708,32L1741,32L1741,33L1743,33L1743,33L1798,33L1798,34L1802,34L1802,34L1810,34L1810,34L1838,34L1838,34L1839,34L1839,35L1858,35L1858,37L1866,37L1866,38L1869,38L1869,37L1873,37L1873,38L1873,38" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L135,0L135,12L221,12L221,13L224,13L224,12L232,12L232,11L254,11L254,12L597,12L597,13L629,13L629,14L655,14L655,15L682,15L682,15L724,15L724,16L742,16L742,17L744,17L744,18L748,18L748,19L750,19L750,20L782,20L782,21L812,21L812,22L859,22L859,23L866,23L866,24L878,24L878,25L930,25L930,26L942,26L942,27L983,27L983,28L989,28L989,29L992,29L992,29L999,29L999,30L1008,30L1008,31L1021,31L1021,32L1050,32L1050,33L1062,33L1062,34L1131,34L1131,35L1155,35L1155,36L1164,36L1164,37L1200,37L1200,38L1203,38L1203,39L1205,39L1205,40L1246,40L1246,41L1328,41L1328,42L1355,42L1355,43L1357,43L1357,44L1371,44L1371,45L1387,45L1387,46L1388,46L1388,47L1405,47L1405,48L1410,48L1410,49L1414,49L1414,50L1462,50L1462,51L1481,51L1481,52L1491,52L1491,53L1514,53L1514,54L1519,54L1519,55L1537,55L1537,56L1585,56L1585,57L1586,57L1586,58L1622,58L1622,59L1652,59L1652,61L1660,61L1660,62L1662,62L1662,63L1673,63L1673,64L1679,64L1679,65L1681,65L1681,66L1683,66L1683,67L1690,67L1690,68L1692,68L1692,69L1702,69L1702,70L1706,70L1706,73L1707,73L1707,74L1711,74L1711,75L1721,75L1721,75L1724,75L1724,74L1729,74L1729,75L1738,75L1738,76L1741,76L1741,77L1751,77L1751,78L1756,78L1756,79L1795,79L1795,80L1799,80L1799,81L1800,81L1800,83L1804,83L1804,84L1805,84L1805,85L1806,85L1806,83L1811,83L1811,84L1818,84L1818,86L1819,86L1819,87L1824,87L1824,88L1832,88L1832,88L1833,88L1833,87L1844,87L1844,88L1846,88L1846,88L1850,88L1850,90L1854,90L1854,93L1858,93L1858,94L1866,94L1866,96L1869,96L1869,95L1873,95L1873,96L1873,96" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L135,0L135,9L140,9L140,8L154,8L154,8L160,8L160,7L235,7L235,6L337,6L337,7L608,7L608,8L700,8L700,8L783,8L783,8L878,8L878,9L879,9L879,10L923,10L923,11L994,11L994,12L1295,12L1295,13L1386,13L1386,14L1387,14L1387,15L1396,15L1396,16L1434,16L1434,17L1445,17L1445,18L1483,18L1483,17L1491,17L1491,18L1501,18L1501,18L1545,18L1545,19L1621,19L1621,20L1622,20L1622,21L1648,21L1648,22L1652,22L1652,23L1654,23L1654,24L1655,24L1655,25L1657,25L1657,26L1663,26L1663,27L1670,27L1670,28L1674,28L1674,29L1689,29L1689,30L1698,30L1698,31L1704,31L1704,32L1707,32L1707,33L1709,33L1709,33L1722,33L1722,33L1723,33L1723,33L1729,33L1729,32L1748,32L1748,32L1753,32L1753,32L1756,32L1756,32L1766,32L1766,33L1794,33L1794,33L1815,33L1815,34L1817,34L1817,34L1818,34L1818,35L1820,35L1820,36L1821,36L1821,37L1822,37L1822,38L1823,38L1823,39L1828,39L1828,39L1831,39L1831,40L1834,40L1834,40L1835,40L1835,41L1836,41L1836,42L1837,42L1837,42L1850,42L1850,42L1853,42L1853,41L1855,41L1855,42L1858,42L1858,43L1859,43L1859,44L1860,44L1860,45L1866,45L1866,46L1869,46L1869,47L1871,47L1871,48L1872,48L1872,49L1873,49" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L136,0L136,7L151,7L151,8L168,8L168,8L226,8L226,9L844,9L844,9L932,9L932,10L1006,10L1006,11L1007,11L1007,12L1038,12L1038,13L1201,13L1201,14L1353,14L1353,15L1363,15L1363,16L1396,16L1396,17L1533,17L1533,17L1543,17L1543,18L1545,18L1545,19L1631,19L1631,20L1633,20L1633,20L1693,20L1693,21L1704,21L1704,21L1806,21L1806,22L1809,22L1809,21L1815,21L1815,21L1816,21L1816,20L1825,20L1825,20L1826,20L1826,20L1831,20L1831,20L1834,20L1834,20L1835,20L1835,20L1836,20L1836,20L1837,20L1837,19L1839,19L1839,18L1850,18L1850,19L1864,19L1864,20L1872,20L1872,21L1873,21" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L136,0L136,3L147,3L147,4L171,4L171,5L224,5L224,4L422,4L422,3L845,3L845,3L1242,3L1242,4L1808,4L1808,5L1830,5L1830,5L1841,5L1841,6L1842,6L1842,5L1873,5" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0138n5dq</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L140,0L140,3L160,3L160,4L171,4L171,3L172,3L172,3L193,3L193,4L206,4L206,5L601,5L601,5L1061,5L1061,6L1244,6L1244,7L1697,7L1697,7L1873,7" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.z19md2jl</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L142,0L142,5L147,5L147,4L169,4L169,5L236,5L236,6L596,6L596,6L708,6L708,6L1006,6L1006,6L1417,6L1417,7L1537,7L1537,8L1655,8L1655,9L1666,9L1666,10L1693,10L1693,11L1736,11L1736,12L1805,12L1805,12L1810,12L1810,11L1821,11L1821,12L1858,12L1858,11L1873,11" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21dzoj3l</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L157,0L157,6L163,6L163,6L172,6L172,5L173,5L173,6L180,6L180,7L280,7L280,7L878,7L878,8L879,8L879,9L958,9L958,10L1029,10L1029,11L1296,11L1296,12L1394,12L1394,13L1483,13L1483,14L1537,14L1537,15L1545,15L1545,16L1715,16L1715,16L1732,16L1732,17L1789,17L1789,17L1809,17L1809,16L1810,16L1810,16L1826,16L1826,17L1843,17L1843,17L1871,17L1871,16L1873,16" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.xqkjmnnl</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L157,0L157,10L230,10L230,11L255,11L255,10L341,10L341,11L623,11L623,12L687,12L687,13L688,13L688,14L715,14L715,14L724,14L724,15L729,15L729,16L820,16L820,17L825,17L825,18L879,18L879,19L881,19L881,20L886,20L886,21L994,21L994,21L1020,21L1020,22L1025,22L1025,23L1057,23L1057,24L1194,24L1194,25L1215,25L1215,26L1266,26L1266,27L1328,27L1328,28L1416,28L1416,29L1468,29L1468,30L1487,30L1487,30L1492,30L1492,29L1501,29L1501,30L1519,30L1519,30L1537,30L1537,31L1625,31L1625,30L1629,30L1629,32L1631,32L1631,33L1665,33L1665,34L1693,34L1693,34L1707,34L1707,33L1731,33L1731,33L1732,33L1732,33L1741,33L1741,34L1743,34L1743,34L1810,34L1810,34L1818,34L1818,34L1820,34L1820,34L1830,34L1830,35L1833,35L1833,35L1835,35L1835,36L1836,36L1836,36L1838,36L1838,36L1845,36L1845,36L1848,36L1848,35L1856,35L1856,35L1863,35L1863,35L1866,35L1866,35L1873,35" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L160,0L160,8L170,8L170,8L185,8L185,7L193,7L193,8L597,8L597,7L608,7L608,8L679,8L679,8L688,8L688,9L753,9L753,10L878,10L878,11L879,11L879,12L882,12L882,13L886,13L886,14L973,14L973,15L980,15L980,15L1126,15L1126,16L1243,16L1243,17L1388,17L1388,18L1393,18L1393,19L1395,19L1395,20L1416,20L1416,21L1511,21L1511,22L1519,22L1519,23L1537,23L1537,24L1545,24L1545,25L1577,25L1577,24L1584,24L1584,25L1586,25L1586,26L1605,26L1605,27L1610,27L1610,28L1700,28L1700,29L1704,29L1704,30L1712,30L1712,31L1714,31L1714,32L1742,32L1742,31L1753,31L1753,32L1798,32L1798,32L1806,32L1806,31L1809,31L1809,30L1814,30L1814,31L1819,31L1819,32L1820,32L1820,32L1823,32L1823,32L1834,32L1834,33L1836,33L1836,34L1837,34L1837,35L1844,35L1844,36L1853,36L1853,37L1854,37L1854,36L1858,36L1858,37L1859,37L1859,38L1866,38L1866,40L1870,40L1870,40L1872,40L1872,42L1873,42" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L161,0L161,7L226,7L226,7L227,7L227,7L328,7L328,8L609,8L609,9L619,9L619,10L686,10L686,10L784,10L784,11L847,11L847,11L880,11L880,12L923,12L923,13L933,13L933,14L951,14L951,15L959,15L959,16L1136,16L1136,17L1159,17L1159,18L1205,18L1205,19L1269,19L1269,20L1294,20L1294,21L1312,21L1312,22L1313,22L1313,21L1387,21L1387,22L1398,22L1398,23L1433,23L1433,24L1519,24L1519,25L1521,25L1521,26L1537,26L1537,27L1545,27L1545,28L1546,28L1546,28L1667,28L1667,29L1703,29L1703,29L1765,29L1765,30L1775,30L1775,31L1812,31L1812,30L1820,30L1820,30L1822,30L1822,31L1823,31L1823,32L1834,32L1834,33L1835,33L1835,34L1841,34L1841,33L1849,33L1849,34L1853,34L1853,34L1873,34" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L161,0L161,3L1696,3L1696,4L1700,4L1700,4L1830,4L1830,4L1843,4L1843,4L1873,4" tabindex="0">
						<title>l_rdqo542w-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L163,0L163,13L171,13L171,13L180,13L180,14L206,14L206,15L227,15L227,14L255,14L255,15L259,15L259,14L275,14L275,15L281,15L281,17L444,17L444,18L510,18L510,19L542,19L542,20L606,20L606,21L634,21L634,22L662,22L662,23L724,23L724,24L734,24L734,25L743,25L743,26L756,26L756,27L759,27L759,28L769,28L769,29L771,29L771,30L786,30L786,30L795,30L795,31L843,31L843,32L844,32L844,33L850,33L850,34L855,34L855,35L917,35L917,36L924,36L924,37L938,37L938,38L950,38L950,39L977,39L977,41L991,41L991,42L1014,42L1014,43L1059,43L1059,44L1066,44L1066,45L1075,45L1075,47L1091,47L1091,48L1124,48L1124,49L1139,49L1139,50L1201,50L1201,51L1242,51L1242,52L1244,52L1244,53L1277,53L1277,54L1299,54L1299,55L1307,55L1307,56L1308,56L1308,55L1386,55L1386,56L1390,56L1390,57L1453,57L1453,58L1484,58L1484,59L1523,59L1523,60L1537,60L1537,61L1598,61L1598,62L1599,62L1599,63L1634,63L1634,64L1645,64L1645,65L1654,65L1654,66L1659,66L1659,67L1663,67L1663,68L1689,68L1689,69L1690,69L1690,70L1691,70L1691,71L1694,71L1694,72L1695,72L1695,73L1723,73L1723,73L1740,73L1740,74L1751,74L1751,75L1753,75L1753,76L1782,76L1782,76L1790,76L1790,77L1803,77L1803,78L1807,78L1807,78L1815,78L1815,79L1817,79L1817,80L1830,80L1830,81L1842,81L1842,81L1845,81L1845,82L1848,82L1848,83L1859,83L1859,84L1865,84L1865,85L1867,85L1867,85L1873,85" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L166,0L166,2L351,2L351,2L1873,2" tabindex="0">
						<title>xd1v018d-68k7x44l.zqo74r41</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L166,0L166,2L177,2L177,3L696,3L696,3L1611,3L1611,3L1616,3L1616,4L1698,4L1698,4L1801,4L1801,4L1873,4" tabindex="0">
						<title>l_495zlx39-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L167,0L167,2L275,2L275,1L1873,1" tabindex="0">
						<title>7dg65oxk-r8r1zm0n.gq7dw7vq</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L169,0L169,7L226,7L226,6L236,6L236,7L713,7L713,7L995,7L995,7L1043,7L1043,8L1392,8L1392,9L1398,9L1398,10L1484,10L1484,11L1496,11L1496,12L1537,12L1537,13L1621,13L1621,14L1636,14L1636,15L1666,15L1666,16L1694,16L1694,17L1752,17L1752,18L1753,18L1753,19L1810,19L1810,18L1811,18L1811,18L1873,18" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.5q86rxr1</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L171,0L171,9L180,9L180,10L206,10L206,10L212,10L212,11L213,11L213,10L214,10L214,11L280,11L280,11L720,11L720,12L724,12L724,13L743,13L743,14L755,14L755,15L769,15L769,16L773,16L773,17L784,17L784,18L787,18L787,19L849,19L849,20L876,20L876,21L888,21L888,21L924,21L924,22L941,22L941,23L965,23L965,24L977,24L977,26L991,26L991,27L1045,27L1045,27L1074,27L1074,28L1087,28L1087,29L1092,29L1092,30L1235,30L1235,31L1242,31L1242,32L1245,32L1245,33L1267,33L1267,34L1306,34L1306,35L1309,35L1309,36L1375,36L1375,37L1386,37L1386,38L1390,38L1390,39L1452,39L1452,40L1462,40L1462,42L1484,42L1484,42L1485,42L1485,43L1488,43L1488,44L1507,44L1507,45L1516,45L1516,46L1537,46L1537,48L1567,48L1567,49L1587,49L1587,50L1620,50L1620,51L1624,51L1624,52L1630,52L1630,53L1632,53L1632,54L1654,54L1654,55L1670,55L1670,56L1674,56L1674,57L1678,57L1678,58L1679,58L1679,59L1683,59L1683,60L1690,60L1690,61L1691,61L1691,62L1692,62L1692,63L1698,63L1698,64L1699,64L1699,65L1717,65L1717,66L1719,66L1719,66L1723,66L1723,65L1735,65L1735,66L1737,66L1737,65L1740,65L1740,66L1751,66L1751,67L1753,67L1753,68L1766,68L1766,69L1771,69L1771,69L1774,69L1774,70L1775,70L1775,71L1782,71L1782,70L1785,70L1785,71L1786,71L1786,71L1802,71L1802,71L1813,71L1813,72L1814,72L1814,72L1817,72L1817,73L1828,73L1828,74L1830,74L1830,75L1836,75L1836,76L1842,76L1842,76L1859,76L1859,77L1860,77L1860,78L1864,78L1864,77L1865,77L1865,78L1873,78" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L175,0L175,4L222,4L222,5L596,5L596,5L1011,5L1011,5L1515,5L1515,6L1537,6L1537,7L1666,7L1666,8L1695,8L1695,9L1708,9L1708,9L1731,9L1731,10L1810,10L1810,10L1823,10L1823,11L1824,11L1824,11L1873,11" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6ejq</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L185,0L185,3L209,3L209,5L210,5L210,7L221,7L221,7L223,7L223,7L261,7L261,8L288,8L288,9L292,9L292,10L370,10L370,11L391,11L391,12L421,12L421,13L480,13L480,14L617,14L617,15L654,15L654,16L670,16L670,17L720,17L720,18L775,18L775,19L878,19L878,20L988,20L988,21L1104,21L1104,22L1112,22L1112,23L1856,23L1856,24L1873,24" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.jq6d86v1</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,0L193,0L193,20L195,20L195,19L196,19L196,19L222,19L222,19L230,19L230,20L281,20L281,21L284,21L284,22L369,22L369,24L450,24L450,23L481,23L481,24L507,24L507,25L510,25L510,26L511,26L511,27L536,27L536,28L566,28L566,29L567,29L567,30L595,30L595,31L600,31L600,32L619,32L619,33L635,33L635,34L655,34L655,35L660,35L660,36L664,36L664,37L682,37L682,38L684,38L684,39L696,39L696,40L723,40L723,41L743,41L743,42L748,42L748,43L765,43L765,44L786,44L786,45L788,45L788,46L792,46L792,47L854,47L854,48L860,48L860,49L924,49L924,50L969,50L969,51L974,51L974,51L977,51L977,52L979,52L979,53L990,53L990,56L1019,56L1019,57L1028,57L1028,58L1030,58L1030,59L1033,59L1033,60L1047,60L1047,62L1053,62L1053,63L1061,63L1061,64L1072,64L1072,65L1091,65L1091,66L1099,66L1099,67L1103,67L1103,69L1116,69L1116,70L1119,70L1119,71L1125,71L1125,72L1131,72L1131,73L1136,73L1136,74L1152,74L1152,75L1166,75L1166,76L1179,76L1179,77L1180,77L1180,78L1183,78L1183,79L1189,79L1189,80L1242,80L1242,81L1246,81L1246,82L1297,82L1297,83L1298,83L1298,84L1300,84L1300,85L1301,85L1301,86L1316,86L1316,87L1321,87L1321,88L1343,88L1343,89L1349,89L1349,90L1355,90L1355,91L1366,91L1366,92L1388,92L1388,93L1403,93L1403,94L1408,94L1408,95L1418,95L1418,97L1435,97L1435,98L1448,98L1448,99L1454,99L1454,100L1455,100L1455,101L1458,101L1458,102L1460,102L1460,103L1482,103L1482,104L1484,104L1484,105L1486,105L1486,106L1498,106L1498,107L1499,107L1499,108L1508,108L1508,109L1515,109L1515,110L1516,110L1516,111L1541,111L1541,112L1551,112L1551,113L1578,113L1578,115L1593,115L1593,116L1601,116L1601,117L1602,117L1602,118L1614,118L1614,119L1652,119L1652,120L1660,120L1660,122L1664,122L1664,123L1670,123L1670,124L1688,124L1688,126L1708,126L1708,126L1710,126L1710,127L1714,127L1714,126L1719,126L1719,127L1726,127L1726,126L1729,126L1729,127L1737,127L1737,128L1739,128L1739,129L1745,129L1745,130L1751,130L1751,131L1752,131L1752,132L1753,132L1753,133L1780,133L1780,134L1782,134L1782,133L1796,133L1796,135L1799,135L1799,136L1805,136L1805,137L1814,137L1814,138L1815,138L1815,139L1817,139L1817,141L1818,141L1818,142L1819,142L1819,144L1826,144L1826,145L1829,145L1829,146L1830,146L1830,147L1831,147L1831,148L1836,148L1836,149L1841,149L1841,150L1850,150L1850,151L1858,151L1858,152L1860,152L1860,153L1872,153L1872,154L1873,154L1873,156L1873,156" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,0L196,0L196,6L393,6L393,6L476,6L476,7L629,7L629,8L702,8L702,9L703,9L703,9L727,9L727,8L947,8L947,9L950,9L950,10L1044,10L1044,11L1055,11L1055,12L1061,12L1061,14L1065,14L1065,14L1068,14L1068,16L1074,16L1074,15L1095,15L1095,16L1165,16L1165,16L1537,16L1537,17L1601,17L1601,17L1613,17L1613,18L1644,18L1644,19L1662,19L1662,20L1667,20L1667,19L1701,19L1701,20L1772,20L1772,20L1776,20L1776,20L1788,20L1788,20L1803,20L1803,19L1805,19L1805,18L1806,18L1806,18L1809,18L1809,17L1811,17L1811,17L1835,17L1835,18L1858,18L1858,18L1869,18L1869,19L1873,19" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,0L196,0L196,24L210,24L210,25L227,25L227,26L230,26L230,27L231,27L231,26L265,26L265,27L269,27L269,28L273,28L273,29L287,29L287,30L293,30L293,31L299,31L299,32L323,32L323,33L337,33L337,34L342,34L342,35L350,35L350,36L368,36L368,37L371,37L371,38L387,38L387,37L450,37L450,38L459,38L459,39L470,39L470,40L473,40L473,42L494,42L494,43L506,43L506,44L509,44L509,45L525,45L525,46L544,46L544,47L548,47L548,48L549,48L549,49L560,49L560,50L563,50L563,51L575,51L575,52L578,52L578,53L583,53L583,54L590,54L590,55L592,55L592,56L599,56L599,57L601,57L601,58L606,58L606,59L608,59L608,60L609,60L609,61L613,61L613,62L616,62L616,63L631,63L631,64L646,64L646,65L654,65L654,67L685,67L685,68L686,68L686,69L687,69L687,70L690,70L690,71L692,71L692,72L720,72L720,73L722,73L722,74L723,74L723,73L724,73L724,74L728,74L728,76L731,76L731,77L732,77L732,78L733,78L733,79L743,79L743,81L761,81L761,82L763,82L763,83L766,83L766,84L768,84L768,86L770,86L770,87L773,87L773,89L775,89L775,90L780,90L780,92L788,92L788,93L789,93L789,94L793,94L793,95L796,95L796,96L799,96L799,97L804,97L804,98L814,98L814,99L816,99L816,100L818,100L818,101L819,101L819,102L821,102L821,103L822,103L822,104L844,104L844,105L851,105L851,106L868,106L868,107L872,107L872,108L876,108L876,109L880,109L880,110L886,110L886,111L899,111L899,112L904,112L904,113L909,113L909,114L917,114L917,115L918,115L918,116L923,116L923,117L936,117L936,118L941,118L941,119L943,119L943,121L947,121L947,123L948,123L948,124L957,124L957,125L965,125L965,126L970,126L970,127L975,127L975,128L979,128L979,129L990,129L990,130L991,130L991,131L995,131L995,132L999,132L999,133L1001,133L1001,134L1004,134L1004,135L1005,135L1005,136L1025,136L1025,137L1026,137L1026,138L1033,138L1033,139L1035,139L1035,140L1040,140L1040,141L1047,141L1047,142L1048,142L1048,143L1050,143L1050,144L1060,144L1060,145L1061,145L1061,145L1068,145L1068,144L1074,144L1074,145L1081,145L1081,146L1084,146L1084,147L1104,147L1104,148L1115,148L1115,149L1156,149L1156,150L1168,150L1168,151L1189,151L1189,152L1195,152L1195,153L1201,153L1201,155L1207,155L1207,156L1215,156L1215,157L1242,157L1242,158L1271,158L1271,159L1296,159L1296,160L1338,160L1338,161L1339,161L1339,162L1359,162L1359,163L1362,163L1362,164L1369,164L1369,165L1394,165L1394,166L1404,166L1404,167L1406,167L1406,168L1412,168L1412,169L1442,169L1442,170L1468,170L1468,172L1475,172L1475,173L1483,173L1483,174L1496,174L1496,175L1497,175L1497,176L1504,176L1504,177L1509,177L1509,178L1513,178L1513,179L1515,179L1515,180L1525,180L1525,181L1537,181L1537,182L1545,182L1545,183L1565,183L1565,184L1570,184L1570,185L1571,185L1571,187L1586,187L1586,188L1598,188L1598,189L1604,189L1604,190L1607,190L1607,191L1613,191L1613,192L1616,192L1616,193L1644,193L1644,194L1650,194L1650,195L1652,195L1652,196L1662,196L1662,197L1663,197L1663,198L1667,198L1667,199L1673,199L1673,201L1675,201L1675,202L1678,202L1678,203L1683,203L1683,204L1692,204L1692,205L1701,205L1701,207L1706,207L1706,208L1707,208L1707,210L1710,210L1710,211L1713,211L1713,212L1717,212L1717,213L1727,213L1727,212L1730,212L1730,213L1731,213L1731,214L1733,214L1733,215L1734,215L1734,216L1735,216L1735,216L1739,216L1739,217L1740,217L1740,218L1742,218L1742,219L1747,219L1747,220L1751,220L1751,221L1787,221L1787,222L1808,222L1808,223L1814,223L1814,224L1819,224L1819,226L1826,226L1826,227L1831,227L1831,228L1835,228L1835,229L1839,229L1839,230L1841,230L1841,232L1843,232L1843,233L1856,233L1856,234L1864,234L1864,235L1866,235L1866,236L1873,236" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,0L197,0L197,5L271,5L271,5L1012,5L1012,6L1061,6L1061,7L1153,7L1153,8L1198,8L1198,9L1244,9L1244,10L1352,10L1352,11L1542,11L1542,12L1649,12L1649,13L1691,13L1691,14L1697,14L1697,14L1764,14L1764,15L1834,15L1834,16L1866,16L1866,17L1870,17L1870,17L1873,17" tabindex="0">
						<title>l_r9gn1qpd-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,0L197,0L197,3L237,3L237,4L272,4L272,4L1442,4L1442,5L1698,5L1698,5L1800,5L1800,5L1873,5" tabindex="0">
						<title>l_o9xo3rp9-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,0L197,0L197,6L1450,6L1450,7L1756,7L1756,8L1831,8L1831,8L1841,8L1841,8L1869,8L1869,8L1873,8" tabindex="0">
						<title>l_o9xo3rp9-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,0L197,0L197,11L231,11L231,12L264,12L264,12L337,12L337,13L457,13L457,14L472,14L472,15L602,15L602,16L604,16L604,17L664,17L664,18L718,18L718,19L762,19L762,20L797,20L797,21L852,21L852,22L888,22L888,23L895,23L895,24L950,24L950,25L955,25L955,26L956,26L956,27L957,27L957,28L959,28L959,29L979,29L979,30L985,30L985,31L995,31L995,32L996,32L996,33L1020,33L1020,34L1021,34L1021,35L1045,35L1045,36L1054,36L1054,37L1068,37L1068,38L1096,38L1096,39L1130,39L1130,40L1175,40L1175,41L1243,41L1243,42L1256,42L1256,41L1327,41L1327,42L1340,42L1340,43L1372,43L1372,44L1422,44L1422,45L1423,45L1423,46L1425,46L1425,47L1434,47L1434,48L1469,48L1469,49L1480,49L1480,50L1506,50L1506,51L1507,51L1507,53L1537,53L1537,54L1560,54L1560,55L1573,55L1573,56L1609,56L1609,57L1612,57L1612,58L1638,58L1638,59L1644,59L1644,60L1654,60L1654,61L1656,61L1656,62L1657,62L1657,63L1681,63L1681,64L1683,64L1683,65L1684,65L1684,66L1685,66L1685,67L1702,67L1702,68L1703,68L1703,69L1704,69L1704,70L1707,70L1707,71L1741,71L1741,72L1810,72L1810,73L1813,73L1813,72L1816,72L1816,73L1817,73L1817,73L1818,73L1818,73L1823,73L1823,74L1824,74L1824,75L1829,75L1829,76L1833,76L1833,77L1834,77L1834,77L1838,77L1838,77L1839,77L1839,78L1842,78L1842,78L1844,78L1844,79L1850,79L1850,79L1852,79L1852,79L1862,79L1862,80L1863,80L1863,81L1865,81L1865,82L1869,82L1869,81L1873,81" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,0L197,0L197,7L452,7L452,6L788,6L788,7L1060,7L1060,8L1244,8L1244,9L1451,9L1451,10L1502,10L1502,11L1511,11L1511,12L1649,12L1649,13L1724,13L1724,14L1725,14L1725,15L1799,15L1799,15L1800,15L1800,15L1830,15L1830,15L1831,15L1831,16L1854,16L1854,17L1866,17L1866,18L1873,18" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path dtabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,0L199,0L199,11L221,11L221,11L898,11L898,11L1000,11L1000,12L1088,12L1088,12L1242,12L1242,13L1360,13L1360,12L1493,12L1493,13L1537,13L1537,13L1586,13L1586,14L1687,14L1687,15L1693,15L1693,16L1703,16L1703,17L1714,17L1714,17L1717,17L1717,17L1718,17L1718,16L1720,16L1720,17L1740,17L1740,18L1751,18L1751,19L1759,19L1759,20L1783,20L1783,21L1810,21L1810,21L1815,21L1815,21L1823,21L1823,22L1847,22L1847,23L1859,23L1859,24L1870,24L1870,23L1873,23" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 54;">
					<path d="M0,0L199,0L199,3L200,3L200,2L672,2L672,2L1827,2L1827,2L1851,2L1851,2L1860,2L1860,2L1873,2" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.5lmk0gjq</title>
					</path>
				</g>
				<g style="--index: 55;">
					<path d="M0,0L200,0L200,4L211,4L211,5L662,5L662,6L809,6L809,6L816,6L816,5L1741,5L1741,6L1851,6L1851,5L1872,5L1872,6L1873,6" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.81wpx5oq</title>
					</path>
				</g>
				<g style="--index: 56;">
					<path d="M0,0L212,0L212,2L225,2L225,2L974,2L974,2L1061,2L1061,4L1068,4L1068,3L1242,3L1242,4L1697,4L1697,4L1873,4" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.810zdxoq</title>
					</path>
				</g>
				<g style="--index: 57;">
					<path d="M0,0L259,0L259,5L289,5L289,6L391,6L391,7L844,7L844,9L977,9L977,10L1132,10L1132,11L1856,11L1856,12L1873,12" tabindex="0">
						<title>rkl9qwrk-6njkg4el.z19p2o8l</title>
					</path>
				</g>
				<g style="--index: 58;">
					<path d="M0,0L1060,0L1060,7L1172,7L1172,7L1244,7L1244,8L1276,8L1276,9L1350,9L1350,10L1509,10L1509,11L1671,11L1671,12L1674,12L1674,13L1694,13L1694,14L1697,14L1697,13L1715,13L1715,14L1803,14L1803,15L1844,15L1844,15L1860,15L1860,16L1873,16" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.5leogx5q</title>
					</path>
				</g>
				<g style="--index: 59;">
					<path d="M0,0L1060,0L1060,2L1062,2L1062,2L1088,2L1088,3L1143,3L1143,4L1378,4L1378,5L1449,5L1449,6L1451,6L1451,7L1512,7L1512,7L1523,7L1523,8L1537,8L1537,8L1566,8L1566,9L1610,9L1610,10L1629,10L1629,11L1632,11L1632,12L1643,12L1643,13L1644,13L1644,14L1660,14L1660,15L1697,15L1697,14L1701,14L1701,15L1730,15L1730,16L1738,16L1738,16L1753,16L1753,17L1789,17L1789,17L1811,17L1811,17L1813,17L1813,16L1835,16L1835,17L1840,17L1840,18L1843,18L1843,19L1844,19L1844,20L1850,20L1850,21L1860,21L1860,22L1873,22" tabindex="0">
						<title>l_gdr5onk9-rkl3znrk-rn1g06dn.qj77o50q</title>
					</path>
				</g>
				<g style="--index: 60;">
					<path d="M0,0L1112,0L1112,8L1120,8L1120,9L1122,9L1122,10L1123,10L1123,11L1128,11L1128,12L1136,12L1136,13L1172,13L1172,14L1177,14L1177,15L1179,15L1179,15L1233,15L1233,16L1258,16L1258,17L1261,17L1261,16L1363,16L1363,17L1394,17L1394,18L1442,18L1442,19L1446,19L1446,20L1477,20L1477,21L1480,21L1480,22L1487,22L1487,23L1521,23L1521,24L1540,24L1540,23L1541,23L1541,23L1576,23L1576,24L1581,24L1581,25L1588,25L1588,26L1612,26L1612,27L1630,27L1630,28L1652,28L1652,29L1653,29L1653,30L1659,30L1659,31L1684,31L1684,32L1687,32L1687,33L1690,33L1690,34L1693,34L1693,35L1698,35L1698,36L1705,36L1705,37L1713,37L1713,38L1753,38L1753,39L1762,39L1762,40L1780,40L1780,41L1788,41L1788,41L1799,41L1799,43L1803,43L1803,44L1809,44L1809,45L1817,45L1817,46L1818,46L1818,44L1824,44L1824,45L1831,45L1831,46L1833,46L1833,47L1838,47L1838,48L1839,48L1839,47L1840,47L1840,49L1842,49L1842,49L1847,49L1847,50L1851,50L1851,49L1855,49L1855,50L1862,50L1862,51L1865,51L1865,52L1872,52L1872,53L1873,53" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.1dk62o3l</title>
					</path>
				</g>
				<g style="--index: 61;">
					<path d="M0,0L1112,0L1112,5L1128,5L1128,6L1136,6L1136,7L1196,7L1196,8L1213,8L1213,9L1322,9L1322,10L1489,10L1489,11L1515,11L1515,12L1562,12L1562,13L1656,13L1656,14L1663,14L1663,15L1680,15L1680,16L1701,16L1701,17L1716,17L1716,18L1718,18L1718,20L1754,20L1754,21L1766,21L1766,22L1788,22L1788,22L1809,22L1809,23L1813,23L1813,24L1818,24L1818,25L1820,25L1820,26L1832,26L1832,27L1838,27L1838,27L1839,27L1839,25L1843,25L1843,26L1855,26L1855,26L1862,26L1862,27L1866,27L1866,28L1873,28" tabindex="0">
						<title>rkl9qwrk-6njkg4el.lr3x560l</title>
					</path>
				</g>
				<g style="--index: 62;">
					<path d="M0,0L1136,0L1136,1L1142,1L1142,1L1143,1L1143,3L1201,3L1201,4L1499,4L1499,5L1675,5L1675,6L1686,6L1686,7L1727,7L1727,8L1728,8L1728,7L1790,7L1790,8L1802,8L1802,8L1872,8L1872,8L1873,8" tabindex="0">
						<title>l_xd0mnpjw-rkl3znrk-wley4prn.192xe54q</title>
					</path>
				</g>
				<g style="--index: 63;">
					<path d="M0,0L1663,0L1663,2L1695,2L1695,2L1696,2L1696,3L1834,3L1834,2L1835,2L1835,2L1858,2L1858,2L1872,2L1872,1L1873,1" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.q5vkg7vl</title>
					</path>
				</g>
				<g style="--index: 64;">
					<path d="M0,0L1663,0L1663,38L1664,38L1664,38L1729,38L1729,39L1735,39L1735,40L1740,40L1740,41L1751,41L1751,42L1766,42L1766,43L1783,43L1783,44L1799,44L1799,45L1815,45L1815,46L1823,46L1823,47L1832,47L1832,48L1834,48L1834,49L1835,49L1835,50L1836,50L1836,51L1841,51L1841,52L1848,52L1848,53L1860,53L1860,54L1873,54" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 65;">
					<path d="M0,0L1684,0L1684,12L1691,12L1691,13L1704,13L1704,14L1720,14L1720,16L1725,16L1725,16L1759,16L1759,17L1794,17L1794,17L1799,17L1799,18L1809,18L1809,19L1835,19L1835,20L1836,20L1836,21L1838,21L1838,21L1872,21L1872,23L1873,23" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.qj7zdm3q</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
