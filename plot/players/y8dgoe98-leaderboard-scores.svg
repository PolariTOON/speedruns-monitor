<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player y8dgoe98</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-04-17</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-31</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">268</text>
		</svg>
		<svg viewBox="0 0 2693 268" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 268) scale(1 -1)" style="--count: 39;">
				<g>
					<rect x="0" y="0" width="2693" height="268"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,4L6,4L6,4L484,4L484,5L769,5L769,6L866,6L866,6L875,6L875,5L951,5L951,6L960,6L960,5L991,5L991,5L1000,5L1000,6L1026,6L1026,6L1049,6L1049,5L1100,5L1100,6L1540,6L1540,7L1544,7L1544,8L1563,8L1563,9L1575,9L1575,10L1589,10L1589,11L1593,11L1593,12L1604,12L1604,13L1607,13L1607,13L1669,13L1669,14L1696,14L1696,15L1708,15L1708,15L1744,15L1744,16L1761,16L1761,17L1785,17L1785,17L1797,17L1797,18L1811,18L1811,19L1865,19L1865,19L1894,19L1894,19L1907,19L1907,19L1912,19L1912,20L2055,20L2055,21L2062,21L2062,22L2065,22L2065,23L2087,23L2087,24L2101,24L2101,23L2126,23L2126,24L2129,24L2129,25L2139,25L2139,24L2195,24L2195,25L2206,25L2206,26L2210,26L2210,27L2272,27L2272,27L2282,27L2282,29L2304,29L2304,29L2305,29L2305,30L2308,30L2308,31L2327,31L2327,32L2336,32L2336,33L2357,33L2357,34L2387,34L2387,35L2407,35L2407,36L2440,36L2440,36L2444,36L2444,37L2450,37L2450,38L2452,38L2452,39L2474,39L2474,40L2490,40L2490,41L2494,41L2494,42L2498,42L2498,43L2499,43L2499,44L2503,44L2503,45L2510,45L2510,46L2511,46L2511,46L2512,46L2512,46L2518,46L2518,46L2519,46L2519,46L2537,46L2537,46L2539,46L2539,46L2555,46L2555,47L2560,47L2560,48L2571,48L2571,49L2573,49L2573,49L2586,49L2586,49L2591,49L2591,49L2594,49L2594,50L2595,50L2595,50L2605,50L2605,50L2606,50L2606,50L2622,50L2622,50L2633,50L2633,50L2634,50L2634,50L2637,50L2637,51L2648,51L2648,52L2650,52L2650,52L2656,52L2656,52L2658,52L2658,51L2662,51L2662,51L2679,51L2679,52L2680,52L2680,53L2685,53L2685,54L2693,54" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path dtabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L0,0L0,4L484,4L484,5L745,5L745,5L765,5L765,6L928,6L928,7L951,7L951,8L1274,8L1274,8L1424,8L1424,9L1452,9L1452,10L1467,10L1467,11L1479,11L1479,10L1522,10L1522,11L1542,11L1542,11L1563,11L1563,12L1575,12L1575,13L1589,13L1589,14L1617,14L1617,15L1695,15L1695,16L1744,16L1744,17L1794,17L1794,17L1799,17L1799,18L1853,18L1853,19L1911,19L1911,20L1945,20L1945,21L1951,21L1951,22L1986,22L1986,23L2062,23L2062,24L2068,24L2068,25L2163,25L2163,26L2236,26L2236,27L2280,27L2280,28L2308,28L2308,29L2330,29L2330,30L2354,30L2354,29L2400,29L2400,30L2450,30L2450,31L2483,31L2483,32L2484,32L2484,32L2549,32L2549,32L2555,32L2555,33L2560,33L2560,34L2571,34L2571,35L2586,35L2586,36L2587,36L2587,35L2603,35L2603,36L2619,36L2619,37L2622,37L2622,36L2632,36L2632,35L2635,35L2635,36L2643,36L2643,37L2652,37L2652,38L2654,38L2654,39L2655,39L2655,39L2656,39L2656,40L2661,40L2661,40L2668,40L2668,41L2678,41L2678,40L2680,40L2680,41L2684,41L2684,40L2693,40" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L0,0L0,4L6,4L6,4L82,4L82,6L152,6L152,6L273,6L273,7L483,7L483,8L763,8L763,9L866,9L866,9L868,9L868,10L897,10L897,9L951,9L951,10L977,10L977,11L983,11L983,11L1000,11L1000,12L1002,12L1002,11L1003,11L1003,10L1026,10L1026,10L1061,10L1061,9L1095,9L1095,10L1101,10L1101,12L1264,12L1264,13L1330,13L1330,14L1362,14L1362,15L1426,15L1426,16L1454,16L1454,17L1482,17L1482,18L1544,18L1544,19L1554,19L1554,20L1563,20L1563,21L1576,21L1576,22L1579,22L1579,23L1589,23L1589,24L1591,24L1591,25L1606,25L1606,25L1615,25L1615,26L1663,26L1663,27L1664,27L1664,28L1670,28L1670,29L1675,29L1675,30L1737,30L1737,31L1744,31L1744,32L1758,32L1758,33L1770,33L1770,34L1797,34L1797,36L1811,36L1811,37L1834,37L1834,38L1879,38L1879,39L1886,39L1886,40L1895,40L1895,42L1911,42L1911,43L1944,43L1944,44L1959,44L1959,45L2021,45L2021,46L2062,46L2062,47L2064,47L2064,48L2097,48L2097,49L2119,49L2119,50L2127,50L2127,50L2206,50L2206,51L2210,51L2210,52L2273,52L2273,53L2304,53L2304,53L2343,53L2343,54L2357,54L2357,54L2358,54L2358,53L2418,53L2418,54L2419,54L2419,55L2454,55L2454,56L2465,56L2465,57L2474,57L2474,58L2479,58L2479,59L2483,59L2483,60L2509,60L2509,61L2510,61L2510,62L2511,62L2511,63L2514,63L2514,64L2515,64L2515,65L2543,65L2543,65L2560,65L2560,66L2571,66L2571,67L2573,67L2573,68L2602,68L2602,68L2610,68L2610,68L2623,68L2623,69L2627,69L2627,69L2635,69L2635,69L2637,69L2637,70L2650,70L2650,71L2662,71L2662,71L2665,71L2665,72L2668,72L2668,72L2679,72L2679,73L2685,73L2685,74L2687,74L2687,74L2693,74" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L1,0L1,2L763,2L763,2L765,2L765,2L951,2L951,2L981,2L981,2L1046,2L1046,2L1148,2L1148,2L1429,2L1429,3L1439,3L1439,4L1506,4L1506,4L1604,4L1604,5L1667,5L1667,5L1700,5L1700,6L1702,6L1702,5L1743,5L1743,5L1753,5L1753,5L1771,5L1771,5L1779,5L1779,5L1956,5L1956,5L1979,5L1979,5L2025,5L2025,5L2089,5L2089,5L2114,5L2114,5L2132,5L2132,5L2207,5L2207,6L2218,6L2218,6L2253,6L2253,6L2339,6L2339,6L2341,6L2341,7L2357,7L2357,7L2365,7L2365,7L2366,7L2366,7L2487,7L2487,7L2523,7L2523,7L2585,7L2585,7L2595,7L2595,7L2640,7L2640,7L2642,7L2642,7L2643,7L2643,7L2654,7L2654,7L2655,7L2655,7L2669,7L2669,7L2673,7L2673,7L2693,7" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L1,0L1,2L153,2L153,2L754,2L754,2L862,2L862,3L949,3L949,3L977,3L977,3L1000,3L1000,4L1100,4L1100,4L1698,4L1698,5L1699,5L1699,6L1778,6L1778,7L1849,7L1849,7L2116,7L2116,8L2214,8L2214,8L2303,8L2303,8L2357,8L2357,8L2365,8L2365,8L2535,8L2535,8L2552,8L2552,8L2609,8L2609,8L2630,8L2630,8L2646,8L2646,8L2663,8L2663,8L2693,8" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.xqkjmnnl</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L2,0L2,3L319,3L319,2L484,2L484,3L659,3L659,4L660,4L660,3L774,3L774,3L867,3L867,3L951,3L951,3L979,3L979,3L1000,3L1000,3L1019,3L1019,3L1041,3L1041,3L1718,3L1718,3L1820,3L1820,3L1908,3L1908,3L2062,3L2062,3L2313,3L2313,3L2357,3L2357,3L2406,3L2406,3L2507,3L2507,3L2513,3L2513,3L2523,3L2523,3L2534,3L2534,3L2537,3L2537,3L2540,3L2540,4L2560,4L2560,4L2571,4L2571,5L2579,5L2579,5L2603,5L2603,5L2630,5L2630,5L2635,5L2635,5L2643,5L2643,5L2667,5L2667,5L2679,5L2679,5L2693,5" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L2,0L2,2L82,2L82,2L83,2L83,3L758,3L758,3L766,3L766,3L864,3L864,5L949,5L949,6L952,6L952,7L953,7L953,7L955,7L955,6L960,6L960,10L974,10L974,11L979,11L979,10L1055,10L1055,9L1157,9L1157,10L1428,10L1428,11L1520,11L1520,11L1603,11L1603,11L1698,11L1698,12L1699,12L1699,13L1743,13L1743,14L1814,14L1814,15L2115,15L2115,16L2206,16L2206,17L2207,17L2207,18L2216,18L2216,19L2254,19L2254,20L2265,20L2265,21L2311,21L2311,22L2321,22L2321,22L2365,22L2365,23L2441,23L2441,24L2442,24L2442,25L2468,25L2468,26L2472,26L2472,27L2474,27L2474,28L2475,28L2475,29L2477,29L2477,30L2483,30L2483,31L2490,31L2490,32L2494,32L2494,33L2509,33L2509,34L2518,34L2518,35L2524,35L2524,36L2527,36L2527,37L2529,37L2529,38L2542,38L2542,38L2543,38L2543,38L2549,38L2549,39L2568,39L2568,40L2573,40L2573,41L2576,41L2576,42L2586,42L2586,43L2614,43L2614,43L2626,43L2626,42L2635,42L2635,43L2637,43L2637,43L2638,43L2638,43L2640,43L2640,44L2641,44L2641,45L2642,45L2642,46L2643,46L2643,47L2648,47L2648,47L2651,47L2651,48L2654,48L2654,50L2655,50L2655,51L2656,51L2656,52L2657,52L2657,52L2659,52L2659,51L2670,51L2670,52L2675,52L2675,53L2678,53L2678,54L2679,54L2679,55L2680,55L2680,56L2684,56L2684,55L2686,55L2686,56L2689,56L2689,57L2691,57L2691,58L2692,58L2692,59L2693,59" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L2,0L2,9L484,9L484,10L544,10L544,10L744,10L744,10L758,10L758,10L820,10L820,10L860,10L860,14L935,14L935,15L951,15L951,16L952,16L952,17L956,17L956,17L1012,17L1012,17L1019,17L1019,17L1026,17L1026,18L1027,18L1027,19L1031,19L1031,20L1041,20L1041,21L1050,21L1050,22L1067,22L1067,23L1087,23L1087,23L1095,23L1095,24L1098,24L1098,25L1108,25L1108,26L1110,26L1110,27L1264,27L1264,28L1296,28L1296,29L1367,29L1367,30L1372,30L1372,31L1382,31L1382,32L1383,32L1383,33L1403,33L1403,34L1419,34L1419,36L1423,36L1423,37L1425,37L1425,38L1474,38L1474,39L1505,39L1505,40L1533,40L1533,41L1540,41L1540,42L1544,42L1544,43L1545,43L1545,44L1563,44L1563,45L1576,45L1576,46L1588,46L1588,47L1592,47L1592,48L1603,48L1603,49L1604,49L1604,50L1638,50L1638,51L1657,51L1657,52L1660,52L1660,53L1706,53L1706,54L1747,54L1747,55L1795,55L1795,55L1799,55L1799,56L1810,56L1810,57L1839,57L1839,59L1846,59L1846,60L1853,60L1853,61L1888,61L1888,62L1900,62L1900,63L1945,63L1945,64L1951,64L1951,65L1956,65L1956,66L2062,66L2062,67L2069,67L2069,68L2099,68L2099,69L2208,69L2208,70L2219,70L2219,71L2224,71L2224,72L2239,72L2239,73L2252,73L2252,74L2254,74L2254,75L2265,75L2265,76L2271,76L2271,77L2273,77L2273,79L2327,79L2327,80L2357,80L2357,81L2371,81L2371,82L2400,82L2400,83L2416,83L2416,84L2425,84L2425,85L2438,85L2438,86L2441,86L2441,88L2458,88L2458,87L2459,87L2459,89L2464,89L2464,90L2479,90L2479,91L2487,91L2487,92L2494,92L2494,93L2495,93L2495,95L2497,95L2497,96L2500,96L2500,97L2503,97L2503,98L2504,98L2504,99L2509,99L2509,100L2515,100L2515,102L2525,102L2525,103L2545,103L2545,104L2549,104L2549,104L2550,104L2550,103L2555,103L2555,104L2559,104L2559,105L2560,105L2560,106L2571,106L2571,107L2573,107L2573,108L2590,108L2590,109L2616,109L2616,108L2634,108L2634,109L2651,109L2651,111L2654,111L2654,111L2673,111L2673,111L2676,111L2676,111L2680,111L2680,112L2683,112L2683,113L2685,113L2685,112L2688,112L2688,113L2690,113L2690,112L2693,112" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L2,0L2,9L316,9L316,10L317,10L317,9L483,9L483,10L543,10L543,11L755,11L755,11L773,11L773,11L868,11L868,14L935,14L935,15L948,15L948,16L957,16L957,16L974,16L974,17L1007,17L1007,18L1013,18L1013,18L1015,18L1015,17L1042,17L1042,17L1050,17L1050,18L1101,18L1101,19L1104,19L1104,20L1301,20L1301,21L1327,21L1327,22L1330,22L1330,23L1331,23L1331,24L1356,24L1356,25L1386,25L1386,26L1387,26L1387,27L1415,27L1415,28L1420,28L1420,29L1439,29L1439,30L1455,30L1455,31L1475,31L1475,32L1480,32L1480,33L1484,33L1484,34L1502,34L1502,34L1504,34L1504,35L1516,35L1516,36L1543,36L1543,37L1563,37L1563,38L1568,38L1568,39L1585,39L1585,40L1606,40L1606,41L1608,41L1608,42L1612,42L1612,43L1674,43L1674,44L1680,44L1680,45L1744,45L1744,46L1789,46L1789,47L1794,47L1794,47L1797,47L1797,48L1799,48L1799,49L1810,49L1810,52L1839,52L1839,53L1848,53L1848,54L1850,54L1850,55L1853,55L1853,56L1867,56L1867,58L1873,58L1873,59L1881,59L1881,60L1892,60L1892,61L1911,61L1911,62L1919,62L1919,63L1923,63L1923,65L1936,65L1936,66L1939,66L1939,67L1945,67L1945,68L1951,68L1951,69L1956,69L1956,70L1972,70L1972,71L1986,71L1986,72L1999,72L1999,73L2000,73L2000,74L2003,74L2003,74L2009,74L2009,75L2062,75L2062,76L2066,76L2066,77L2117,77L2117,78L2118,78L2118,79L2120,79L2120,80L2121,80L2121,81L2136,81L2136,82L2141,82L2141,83L2163,83L2163,84L2169,84L2169,85L2175,85L2175,86L2186,86L2186,87L2208,87L2208,88L2223,88L2223,89L2228,89L2228,90L2238,90L2238,92L2255,92L2255,93L2268,93L2268,94L2274,94L2274,95L2275,95L2275,96L2278,96L2278,97L2280,97L2280,97L2302,97L2302,97L2304,97L2304,98L2306,98L2306,99L2318,99L2318,100L2319,100L2319,100L2320,100L2320,99L2328,99L2328,100L2335,100L2335,101L2336,101L2336,102L2361,102L2361,102L2371,102L2371,103L2398,103L2398,104L2413,104L2413,105L2421,105L2421,106L2422,106L2422,107L2434,107L2434,108L2472,108L2472,109L2480,109L2480,111L2484,111L2484,112L2490,112L2490,113L2508,113L2508,115L2528,115L2528,115L2530,115L2530,116L2539,116L2539,117L2546,117L2546,116L2549,116L2549,117L2557,117L2557,118L2559,118L2559,119L2565,119L2565,120L2571,120L2571,121L2572,121L2572,122L2573,122L2573,123L2600,123L2600,124L2602,124L2602,123L2616,123L2616,125L2619,125L2619,126L2622,126L2622,125L2625,125L2625,126L2634,126L2634,127L2635,127L2635,128L2637,128L2637,129L2638,129L2638,130L2639,130L2639,132L2646,132L2646,133L2649,133L2649,134L2650,134L2650,135L2651,135L2651,136L2656,136L2656,137L2661,137L2661,137L2670,137L2670,138L2678,138L2678,139L2680,139L2680,140L2685,140L2685,139L2692,139L2692,140L2693,140L2693,142L2693,142" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L4,0L4,5L8,5L8,5L76,5L76,4L81,4L81,5L82,5L82,5L257,5L257,6L484,6L484,7L638,7L638,8L659,8L659,9L769,9L769,10L794,10L794,11L877,11L877,12L906,12L906,11L934,11L934,12L935,12L935,13L936,13L936,14L950,14L950,15L953,15L953,16L955,16L955,17L956,17L956,18L957,18L957,19L970,19L970,20L972,20L972,21L975,21L975,22L1005,22L1005,21L1016,21L1016,21L1030,21L1030,22L1047,22L1047,23L1050,23L1050,24L1085,24L1085,25L1089,25L1089,26L1093,26L1093,27L1107,27L1107,28L1113,28L1113,29L1119,29L1119,30L1143,30L1143,31L1157,31L1157,32L1162,32L1162,33L1170,33L1170,33L1191,33L1191,34L1270,34L1270,35L1279,35L1279,36L1290,36L1290,37L1293,37L1293,39L1314,39L1314,40L1326,40L1326,41L1329,41L1329,42L1333,42L1333,41L1345,41L1345,42L1364,42L1364,43L1368,43L1368,44L1369,44L1369,45L1380,45L1380,46L1383,46L1383,47L1395,47L1395,48L1398,48L1398,49L1403,49L1403,50L1410,50L1410,51L1412,51L1412,52L1419,52L1419,53L1421,53L1421,54L1426,54L1426,55L1428,55L1428,56L1429,56L1429,57L1433,57L1433,58L1436,58L1436,59L1451,59L1451,60L1466,60L1466,61L1474,61L1474,62L1505,62L1505,63L1506,63L1506,64L1507,64L1507,65L1510,65L1510,66L1512,66L1512,67L1540,67L1540,68L1542,68L1542,69L1544,69L1544,70L1548,70L1548,72L1551,72L1551,73L1552,73L1552,74L1553,74L1553,75L1563,75L1563,77L1581,77L1581,78L1583,78L1583,79L1586,79L1586,80L1588,80L1588,82L1590,82L1590,83L1593,83L1593,85L1595,85L1595,86L1600,86L1600,88L1607,88L1607,87L1608,87L1608,88L1609,88L1609,89L1613,89L1613,90L1616,90L1616,91L1619,91L1619,92L1624,92L1624,93L1634,93L1634,94L1636,94L1636,95L1638,95L1638,96L1639,96L1639,97L1641,97L1641,98L1642,98L1642,99L1664,99L1664,100L1671,100L1671,101L1688,101L1688,102L1692,102L1692,103L1696,103L1696,104L1700,104L1700,105L1706,105L1706,106L1719,106L1719,107L1724,107L1724,108L1729,108L1729,109L1737,109L1737,110L1738,110L1738,111L1743,111L1743,111L1756,111L1756,112L1761,112L1761,113L1763,113L1763,115L1767,115L1767,117L1768,117L1768,118L1777,118L1777,119L1785,119L1785,120L1788,120L1788,119L1790,119L1790,120L1795,120L1795,121L1799,121L1799,122L1810,122L1810,123L1811,123L1811,124L1815,124L1815,125L1819,125L1819,126L1821,126L1821,127L1824,127L1824,128L1825,128L1825,129L1845,129L1845,130L1846,130L1846,131L1853,131L1853,132L1855,132L1855,133L1860,133L1860,134L1867,134L1867,135L1868,135L1868,136L1870,136L1870,137L1880,137L1880,138L1894,138L1894,139L1901,139L1901,140L1904,140L1904,140L1924,140L1924,141L1935,141L1935,142L1976,142L1976,143L1988,143L1988,144L2009,144L2009,145L2015,145L2015,146L2021,146L2021,148L2027,148L2027,149L2035,149L2035,150L2062,150L2062,151L2091,151L2091,152L2116,152L2116,153L2158,153L2158,154L2159,154L2159,155L2179,155L2179,156L2182,156L2182,157L2189,157L2189,158L2214,158L2214,159L2224,159L2224,160L2226,160L2226,161L2232,161L2232,162L2262,162L2262,163L2288,163L2288,165L2295,165L2295,166L2303,166L2303,167L2316,167L2316,168L2317,168L2317,168L2324,168L2324,169L2329,169L2329,170L2333,170L2333,171L2335,171L2335,172L2345,172L2345,172L2357,172L2357,172L2365,172L2365,173L2385,173L2385,174L2390,174L2390,175L2391,175L2391,177L2392,177L2392,176L2406,176L2406,177L2418,177L2418,178L2424,178L2424,179L2427,179L2427,180L2433,180L2433,181L2436,181L2436,182L2464,182L2464,183L2470,183L2470,184L2472,184L2472,185L2482,185L2482,186L2483,186L2483,187L2487,187L2487,188L2493,188L2493,190L2495,190L2495,191L2498,191L2498,191L2503,191L2503,192L2512,192L2512,193L2519,193L2519,192L2521,192L2521,194L2526,194L2526,195L2527,195L2527,197L2530,197L2530,198L2533,198L2533,199L2536,199L2536,198L2537,198L2537,198L2548,198L2548,197L2550,197L2550,198L2551,198L2551,199L2553,199L2553,199L2554,199L2554,200L2555,200L2555,201L2559,201L2559,202L2560,202L2560,203L2562,203L2562,204L2567,204L2567,205L2571,205L2571,206L2607,206L2607,207L2628,207L2628,207L2634,207L2634,208L2639,208L2639,210L2646,210L2646,211L2651,211L2651,211L2655,211L2655,212L2659,212L2659,213L2661,213L2661,215L2663,215L2663,216L2676,216L2676,217L2684,217L2684,218L2686,218L2686,219L2693,219" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L4,0L4,4L496,4L496,5L741,5L741,5L743,5L743,5L747,5L747,5L761,5L761,5L852,5L852,5L866,5L866,10L878,10L878,11L928,11L928,11L946,11L946,12L948,12L948,12L953,12L953,13L955,13L955,14L973,14L973,13L1004,13L1004,13L1051,13L1051,14L1295,14L1295,15L1353,15L1353,16L1538,16L1538,17L1544,17L1544,18L1564,18L1564,19L1594,19L1594,20L1616,20L1616,21L1618,21L1618,22L1632,22L1632,23L1698,23L1698,24L1729,24L1729,24L1731,24L1731,25L1815,25L1815,26L1840,26L1840,27L1960,27L1960,28L1977,28L1977,29L2020,29L2020,30L2074,30L2074,31L2148,31L2148,32L2208,32L2208,33L2217,33L2217,34L2248,34L2248,35L2301,35L2301,36L2302,36L2302,36L2311,36L2311,37L2357,37L2357,38L2370,38L2370,39L2433,39L2433,40L2482,40L2482,41L2494,41L2494,42L2495,42L2495,43L2498,43L2498,44L2505,44L2505,45L2510,45L2510,46L2520,46L2520,47L2522,47L2522,46L2539,46L2539,46L2542,46L2542,45L2561,45L2561,46L2585,46L2585,47L2610,47L2610,48L2620,48L2620,49L2623,49L2623,48L2626,48L2626,48L2640,48L2640,48L2650,48L2650,49L2651,49L2651,49L2652,49L2652,50L2654,50L2654,52L2655,52L2655,52L2658,52L2658,52L2659,52L2659,53L2668,53L2668,52L2671,52L2671,53L2678,53L2678,54L2679,54L2679,55L2693,55" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L5,0L5,3L319,3L319,2L743,2L743,2L769,2L769,2L866,2L866,5L869,5L869,4L871,4L871,5L931,5L931,6L948,6L948,7L953,7L953,8L978,8L978,9L1005,9L1005,9L1007,9L1007,8L1012,8L1012,7L1059,7L1059,7L1239,7L1239,8L1544,8L1544,9L1603,9L1603,8L1630,8L1630,9L1699,9L1699,10L1810,10L1810,11L1866,11L1866,11L1884,11L1884,12L1951,12L1951,13L1990,13L1990,14L2148,14L2148,15L2210,15L2210,16L2304,16L2304,17L2357,17L2357,17L2450,17L2450,18L2473,18L2473,17L2483,17L2483,18L2548,18L2548,18L2549,18L2549,18L2550,18L2550,18L2561,18L2561,19L2571,19L2571,19L2578,19L2578,20L2623,20L2623,19L2641,19L2641,19L2662,19L2662,19L2664,19L2664,20L2683,20L2683,20L2693,20" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L5,0L5,6L496,6L496,7L771,7L771,7L866,7L866,8L930,8L930,9L948,9L948,10L955,10L955,10L1041,10L1041,11L1044,11L1044,13L1052,13L1052,12L1074,12L1074,11L1417,11L1417,12L1449,12L1449,13L1475,13L1475,14L1502,14L1502,14L1544,14L1544,15L1562,15L1562,16L1564,16L1564,17L1568,17L1568,18L1570,18L1570,19L1602,19L1602,20L1606,20L1606,19L1632,19L1632,20L1679,20L1679,21L1686,21L1686,22L1698,22L1698,23L1750,23L1750,24L1762,24L1762,25L1803,25L1803,26L1809,26L1809,27L1812,27L1812,27L1819,27L1819,28L1828,28L1828,29L1841,29L1841,30L1870,30L1870,31L1882,31L1882,32L1951,32L1951,33L1975,33L1975,34L1984,34L1984,35L2020,35L2020,36L2023,36L2023,37L2025,37L2025,38L2066,38L2066,39L2148,39L2148,40L2175,40L2175,41L2177,41L2177,42L2191,42L2191,43L2207,43L2207,44L2208,44L2208,45L2225,45L2225,46L2230,46L2230,47L2234,47L2234,48L2282,48L2282,49L2301,49L2301,50L2311,50L2311,51L2334,51L2334,52L2339,52L2339,53L2357,53L2357,54L2405,54L2405,55L2406,55L2406,56L2442,56L2442,57L2468,57L2468,56L2472,56L2472,58L2480,58L2480,59L2482,59L2482,60L2493,60L2493,61L2499,61L2499,62L2501,62L2501,63L2503,63L2503,64L2510,64L2510,65L2512,65L2512,66L2522,66L2522,67L2526,67L2526,69L2527,69L2527,70L2531,70L2531,71L2541,71L2541,71L2549,71L2549,72L2558,72L2558,73L2561,73L2561,74L2562,74L2562,73L2564,73L2564,72L2571,72L2571,73L2576,73L2576,74L2615,74L2615,75L2619,75L2619,76L2620,76L2620,78L2622,78L2622,77L2624,77L2624,78L2625,78L2625,79L2631,79L2631,79L2638,79L2638,81L2639,81L2639,82L2644,82L2644,83L2652,83L2652,83L2653,83L2653,82L2664,82L2664,82L2666,82L2666,82L2670,82L2670,84L2674,84L2674,87L2675,87L2675,86L2678,86L2678,87L2686,87L2686,89L2693,89L2693,90L2693,90" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L7,0L7,4L642,4L642,5L768,5L768,6L914,6L914,5L941,5L941,6L955,6L955,7L988,7L988,7L990,7L990,6L1046,6L1046,6L1049,6L1049,7L1381,7L1381,6L1386,6L1386,7L1440,7L1440,7L1508,7L1508,8L1526,8L1526,9L1544,9L1544,10L1545,10L1545,11L1566,11L1566,12L1572,12L1572,13L1602,13L1602,13L1607,13L1607,14L1675,14L1675,15L1681,15L1681,15L1788,15L1788,16L1840,16L1840,17L1915,17L1915,17L2109,17L2109,17L2148,17L2148,18L2205,18L2205,19L2208,19L2208,20L2244,20L2244,20L2312,20L2312,20L2316,20L2316,21L2317,21L2317,20L2339,20L2339,20L2357,20L2357,20L2473,20L2473,19L2524,19L2524,19L2528,19L2528,19L2561,19L2561,20L2563,20L2563,20L2618,20L2618,20L2622,20L2622,20L2630,20L2630,20L2658,20L2658,20L2659,20L2659,21L2678,21L2678,22L2686,22L2686,23L2693,23L2693,23L2693,23" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L7,0L7,3L747,3L747,3L765,3L765,4L766,4L766,5L812,5L812,6L928,6L928,7L946,7L946,8L948,8L948,8L955,8L955,9L974,9L974,8L1049,8L1049,8L1520,8L1520,8L1544,8L1544,8L1586,8L1586,9L1692,9L1692,9L1699,9L1699,10L1758,10L1758,11L1816,11L1816,12L1840,12L1840,13L1951,13L1951,14L1998,14L1998,14L2020,14L2020,15L2148,15L2148,15L2312,15L2312,15L2509,15L2509,16L2528,16L2528,16L2529,16L2529,16L2530,16L2530,16L2561,16L2561,17L2623,17L2623,16L2626,16L2626,16L2630,16L2630,16L2655,16L2655,16L2660,16L2660,16L2661,16L2661,16L2666,16L2666,16L2670,16L2670,16L2687,16L2687,17L2693,17" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L7,0L7,3L766,3L766,4L824,4L824,3L864,3L864,5L941,5L941,6L948,6L948,6L951,6L951,7L973,7L973,8L977,8L977,8L999,8L999,7L1050,7L1050,8L1161,8L1161,9L1443,9L1443,10L1507,10L1507,11L1508,11L1508,12L1509,12L1509,11L1535,11L1535,11L1544,11L1544,12L1549,12L1549,13L1640,13L1640,14L1645,14L1645,15L1699,15L1699,16L1701,16L1701,17L1706,17L1706,18L1814,18L1814,18L1840,18L1840,19L1845,19L1845,20L1877,20L1877,21L2014,21L2014,22L2035,22L2035,23L2086,23L2086,24L2148,24L2148,25L2236,25L2236,26L2288,26L2288,27L2307,27L2307,27L2312,27L2312,26L2321,26L2321,27L2339,27L2339,27L2357,27L2357,28L2445,28L2445,27L2449,27L2449,28L2451,28L2451,29L2485,29L2485,30L2513,30L2513,30L2527,30L2527,29L2551,29L2551,29L2552,29L2552,29L2561,29L2561,30L2563,30L2563,30L2623,30L2623,29L2630,29L2630,29L2638,29L2638,29L2640,29L2640,29L2650,29L2650,30L2653,30L2653,30L2655,30L2655,31L2656,31L2656,31L2658,31L2658,31L2665,31L2665,31L2668,31L2668,30L2676,30L2676,30L2683,30L2683,30L2686,30L2686,30L2693,30" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L83,0L83,4L764,4L764,4L948,4L948,4L956,4L956,4L971,4L971,4L1046,4L1046,4L1664,4L1664,4L1752,4L1752,5L1826,5L1826,6L1827,6L1827,7L1858,7L1858,7L2021,7L2021,8L2173,8L2173,9L2183,9L2183,9L2216,9L2216,9L2353,9L2353,9L2363,9L2363,9L2365,9L2365,10L2451,10L2451,10L2453,10L2453,10L2513,10L2513,10L2524,10L2524,10L2549,10L2549,9L2626,9L2626,9L2635,9L2635,9L2645,9L2645,9L2646,9L2646,9L2651,9L2651,9L2654,9L2654,9L2655,9L2655,9L2656,9L2656,9L2670,9L2670,9L2684,9L2684,9L2692,9L2692,9L2693,9" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L84,0L84,2L156,2L156,2L161,2L161,2L290,2L290,2L776,2L776,2L929,2L929,2L948,2L948,2L1000,2L1000,2L1495,2L1495,2L1719,2L1719,2L2313,2L2313,2L2357,2L2357,2L2430,2L2430,2L2435,2L2435,2L2443,2L2443,2L2453,2L2453,2L2519,2L2519,2L2540,2L2540,2L2630,2L2630,2L2665,2L2665,2L2693,2" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.p12dx07q</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L84,0L84,3L754,3L754,3L812,3L812,3L866,3L866,3L924,3L924,3L949,3L949,3L951,3L951,3L955,3L955,3L956,3L956,3L958,3L958,3L1038,3L1038,3L1100,3L1100,4L1401,4L1401,5L1429,5L1429,6L1439,6L1439,6L1442,6L1442,6L1467,6L1467,6L1513,6L1513,6L1548,6L1548,6L1686,6L1686,6L1699,6L1699,7L1760,7L1760,8L1811,8L1811,8L1952,8L1952,9L2019,9L2019,9L2021,9L2021,8L2313,8L2313,8L2551,8L2551,8L2693,8" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L84,0L84,2L765,2L765,3L920,3L920,2L948,2L948,2L951,2L951,3L971,3L971,4L975,4L975,5L979,5L979,4L980,4L980,3L1428,3L1428,4L1499,4L1499,4L1508,4L1508,5L1509,5L1509,4L1573,4L1573,5L1698,5L1698,6L1699,6L1699,7L1702,7L1702,8L1706,8L1706,9L1793,9L1793,10L1800,10L1800,10L1946,10L1946,11L2063,11L2063,12L2208,12L2208,13L2213,13L2213,13L2215,13L2215,14L2236,14L2236,14L2331,14L2331,14L2339,14L2339,15L2357,15L2357,15L2365,15L2365,16L2404,16L2404,17L2406,17L2406,17L2425,17L2425,18L2430,18L2430,19L2520,19L2520,19L2524,19L2524,20L2532,20L2532,21L2534,21L2534,22L2549,22L2549,21L2573,21L2573,21L2618,21L2618,21L2634,21L2634,22L2639,22L2639,23L2640,23L2640,23L2643,23L2643,23L2654,23L2654,23L2656,23L2656,24L2657,24L2657,24L2664,24L2664,24L2673,24L2673,24L2678,24L2678,23L2679,23L2679,24L2686,24L2686,26L2690,26L2690,26L2692,26L2692,27L2693,27" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L84,0L84,2L164,2L164,2L770,2L770,2L949,2L949,3L1000,3L1000,4L1016,4L1016,4L1213,4L1213,4L1296,4L1296,5L1449,5L1449,6L1522,6L1522,6L1523,6L1523,6L1767,6L1767,7L1770,7L1770,8L1864,8L1864,9L1875,9L1875,10L1885,10L1885,10L1915,10L1915,11L1985,11L1985,11L2357,11L2357,11L2421,11L2421,11L2433,11L2433,12L2464,12L2464,12L2482,12L2482,12L2521,12L2521,12L2592,12L2592,12L2596,12L2596,12L2608,12L2608,12L2623,12L2623,11L2626,11L2626,11L2631,11L2631,11L2655,11L2655,11L2678,11L2678,11L2689,11L2689,12L2693,12" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L87,0L87,1L154,1L154,1L776,1L776,1L864,1L864,1L929,1L929,1L955,1L955,1L984,1L984,1L992,1L992,1L1057,1L1057,1L1541,1L1541,1L1544,1L1544,1L2079,1L2079,1L2147,1L2147,1L2215,1L2215,1L2313,1L2313,1L2330,1L2330,1L2357,1L2357,1L2517,1L2517,1L2528,1L2528,1L2548,1L2548,1L2693,1" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L87,0L87,3L496,3L496,4L659,4L659,5L789,5L789,5L935,5L935,6L948,6L948,6L960,6L960,7L974,7L974,7L1007,7L1007,6L1017,6L1017,6L1051,6L1051,7L1084,7L1084,7L1157,7L1157,8L1277,8L1277,9L1292,9L1292,10L1422,10L1422,11L1424,11L1424,12L1484,12L1484,13L1538,13L1538,14L1582,14L1582,15L1617,15L1617,16L1672,16L1672,17L1708,17L1708,18L1715,18L1715,19L1770,19L1770,20L1775,20L1775,21L1776,21L1776,22L1777,22L1777,23L1779,23L1779,24L1799,24L1799,25L1805,25L1805,26L1815,26L1815,27L1816,27L1816,28L1840,28L1840,29L1841,29L1841,30L1865,30L1865,31L1874,31L1874,32L1888,32L1888,33L1916,33L1916,34L1950,34L1950,35L1995,35L1995,36L2063,36L2063,37L2076,37L2076,36L2147,36L2147,37L2160,37L2160,38L2192,38L2192,39L2242,39L2242,40L2243,40L2243,41L2245,41L2245,42L2254,42L2254,43L2289,43L2289,44L2300,44L2300,45L2326,45L2326,46L2327,46L2327,48L2357,48L2357,49L2380,49L2380,50L2393,50L2393,51L2429,51L2429,52L2432,52L2432,53L2458,53L2458,54L2464,54L2464,55L2474,55L2474,56L2476,56L2476,57L2477,57L2477,58L2501,58L2501,59L2503,59L2503,60L2504,60L2504,61L2505,61L2505,62L2522,62L2522,63L2523,63L2523,64L2524,64L2524,65L2527,65L2527,66L2561,66L2561,67L2630,67L2630,68L2633,68L2633,67L2636,67L2636,68L2637,68L2637,68L2638,68L2638,68L2643,68L2643,69L2644,69L2644,70L2649,70L2649,70L2653,70L2653,71L2654,71L2654,71L2658,71L2658,71L2659,71L2659,72L2662,72L2662,72L2664,72L2664,72L2670,72L2670,72L2672,72L2672,72L2682,72L2682,73L2683,73L2683,74L2685,74L2685,75L2689,75L2689,74L2693,74" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L87,0L87,3L910,3L910,4L931,4L931,5L955,5L955,4L996,4L996,5L1116,5L1116,6L1128,6L1128,7L1278,7L1278,7L1298,7L1298,8L1593,8L1593,9L2559,9L2559,9L2693,9" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.814y45w1</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L88,0L88,2L960,2L960,2L980,2L980,2L1026,2L1026,3L1421,3L1421,3L2064,3L2064,3L2517,3L2517,3L2693,3" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.z19md2jl</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L89,0L89,2L931,2L931,2L995,2L995,3L998,3L998,3L999,3L999,3L1083,3L1083,2L1857,2L1857,2L2558,2L2558,2L2693,2" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.ln8rzznl</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L149,0L149,3L151,3L151,3L1000,3L1000,4L1017,4L1017,5L1116,5L1116,6L1131,6L1131,7L1153,7L1153,6L1206,6L1206,6L1256,6L1256,7L1585,7L1585,7L1859,7L1859,7L1863,7L1863,7L1903,7L1903,8L1955,8L1955,9L2014,9L2014,10L2086,10L2086,10L2087,10L2087,10L2090,10L2090,9L2186,9L2186,9L2210,9L2210,9L2277,9L2277,20L2422,20L2422,21L2497,21L2497,21L2502,21L2502,22L2512,22L2512,23L2519,23L2519,24L2652,24L2652,25L2658,25L2658,26L2693,26" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.4qypgj4q</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L275,0L275,2L365,2L365,2L428,2L428,3L457,3L457,2L1215,2L1215,2L1217,2L1217,2L2523,2L2523,2L2601,2L2601,2L2693,2" tabindex="0">
						<title>xd17x94d-9l71pv4l.81wrgm5l</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L475,0L475,1L772,1L772,1L860,1L860,2L949,2L949,3L995,3L995,3L1042,3L1042,4L1416,4L1416,4L1831,4L1831,4L2335,4L2335,5L2357,5L2357,6L2486,6L2486,7L2515,7L2515,8L2528,8L2528,8L2551,8L2551,8L2630,8L2630,8L2643,8L2643,9L2644,9L2644,9L2693,9" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6ejq</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L475,0L475,1L751,1L751,2L772,2L772,1L949,1L949,2L953,2L953,3L962,3L962,3L967,3L967,2L1056,2L1056,2L1416,2L1416,2L1528,2L1528,2L1826,2L1826,2L2237,2L2237,3L2357,3L2357,3L2475,3L2475,4L2486,4L2486,5L2513,5L2513,6L2556,6L2556,6L2625,6L2625,6L2630,6L2630,6L2641,6L2641,6L2653,6L2653,5L2693,5" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21dzoj3l</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L475,0L475,1L755,1L755,1L826,1L826,2L832,2L832,1L946,1L946,1L1047,1L1047,1L1509,1L1509,1L1516,1L1516,1L1543,1L1543,1L1841,1L1841,1L2014,1L2014,2L2325,2L2325,2L2352,2L2352,2L2357,2L2357,2L2392,2L2392,2L2483,2L2483,3L2527,3L2527,3L2573,3L2573,3L2630,3L2630,3L2642,3L2642,3L2653,3L2653,2L2654,2L2654,2L2678,2L2678,2L2693,2" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L479,0L479,1L776,1L776,1L929,1L929,1L948,1L948,1L994,1L994,2L1047,2L1047,1L1065,1L1065,1L2108,1L2108,1L2222,1L2222,1L2357,1L2357,1L2505,1L2505,1L2515,1L2515,1L2541,1L2541,1L2631,1L2631,1L2693,1" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21g8owxl</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L747,0L747,2L1005,2L1005,2L1029,2L1029,2L1030,2L1030,4L1081,4L1081,4L1108,4L1108,5L1112,5L1112,6L1190,6L1190,7L1191,7L1191,6L1211,6L1211,6L1241,6L1241,6L1300,6L1300,7L1437,7L1437,8L1474,8L1474,8L1490,8L1490,8L1540,8L1540,8L1595,8L1595,9L1698,9L1698,10L1808,10L1808,10L1924,10L1924,11L1932,11L1932,12L2676,12L2676,12L2693,12" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.jq6d86v1</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L862,0L862,2L937,2L937,3L955,3L955,3L995,3L995,3L1001,3L1001,4L1017,4L1017,4L1608,4L1608,5L1628,5L1628,4L2064,4L2064,5L2162,5L2162,4L2271,4L2271,5L2322,5L2322,5L2331,5L2331,6L2469,6L2469,6L2544,6L2544,6L2545,6L2545,6L2619,6L2619,6L2620,6L2620,6L2650,6L2650,6L2651,6L2651,6L2674,6L2674,7L2686,7L2686,8L2693,8" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L864,0L864,4L865,4L865,3L867,3L867,4L898,4L898,3L926,3L926,3L929,3L929,2L959,2L959,4L967,4L967,5L971,5L971,6L979,6L979,7L985,7L985,8L988,8L988,9L992,9L992,10L1002,10L1002,11L1005,11L1005,12L1014,12L1014,13L1042,13L1042,12L1048,12L1048,13L1125,13L1125,14L1159,14L1159,15L1161,15L1161,16L1268,16L1268,17L1349,17L1349,19L1378,19L1378,20L1381,20L1381,21L1443,21L1443,22L1480,22L1480,23L1512,23L1512,24L1536,24L1536,25L1548,25L1548,26L1555,26L1555,27L1565,27L1565,28L1588,28L1588,29L1594,29L1594,30L1596,30L1596,31L1644,31L1644,30L1657,30L1657,29L2659,29L2659,29L2693,29" tabindex="0">
						<title>xd17x94d-9l71pv4l.zqo20y2l</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L2277,0L2277,13L2315,13L2315,14L2502,14L2502,15L2656,15L2656,16L2693,16" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.9qj0kxel</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L2277,0L2277,13L2586,13L2586,14L2656,14L2656,15L2658,15L2658,16L2693,16" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.810zkwwq</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L2277,0L2277,13L2420,13L2420,14L2549,14L2549,15L2656,15L2656,16L2693,16" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.mlnwjz0l</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
