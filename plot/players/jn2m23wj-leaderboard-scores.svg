<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player jn2m23wj</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2022-07-30</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-30</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">292</text>
		</svg>
		<svg viewBox="0 0 1158 292" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 292) scale(1 -1)" style="--count: 58;">
				<g>
					<rect x="0" y="0" width="1158" height="292"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,16L9,16L9,19L23,19L23,20L29,20L29,21L31,21L31,22L52,22L52,27L73,27L73,26L79,26L79,31L92,31L92,30L102,30L102,31L258,31L258,33L1094,33L1094,34L1136,34L1136,35L1138,35L1138,35L1141,35L1141,36L1142,36L1142,37L1158,37" tabindex="0">
						<title>xd17x94d-9l71pv4l.zqo20y2l</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L21,0L21,63L23,63L23,64L25,64L25,65L26,65L26,66L35,66L35,66L82,66L82,66L84,66L84,67L88,67L88,68L98,68L98,69L104,69L104,70L111,70L111,71L119,71L119,72L126,72L126,73L134,73L134,74L160,74L160,75L164,75L164,76L166,76L166,77L179,77L179,78L181,78L181,79L214,79L214,79L225,79L225,80L229,80L229,80L230,80L230,81L231,81L231,82L232,82L232,83L238,83L238,84L246,84L246,85L248,85L248,86L250,86L250,87L254,87L254,88L258,88L258,89L261,89L261,90L266,90L266,91L268,91L268,92L271,92L271,93L287,93L287,94L288,94L288,96L294,96L294,98L298,98L298,99L299,99L299,100L323,100L323,102L337,102L337,103L349,103L349,104L351,104L351,105L353,105L353,106L377,106L377,107L380,107L380,108L387,108L387,110L395,110L395,111L424,111L424,112L435,112L435,113L442,113L442,114L444,114L444,115L460,115L460,116L461,116L461,117L475,117L475,118L487,118L487,119L490,119L490,121L554,121L554,122L555,122L555,124L579,124L579,125L598,125L598,126L612,126L612,127L621,127L621,128L624,128L624,129L638,129L638,130L641,130L641,131L644,131L644,132L658,132L658,133L659,133L659,135L667,135L667,136L676,136L676,138L689,138L689,139L694,139L694,140L696,140L696,141L697,141L697,142L698,142L698,143L699,143L699,144L702,144L702,145L706,145L706,146L709,146L709,147L710,147L710,148L713,148L713,150L716,150L716,151L721,151L721,152L725,152L725,153L727,153L727,154L731,154L731,155L737,155L737,157L739,157L739,158L742,158L742,159L747,159L747,160L750,160L750,161L761,161L761,162L763,162L763,164L770,164L770,165L771,165L771,167L782,167L782,168L802,168L802,169L805,169L805,170L813,170L813,171L819,171L819,173L825,173L825,174L835,174L835,175L836,175L836,176L840,176L840,177L841,177L841,178L844,178L844,179L848,179L848,180L851,180L851,182L861,182L861,183L862,183L862,184L870,184L870,185L872,185L872,186L876,186L876,187L879,187L879,188L880,188L880,190L886,190L886,191L890,191L890,192L892,192L892,194L895,194L895,196L901,196L901,198L905,198L905,199L909,199L909,200L916,200L916,202L919,202L919,203L930,203L930,204L932,204L932,205L934,205L934,206L936,206L936,207L937,207L937,208L947,208L947,210L952,210L952,211L956,211L956,212L958,212L958,213L962,213L962,214L965,214L965,215L969,215L969,216L974,216L974,217L979,217L979,218L982,218L982,219L984,219L984,220L990,220L990,221L993,221L993,222L995,222L995,223L1001,223L1001,224L1006,224L1006,225L1009,225L1009,226L1012,226L1012,227L1015,227L1015,229L1016,229L1016,230L1020,230L1020,231L1021,231L1021,233L1023,233L1023,234L1028,234L1028,235L1030,235L1030,236L1039,236L1039,238L1044,238L1044,239L1051,239L1051,240L1052,240L1052,242L1059,242L1059,244L1061,244L1061,245L1066,245L1066,249L1068,249L1068,250L1073,250L1073,251L1074,251L1074,252L1076,252L1076,253L1077,253L1077,254L1083,254L1083,255L1085,255L1085,256L1086,256L1086,257L1089,257L1089,258L1091,258L1091,259L1095,259L1095,261L1096,261L1096,263L1100,263L1100,265L1107,265L1107,268L1108,268L1108,269L1111,269L1111,270L1112,270L1112,272L1114,272L1114,273L1119,273L1119,274L1122,274L1122,275L1123,275L1123,276L1125,276L1125,278L1129,278L1129,279L1131,279L1131,280L1135,280L1135,281L1136,281L1136,282L1140,282L1140,283L1142,283L1142,284L1144,284L1144,285L1145,285L1145,287L1146,287L1146,288L1151,288L1151,289L1156,289L1156,290L1157,290L1157,291L1158,291L1158,292L1158,292" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L37,0L37,20L42,20L42,21L110,21L110,22L116,22L116,23L223,23L223,24L275,24L275,25L350,25L350,26L390,26L390,27L544,27L544,28L583,28L583,29L640,29L640,30L643,30L643,31L679,31L679,32L747,32L747,33L748,33L748,32L749,32L749,32L751,32L751,33L753,33L753,34L774,34L774,35L792,35L792,36L959,36L959,37L963,37L963,38L996,38L996,39L998,39L998,40L1053,40L1053,41L1057,41L1057,42L1065,42L1065,43L1093,43L1093,43L1094,43L1094,45L1100,45L1100,44L1101,44L1101,43L1113,43L1113,45L1115,45L1115,44L1116,44L1116,47L1121,47L1121,49L1128,49L1128,50L1142,50L1142,51L1155,51L1155,52L1158,52" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L38,0L38,13L133,13L133,14L134,14L134,15L178,15L178,16L229,16L229,18L238,18L238,18L249,18L249,19L550,19L550,20L641,20L641,21L642,21L642,22L651,22L651,23L689,23L689,24L700,24L700,25L746,25L746,26L756,26L756,27L800,27L800,28L876,28L876,29L877,29L877,30L903,30L903,31L907,31L907,32L909,32L909,33L910,33L910,34L912,34L912,35L918,35L918,36L925,36L925,37L929,37L929,38L944,38L944,39L953,39L953,40L959,40L959,41L962,41L962,42L964,42L964,43L977,43L977,44L978,44L978,44L982,44L982,45L984,45L984,46L1003,46L1003,47L1008,47L1008,48L1011,48L1011,49L1021,49L1021,50L1049,50L1049,51L1070,51L1070,50L1071,50L1071,49L1072,49L1072,49L1073,49L1073,49L1076,49L1076,50L1077,50L1077,51L1078,51L1078,52L1083,52L1083,52L1086,52L1086,53L1089,53L1089,61L1090,61L1090,62L1091,62L1091,63L1092,63L1092,64L1105,64L1105,65L1108,65L1108,66L1110,66L1110,67L1113,67L1113,68L1114,68L1114,69L1115,69L1115,70L1121,70L1121,71L1124,71L1124,72L1126,72L1126,73L1127,73L1127,74L1143,74L1143,75L1150,75L1150,76L1155,76L1155,77L1158,77" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L38,0L38,13L65,13L65,14L71,14L71,14L127,14L127,15L134,15L134,16L136,16L136,16L162,16L162,16L229,16L229,16L236,16L236,16L245,16L245,17L286,17L286,17L301,17L301,18L319,18L319,19L386,19L386,20L398,20L398,20L425,20L425,21L583,21L583,22L645,22L645,23L739,23L739,24L792,24L792,25L885,25L885,26L918,26L918,27L983,27L983,28L984,28L984,29L985,29L985,30L996,30L996,31L1006,31L1006,32L1013,32L1013,33L1076,33L1076,34L1097,34L1097,35L1099,35L1099,36L1118,36L1118,37L1131,37L1131,37L1133,37L1133,37L1142,37L1142,38L1156,38L1156,38L1158,38" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L41,0L41,31L50,31L50,32L98,32L98,33L99,33L99,34L105,34L105,35L110,35L110,36L123,36L123,37L172,37L172,38L179,38L179,39L190,39L190,39L193,39L193,40L205,40L205,41L232,41L232,43L246,43L246,44L269,44L269,45L314,45L314,46L321,46L321,47L330,47L330,49L346,49L346,50L379,50L379,51L394,51L394,52L456,52L456,53L497,53L497,54L499,54L499,55L532,55L532,56L554,56L554,57L562,57L562,58L641,58L641,59L645,59L645,60L708,60L708,61L739,61L739,62L778,62L778,63L792,63L792,64L853,64L853,65L854,65L854,66L889,66L889,67L900,67L900,68L909,68L909,69L914,69L914,70L918,70L918,71L944,71L944,72L945,72L945,73L946,73L946,74L949,74L949,75L950,75L950,76L978,76L978,77L995,77L995,78L1006,78L1006,79L1008,79L1008,80L1037,80L1037,81L1045,81L1045,82L1058,82L1058,83L1062,83L1062,84L1070,84L1070,85L1072,85L1072,86L1097,86L1097,87L1100,87L1100,88L1103,88L1103,89L1108,89L1108,90L1114,90L1114,91L1115,91L1115,91L1116,91L1116,90L1120,90L1120,91L1121,91L1121,92L1122,92L1122,93L1129,93L1129,92L1131,92L1131,93L1132,93L1132,94L1134,94L1134,94L1145,94L1145,95L1148,95L1148,96L1153,96L1153,97L1157,97L1157,98L1158,98" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L64,0L64,7L71,7L71,7L996,7L996,8L1106,8L1106,8L1127,8L1127,9L1139,9L1139,9L1158,9" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.81wpx5oq</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L66,0L66,5L349,5L349,5L735,5L735,7L1065,7L1065,9L1076,9L1076,10L1107,10L1107,9L1158,9" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.5ler7m5q</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L91,0L91,7L92,7L92,6L93,6L93,7L499,7L499,8L649,8L649,8L1108,8L1108,7L1113,7L1113,7L1114,7L1114,8L1158,8" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.z19mo80l</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L99,0L99,11L187,11L187,12L261,12L261,13L262,13L262,14L293,14L293,15L456,15L456,16L566,16L566,16L608,16L608,17L618,17L618,18L651,18L651,19L788,19L788,19L798,19L798,20L800,20L800,21L886,21L886,22L888,22L888,23L948,23L948,24L959,24L959,24L1043,24L1043,26L1061,26L1061,27L1070,27L1070,27L1072,27L1072,25L1080,25L1080,26L1081,26L1081,27L1085,27L1085,26L1086,26L1086,27L1089,27L1089,28L1090,28L1090,29L1091,29L1091,30L1093,30L1093,34L1105,34L1105,35L1116,35L1116,34L1117,34L1117,35L1119,35L1119,36L1126,36L1126,35L1127,35L1127,37L1129,37L1129,39L1143,39L1143,40L1151,40L1151,41L1158,41" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L100,0L100,6L261,6L261,6L497,6L497,7L1063,7L1063,8L1085,8L1085,9L1096,9L1096,10L1118,10L1118,9L1139,9L1139,10L1158,10" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0138n5dq</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L102,0L102,14L135,14L135,15L178,15L178,16L188,16L188,17L206,17L206,18L214,18L214,19L391,19L391,20L414,20L414,21L460,21L460,22L524,22L524,23L549,23L549,24L565,24L565,24L566,24L566,24L567,24L567,25L642,25L642,26L653,26L653,27L688,27L688,28L774,28L774,29L776,29L776,30L792,30L792,31L800,31L800,32L801,32L801,33L922,33L922,34L958,34L958,35L1020,35L1020,36L1030,36L1030,37L1074,37L1074,36L1075,36L1075,37L1077,37L1077,38L1078,38L1078,39L1089,39L1089,40L1090,40L1090,41L1092,41L1092,42L1104,42L1104,43L1108,43L1108,44L1143,44L1143,46L1149,46L1149,47L1151,47L1151,48L1157,48L1157,49L1158,49" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L127,0L127,16L130,16L130,15L134,15L134,16L136,16L136,17L193,17L193,18L243,18L243,18L249,18L249,18L251,18L251,19L275,19L275,20L386,20L386,21L433,21L433,22L455,22L455,23L583,23L583,24L747,24L747,25L944,25L944,26L963,26L963,27L964,27L964,28L965,28L965,29L996,29L996,30L1061,30L1061,31L1065,31L1065,32L1090,32L1090,34L1095,34L1095,35L1096,35L1096,35L1098,35L1098,36L1101,36L1101,37L1105,37L1105,38L1122,38L1122,39L1158,39" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L143,0L143,23L179,23L179,24L196,24L196,25L220,25L220,26L232,26L232,28L246,28L246,29L300,29L300,30L329,30L329,31L342,31L342,32L347,32L347,33L349,33L349,33L490,33L490,34L497,34L497,35L500,35L500,36L522,36L522,37L561,37L561,38L564,38L564,39L630,39L630,40L641,40L641,41L645,41L645,42L707,42L707,43L717,43L717,45L739,45L739,46L740,46L740,47L743,47L743,48L762,48L762,49L771,49L771,50L792,50L792,52L822,52L822,53L842,53L842,54L875,54L875,55L879,55L879,56L885,56L885,57L887,57L887,58L909,58L909,59L925,59L925,60L929,60L929,61L933,61L933,62L934,62L934,63L938,63L938,64L945,64L945,65L946,65L946,66L947,66L947,67L953,67L953,68L954,68L954,69L972,69L972,70L974,70L974,71L990,71L990,72L995,72L995,73L1006,73L1006,74L1008,74L1008,75L1021,75L1021,76L1026,76L1026,77L1028,77L1028,76L1029,76L1029,77L1030,77L1030,78L1040,78L1040,79L1041,79L1041,79L1042,79L1042,81L1057,81L1057,82L1068,82L1068,83L1069,83L1069,84L1072,84L1072,85L1083,85L1083,86L1091,86L1091,87L1097,87L1097,89L1108,89L1108,90L1114,90L1114,91L1115,91L1115,92L1116,92L1116,92L1120,92L1120,93L1129,93L1129,92L1130,92L1130,93L1132,93L1132,94L1133,94L1133,93L1134,93L1134,94L1145,94L1145,95L1148,95L1148,96L1156,96L1156,97L1158,97" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L153,0L153,13L255,13L255,14L343,14L343,14L497,14L497,15L520,15L520,16L748,16L748,17L792,17L792,18L841,18L841,19L942,19L942,20L948,20L948,21L958,21L958,22L969,22L969,22L972,22L972,23L975,23L975,24L995,24L995,25L1006,25L1006,26L1014,26L1014,27L1038,27L1038,28L1065,28L1065,29L1070,29L1070,30L1078,30L1078,31L1083,31L1083,32L1102,32L1102,33L1114,33L1114,34L1131,34L1131,35L1141,35L1141,36L1145,36L1145,37L1152,37L1152,38L1158,38" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L154,0L154,8L323,8L323,8L748,8L748,9L792,9L792,10L865,10L865,11L870,11L870,12L878,12L878,13L884,13L884,13L888,13L888,14L950,14L950,13L954,13L954,14L975,14L975,15L1016,15L1016,16L1065,16L1065,17L1100,17L1100,18L1143,18L1143,19L1158,19" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.p12dx07q</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L164,0L164,29L166,29L166,30L214,30L214,30L250,30L250,31L275,31L275,32L318,32L318,32L395,32L395,33L412,33L412,34L455,34L455,35L509,35L509,36L583,36L583,37L643,37L643,38L652,38L652,39L683,39L683,40L736,40L736,41L737,41L737,42L746,42L746,43L792,43L792,44L805,44L805,45L868,45L868,46L917,46L917,47L929,47L929,48L930,48L930,49L933,49L933,51L940,51L940,52L945,52L945,53L955,53L955,54L974,54L974,56L996,56L996,57L997,57L997,56L998,56L998,57L1020,57L1020,58L1045,58L1045,59L1055,59L1055,60L1061,60L1061,61L1075,61L1075,62L1085,62L1085,63L1086,63L1086,63L1087,63L1087,64L1089,64L1089,66L1090,66L1090,67L1093,67L1093,68L1094,68L1094,69L1097,69L1097,70L1106,70L1106,72L1113,72L1113,73L1114,73L1114,74L1126,74L1126,74L1149,74L1149,75L1156,75L1156,75L1158,75" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L178,0L178,116L191,116L191,117L196,117L196,118L198,118L198,120L202,120L202,122L203,122L203,123L212,123L212,124L220,124L220,125L225,125L225,126L230,126L230,127L234,127L234,128L245,128L245,129L246,129L246,130L250,130L250,131L254,131L254,132L256,132L256,133L259,133L259,134L260,134L260,135L280,135L280,136L281,136L281,137L288,137L288,138L290,138L290,139L295,139L295,140L302,140L302,141L303,141L303,142L305,142L305,143L315,143L315,144L323,144L323,145L329,145L329,146L336,146L336,147L339,147L339,148L359,148L359,149L370,149L370,150L411,150L411,151L423,151L423,152L444,152L444,153L450,153L450,154L456,154L456,156L462,156L462,157L470,157L470,158L497,158L497,159L526,159L526,162L551,162L551,163L593,163L593,164L594,164L594,165L614,165L614,166L617,166L617,167L624,167L624,168L649,168L649,169L659,169L659,170L661,170L661,171L667,171L667,172L697,172L697,173L723,173L723,175L730,175L730,176L738,176L738,177L751,177L751,178L752,178L752,179L759,179L759,180L764,180L764,181L768,181L768,182L770,182L770,183L780,183L780,184L792,184L792,185L800,185L800,186L820,186L820,187L825,187L825,188L826,188L826,190L841,190L841,191L853,191L853,192L859,192L859,193L862,193L862,194L868,194L868,195L871,195L871,196L899,196L899,197L905,197L905,198L907,198L907,199L917,199L917,200L918,200L918,201L922,201L922,202L928,202L928,204L930,204L930,205L933,205L933,206L938,206L938,207L947,207L947,208L956,208L956,210L961,210L961,211L962,211L962,213L965,213L965,214L968,214L968,215L972,215L972,216L985,216L985,217L986,217L986,219L987,219L987,219L988,219L988,220L989,220L989,221L990,221L990,222L994,222L994,223L995,223L995,224L997,224L997,225L1002,225L1002,226L1006,226L1006,227L1015,227L1015,226L1037,226L1037,227L1042,227L1042,228L1063,228L1063,229L1069,229L1069,230L1074,230L1074,232L1081,232L1081,233L1086,233L1086,234L1090,234L1090,235L1094,235L1094,236L1096,236L1096,238L1098,238L1098,239L1111,239L1111,240L1119,240L1119,241L1121,241L1121,242L1130,242L1130,243L1141,243L1141,244L1145,244L1145,245L1148,245L1148,246L1158,246" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L229,0L229,53L232,53L232,54L234,54L234,55L245,55L245,58L274,58L274,59L283,59L283,60L285,60L285,61L287,61L287,61L288,61L288,62L302,62L302,64L308,64L308,65L316,65L316,66L320,66L320,66L327,66L327,67L346,67L346,68L354,68L354,69L358,69L358,71L371,71L371,72L374,72L374,73L380,73L380,74L386,74L386,75L391,75L391,76L407,76L407,77L421,77L421,78L434,78L434,79L435,79L435,80L438,80L438,81L444,81L444,82L497,82L497,83L501,83L501,84L552,84L552,85L553,85L553,86L555,86L555,87L556,87L556,88L571,88L571,89L576,89L576,90L598,90L598,91L604,91L604,92L610,92L610,93L621,93L621,94L643,94L643,95L658,95L658,96L663,96L663,97L673,97L673,99L690,99L690,100L703,100L703,101L709,101L709,102L710,102L710,103L713,103L713,104L715,104L715,105L737,105L737,106L739,106L739,107L741,107L741,108L753,108L753,109L754,109L754,110L763,110L763,111L770,111L770,112L771,112L771,113L796,113L796,114L806,114L806,115L833,115L833,117L848,117L848,118L856,118L856,119L857,119L857,120L869,120L869,121L907,121L907,122L915,122L915,124L919,124L919,125L925,125L925,126L943,126L943,128L963,128L963,129L965,129L965,130L974,130L974,131L984,131L984,132L992,132L992,133L994,133L994,134L1000,134L1000,135L1006,135L1006,136L1007,136L1007,137L1008,137L1008,138L1035,138L1035,139L1051,139L1051,141L1054,141L1054,142L1060,142L1060,143L1069,143L1069,144L1070,144L1070,145L1072,145L1072,147L1073,147L1073,148L1074,148L1074,149L1081,149L1081,150L1084,150L1084,151L1085,151L1085,152L1086,152L1086,153L1091,153L1091,154L1096,154L1096,155L1105,155L1105,156L1113,156L1113,157L1115,157L1115,158L1127,158L1127,159L1128,159L1128,161L1131,161L1131,162L1134,162L1134,163L1144,163L1144,164L1145,164L1145,165L1148,165L1148,166L1155,166L1155,167L1156,167L1156,168L1157,168L1157,169L1158,169" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L229,0L229,4L316,4L316,3L323,3L323,4L497,4L497,5L952,5L952,5L1141,5L1141,5L1149,5L1149,6L1151,6L1151,7L1158,7" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.810zdxoq</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L229,0L229,21L234,21L234,22L288,22L288,23L346,23L346,24L380,24L380,25L386,25L386,26L421,26L421,27L435,27L435,28L497,28L497,29L503,29L503,30L598,30L598,31L671,31L671,32L715,32L715,33L743,33L743,34L765,34L765,35L835,35L835,36L885,36L885,37L918,37L918,39L919,39L919,40L984,40L984,41L990,41L990,42L995,42L995,43L1006,43L1006,44L1021,44L1021,45L1038,45L1038,46L1054,46L1054,47L1070,47L1070,48L1078,48L1078,49L1087,49L1087,50L1089,50L1089,51L1091,51L1091,52L1096,52L1096,53L1097,53L1097,54L1103,54L1103,55L1115,55L1115,56L1131,56L1131,58L1145,58L1145,59L1150,59L1150,60L1156,60L1156,61L1158,61" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L230,0L230,59L234,59L234,60L245,60L245,61L274,61L274,63L281,63L281,64L288,64L288,65L323,65L323,66L335,66L335,67L380,67L380,68L386,68L386,69L391,69L391,70L497,70L497,71L504,71L504,72L534,72L534,73L643,73L643,74L654,74L654,75L659,75L659,76L674,76L674,77L687,77L687,78L689,78L689,79L700,79L700,80L706,80L706,81L708,81L708,83L762,83L762,84L792,84L792,85L806,85L806,86L835,86L835,87L851,87L851,88L860,88L860,89L873,89L873,90L874,90L874,90L876,90L876,92L894,92L894,94L899,94L899,95L914,95L914,96L922,96L922,97L929,97L929,98L930,98L930,100L932,100L932,101L935,101L935,102L938,102L938,103L939,103L939,104L944,104L944,105L950,105L950,107L960,107L960,108L980,108L980,109L984,109L984,110L990,110L990,111L994,111L994,113L995,113L995,114L1006,114L1006,115L1008,115L1008,116L1025,116L1025,117L1069,117L1069,118L1086,118L1086,120L1089,120L1089,122L1097,122L1097,121L1099,121L1099,120L1108,120L1108,121L1111,121L1111,122L1114,122L1114,124L1115,124L1115,125L1116,125L1116,124L1118,124L1118,125L1123,125L1123,127L1131,127L1131,128L1135,128L1135,127L1136,127L1136,128L1137,128L1137,129L1140,129L1140,130L1142,130L1142,131L1145,131L1145,132L1147,132L1147,133L1149,133L1149,134L1151,134L1151,135L1158,135" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L235,0L235,18L291,18L291,18L381,18L381,19L498,19L498,20L643,20L643,21L648,21L648,22L650,22L650,23L671,23L671,24L766,24L766,25L774,25L774,26L792,26L792,27L800,27L800,28L839,28L839,29L841,29L841,30L860,30L860,31L865,31L865,32L955,32L955,33L959,33L959,34L967,34L967,35L969,35L969,36L1008,36L1008,37L1053,37L1053,38L1069,38L1069,39L1075,39L1075,40L1076,40L1076,39L1077,39L1077,38L1078,38L1078,38L1089,38L1089,39L1091,39L1091,40L1092,40L1092,41L1099,41L1099,42L1102,42L1102,45L1108,45L1108,46L1113,46L1113,48L1114,48L1114,49L1121,49L1121,51L1125,51L1125,52L1127,52L1127,54L1143,54L1143,55L1149,55L1149,56L1150,56L1150,57L1158,57" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L240,0L240,23L244,23L244,24L254,24L254,25L256,25L256,26L263,26L263,27L267,27L267,28L269,28L269,27L270,27L270,28L274,28L274,29L280,29L280,30L286,30L286,29L303,29L303,30L309,30L309,31L313,31L313,32L321,32L321,33L323,33L323,34L325,34L325,35L327,35L327,36L330,36L330,37L336,37L336,38L341,38L341,40L354,40L354,41L360,41L360,42L361,42L361,43L366,43L366,44L370,44L370,45L372,45L372,46L374,46L374,47L381,47L381,48L388,48L388,49L424,49L424,50L428,50L428,52L433,52L433,53L435,53L435,54L442,54L442,55L448,55L448,56L454,56L454,57L470,57L470,58L475,58L475,59L483,59L483,60L490,60L490,61L496,61L496,62L539,62L539,63L584,63L584,64L601,64L601,65L602,65L602,67L606,67L606,68L619,68L619,69L620,69L620,70L643,70L643,71L644,71L644,72L649,72L649,74L651,74L651,75L666,75L666,76L670,76L670,77L688,77L688,78L696,78L696,79L715,79L715,80L716,80L716,81L722,81L722,82L729,82L729,83L731,83L731,84L755,84L755,85L756,85L756,86L762,86L762,87L763,87L763,88L764,88L764,90L768,90L768,89L771,89L771,90L772,90L772,91L774,91L774,92L779,92L779,93L789,93L789,94L795,94L795,96L797,96L797,96L813,96L813,97L840,97L840,98L843,98L843,100L847,100L847,101L851,101L851,102L853,102L853,103L854,103L854,104L857,104L857,105L885,105L885,106L889,106L889,107L892,107L892,108L894,108L894,109L901,109L901,110L903,110L903,111L909,111L909,112L913,112L913,113L914,113L914,114L918,114L918,115L919,115L919,117L923,117L923,118L927,118L927,119L928,119L928,120L932,120L932,121L933,121L933,122L934,122L934,123L935,123L935,124L938,124L938,125L942,125L942,124L945,124L945,125L947,125L947,126L951,126L951,128L953,128L953,130L965,130L965,131L966,131L966,132L974,132L974,133L989,133L989,134L996,134L996,135L1005,135L1005,136L1008,136L1008,137L1016,137L1016,138L1017,138L1017,139L1021,139L1021,140L1023,140L1023,141L1029,141L1029,142L1031,142L1031,143L1033,143L1033,144L1035,144L1035,145L1041,145L1041,147L1045,147L1045,148L1051,148L1051,149L1052,149L1052,150L1059,150L1059,151L1060,151L1060,152L1073,152L1073,153L1074,153L1074,154L1078,154L1078,155L1080,155L1080,156L1081,156L1081,157L1085,157L1085,158L1086,158L1086,159L1089,159L1089,160L1093,160L1093,161L1094,161L1094,164L1096,164L1096,165L1100,165L1100,166L1101,166L1101,167L1102,167L1102,168L1104,168L1104,170L1105,170L1105,171L1106,171L1106,172L1108,172L1108,173L1116,173L1116,174L1121,174L1121,176L1125,176L1125,178L1131,178L1131,179L1134,179L1134,180L1137,180L1137,181L1141,181L1141,182L1149,182L1149,184L1150,184L1150,185L1151,185L1151,186L1156,186L1156,187L1158,187" tabindex="0">
						<title>xd17x94d-9l71pv4l.21gpn081</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L244,0L244,7L716,7L716,7L792,7L792,8L918,8L918,9L930,9L930,10L940,10L940,11L954,11L954,12L966,12L966,13L969,13L969,14L970,14L970,15L1065,15L1065,16L1087,16L1087,15L1088,15L1088,16L1092,16L1092,17L1113,17L1113,18L1143,18L1143,19L1158,19" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6e0q</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path dtabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L249,0L249,25L275,25L275,26L280,26L280,27L312,27L312,28L449,28L449,29L470,29L470,30L521,30L521,31L583,31L583,32L671,32L671,33L723,33L723,34L742,34L742,35L756,35L756,36L774,36L774,37L792,37L792,38L884,38L884,40L886,40L886,41L920,41L920,42L948,42L948,43L986,43L986,44L987,44L987,45L996,45L996,46L998,46L998,47L1048,47L1048,46L1054,46L1054,47L1065,47L1065,48L1073,48L1073,49L1075,49L1075,50L1085,50L1085,51L1088,51L1088,52L1090,52L1090,53L1091,53L1091,54L1093,54L1093,55L1099,55L1099,54L1100,54L1100,53L1103,53L1103,54L1105,54L1105,52L1109,52L1109,57L1111,57L1111,58L1114,58L1114,57L1115,57L1115,58L1116,58L1116,57L1118,57L1118,59L1121,59L1121,60L1126,60L1126,60L1139,60L1139,61L1142,61L1142,62L1156,62L1156,63L1158,63" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L250,0L250,10L267,10L267,10L298,10L298,11L647,11L647,12L653,12L653,13L739,13L739,14L751,14L751,15L792,15L792,16L876,16L876,17L891,17L891,18L921,18L921,19L949,19L949,20L1007,20L1007,21L1008,21L1008,22L1065,22L1065,24L1066,24L1066,26L1138,26L1138,27L1139,27L1139,28L1143,28L1143,29L1158,29" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.5q86rxr1</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L250,0L250,7L267,7L267,7L285,7L285,7L449,7L449,8L647,8L647,9L740,9L740,10L792,10L792,11L921,11L921,12L973,12L973,13L989,13L989,14L1066,14L1066,15L1082,15L1082,16L1086,16L1086,15L1088,15L1088,16L1092,16L1092,17L1113,17L1113,18L1143,18L1143,19L1158,19" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.gq7jzvnq</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L259,0L259,9L650,9L650,10L716,10L716,10L947,10L947,11L969,11L969,12L1068,12L1068,13L1069,13L1069,14L1090,14L1090,15L1101,15L1101,16L1102,16L1102,17L1112,17L1112,18L1113,18L1113,18L1124,18L1124,17L1139,17L1139,18L1143,18L1143,19L1158,19" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.814y0701</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L260,0L260,6L497,6L497,7L831,7L831,8L941,8L941,9L1062,9L1062,10L1095,10L1095,11L1112,11L1112,12L1140,12L1140,13L1158,13" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.zqop6rp1</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L261,0L261,9L672,9L672,10L792,10L792,11L910,11L910,12L921,12L921,13L948,13L948,14L991,14L991,15L1060,15L1060,15L1065,15L1065,16L1066,16L1066,15L1076,15L1076,16L1085,16L1085,19L1092,19L1092,19L1158,19" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21dzoj3l</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L266,0L266,7L770,7L770,8L792,8L792,9L921,9L921,10L950,10L950,11L963,11L963,11L971,11L971,12L986,12L986,13L1065,13L1065,14L1066,14L1066,13L1078,13L1078,14L1079,14L1079,15L1085,15L1085,16L1158,16" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6ejq</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L276,0L276,9L289,9L289,9L449,9L449,10L760,10L760,11L787,11L787,12L792,12L792,13L827,13L827,14L918,14L918,15L962,15L962,16L1008,16L1008,17L1065,17L1065,18L1077,18L1077,18L1089,18L1089,18L1101,18L1101,20L1113,20L1113,21L1143,21L1143,22L1158,22" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L284,0L284,13L413,13L413,13L551,13L551,14L649,14L649,15L738,15L738,16L792,16L792,17L800,17L800,18L970,18L970,19L975,19L975,18L987,18L987,19L1044,19L1044,20L1065,20L1065,21L1070,21L1070,22L1081,22L1081,23L1098,23L1098,24L1133,24L1133,24L1143,24L1143,25L1158,25" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.xqkjmnnl</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L299,0L299,8L446,8L446,9L481,9L481,10L646,10L646,11L921,11L921,11L930,11L930,12L1067,12L1067,13L1097,13L1097,15L1109,15L1109,16L1119,16L1119,16L1121,16L1121,17L1158,17" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.rqvp5e7q</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L317,0L317,3L343,3L343,4L398,4L398,5L633,5L633,6L704,6L704,7L706,7L706,8L767,8L767,8L768,8L768,9L770,9L770,8L778,8L778,9L792,9L792,10L795,10L795,11L796,11L796,10L799,10L799,11L821,11L821,12L865,12L865,13L884,13L884,14L887,14L887,15L898,15L898,16L899,16L899,17L915,17L915,18L956,18L956,19L985,19L985,20L993,20L993,21L1008,21L1008,22L1044,22L1044,23L1066,23L1066,24L1090,24L1090,25L1095,25L1095,26L1098,26L1098,27L1099,27L1099,28L1105,28L1105,29L1115,29L1115,30L1131,30L1131,31L1141,31L1141,32L1142,32L1142,33L1144,33L1144,34L1149,34L1149,35L1158,35" tabindex="0">
						<title>l_gdr5onk9-rkl3znrk-rn1g06dn.qj77o50q</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path dtabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L397,0L397,2L398,2L398,4L416,4L416,4L456,4L456,5L754,5L754,6L930,6L930,7L941,7L941,8L982,8L982,9L1045,9L1045,10L1057,10L1057,11L1127,11L1127,12L1131,12L1131,11L1152,11L1152,12L1153,12L1153,12L1154,12L1154,12L1158,12" tabindex="0">
						<title>l_xd0mnpjw-rkl3znrk-wley4prn.192xe54q</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L420,0L420,18L792,18L792,19L856,19L856,19L868,19L868,20L877,20L877,21L885,21L885,21L888,21L888,20L891,20L891,21L899,21L899,22L917,22L917,23L956,23L956,24L1027,24L1027,25L1031,25L1031,26L1043,26L1043,27L1061,27L1061,28L1066,28L1066,29L1090,29L1090,30L1113,30L1113,31L1124,31L1124,32L1127,32L1127,30L1138,30L1138,31L1143,31L1143,32L1158,32" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L434,0L434,16L488,16L488,17L513,17L513,16L516,16L516,17L618,17L618,18L649,18L649,19L697,19L697,20L701,20L701,21L732,21L732,22L735,22L735,23L742,23L742,24L776,24L776,23L795,23L795,24L796,24L796,25L797,25L797,24L831,24L831,25L836,25L836,26L843,26L843,27L867,27L867,28L885,28L885,29L907,29L907,30L908,30L908,31L914,31L914,32L939,32L939,33L942,33L942,34L945,34L945,35L948,35L948,36L953,36L953,37L960,37L960,38L968,38L968,39L1008,39L1008,40L1017,40L1017,41L1035,41L1035,42L1043,42L1043,42L1054,42L1054,44L1058,44L1058,45L1064,45L1064,46L1072,46L1072,47L1073,47L1073,46L1079,46L1079,47L1086,47L1086,48L1088,48L1088,49L1093,49L1093,50L1094,50L1094,49L1095,49L1095,51L1097,51L1097,51L1099,51L1099,50L1102,50L1102,51L1106,51L1106,50L1110,50L1110,51L1113,51L1113,59L1117,59L1117,60L1120,60L1120,61L1127,61L1127,62L1130,62L1130,63L1158,63" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.1dk62o3l</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L454,0L454,27L748,27L748,28L986,28L986,29L1158,29" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L493,0L493,13L512,13L512,15L650,15L650,16L757,16L757,17L792,17L792,18L899,18L899,20L940,20L940,21L968,21L968,22L977,22L977,23L1063,23L1063,24L1065,24L1065,25L1069,25L1069,24L1074,24L1074,24L1075,24L1075,23L1076,23L1076,24L1080,24L1080,25L1088,25L1088,25L1095,25L1095,25L1097,25L1097,26L1099,26L1099,25L1101,25L1101,24L1109,24L1109,23L1110,23L1110,23L1128,23L1128,23L1142,23L1142,34L1143,34L1143,35L1158,35" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyrgl</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L514,0L514,11L582,11L582,12L650,12L650,13L748,13L748,14L765,14L765,15L792,15L792,16L952,16L952,16L963,16L963,17L983,17L983,18L1085,18L1085,19L1135,19L1135,20L1142,20L1142,21L1158,21" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,0L543,0L543,7L657,7L657,8L792,8L792,9L940,9L940,10L950,10L950,10L951,10L951,11L976,11L976,12L1066,12L1066,13L1143,13L1143,14L1148,14L1148,15L1158,15" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21g8owxl</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,0L643,0L643,12L647,12L647,11L712,11L712,11L1021,11L1021,12L1091,12L1091,13L1093,13L1093,14L1158,14" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.810zkwwq</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,0L712,0L712,7L772,7L772,8L774,8L774,9L792,9L792,10L800,10L800,11L876,11L876,12L939,12L939,13L946,13L946,14L959,14L959,15L975,15L975,17L980,17L980,17L982,17L982,18L1014,18L1014,19L1049,19L1049,20L1054,20L1054,21L1064,21L1064,22L1090,22L1090,23L1091,23L1091,24L1093,24L1093,25L1127,25L1127,27L1141,27L1141,28L1150,28L1150,29L1158,29" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.qj7zdm3q</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,0L1085,0L1085,6L1098,6L1098,7L1158,7" tabindex="0">
						<title>l_rdqo542w-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,0L1085,0L1085,18L1086,18L1086,19L1109,19L1109,20L1121,20L1121,21L1148,21L1148,22L1151,22L1151,23L1158,23" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,0L1125,0L1125,9L1158,9" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.q5vkg7vl</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,0L1135,0L1135,9L1158,9" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.ln8rzznl</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,0L1135,0L1135,4L1158,4" tabindex="0">
						<title>l_gdr5onk9-rkl3znrk-rn1g06dn.1gn42k6l</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path d="M0,0L1135,0L1135,7L1158,7" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.jq606z3q</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,0L1140,0L1140,8L1142,8L1142,9L1158,9" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.lmozgg01</title>
					</path>
				</g>
				<g style="--index: 54;">
					<path d="M0,0L1140,0L1140,4L1158,4" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.1927drjq</title>
					</path>
				</g>
				<g style="--index: 55;">
					<path d="M0,0L1141,0L1141,6L1158,6" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.qvv3eeyq</title>
					</path>
				</g>
				<g style="--index: 56;">
					<path d="M0,0L1142,0L1142,15L1158,15" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.814y45w1</title>
					</path>
				</g>
				<g style="--index: 57;">
					<path d="M0,0L1148,0L1148,34L1158,34" tabindex="0">
						<title>rkl9qwrk-6njkg4el.lr3x560l</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
