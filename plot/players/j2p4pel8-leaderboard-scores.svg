<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player j2p4pel8</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2024-07-03</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-31</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">278</text>
		</svg>
		<svg viewBox="0 0 424 278" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 278) scale(1 -1)" style="--count: 70;">
				<g>
					<rect x="0" y="0" width="424" height="278"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,3L2,3L2,4L63,4L63,4L74,4L74,5L88,5L88,5L117,5L117,6L161,6L161,7L180,7L180,8L183,8L183,9L194,9L194,10L195,10L195,10L211,10L211,10L252,10L252,11L281,11L281,11L289,11L289,11L304,11L304,12L340,12L340,12L362,12L362,12L364,12L364,17L386,17L386,18L391,18L391,19L394,19L394,20L395,20L395,21L401,21L401,22L410,22L410,24L411,24L411,28L424,28" tabindex="0">
						<title>l_gdr5onk9-rkl3znrk-rn1g06dn.qj77o50q</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path dtabindex="0">
						<title>xd17x94d-9l71pv4l.21gpn081</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L61,0L61,17L131,17L131,17L181,17L181,18L214,18L214,18L215,18L215,18L280,18L280,18L286,18L286,19L291,19L291,19L302,19L302,20L317,20L317,20L334,20L334,20L350,20L350,21L363,21L363,41L366,41L366,42L374,42L374,43L383,43L383,44L385,44L385,45L386,45L386,46L387,46L387,47L391,47L391,50L392,50L392,51L399,51L399,52L411,52L411,53L424,53" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L61,0L61,4L88,4L88,4L248,4L248,4L259,4L259,4L279,4L279,4L363,4L363,17L413,17L413,17L424,17" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L233,0L233,14L243,14L243,15L250,15L250,15L369,15L369,21L383,21L383,22L389,22L389,22L409,22L409,21L424,21" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.4qypgj4q</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L234,0L234,44L241,44L241,44L243,44L243,45L245,45L245,44L253,44L253,45L257,45L257,47L258,47L258,48L262,48L262,48L272,48L272,48L280,48L280,49L289,49L289,49L292,49L292,49L293,49L293,76L302,76L302,77L307,77L307,78L346,78L346,79L350,79L350,80L351,80L351,82L355,82L355,83L356,83L356,84L357,84L357,84L362,84L362,85L367,85L367,89L369,89L369,91L370,91L370,92L375,92L375,93L383,93L383,94L384,94L384,96L395,96L395,96L397,96L397,97L401,97L401,99L405,99L405,102L409,102L409,103L417,103L417,105L424,105L424,106L424,106" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L294,0L294,35L347,35L347,37L349,37L349,38L353,38L353,38L357,38L357,39L361,39L361,40L389,40L389,40L390,40L390,42L396,42L396,46L398,46L398,46L409,46L409,48L411,48L411,48L412,48L412,48L417,48L417,48L424,48L424,49L424,49" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L302,0L302,27L309,27L309,28L333,28L333,31L357,31L357,32L372,32L372,33L393,33L393,34L395,34L395,35L410,35L410,35L414,35L414,36L424,36" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L304,0L304,122L331,122L331,123L333,123L333,136L347,136L347,138L350,138L350,139L356,139L356,140L365,140L365,141L366,141L366,142L368,142L368,144L369,144L369,145L370,145L370,147L377,147L377,148L380,148L380,149L381,149L381,150L382,150L382,151L387,151L387,152L392,152L392,153L401,153L401,154L409,154L409,155L411,155L411,156L423,156L423,157L424,157L424,159L424,159" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L304,0L304,31L349,31L349,31L357,31L357,33L359,33L359,35L365,35L365,36L370,36L370,37L371,37L371,38L372,38L372,39L373,39L373,40L374,40L374,42L385,42L385,43L387,43L387,44L388,44L388,45L395,45L395,46L398,46L398,45L404,45L404,46L409,46L409,47L410,47L410,48L417,48L417,50L421,50L421,51L423,51L423,53L424,53" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L304,0L304,102L321,102L321,103L347,103L347,114L365,114L365,115L377,115L377,116L382,116L382,119L385,119L385,121L388,121L388,121L393,121L393,120L395,120L395,121L404,121L404,122L407,122L407,123L410,123L410,122L411,122L411,123L412,123L412,125L414,125L414,126L419,126L419,127L424,127" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L304,0L304,37L307,37L307,37L317,37L317,38L345,38L345,38L357,38L357,45L359,45L359,47L366,47L366,48L367,48L367,51L368,51L368,52L369,52L369,53L371,53L371,54L372,54L372,55L373,55L373,56L374,56L374,57L379,57L379,58L382,58L382,59L385,59L385,61L386,61L386,62L387,62L387,63L388,63L388,64L401,64L401,65L406,65L406,66L409,66L409,67L410,67L410,68L411,68L411,69L417,69L417,70L420,70L420,71L422,71L422,72L423,72L423,73L424,73" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L304,0L304,57L317,57L317,57L322,57L322,57L325,57L325,58L326,58L326,58L333,58L333,75L336,75L336,76L337,76L337,76L353,76L353,77L359,77L359,78L364,78L364,79L365,79L365,80L368,80L368,81L379,81L379,82L381,82L381,83L387,83L387,84L393,84L393,86L410,86L410,87L411,87L411,88L412,88L412,91L416,91L416,92L424,92" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L316,0L316,14L326,14L326,14L363,14L363,34L371,34L371,36L373,36L373,37L374,37L374,38L376,38L376,38L385,38L385,39L386,39L386,40L388,40L388,40L400,40L400,41L404,41L404,42L424,42" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L333,0L333,77L341,77L341,78L354,78L354,79L358,79L358,80L359,80L359,81L362,81L362,82L366,82L366,83L368,83L368,84L381,84L381,85L393,85L393,86L396,86L396,87L399,87L399,88L402,88L402,89L410,89L410,90L412,90L412,91L416,91L416,92L417,92L417,91L418,91L418,92L424,92" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L345,0L345,18L350,18L350,19L360,19L360,20L386,20L386,21L387,21L387,22L389,22L389,23L423,23L423,25L424,25" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.qj7zdm3q</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L350,0L350,16L351,16L351,16L381,16L381,16L382,16L382,17L405,17L405,18L417,18L417,19L424,19" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L351,0L351,8L354,8L354,7L391,7L391,8L424,8" tabindex="0">
						<title>l_o9xo3rp9-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L352,0L352,7L364,7L364,8L424,8" tabindex="0">
						<title>l_495zlx39-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L353,0L353,6L360,6L360,7L368,7L368,8L369,8L369,8L390,8L390,8L393,8L393,9L402,9L402,9L406,9L406,10L424,10" tabindex="0">
						<title>zd39lqyd-yn26k2jl.qoxwn4pq</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L357,0L357,16L366,16L366,16L367,16L367,25L368,25L368,27L375,27L375,27L376,27L376,29L377,29L377,30L382,30L382,31L383,31L383,30L384,30L384,30L385,30L385,31L386,31L386,32L387,32L387,33L388,33L388,34L389,34L389,33L394,33L394,33L401,33L401,34L412,34L412,35L413,35L413,34L415,34L415,35L422,35L422,36L423,36L423,37L424,37" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L357,0L357,239L362,239L362,243L363,243L363,243L364,243L364,244L369,244L369,245L370,245L370,247L372,247L372,248L373,248L373,249L379,249L379,250L381,250L381,251L382,251L382,252L385,252L385,253L387,253L387,259L391,259L391,261L392,261L392,263L396,263L396,265L403,265L403,268L404,268L404,269L407,269L407,270L408,270L408,272L410,272L410,273L415,273L415,274L418,274L418,275L419,275L419,276L421,276L421,278L424,278" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L357,0L357,30L361,30L361,30L386,30L386,32L391,32L391,33L392,33L392,36L393,36L393,36L394,36L394,35L397,35L397,36L401,36L401,37L418,37L418,38L424,38" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L357,0L357,25L362,25L362,27L386,27L386,28L388,28L388,27L393,27L393,28L396,28L396,27L397,27L397,27L399,27L399,28L409,28L409,29L420,29L420,30L423,30L423,32L424,32" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L357,0L357,54L371,54L371,57L381,57L381,58L382,58L382,64L383,64L383,65L385,65L385,67L386,67L386,68L388,68L388,68L389,68L389,69L390,69L390,70L393,70L393,69L402,69L402,71L409,71L409,72L410,72L410,73L424,73" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L359,0L359,221L365,221L365,222L370,222L370,224L377,224L377,225L382,225L382,226L386,226L386,227L390,227L390,228L392,228L392,230L394,230L394,231L407,231L407,232L415,232L415,233L417,233L417,234L424,234" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L361,0L361,14L373,14L373,19L385,19L385,20L386,20L386,20L392,20L392,20L397,20L397,19L409,19L409,20L424,20" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L361,0L361,21L370,21L370,21L371,21L371,25L372,25L372,26L376,26L376,28L384,28L384,30L391,30L391,31L392,31L392,31L393,31L393,32L406,32L406,32L407,32L407,33L408,33L408,33L424,33L424,34L424,34" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyrgl</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L361,0L361,17L376,17L376,20L377,20L377,21L394,21L394,21L395,21L395,22L424,22" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.xqkjmnnl</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L361,0L361,12L362,12L362,12L374,12L374,14L383,14L383,16L384,16L384,17L388,17L388,16L409,16L409,17L424,17" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6e0q</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L361,0L361,45L369,45L369,46L371,46L371,47L381,47L381,48L384,48L384,49L386,49L386,50L387,50L387,51L389,51L389,52L395,52L395,52L396,52L396,54L397,54L397,56L399,56L399,57L405,57L405,56L407,56L407,57L410,57L410,58L411,58L411,57L412,57L412,58L414,58L414,58L417,58L417,59L424,59" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L361,0L361,14L396,14L396,14L397,14L397,15L398,15L398,16L403,16L403,16L413,16L413,16L424,16" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.p12dx07q</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L361,0L361,20L362,20L362,23L385,23L385,24L424,24" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.5q86rxr1</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L361,0L361,58L364,58L364,58L367,58L367,58L368,58L368,58L369,58L369,79L371,79L371,78L374,78L374,79L375,79L375,80L380,80L380,81L384,81L384,82L385,82L385,83L389,83L389,85L390,85L390,86L393,86L393,86L395,86L395,88L401,88L401,89L403,89L403,89L413,89L413,90L414,90L414,90L416,90L416,91L417,91L417,90L421,90L421,89L424,89" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L361,0L361,27L366,27L366,28L374,28L374,29L398,29L398,30L410,30L410,31L413,31L413,32L415,32L415,32L424,32" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L361,0L361,14L362,14L362,16L372,16L372,18L374,18L374,18L377,18L377,18L381,18L381,17L424,17" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21dzoj3l</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L361,0L361,12L362,12L362,12L374,12L374,13L375,13L375,14L424,14" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6ejq</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L362,0L362,11L377,11L377,13L378,13L378,13L382,13L382,16L384,16L384,17L388,17L388,16L398,16L398,17L409,17L409,18L424,18" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.gq7jzvnq</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L362,0L362,11L413,11L413,11L424,11" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21g8owxl</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L364,0L364,22L369,22L369,22L371,22L371,23L381,23L381,24L382,24L382,25L383,25L383,26L389,26L389,26L390,26L390,29L391,29L391,28L394,28L394,29L396,29L396,28L406,28L406,29L413,29L413,30L417,30L417,31L424,31" tabindex="0">
						<title>rkl9qwrk-6njkg4el.lr3x560l</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L368,0L368,45L369,45L369,43L375,43L375,44L382,44L382,45L384,45L384,46L389,46L389,47L390,47L390,50L391,50L391,52L393,52L393,53L395,53L395,52L398,52L398,53L403,53L403,52L406,52L406,53L409,53L409,51L413,51L413,52L416,52L416,53L423,53L423,54L424,54" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.1dk62o3l</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L371,0L371,6L374,6L374,7L376,7L376,7L386,7L386,8L411,8L411,9L416,9L416,10L424,10" tabindex="0">
						<title>l_dy1gjkkd-rkl3znrk-wle345e8.q65k767l</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L372,0L372,11L424,11" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.5ler7m5q</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L372,0L372,2L373,2L373,3L375,3L375,5L376,5L376,7L412,7L412,8L415,8L415,9L424,9" tabindex="0">
						<title>l_drpxgo6w-rkl3znrk-68kwx3z8.1w4w8x5q</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,0L378,0L378,6L402,6L402,6L411,6L411,9L424,9" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.5lmk0gjq</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,0L381,0L381,8L392,8L392,9L414,9L414,10L424,10" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0138n5dq</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,0L384,0L384,12L411,12L411,12L414,12L414,13L417,13L417,14L424,14" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.qj7jxxoq</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,0L386,0L386,7L409,7L409,7L410,7L410,8L424,8" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.q5vkg7vl</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,0L386,0L386,14L397,14L397,15L398,15L398,15L403,15L403,14L408,14L408,17L420,17L420,18L424,18" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.814y0701</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,0L391,0L391,7L424,7" tabindex="0">
						<title>l_o9xo3rp9-9kv66g32-onv7r45n.810zdxoq</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,0L392,0L392,10L410,10L410,10L420,10L420,11L424,11" tabindex="0">
						<title>l_o9xo3rp9-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,0L394,0L394,6L424,6" tabindex="0">
						<title>l_rdqo542w-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path d="M0,0L395,0L395,18L411,18L411,19L424,19" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.5leogx5q</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,0L397,0L397,5L424,5" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.4lxp7e2q</title>
					</path>
				</g>
				<g style="--index: 54;">
					<path d="M0,0L397,0L397,4L403,4L403,3L417,3L417,4L424,4" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0q5njgmq</title>
					</path>
				</g>
				<g style="--index: 55;">
					<path d="M0,0L399,0L399,9L400,9L400,9L421,9L421,10L424,10" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.jq606z3q</title>
					</path>
				</g>
				<g style="--index: 56;">
					<path d="M0,0L402,0L402,6L423,6L423,7L424,7" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.81wpx5oq</title>
					</path>
				</g>
				<g style="--index: 57;">
					<path d="M0,0L408,0L408,12L424,12" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.qoxdrr4q</title>
					</path>
				</g>
				<g style="--index: 58;">
					<path d="M0,0L408,0L408,8L424,8L424,11L424,11" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.zqop6rp1</title>
					</path>
				</g>
				<g style="--index: 59;">
					<path d="M0,0L409,0L409,8L424,8" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.1w43556q</title>
					</path>
				</g>
				<g style="--index: 60;">
					<path d="M0,0L409,0L409,6L424,6" tabindex="0">
						<title>l_495zlx39-9kv66g32-onv7r45n.810zdxoq</title>
					</path>
				</g>
				<g style="--index: 61;">
					<path d="M0,0L409,0L409,6L424,6" tabindex="0">
						<title>l_495zlx39-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 62;">
					<path d="M0,0L410,0L410,6L424,6" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.z19mo80l</title>
					</path>
				</g>
				<g style="--index: 63;">
					<path d="M0,0L411,0L411,6L424,6" tabindex="0">
						<title>l_gdr5onk9-rkl3znrk-rn1g06dn.lmooe9y1</title>
					</path>
				</g>
				<g style="--index: 64;">
					<path d="M0,0L413,0L413,3L424,3" tabindex="0">
						<title>l_dy1gjkkd-rkl3znrk-wle345e8.lmojn041</title>
					</path>
				</g>
				<g style="--index: 65;">
					<path d="M0,0L415,0L415,17L417,17L417,16L424,16" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.rqvp5e7q</title>
					</path>
				</g>
				<g style="--index: 66;">
					<path d="M0,0L419,0L419,6L424,6" tabindex="0">
						<title>xd1v018d-68k7x44l.mlno8vjq</title>
					</path>
				</g>
				<g style="--index: 67;">
					<path d="M0,0L421,0L421,19L424,19" tabindex="0">
						<title>l_r9gn1qpd-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 68;">
					<path d="M0,0L423,0L423,5L424,5" tabindex="0">
						<title>9kv6lno2-wl3v33o8.qyz82z61</title>
					</path>
				</g>
				<g style="--index: 69;">
					<path d="M0,0L423,0L423,11L424,11" tabindex="0">
						<title>l_xd0mnpjw-rkl3znrk-wley4prn.192xe54q</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
