<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Rank by leaderboard for player 18qg9ndx</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-03-18</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-07-31</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">217</text>
		</svg>
		<svg viewBox="0 0 2692 217" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 217) scale(1 -1)" style="--count: 24;">
				<g>
					<rect x="0" y="0" width="2692" height="217"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,2L0,2L0,1L30,1L30,2L799,2L799,3L896,3L896,4L981,4L981,5L1021,5L1021,6L1030,6L1030,7L1056,7L1056,8L1130,8L1130,9L1570,9L1570,10L1574,10L1574,11L1637,11L1637,12L1699,12L1699,13L1738,13L1738,14L1815,14L1815,15L1827,15L1827,16L1841,16L1841,17L1895,17L1895,18L1924,18L1924,19L1937,19L1937,20L2085,20L2085,21L2092,21L2092,22L2117,22L2117,23L2159,23L2159,24L2236,24L2236,25L2302,25L2302,26L2312,26L2312,27L2334,27L2334,28L2338,28L2338,29L2387,29L2387,30L2417,30L2417,31L2437,31L2437,32L2470,32L2470,33L2504,33L2504,34L2524,34L2524,35L2529,35L2529,36L2533,36L2533,37L2541,37L2541,38L2542,38L2542,39L2548,39L2548,40L2549,40L2549,41L2567,41L2567,42L2569,42L2569,43L2590,43L2590,44L2603,44L2603,45L2616,45L2616,46L2621,46L2621,47L2625,47L2625,48L2635,48L2635,49L2636,49L2636,50L2652,50L2652,51L2663,51L2663,52L2664,52L2664,53L2678,53L2678,54L2680,54L2680,55L2686,55L2686,56L2692,56L2692,58L2692,58" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,4L0,4L0,0L30,0L30,1L365,1L365,2L454,2L454,3L455,3L455,4L704,4L704,5L785,5L785,6L803,6L803,8L958,8L958,9L962,9L962,10L966,10L966,11L978,11L978,12L981,12L981,13L982,13L982,14L985,14L985,15L1001,15L1001,16L1022,16L1022,17L1049,17L1049,18L1098,18L1098,19L1101,19L1101,20L1113,20L1113,21L1161,21L1161,22L1226,22L1226,23L1389,23L1389,24L1396,24L1396,25L1409,25L1409,26L1449,26L1449,27L1455,27L1455,28L1497,28L1497,29L1505,29L1505,30L1510,30L1510,32L1513,32L1513,33L1539,33L1539,34L1561,34L1561,35L1566,35L1566,36L1571,36L1571,37L1574,37L1574,38L1581,38L1581,39L1589,39L1589,40L1593,40L1593,41L1605,41L1605,42L1612,42L1612,43L1615,43L1615,44L1616,44L1616,45L1618,45L1618,46L1620,46L1620,47L1679,47L1679,48L1683,48L1683,49L1695,49L1695,50L1699,50L1699,51L1721,51L1721,52L1729,52L1729,53L1755,53L1755,54L1759,54L1759,55L1761,55L1761,56L1774,56L1774,57L1776,57L1776,58L1820,58L1820,59L1825,59L1825,60L1826,60L1826,61L1833,61L1833,62L1841,62L1841,63L1845,63L1845,64L1853,64L1853,65L1856,65L1856,66L1863,66L1863,67L1866,67L1866,68L1882,68L1882,69L1883,69L1883,71L1889,71L1889,73L1894,73L1894,74L1918,74L1918,75L1944,75L1944,76L1946,76L1946,77L1948,77L1948,78L1972,78L1972,79L1982,79L1982,81L1990,81L1990,82L2019,82L2019,83L2030,83L2030,84L2037,84L2037,85L2039,85L2039,86L2056,86L2056,87L2070,87L2070,88L2085,88L2085,90L2149,90L2149,91L2150,91L2150,92L2174,92L2174,93L2193,93L2193,94L2207,94L2207,95L2216,95L2216,96L2219,96L2219,97L2233,97L2233,98L2236,98L2236,99L2253,99L2253,100L2254,100L2254,102L2262,102L2262,103L2271,103L2271,105L2284,105L2284,106L2289,106L2289,107L2291,107L2291,108L2292,108L2292,109L2293,109L2293,110L2294,110L2294,111L2297,111L2297,112L2301,112L2301,113L2304,113L2304,114L2305,114L2305,115L2308,115L2308,117L2311,117L2311,118L2316,118L2316,119L2320,119L2320,120L2322,120L2322,121L2326,121L2326,122L2332,122L2332,124L2334,124L2334,125L2337,125L2337,126L2342,126L2342,127L2345,127L2345,128L2356,128L2356,129L2358,129L2358,130L2365,130L2365,131L2366,131L2366,133L2377,133L2377,134L2397,134L2397,135L2400,135L2400,136L2408,136L2408,137L2414,137L2414,139L2430,139L2430,140L2431,140L2431,141L2435,141L2435,142L2436,142L2436,143L2439,143L2439,144L2443,144L2443,145L2446,145L2446,146L2456,146L2456,147L2457,147L2457,148L2465,148L2465,149L2467,149L2467,150L2471,150L2471,151L2475,151L2475,153L2481,153L2481,154L2485,154L2485,155L2487,155L2487,157L2490,157L2490,159L2496,159L2496,161L2504,161L2504,162L2511,162L2511,164L2514,164L2514,165L2527,165L2527,166L2529,166L2529,167L2531,167L2531,168L2532,168L2532,169L2542,169L2542,170L2547,170L2547,171L2551,171L2551,172L2553,172L2553,173L2557,173L2557,174L2560,174L2560,175L2564,175L2564,176L2574,176L2574,177L2577,177L2577,178L2579,178L2579,179L2590,179L2590,180L2596,180L2596,181L2604,181L2604,182L2610,182L2610,183L2611,183L2611,184L2615,184L2615,185L2616,185L2616,187L2618,187L2618,188L2623,188L2623,189L2634,189L2634,191L2639,191L2639,192L2646,192L2646,193L2647,193L2647,195L2654,195L2654,197L2656,197L2656,198L2661,198L2661,202L2663,202L2663,203L2668,203L2668,204L2669,204L2669,206L2671,206L2671,207L2672,207L2672,208L2678,208L2678,209L2680,209L2680,210L2681,210L2681,211L2684,211L2684,212L2686,212L2686,213L2690,213L2690,215L2691,215L2691,217L2692,217" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,5L1,5L1,0L14,0L14,1L25,1L25,0L26,0L26,1L32,1L32,2L346,2L346,3L785,3L785,4L803,4L803,5L978,5L978,6L987,6L987,7L1038,7L1038,8L1043,8L1043,9L1072,9L1072,10L1117,10L1117,11L1386,11L1386,12L1470,12L1470,13L1512,13L1512,14L1532,14L1532,15L1824,15L1824,16L1936,16L1936,17L2002,17L2002,18L2016,18L2016,19L2033,19L2033,20L2308,20L2308,21L2310,21L2310,22L2332,22L2332,23L2349,23L2349,24L2350,24L2350,25L2375,25L2375,26L2428,26L2428,27L2558,27L2558,28L2569,28L2569,29L2589,29L2589,30L2595,30L2595,31L2603,31L2603,32L2665,32L2665,33L2667,33L2667,34L2668,34L2668,36L2681,36L2681,37L2691,37L2691,38L2692,38" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,4L2,4L2,3L35,3L35,4L801,4L801,5L960,5L960,6L978,6L978,8L985,8L985,9L1075,9L1075,10L1505,10L1505,11L1532,11L1532,12L1574,12L1574,13L1592,13L1592,14L1662,14L1662,15L1709,15L1709,16L1780,16L1780,17L1842,17L1842,18L1849,18L1849,19L1900,19L1900,20L2053,20L2053,21L2055,21L2055,22L2178,22L2178,23L2205,23L2205,24L2238,24L2238,25L2264,25L2264,26L2331,26L2331,27L2364,27L2364,28L2369,28L2369,29L2387,29L2387,30L2435,30L2435,31L2436,31L2436,32L2502,32L2502,33L2510,33L2510,34L2513,34L2513,35L2529,35L2529,36L2531,36L2531,37L2533,37L2533,38L2540,38L2540,39L2543,39L2543,40L2556,40L2556,41L2561,41L2561,42L2571,42L2571,43L2588,43L2588,44L2591,44L2591,45L2601,45L2601,46L2650,46L2650,48L2654,48L2654,49L2655,49L2655,50L2661,50L2661,51L2668,51L2668,53L2669,53L2669,54L2674,54L2674,55L2682,55L2682,56L2692,56" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,1L2,1L2,0L24,0L24,1L26,1L26,0L37,0L37,1L795,1L795,2L796,2L796,3L842,3L842,4L958,4L958,5L976,5L976,6L978,6L978,7L985,7L985,8L1004,8L1004,9L1079,9L1079,10L1550,10L1550,11L1574,11L1574,12L1616,12L1616,13L1722,13L1722,14L1729,14L1729,15L1788,15L1788,16L1846,16L1846,17L1870,17L1870,18L1981,18L1981,19L2028,19L2028,20L2178,20L2178,21L2342,21L2342,22L2539,22L2539,23L2558,23L2558,24L2559,24L2559,25L2560,25L2560,26L2591,26L2591,27L2656,27L2656,28L2660,28L2660,29L2685,29L2685,31L2690,31L2690,32L2691,32L2691,33L2692,33" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,2L4,2L4,2L34,2L34,3L771,3L771,4L773,4L773,5L777,5L777,6L791,6L791,7L882,7L882,8L908,8L908,9L958,9L958,10L976,10L976,11L978,11L978,12L983,12L983,13L985,13L985,14L1034,14L1034,15L1081,15L1081,16L1325,16L1325,17L1383,17L1383,18L1568,18L1568,19L1574,19L1574,20L1594,20L1594,21L1624,21L1624,22L1646,22L1646,23L1648,23L1648,24L1662,24L1662,25L1728,25L1728,26L1759,26L1759,27L1761,27L1761,28L1845,28L1845,29L1870,29L1870,30L1990,30L1990,31L2007,31L2007,32L2050,32L2050,33L2104,33L2104,34L2178,34L2178,35L2247,35L2247,36L2278,36L2278,37L2331,37L2331,38L2332,38L2332,39L2341,39L2341,40L2387,40L2387,41L2400,41L2400,42L2463,42L2463,43L2512,43L2512,44L2524,44L2524,45L2525,45L2525,46L2528,46L2528,48L2535,48L2535,49L2540,49L2540,50L2550,50L2550,51L2569,51L2569,53L2591,53L2591,54L2615,54L2615,55L2640,55L2640,56L2650,56L2650,57L2656,57L2656,58L2670,58L2670,59L2680,59L2680,60L2681,60L2681,61L2682,61L2682,62L2684,62L2684,64L2685,64L2685,65L2688,65L2688,66L2689,66L2689,67L2692,67" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,2L4,2L4,2L37,2L37,3L672,3L672,4L798,4L798,5L971,5L971,6L985,6L985,8L1018,8L1018,9L1076,9L1076,10L1079,10L1079,11L1416,11L1416,12L1470,12L1470,13L1538,13L1538,14L1556,14L1556,15L1574,15L1574,16L1575,16L1575,17L1596,17L1596,18L1602,18L1602,19L1632,19L1632,20L1637,20L1637,21L1705,21L1705,22L1711,22L1711,23L1818,23L1818,24L1870,24L1870,25L1945,25L1945,26L2139,26L2139,27L2178,27L2178,28L2235,28L2235,29L2238,29L2238,30L2274,30L2274,31L2342,31L2342,32L2346,32L2346,33L2369,33L2369,34L2387,34L2387,35L2554,35L2554,36L2558,36L2558,37L2591,37L2591,38L2593,38L2593,39L2648,39L2648,40L2652,40L2652,41L2660,41L2660,42L2688,42L2688,43L2689,43L2689,44L2692,44" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,2L4,2L4,2L30,2L30,3L795,3L795,4L958,4L958,5L981,5L981,6L1304,6L1304,7L1454,7L1454,8L1497,8L1497,9L1552,9L1552,10L1572,10L1572,11L1593,11L1593,12L1619,12L1619,13L1647,13L1647,14L1725,14L1725,15L1824,15L1824,16L1829,16L1829,17L1883,17L1883,18L1941,18L1941,19L2016,19L2016,21L2092,21L2092,22L2104,22L2104,23L2266,23L2266,24L2310,24L2310,25L2338,25L2338,26L2360,26L2360,27L2430,27L2430,28L2480,28L2480,29L2513,29L2513,31L2514,31L2514,32L2579,32L2579,33L2585,33L2585,34L2590,34L2590,35L2616,35L2616,36L2633,36L2633,37L2665,37L2665,38L2682,38L2682,39L2684,39L2684,40L2685,40L2685,41L2686,41L2686,42L2691,42L2691,43L2692,43" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,2L4,2L4,2L30,2L30,3L112,3L112,5L303,5L303,6L793,6L793,7L896,7L896,8L981,8L981,9L1007,9L1007,10L1013,10L1013,11L1030,11L1030,12L1056,12L1056,13L1125,13L1125,14L1131,14L1131,16L1456,16L1456,17L1512,17L1512,18L1574,18L1574,19L1606,19L1606,20L1619,20L1619,21L1636,21L1636,22L1645,22L1645,23L1695,23L1695,24L1705,24L1705,25L1767,25L1767,26L1788,26L1788,27L1827,27L1827,28L1841,28L1841,29L1864,29L1864,30L1916,30L1916,31L1925,31L1925,32L1989,32L1989,33L2002,33L2002,34L2051,34L2051,35L2092,35L2092,36L2153,36L2153,37L2157,37L2157,38L2236,38L2236,39L2303,39L2303,40L2334,40L2334,41L2373,41L2373,42L2387,42L2387,43L2448,43L2448,44L2449,44L2449,45L2484,45L2484,46L2495,46L2495,47L2504,47L2504,48L2509,48L2509,49L2513,49L2513,50L2540,50L2540,51L2544,51L2544,52L2545,52L2545,53L2573,53L2573,54L2590,54L2590,55L2632,55L2632,56L2640,56L2640,57L2653,57L2653,58L2657,58L2657,59L2665,59L2665,60L2680,60L2680,61L2692,61L2692,62L2692,62" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,2L4,2L4,2L25,2L25,0L26,0L26,1L28,1L28,0L34,0L34,1L106,1L106,2L893,2L893,3L1005,3L1005,4L1006,4L1006,5L1046,5L1046,6L1200,6L1200,7L1299,7L1299,8L1362,8L1362,9L1394,9L1394,10L1451,10L1451,11L1504,11L1504,12L1620,12L1620,13L1630,13L1630,14L1648,14L1648,15L1649,15L1649,16L1736,16L1736,17L1754,17L1754,18L1768,18L1768,19L1773,19L1773,20L1815,20L1815,21L1816,21L1816,22L1845,22L1845,23L1849,23L1849,24L1934,24L1934,25L2018,25L2018,26L2051,26L2051,27L2108,27L2108,28L2292,28L2292,29L2295,29L2295,30L2346,30L2346,31L2347,31L2347,32L2387,32L2387,33L2415,33L2415,34L2421,34L2421,35L2436,35L2436,36L2475,36L2475,37L2494,37L2494,38L2523,38L2523,39L2525,39L2525,40L2528,40L2528,41L2560,41L2560,42L2567,42L2567,43L2573,43L2573,44L2578,44L2578,45L2581,45L2581,46L2583,46L2583,47L2585,47L2585,48L2590,48L2590,49L2652,49L2652,50L2658,50L2658,51L2664,51L2664,52L2681,52L2681,53L2689,53L2689,54L2691,54L2691,55L2692,55" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,1L4,1L4,1L117,1L117,2L689,2L689,3L819,3L819,4L965,4L965,5L978,5L978,6L990,6L990,7L1004,7L1004,8L1047,8L1047,9L1081,9L1081,10L1114,10L1114,11L2106,11L2106,12L2663,12L2663,14L2666,14L2666,15L2667,15L2667,16L2668,16L2668,18L2674,18L2674,19L2679,19L2679,20L2683,20L2683,21L2684,21L2684,22L2688,22L2688,24L2689,24L2689,25L2692,25L2692,26L2692,26" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,6L4,6L4,5L25,5L25,6L32,6L32,7L514,7L514,8L574,8L574,9L774,9L774,10L788,10L788,11L850,11L850,12L965,12L965,13L981,13L981,14L982,14L982,15L1042,15L1042,16L1049,16L1049,17L1057,17L1057,18L1061,18L1061,19L1071,19L1071,20L1097,20L1097,21L1117,21L1117,22L1125,22L1125,23L1138,23L1138,24L1140,24L1140,25L1294,25L1294,26L1326,26L1326,27L1397,27L1397,28L1402,28L1402,29L1412,29L1412,30L1449,30L1449,32L1453,32L1453,33L1504,33L1504,34L1535,34L1535,35L1570,35L1570,36L1574,36L1574,37L1575,37L1575,38L1593,38L1593,39L1606,39L1606,40L1618,40L1618,41L1622,41L1622,42L1633,42L1633,43L1634,43L1634,44L1690,44L1690,45L1736,45L1736,46L1825,46L1825,47L1829,47L1829,48L1840,48L1840,49L1869,49L1869,51L1876,51L1876,52L1883,52L1883,53L1918,53L1918,54L1930,54L1930,55L1981,55L1981,56L2092,56L2092,57L2099,57L2099,58L2129,58L2129,59L2254,59L2254,60L2269,60L2269,61L2282,61L2282,62L2284,62L2284,63L2295,63L2295,64L2303,64L2303,66L2357,66L2357,67L2387,67L2387,68L2430,68L2430,69L2446,69L2446,70L2468,70L2468,71L2471,71L2471,72L2489,72L2489,74L2494,74L2494,75L2509,75L2509,76L2525,76L2525,78L2527,78L2527,79L2530,79L2530,80L2534,80L2534,81L2539,81L2539,82L2545,82L2545,84L2555,84L2555,85L2579,85L2579,86L2585,86L2585,87L2589,87L2589,89L2590,89L2590,90L2601,90L2601,91L2603,91L2603,92L2620,92L2620,93L2664,93L2664,94L2681,94L2681,96L2684,96L2684,98L2692,98" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,1L4,1L4,1L35,1L35,2L773,2L773,3L799,3L799,4L961,4L961,5L978,5L978,6L983,6L983,7L1008,7L1008,8L1035,8L1035,9L1089,9L1089,10L1269,10L1269,11L1574,11L1574,12L1633,12L1633,13L1660,13L1660,14L1729,14L1729,15L1840,15L1840,16L1896,16L1896,17L1981,17L1981,18L2020,18L2020,19L2178,19L2178,20L2334,20L2334,21L2387,21L2387,22L2480,22L2480,23L2513,23L2513,24L2578,24L2578,25L2579,25L2579,26L2580,26L2580,27L2591,27L2591,28L2601,28L2601,29L2608,29L2608,30L2671,30L2671,31L2692,31L2692,32L2692,32" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L22,0L22,0L31,0L31,1L793,1L793,2L795,2L795,3L981,3L981,5L1011,5L1011,6L1076,6L1076,7L1178,7L1178,8L1459,8L1459,9L1469,9L1469,10L1536,10L1536,11L1634,11L1634,12L1697,12L1697,13L1730,13L1730,14L1773,14L1773,15L1783,15L1783,16L1801,16L1801,17L1809,17L1809,18L1986,18L1986,19L2009,19L2009,20L2055,20L2055,21L2119,21L2119,22L2144,22L2144,23L2162,23L2162,24L2237,24L2237,25L2248,25L2248,26L2283,26L2283,27L2369,27L2369,28L2371,28L2371,29L2387,29L2387,30L2395,30L2395,31L2396,31L2396,32L2517,32L2517,33L2553,33L2553,34L2615,34L2615,35L2625,35L2625,36L2670,36L2670,37L2672,37L2672,38L2673,38L2673,39L2684,39L2684,40L2685,40L2685,41L2692,41" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L22,0L22,0L114,0L114,1L795,1L795,2L978,2L978,3L981,3L981,4L1001,4L1001,5L1005,5L1005,6L1010,6L1010,7L1458,7L1458,8L1529,8L1529,9L1538,9L1538,10L1603,10L1603,11L1728,11L1728,12L1729,12L1729,13L1732,13L1732,14L1736,14L1736,15L1823,15L1823,16L1830,16L1830,17L1976,17L1976,18L2093,18L2093,19L2238,19L2238,20L2243,20L2243,21L2245,21L2245,22L2266,22L2266,23L2361,23L2361,24L2369,24L2369,25L2387,25L2387,26L2395,26L2395,27L2434,27L2434,28L2436,28L2436,29L2455,29L2455,30L2460,30L2460,31L2550,31L2550,32L2554,32L2554,33L2562,33L2562,34L2564,34L2564,35L2603,35L2603,36L2648,36L2648,37L2664,37L2664,38L2669,38L2669,39L2670,39L2670,40L2673,40L2673,41L2684,41L2684,42L2686,42L2686,43L2687,43L2687,44L2692,44" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L23,0L23,0L109,0L109,1L114,1L114,2L784,2L784,3L842,3L842,4L896,4L896,5L954,5L954,6L979,6L979,7L981,7L981,8L985,8L985,9L986,9L986,10L988,10L988,11L1068,11L1068,12L1431,12L1431,13L1469,13L1469,14L1472,14L1472,15L1497,15L1497,16L1543,16L1543,17L1578,17L1578,18L1716,18L1716,19L1729,19L1729,20L1841,20L1841,21L1982,21L1982,22L2049,22L2049,23L2343,23L2343,24L2581,24L2581,25L2692,25" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L24,0L24,0L32,0L32,1L112,1L112,2L788,2L788,3L796,3L796,4L979,4L979,6L982,6L982,7L983,7L983,8L985,8L985,9L1004,9L1004,10L1187,10L1187,11L1550,11L1550,12L1633,12L1633,13L1728,13L1728,14L1729,14L1729,15L1844,15L1844,16L2145,16L2145,17L2236,17L2236,18L2237,18L2237,19L2246,19L2246,20L2284,20L2284,21L2295,21L2295,22L2341,22L2341,23L2351,23L2351,24L2395,24L2395,25L2471,25L2471,26L2472,26L2472,27L2498,27L2498,28L2502,28L2502,29L2504,29L2504,30L2505,30L2505,31L2507,31L2507,32L2513,32L2513,33L2520,33L2520,34L2524,34L2524,35L2539,35L2539,36L2548,36L2548,37L2554,37L2554,38L2557,38L2557,39L2559,39L2559,40L2572,40L2572,41L2573,41L2573,42L2579,42L2579,43L2598,43L2598,44L2603,44L2603,45L2606,45L2606,46L2616,46L2616,47L2644,47L2644,48L2665,48L2665,49L2667,49L2667,50L2668,50L2668,51L2670,51L2670,52L2671,52L2671,53L2672,53L2672,54L2673,54L2673,55L2678,55L2678,56L2681,56L2681,57L2684,57L2684,59L2685,59L2685,60L2686,60L2686,61L2687,61L2687,62L2692,62" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L24,0L24,0L31,0L31,1L784,1L784,2L892,2L892,3L979,3L979,4L1007,4L1007,5L1030,5L1030,6L1130,6L1130,7L1728,7L1728,8L1729,8L1729,9L1879,9L1879,11L2244,11L2244,12L2333,12L2333,13L2387,13L2387,14L2395,14L2395,15L2565,15L2565,16L2582,16L2582,17L2639,17L2639,18L2660,18L2660,19L2676,19L2676,20L2692,20" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.xqkjmnnl</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,1L24,1L24,1L25,1L25,0L26,0L26,1L112,1L112,2L113,2L113,3L794,3L794,4L978,4L978,5L986,5L986,6L1001,6L1001,7L1076,7L1076,8L1694,8L1694,10L1782,10L1782,11L1856,11L1856,12L1857,12L1857,13L1888,13L1888,14L2051,14L2051,15L2203,15L2203,16L2213,16L2213,17L2246,17L2246,18L2383,18L2383,19L2393,19L2393,20L2395,20L2395,21L2481,21L2481,22L2483,22L2483,23L2543,23L2543,24L2554,24L2554,25L2656,25L2656,26L2665,26L2665,27L2675,27L2675,28L2676,28L2676,29L2681,29L2681,30L2684,30L2684,31L2685,31L2685,32L2686,32L2686,33L2692,33" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L25,0L25,0L114,0L114,1L800,1L800,2L979,2L979,3L1030,3L1030,4L1046,4L1046,5L1243,5L1243,6L1326,6L1326,7L1479,7L1479,8L1552,8L1552,9L1553,9L1553,10L1797,10L1797,11L1800,11L1800,12L1894,12L1894,13L1905,13L1905,14L1915,14L1915,15L1945,15L1945,16L2015,16L2015,17L2387,17L2387,18L2451,18L2451,19L2463,19L2463,20L2494,20L2494,21L2512,21L2512,22L2551,22L2551,23L2622,23L2622,24L2626,24L2626,25L2638,25L2638,26L2656,26L2656,27L2661,27L2661,28L2685,28L2685,29L2692,29" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L25,0L25,0L114,0L114,1L806,1L806,2L959,2L959,3L978,3L978,4L1030,4L1030,5L1525,5L1525,6L1749,6L1749,7L2343,7L2343,8L2387,8L2387,9L2460,9L2460,10L2465,10L2465,11L2473,11L2473,12L2483,12L2483,13L2549,13L2549,14L2570,14L2570,15L2660,15L2660,16L2692,16" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.p12dx07q</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,1L26,1L26,1L37,1L37,2L796,2L796,3L854,3L854,4L971,4L971,5L978,5L978,6L981,6L981,7L1003,7L1003,8L1007,8L1007,9L1080,9L1080,10L1191,10L1191,11L1473,11L1473,12L1537,12L1537,13L1538,13L1538,14L1565,14L1565,16L1574,16L1574,17L1579,17L1579,18L1670,18L1670,19L1675,19L1675,20L1729,20L1729,21L1731,21L1731,22L1736,22L1736,23L1844,23L1844,24L1870,24L1870,25L1875,25L1875,26L1907,26L1907,27L2044,27L2044,28L2065,28L2065,29L2116,29L2116,30L2178,30L2178,31L2266,31L2266,32L2318,32L2318,33L2337,33L2337,34L2351,34L2351,35L2369,35L2369,36L2387,36L2387,37L2479,37L2479,39L2481,39L2481,40L2515,40L2515,41L2543,41L2543,42L2581,42L2581,43L2582,43L2582,44L2591,44L2591,45L2593,45L2593,46L2660,46L2660,47L2668,47L2668,48L2670,48L2670,49L2680,49L2680,50L2683,50L2683,51L2685,51L2685,52L2686,52L2686,53L2688,53L2688,54L2692,54" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,1L166,1L166,0L169,0L169,1L179,1L179,2L1183,2L1183,4L1236,4L1236,5L1615,5L1615,6L1889,6L1889,7L1893,7L1893,8L2097,8L2097,9L2116,9L2116,10L2117,10L2117,11L2216,11L2216,12L2240,12L2240,13L2452,13L2452,14L2527,14L2527,15L2532,15L2532,16L2542,16L2542,17L2549,17L2549,18L2682,18L2682,19L2688,19L2688,20L2692,20" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.4qypgj4q</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L196,0L196,0L197,0L197,0L305,0L305,1L395,1L395,2L458,2L458,3L1245,3L1245,4L1247,4L1247,5L2553,5L2553,6L2631,6L2631,7L2692,7" tabindex="0">
						<title>xd17x94d-9l71pv4l.81wrgm5l</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
