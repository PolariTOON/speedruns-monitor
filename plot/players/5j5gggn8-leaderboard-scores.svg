<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player 5j5gggn8</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-01-13</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-30</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">118</text>
		</svg>
		<svg viewBox="0 0 2817 118" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 118) scale(1 -1)" style="--count: 6;">
				<g>
					<rect x="0" y="0" width="2817" height="118"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,2L26,2L26,1L68,1L68,2L98,2L98,2L590,2L590,3L835,3L835,3L837,3L837,3L841,3L841,3L855,3L855,3L946,3L946,3L972,3L972,3L1022,3L1022,3L1040,3L1040,3L1042,3L1042,3L1047,3L1047,3L1049,3L1049,3L1098,3L1098,3L1145,3L1145,3L1389,3L1389,3L1447,3L1447,3L1632,3L1632,3L1638,3L1638,3L1658,3L1658,3L1688,3L1688,3L1710,3L1710,3L1712,3L1712,3L1726,3L1726,3L1792,3L1792,3L1823,3L1823,3L1825,3L1825,3L1909,3L1909,3L1934,3L1934,3L2054,3L2054,3L2071,3L2071,3L2114,3L2114,3L2168,3L2168,3L2242,3L2242,3L2302,3L2302,4L2311,4L2311,4L2342,4L2342,4L2395,4L2395,4L2396,4L2396,4L2405,4L2405,4L2451,4L2451,4L2464,4L2464,4L2527,4L2527,4L2576,4L2576,4L2588,4L2588,4L2589,4L2589,4L2592,4L2592,4L2599,4L2599,4L2604,4L2604,4L2614,4L2614,4L2633,4L2633,4L2655,4L2655,4L2679,4L2679,4L2704,4L2704,4L2714,4L2714,4L2720,4L2720,4L2734,4L2734,4L2744,4L2744,4L2745,4L2745,4L2746,4L2746,4L2748,4L2748,4L2749,4L2749,4L2752,4L2752,4L2753,4L2753,4L2765,4L2765,4L2772,4L2772,4L2773,4L2773,4L2808,4L2808,4L2817,4" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L0,0L0,1L1,1L1,1L4,1L4,1L5,1L5,1L20,1L20,1L64,1L64,1L94,1L94,1L429,1L429,1L518,1L518,1L519,1L519,1L578,1L578,2L768,2L768,2L849,2L849,2L867,2L867,2L1022,2L1022,2L1026,2L1026,2L1030,2L1030,2L1042,2L1042,2L1045,2L1045,2L1046,2L1046,2L1049,2L1049,2L1065,2L1065,2L1086,2L1086,2L1113,2L1113,2L1122,2L1122,3L1126,3L1126,4L1155,4L1155,4L1162,4L1162,4L1165,4L1165,4L1177,4L1177,4L1179,4L1179,5L1225,5L1225,5L1290,5L1290,5L1374,5L1374,5L1453,5L1453,5L1460,5L1460,5L1473,5L1473,5L1513,5L1513,5L1519,5L1519,5L1522,5L1522,6L1524,6L1524,7L1532,7L1532,7L1545,7L1545,7L1553,7L1553,7L1569,7L1569,7L1574,7L1574,7L1577,7L1577,7L1603,7L1603,7L1625,7L1625,7L1630,7L1630,7L1632,7L1632,7L1635,7L1635,7L1638,7L1638,7L1645,7L1645,7L1653,7L1653,7L1657,7L1657,7L1658,7L1658,7L1669,7L1669,7L1673,7L1673,8L1676,8L1676,8L1679,8L1679,8L1680,8L1680,8L1682,8L1682,8L1684,8L1684,8L1685,8L1685,9L1743,9L1743,9L1747,9L1747,9L1757,9L1757,9L1763,9L1763,9L1778,9L1778,9L1785,9L1785,9L1793,9L1793,9L1819,9L1819,9L1823,9L1823,9L1825,9L1825,9L1838,9L1838,9L1840,9L1840,9L1884,9L1884,9L1889,9L1889,9L1890,9L1890,9L1891,9L1891,9L1897,9L1897,9L1905,9L1905,9L1907,9L1907,9L1909,9L1909,9L1913,9L1913,10L1917,10L1917,9L1920,9L1920,9L1925,9L1925,9L1927,9L1927,9L1930,9L1930,9L1946,9L1946,9L1947,9L1947,9L1953,9L1953,9L1957,9L1957,10L1958,10L1958,10L1982,10L1982,10L1996,10L1996,10L2008,10L2008,10L2010,10L2010,10L2012,10L2012,10L2036,10L2036,10L2039,10L2039,11L2046,11L2046,11L2054,11L2054,11L2083,11L2083,11L2094,11L2094,11L2101,11L2101,11L2103,11L2103,11L2119,11L2119,11L2120,11L2120,11L2134,11L2134,11L2146,11L2146,12L2149,12L2149,12L2213,12L2213,12L2214,12L2214,12L2238,12L2238,12L2257,12L2257,12L2271,12L2271,12L2280,12L2280,12L2283,12L2283,12L2297,12L2297,12L2300,12L2300,12L2303,12L2303,13L2317,13L2317,13L2318,13L2318,13L2326,13L2326,13L2335,13L2335,13L2348,13L2348,13L2353,13L2353,13L2355,13L2355,13L2356,13L2356,13L2357,13L2357,13L2358,13L2358,13L2361,13L2361,13L2365,13L2365,13L2368,13L2368,13L2369,13L2369,13L2372,13L2372,13L2375,13L2375,13L2380,13L2380,13L2384,13L2384,13L2386,13L2386,13L2390,13L2390,13L2396,13L2396,13L2398,13L2398,13L2401,13L2401,13L2406,13L2406,13L2409,13L2409,13L2420,13L2420,13L2422,13L2422,13L2429,13L2429,13L2430,13L2430,13L2441,13L2441,13L2461,13L2461,13L2464,13L2464,13L2472,13L2472,13L2478,13L2478,13L2484,13L2484,13L2494,13L2494,13L2495,13L2495,13L2499,13L2499,13L2500,13L2500,13L2503,13L2503,13L2507,13L2507,13L2510,13L2510,13L2520,13L2520,13L2521,13L2521,13L2529,13L2529,13L2531,13L2531,13L2535,13L2535,13L2538,13L2538,13L2539,13L2539,13L2545,13L2545,13L2549,13L2549,13L2551,13L2551,13L2554,13L2554,13L2560,13L2560,13L2564,13L2564,13L2568,13L2568,13L2575,13L2575,13L2578,13L2578,13L2589,13L2589,14L2591,14L2591,14L2593,14L2593,14L2595,14L2595,14L2596,14L2596,14L2606,14L2606,15L2611,15L2611,15L2615,15L2615,15L2617,15L2617,15L2621,15L2621,15L2624,15L2624,15L2625,15L2625,14L2628,14L2628,14L2633,14L2633,14L2638,14L2638,14L2641,14L2641,14L2643,14L2643,14L2649,14L2649,14L2652,14L2652,14L2654,14L2654,14L2660,14L2660,14L2665,14L2665,14L2668,14L2668,14L2671,14L2671,14L2674,14L2674,14L2675,14L2675,14L2679,14L2679,14L2680,14L2680,14L2682,14L2682,14L2687,14L2687,14L2689,14L2689,15L2698,15L2698,15L2703,15L2703,15L2710,15L2710,15L2711,15L2711,15L2718,15L2718,15L2720,15L2720,15L2725,15L2725,15L2727,15L2727,15L2732,15L2732,15L2733,15L2733,15L2735,15L2735,15L2736,15L2736,15L2742,15L2742,15L2744,15L2744,15L2745,15L2745,15L2748,15L2748,15L2750,15L2750,15L2754,15L2754,15L2755,15L2755,15L2759,15L2759,15L2766,15L2766,16L2767,16L2767,16L2770,16L2770,16L2771,16L2771,16L2773,16L2773,16L2778,16L2778,16L2781,16L2781,16L2782,16L2782,16L2784,16L2784,16L2788,16L2788,16L2790,16L2790,16L2794,16L2794,16L2795,16L2795,16L2799,16L2799,16L2801,16L2801,16L2803,16L2803,16L2804,16L2804,16L2805,16L2805,16L2810,16L2810,16L2815,16L2815,16L2816,16L2816,17L2817,17L2817,17L2817,17" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L0,0L0,2L4,2L4,3L6,3L6,3L13,3L13,2L22,2L22,1L68,1L68,1L89,1L89,1L96,1L96,1L578,1L578,1L638,1L638,1L838,1L838,1L852,1L852,1L914,1L914,1L1029,1L1029,1L1045,1L1045,1L1046,1L1046,1L1106,1L1106,1L1113,1L1113,1L1120,1L1120,1L1121,1L1121,1L1125,1L1125,1L1135,1L1135,1L1144,1L1144,2L1161,2L1161,2L1181,2L1181,2L1189,2L1189,2L1192,2L1192,2L1202,2L1202,2L1204,2L1204,2L1358,2L1358,2L1390,2L1390,2L1461,2L1461,2L1466,2L1466,2L1476,2L1476,2L1477,2L1477,3L1497,3L1497,4L1513,4L1513,4L1517,4L1517,4L1519,4L1519,5L1568,5L1568,5L1599,5L1599,5L1627,5L1627,5L1634,5L1634,5L1638,5L1638,5L1639,5L1639,5L1657,5L1657,5L1670,5L1670,5L1682,5L1682,5L1686,5L1686,5L1697,5L1697,5L1698,5L1698,5L1732,5L1732,5L1751,5L1751,5L1754,5L1754,5L1800,5L1800,5L1841,5L1841,5L1889,5L1889,5L1893,5L1893,5L1904,5L1904,5L1933,5L1933,5L1940,5L1940,5L1947,5L1947,5L1982,5L1982,5L1994,5L1994,5L2039,5L2039,6L2045,6L2045,6L2050,6L2050,7L2156,7L2156,7L2163,7L2163,7L2193,7L2193,7L2302,7L2302,7L2313,7L2313,8L2318,8L2318,8L2333,8L2333,8L2346,8L2346,8L2348,8L2348,8L2359,8L2359,8L2365,8L2365,8L2367,8L2367,8L2421,8L2421,8L2451,8L2451,8L2465,8L2465,9L2494,9L2494,9L2510,9L2510,9L2519,9L2519,9L2532,9L2532,9L2535,9L2535,9L2553,9L2553,9L2558,9L2558,9L2573,9L2573,9L2581,9L2581,10L2588,10L2588,11L2589,11L2589,11L2591,11L2591,11L2594,11L2594,11L2597,11L2597,11L2598,11L2598,11L2603,11L2603,11L2609,11L2609,11L2619,11L2619,11L2639,11L2639,11L2643,11L2643,11L2649,11L2649,11L2653,11L2653,11L2654,11L2654,11L2665,11L2665,11L2667,11L2667,11L2684,11L2684,11L2728,11L2728,11L2745,11L2745,11L2748,11L2748,11L2767,11L2767,11L2770,11L2770,11L2774,11L2774,11L2777,11L2777,11L2782,11L2782,11L2790,11L2790,11L2795,11L2795,11L2796,11L2796,11L2801,11L2801,11L2804,11L2804,11L2806,11L2806,11L2808,11L2808,11L2810,11L2810,11L2817,11" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L0,0L0,2L2,2L2,1L4,1L4,2L5,2L5,2L9,2L9,4L11,4L11,3L13,3L13,3L23,3L23,2L65,2L65,3L78,3L78,3L96,3L96,3L410,3L410,3L577,3L577,4L637,4L637,5L849,5L849,5L867,5L867,5L1029,5L1029,6L1042,6L1042,6L1051,6L1051,6L1068,6L1068,7L1101,7L1101,8L1102,8L1102,7L1107,7L1107,7L1136,7L1136,7L1144,7L1144,8L1181,8L1181,7L1195,7L1195,8L1198,8L1198,9L1395,9L1395,10L1421,10L1421,11L1424,11L1424,12L1425,12L1425,13L1450,13L1450,13L1480,13L1480,14L1481,14L1481,15L1509,15L1509,15L1514,15L1514,16L1533,16L1533,17L1534,17L1534,16L1549,16L1549,17L1569,17L1569,18L1574,18L1574,19L1576,19L1576,18L1578,18L1578,19L1596,19L1596,19L1598,19L1598,20L1610,20L1610,21L1637,21L1637,22L1657,22L1657,23L1662,23L1662,24L1679,24L1679,25L1700,25L1700,26L1702,26L1702,27L1706,27L1706,28L1768,28L1768,29L1774,29L1774,30L1803,30L1803,29L1838,29L1838,30L1883,30L1883,31L1888,31L1888,31L1891,31L1891,32L1893,32L1893,33L1904,33L1904,36L1933,36L1933,37L1942,37L1942,38L1944,38L1944,39L1947,39L1947,40L1961,40L1961,42L1967,42L1967,43L1975,43L1975,44L1977,44L1977,43L1986,43L1986,44L2005,44L2005,45L2013,45L2013,46L2017,46L2017,48L2030,48L2030,49L2033,49L2033,49L2039,49L2039,50L2045,50L2045,51L2050,51L2050,52L2066,52L2066,52L2080,52L2080,52L2093,52L2093,53L2094,53L2094,54L2097,54L2097,54L2103,54L2103,55L2156,55L2156,56L2160,56L2160,56L2211,56L2211,57L2212,57L2212,58L2214,58L2214,58L2215,58L2215,59L2216,59L2216,58L2230,58L2230,59L2235,59L2235,60L2257,60L2257,61L2263,61L2263,62L2269,62L2269,63L2280,63L2280,64L2302,64L2302,65L2317,65L2317,66L2322,66L2322,67L2332,67L2332,69L2349,69L2349,70L2362,70L2362,71L2368,71L2368,72L2369,72L2369,72L2372,72L2372,72L2374,72L2374,72L2396,72L2396,72L2398,72L2398,73L2400,73L2400,74L2412,74L2412,75L2413,75L2413,75L2422,75L2422,76L2429,76L2429,77L2430,77L2430,78L2455,78L2455,79L2465,79L2465,80L2492,80L2492,81L2507,81L2507,82L2515,82L2515,83L2516,83L2516,84L2528,84L2528,85L2566,85L2566,86L2574,86L2574,88L2578,88L2578,89L2584,89L2584,90L2602,90L2602,92L2622,92L2622,92L2624,92L2624,93L2633,93L2633,93L2643,93L2643,94L2651,94L2651,95L2653,95L2653,95L2659,95L2659,95L2665,95L2665,96L2666,96L2666,97L2667,97L2667,97L2694,97L2694,98L2710,98L2710,100L2713,100L2713,101L2719,101L2719,101L2728,101L2728,102L2729,102L2729,102L2731,102L2731,103L2732,103L2732,102L2733,102L2733,103L2740,103L2740,104L2743,104L2743,105L2744,105L2744,106L2745,106L2745,106L2750,106L2750,107L2755,107L2755,107L2764,107L2764,108L2772,108L2772,109L2774,109L2774,110L2786,110L2786,110L2787,110L2787,111L2790,111L2790,112L2793,112L2793,113L2803,113L2803,114L2804,114L2804,115L2807,115L2807,116L2808,116L2808,115L2814,115L2814,116L2815,116L2815,117L2816,117L2816,118L2817,118" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L0,0L0,4L9,4L9,4L66,4L66,5L99,5L99,5L590,5L590,6L865,6L865,6L1024,6L1024,7L1042,7L1042,8L1049,8L1049,8L1072,8L1072,7L1099,7L1099,6L1135,6L1135,7L1473,7L1473,6L1511,6L1511,7L1543,7L1543,8L1569,8L1569,9L1596,9L1596,9L1638,9L1638,9L1656,9L1656,9L1658,9L1658,10L1662,10L1662,11L1664,11L1664,12L1696,12L1696,13L1726,13L1726,14L1773,14L1773,15L1780,15L1780,16L1792,16L1792,17L1844,17L1844,17L1856,17L1856,18L1897,18L1897,19L1903,19L1903,20L1906,20L1906,20L1913,20L1913,20L1922,20L1922,21L1935,21L1935,22L1964,22L1964,22L1976,22L1976,23L2045,23L2045,24L2069,24L2069,25L2078,25L2078,26L2114,26L2114,27L2117,27L2117,28L2119,28L2119,28L2160,28L2160,29L2242,29L2242,29L2269,29L2269,30L2271,30L2271,31L2285,31L2285,32L2301,32L2301,33L2302,33L2302,34L2319,34L2319,35L2324,35L2324,36L2328,36L2328,36L2376,36L2376,37L2395,37L2395,37L2405,37L2405,38L2428,38L2428,38L2433,38L2433,39L2451,39L2451,39L2499,39L2499,39L2500,39L2500,39L2536,39L2536,40L2566,40L2566,42L2574,42L2574,43L2576,43L2576,44L2587,44L2587,45L2593,45L2593,46L2595,46L2595,47L2597,47L2597,48L2604,48L2604,48L2606,48L2606,49L2616,49L2616,50L2620,50L2620,52L2621,52L2621,53L2625,53L2625,54L2634,54L2634,53L2635,53L2635,53L2643,53L2643,54L2652,54L2652,54L2655,54L2655,55L2656,55L2656,54L2665,54L2665,54L2670,54L2670,55L2709,55L2709,56L2713,56L2713,57L2714,57L2714,57L2718,57L2718,57L2719,57L2719,58L2725,58L2725,58L2732,58L2732,58L2738,58L2738,58L2746,58L2746,58L2758,58L2758,58L2760,58L2760,58L2764,58L2764,59L2768,59L2768,60L2769,60L2769,60L2772,60L2772,60L2780,60L2780,62L2787,62L2787,62L2792,62L2792,62L2793,62L2793,61L2802,61L2802,61L2807,61L2807,62L2813,62L2813,63L2817,63" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L2,0L2,1L4,1L4,2L68,2L68,3L101,3L101,3L736,3L736,4L862,4L862,4L1035,4L1035,4L1049,4L1049,4L1082,4L1082,4L1140,4L1140,4L1143,4L1143,4L1480,4L1480,4L1534,4L1534,4L1602,4L1602,4L1620,4L1620,5L1638,5L1638,5L1639,5L1639,5L1660,5L1660,6L1666,6L1666,7L1696,7L1696,7L1701,7L1701,8L1769,8L1769,8L1775,8L1775,8L1882,8L1882,8L1934,8L1934,8L2009,8L2009,8L2203,8L2203,8L2242,8L2242,8L2299,8L2299,8L2302,8L2302,9L2338,9L2338,9L2406,9L2406,9L2410,9L2410,9L2433,9L2433,9L2451,9L2451,9L2618,9L2618,9L2622,9L2622,9L2655,9L2655,9L2657,9L2657,9L2712,9L2712,9L2716,9L2716,9L2724,9L2724,9L2752,9L2752,9L2753,9L2753,9L2772,9L2772,10L2780,10L2780,11L2787,11L2787,11L2801,11L2801,11L2814,11L2814,11L2817,11" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
