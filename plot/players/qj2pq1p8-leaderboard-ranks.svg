<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Rank by leaderboard for player qj2pq1p8</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2017-12-30</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-03-30</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">184</text>
		</svg>
		<svg viewBox="0 0 2647 184" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 184) scale(1 -1)" style="--count: 27;">
				<g>
					<rect x="0" y="0" width="2647" height="184"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,1L0,1L0,1L1,1L1,1L3,1L3,1L4,1L4,0L5,0L5,1L7,1L7,2L2624,2L2624,3L2647,3" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.q75zmmn1</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L1,0L1,1L2,1L2,0L7,0L7,0L8,0L8,0L9,0L9,1L2630,1L2630,2L2647,2" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.1gnozzxl</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,1L4,1L4,0L5,0L5,0L6,0L6,0L8,0L8,0L9,0L9,0L2624,0L2624,1L2647,1" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.ln8kgdol</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L4,0L4,0L7,0L7,0L2630,0L2630,1L2647,1" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.qyz3jjd1</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L9,0L9,0L10,0L10,2L14,2L14,3L80,3L80,4L113,4L113,5L879,5L879,6L1038,6L1038,7L1056,7L1056,9L1063,9L1063,10L1149,10L1149,11L1583,11L1583,12L1610,12L1610,13L1652,13L1652,14L1670,14L1670,15L1740,15L1740,16L1787,16L1787,17L1858,17L1858,18L1911,18L1911,19L1920,19L1920,20L1927,20L1927,21L1949,21L1949,22L1978,22L1978,23L2131,23L2131,24L2133,24L2133,25L2174,25L2174,26L2256,26L2256,27L2283,27L2283,28L2316,28L2316,29L2333,29L2333,30L2342,30L2342,31L2409,31L2409,32L2442,32L2442,33L2447,33L2447,34L2465,34L2465,35L2513,35L2513,36L2514,36L2514,37L2580,37L2580,38L2588,38L2588,39L2591,39L2591,40L2607,40L2607,42L2609,42L2609,43L2611,43L2611,44L2618,44L2618,45L2621,45L2621,46L2634,46L2634,49L2639,49L2639,50L2647,50" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L10,0L10,0L14,0L14,1L16,1L16,0L19,0L19,1L20,1L20,0L23,0L23,1L25,1L25,0L27,0L27,0L28,0L28,0L37,0L37,1L39,1L39,0L79,0L79,1L92,1L92,2L110,2L110,3L424,3L424,4L863,4L863,5L881,5L881,6L1056,6L1056,7L1065,7L1065,8L1116,8L1116,9L1121,9L1121,10L1150,10L1150,11L1195,11L1195,12L1464,12L1464,13L1548,13L1548,14L1590,14L1590,15L1610,15L1610,16L1902,16L1902,17L1991,17L1991,18L2080,18L2080,19L2094,19L2094,20L2111,20L2111,21L2174,21L2174,22L2230,22L2230,23L2386,23L2386,24L2388,24L2388,25L2410,25L2410,26L2427,26L2427,27L2428,27L2428,28L2506,28L2506,29L2636,29L2636,30L2647,30L2647,31L2647,31" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L10,0L10,0L14,0L14,1L20,1L20,3L27,3L27,2L36,2L36,3L39,3L39,0L103,0L103,1L110,1L110,2L652,2L652,3L852,3L852,4L866,4L866,5L928,5L928,6L1043,6L1043,7L1059,7L1059,8L1060,8L1060,9L1120,9L1120,10L1127,10L1127,11L1139,11L1139,12L1175,12L1175,13L1195,13L1195,14L1203,14L1203,15L1216,15L1216,16L1218,16L1218,17L1475,17L1475,18L1480,18L1480,19L1490,19L1490,20L1527,20L1527,22L1531,22L1531,23L1532,23L1532,24L1582,24L1582,25L1613,25L1613,26L1648,26L1648,27L1652,27L1652,28L1653,28L1653,29L1671,29L1671,30L1684,30L1684,31L1696,31L1696,32L1700,32L1700,33L1711,33L1711,34L1712,34L1712,35L1768,35L1768,36L1903,36L1903,37L1907,37L1907,38L1918,38L1918,39L1947,39L1947,41L1961,41L1961,42L1996,42L1996,43L2008,43L2008,44L2059,44L2059,45L2170,45L2170,46L2177,46L2177,47L2207,47L2207,48L2332,48L2332,49L2347,49L2347,50L2360,50L2360,51L2362,51L2362,52L2373,52L2373,53L2381,53L2381,55L2435,55L2435,56L2465,56L2465,57L2508,57L2508,58L2524,58L2524,59L2546,59L2546,60L2549,60L2549,61L2567,61L2567,63L2572,63L2572,64L2587,64L2587,65L2603,65L2603,67L2605,67L2605,68L2608,68L2608,69L2612,69L2612,70L2617,70L2617,71L2623,71L2623,72L2633,72L2633,73L2647,73" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L10,0L10,0L14,0L14,1L40,1L40,0L112,0L112,1L849,1L849,2L851,2L851,3L855,3L855,4L869,4L869,5L960,5L960,6L986,6L986,7L1036,7L1036,8L1054,8L1054,9L1056,9L1056,10L1061,10L1061,11L1063,11L1063,12L1112,12L1112,13L1159,13L1159,14L1403,14L1403,15L1461,15L1461,16L1646,16L1646,17L1652,17L1652,18L1672,18L1672,19L1702,19L1702,20L1724,20L1724,21L1726,21L1726,22L1740,22L1740,23L1806,23L1806,24L1837,24L1837,25L1839,25L1839,26L1923,26L1923,27L1948,27L1948,28L2068,28L2068,29L2085,29L2085,30L2128,30L2128,31L2182,31L2182,32L2256,32L2256,33L2325,33L2325,34L2356,34L2356,35L2409,35L2409,36L2410,36L2410,37L2419,37L2419,38L2465,38L2465,39L2478,39L2478,40L2541,40L2541,41L2590,41L2590,42L2602,42L2602,43L2603,43L2603,44L2606,44L2606,46L2613,46L2613,47L2618,47L2618,48L2628,48L2628,49L2647,49L2647,50L2647,50" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L10,0L10,0L19,0L19,1L68,1L68,0L108,0L108,1L873,1L873,2L1036,2L1036,3L1059,3L1059,4L1382,4L1382,5L1532,5L1532,6L1575,6L1575,7L1650,7L1650,8L1803,8L1803,9L1872,9L1872,10L1902,10L1902,11L2094,11L2094,13L2170,13L2170,14L2182,14L2182,15L2344,15L2344,16L2388,16L2388,17L2416,17L2416,18L2508,18L2508,19L2591,19L2591,21L2647,21" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L16,0L16,0L26,0L26,0L66,0L66,0L195,0L195,1L897,1L897,2L1043,2L1043,3L1056,3L1056,4L1082,4L1082,5L1125,5L1125,6L1192,6L1192,7L2184,7L2184,8L2647,8" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L16,0L16,1L25,1L25,1L34,1L34,1L66,1L66,0L75,0L75,1L103,1L103,3L112,3L112,4L877,4L877,5L1083,5L1083,6L1084,6L1084,7L1115,7L1115,8L1124,8L1124,9L1227,9L1227,10L1270,10L1270,11L1278,11L1278,12L1434,12L1434,13L1440,13L1440,14L1472,14L1472,15L1521,15L1521,16L1522,16L1522,17L1529,17L1529,18L1582,18L1582,19L1650,19L1650,20L1656,20L1656,21L1698,21L1698,22L1705,22L1705,23L1708,23L1708,24L1727,24L1727,25L2199,25L2199,26L2647,26" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L18,0L18,0L20,0L20,0L32,0L32,0L33,0L33,1L34,1L34,1L108,1L108,2L190,2L190,3L381,3L381,4L871,4L871,5L974,5L974,6L1059,6L1059,7L1085,7L1085,8L1091,8L1091,9L1108,9L1108,10L1134,10L1134,11L1203,11L1203,12L1209,12L1209,13L1534,13L1534,14L1590,14L1590,15L1652,15L1652,16L1714,16L1714,17L1723,17L1723,18L1783,18L1783,19L1845,19L1845,20L1867,20L1867,21L1905,21L1905,22L1919,22L1919,23L1942,23L1942,24L1994,24L1994,25L2003,25L2003,26L2067,26L2067,27L2080,27L2080,28L2129,28L2129,29L2170,29L2170,30L2231,30L2231,31L2235,31L2235,32L2314,32L2314,33L2381,33L2381,34L2412,34L2412,35L2451,35L2451,36L2465,36L2465,37L2526,37L2526,38L2527,38L2527,39L2562,39L2562,40L2573,40L2573,41L2582,41L2582,42L2618,42L2618,43L2622,43L2622,44L2647,44" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L18,0L18,0L20,0L20,0L32,0L32,0L34,0L34,0L35,0L35,1L78,1L78,2L108,2L108,3L877,3L877,4L974,4L974,5L1059,5L1059,6L1099,6L1099,7L1108,7L1108,8L1134,8L1134,9L1208,9L1208,10L1648,10L1648,11L1652,11L1652,12L1715,12L1715,13L1777,13L1777,14L1816,14L1816,15L1893,15L1893,16L1905,16L1905,17L1919,17L1919,18L1973,18L1973,19L2002,19L2002,20L2015,20L2015,21L2163,21L2163,22L2170,22L2170,23L2195,23L2195,24L2237,24L2237,25L2314,25L2314,26L2380,26L2380,27L2390,27L2390,28L2412,28L2412,29L2416,29L2416,30L2465,30L2465,31L2495,31L2495,32L2515,32L2515,33L2548,33L2548,34L2552,34L2552,35L2582,35L2582,36L2602,36L2602,37L2607,37L2607,38L2611,38L2611,39L2619,39L2619,40L2620,40L2620,41L2626,41L2626,42L2627,42L2627,43L2645,43L2645,44L2647,44" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,1L18,1L18,0L19,0L19,1L34,1L34,2L39,2L39,2L69,2L69,0L78,0L78,1L108,1L108,2L443,2L443,3L532,3L532,4L533,4L533,5L782,5L782,6L863,6L863,7L881,7L881,9L1036,9L1036,10L1040,10L1040,11L1044,11L1044,12L1056,12L1056,13L1059,13L1059,14L1060,14L1060,15L1063,15L1063,16L1079,16L1079,17L1100,17L1100,18L1127,18L1127,19L1169,19L1169,20L1176,20L1176,21L1179,21L1179,22L1191,22L1191,23L1239,23L1239,24L1304,24L1304,25L1467,25L1467,26L1474,26L1474,27L1487,27L1487,28L1527,28L1527,29L1533,29L1533,30L1567,30L1567,31L1583,31L1583,32L1588,32L1588,34L1591,34L1591,35L1617,35L1617,36L1639,36L1639,37L1644,37L1644,38L1649,38L1649,39L1652,39L1652,40L1659,40L1659,41L1667,41L1667,42L1671,42L1671,43L1672,43L1672,44L1683,44L1683,45L1690,45L1690,46L1693,46L1693,47L1694,47L1694,48L1696,48L1696,49L1698,49L1698,50L1757,50L1757,51L1761,51L1761,52L1773,52L1773,53L1777,53L1777,54L1799,54L1799,55L1807,55L1807,56L1833,56L1833,57L1837,57L1837,58L1839,58L1839,59L1852,59L1852,60L1854,60L1854,61L1898,61L1898,62L1903,62L1903,63L1904,63L1904,64L1911,64L1911,65L1919,65L1919,66L1921,66L1921,67L1923,67L1923,68L1931,68L1931,69L1934,69L1934,70L1939,70L1939,71L1941,71L1941,72L1944,72L1944,73L1960,73L1960,74L1961,74L1961,76L1967,76L1967,78L1972,78L1972,79L1996,79L1996,80L2010,80L2010,81L2022,81L2022,82L2024,82L2024,83L2026,83L2026,84L2050,84L2050,85L2060,85L2060,87L2068,87L2068,88L2097,88L2097,89L2108,89L2108,90L2115,90L2115,91L2117,91L2117,92L2134,92L2134,93L2148,93L2148,94L2163,94L2163,96L2227,96L2227,97L2228,97L2228,98L2252,98L2252,99L2271,99L2271,100L2285,100L2285,101L2294,101L2294,102L2297,102L2297,103L2311,103L2311,104L2314,104L2314,105L2331,105L2331,106L2332,106L2332,108L2340,108L2340,109L2349,109L2349,111L2362,111L2362,112L2367,112L2367,113L2369,113L2369,114L2370,114L2370,115L2371,115L2371,116L2372,116L2372,117L2375,117L2375,118L2379,118L2379,119L2382,119L2382,120L2383,120L2383,121L2386,121L2386,123L2389,123L2389,124L2394,124L2394,125L2398,125L2398,126L2400,126L2400,127L2404,127L2404,128L2410,128L2410,130L2412,130L2412,131L2415,131L2415,132L2420,132L2420,133L2423,133L2423,134L2434,134L2434,135L2436,135L2436,136L2443,136L2443,137L2444,137L2444,139L2455,139L2455,140L2475,140L2475,141L2478,141L2478,142L2486,142L2486,143L2492,143L2492,145L2498,145L2498,146L2508,146L2508,147L2509,147L2509,148L2513,148L2513,149L2514,149L2514,150L2517,150L2517,151L2521,151L2521,152L2524,152L2524,153L2534,153L2534,154L2535,154L2535,155L2543,155L2543,156L2545,156L2545,157L2549,157L2549,158L2553,158L2553,160L2559,160L2559,161L2563,161L2563,162L2565,162L2565,164L2568,164L2568,166L2574,166L2574,168L2578,168L2578,169L2582,169L2582,170L2589,170L2589,171L2592,171L2592,172L2605,172L2605,173L2607,173L2607,174L2609,174L2609,175L2610,175L2610,176L2620,176L2620,177L2625,177L2625,178L2629,178L2629,179L2631,179L2631,180L2635,180L2635,181L2638,181L2638,182L2639,182L2639,183L2642,183L2642,184L2647,184" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L18,0L18,0L197,0L197,1L1039,1L1039,2L1103,2L1103,3L1106,3L1106,4L1107,4L1107,5L1965,5L1965,6L2647,6" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.ln8rzznl</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,1L18,1L18,1L115,1L115,2L876,2L876,3L1049,3L1049,4L1063,4L1063,6L1096,6L1096,7L1154,7L1154,8L1157,8L1157,9L1494,9L1494,10L1548,10L1548,11L1616,11L1616,12L1634,12L1634,13L1652,13L1652,14L1653,14L1653,15L1674,15L1674,16L1710,16L1710,17L1783,17L1783,18L1789,18L1789,19L1896,19L1896,20L1948,20L1948,21L2023,21L2023,22L2217,22L2217,23L2256,23L2256,24L2313,24L2313,25L2352,25L2352,26L2420,26L2420,27L2424,27L2424,28L2447,28L2447,29L2465,29L2465,30L2632,30L2632,31L2636,31L2636,32L2647,32" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L18,0L18,0L19,0L19,0L28,0L28,0L34,0L34,0L195,0L195,1L1063,1L1063,2L1104,2L1104,3L1386,3L1386,4L2647,4" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.814y45w1</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,1L40,1L40,0L110,0L110,1L427,1L427,0L768,0L768,1L882,1L882,2L975,2L975,3L1059,3L1059,4L1087,4L1087,5L1108,5L1108,6L1127,6L1127,7L1149,7L1149,8L1826,8L1826,9L1928,9L1928,10L2016,10L2016,11L2170,11L2170,12L2421,12L2421,13L2465,13L2465,14L2514,14L2514,15L2621,15L2621,16L2631,16L2631,17L2642,17L2642,18L2647,18" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L41,0L41,0L196,0L196,1L1068,1L1068,2L1088,2L1088,3L1134,3L1134,4L1529,4L1529,5L2172,5L2172,6L2625,6L2625,7L2647,7" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.z19md2jl</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L66,0L66,0L113,0L113,1L427,1L427,0L851,0L851,1L877,1L877,2L974,2L974,3L1039,3L1039,4L1056,4L1056,5L1086,5L1086,6L1113,6L1113,7L1167,7L1167,8L1347,8L1347,9L1652,9L1652,10L1711,10L1711,11L1738,11L1738,12L1807,12L1807,13L1918,13L1918,14L1974,14L1974,15L2256,15L2256,16L2412,16L2412,17L2465,17L2465,18L2558,18L2558,19L2581,19L2581,20L2591,20L2591,21L2647,21" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L69,0L69,0L80,0L80,1L102,1L102,0L104,0L104,1L115,1L115,2L873,2L873,3L874,3L874,4L920,4L920,5L1036,5L1036,6L1054,6L1054,7L1056,7L1056,8L1063,8L1063,9L1082,9L1082,10L1157,10L1157,11L1628,11L1628,12L1652,12L1652,13L1694,13L1694,14L1800,14L1800,15L1807,15L1807,16L1866,16L1866,17L1924,17L1924,18L1948,18L1948,19L2059,19L2059,20L2106,20L2106,21L2128,21L2128,22L2256,22L2256,23L2420,23L2420,24L2617,24L2617,25L2636,25L2636,26L2637,26L2637,27L2638,27L2638,28L2647,28" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,1L187,1L187,0L192,0L192,1L862,1L862,2L920,2L920,3L974,3L974,4L1032,4L1032,5L1057,5L1057,6L1059,6L1059,7L1063,7L1063,8L1064,8L1064,9L1066,9L1066,10L1146,10L1146,11L1509,11L1509,12L1547,12L1547,13L1550,13L1550,14L1575,14L1575,15L1621,15L1621,16L1656,16L1656,17L1794,17L1794,18L1807,18L1807,19L1919,19L1919,20L2127,20L2127,21L2129,21L2129,22L2421,22L2421,23L2647,23" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,2L190,2L190,0L191,0L191,1L866,1L866,2L874,2L874,3L1057,3L1057,5L1060,5L1060,6L1061,6L1061,7L1063,7L1063,8L1082,8L1082,9L1628,9L1628,10L1711,10L1711,11L1806,11L1806,12L1807,12L1807,13L1922,13L1922,14L2223,14L2223,15L2314,15L2314,16L2324,16L2324,17L2362,17L2362,18L2373,18L2373,19L2419,19L2419,20L2429,20L2429,21L2473,21L2473,22L2549,22L2549,23L2550,23L2550,24L2576,24L2576,25L2580,25L2580,26L2582,26L2582,27L2583,27L2583,28L2585,28L2585,29L2591,29L2591,30L2598,30L2598,31L2602,31L2602,32L2617,32L2617,33L2626,33L2626,34L2635,34L2635,35L2637,35L2637,36L2647,36" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,2L190,2L190,0L191,0L191,1L872,1L872,2L1056,2L1056,3L1064,3L1064,4L1079,4L1079,5L1154,5L1154,6L1772,6L1772,8L1935,8L1935,9L1966,9L1966,10L2129,10L2129,11L2281,11L2281,12L2291,12L2291,13L2324,13L2324,14L2461,14L2461,15L2471,15L2471,16L2473,16L2473,17L2559,17L2559,18L2561,18L2561,19L2621,19L2621,20L2632,20L2632,21L2647,21" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L425,0L425,0L426,0L426,0L1063,0L1063,1L1099,1L1099,2L1115,2L1115,3L1125,3L1125,4L1199,4L1199,5L2126,5L2126,6L2172,6L2172,7L2470,7L2470,8L2625,8L2625,9L2647,9" tabindex="0">
						<title>l_r9gn1qpd-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L427,0L427,0L1004,0L1004,1L1063,1L1063,2L1103,2L1103,3L1104,3L1104,4L1125,4L1125,5L2378,5L2378,6L2647,6" tabindex="0">
						<title>l_o9xo3rp9-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,2L473,2L473,0L565,0L565,1L1323,1L1323,2L1325,2L1325,3L2631,3L2631,4L2647,4" tabindex="0">
						<title>xd17x94d-9l71pv4l.81wrgm5l</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
