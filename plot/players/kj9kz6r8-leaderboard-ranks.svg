<svg xmlns="http://www.w3.org/2000/svg" lang="en" style="color-scheme: dark light;">
	<title>Rank by leaderboard for player kj9kz6r8</title>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject &gt; div {
			position: absolute;
			left: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg {
			width: calc(100% - 40px);
			height: calc(100% - 40px);
			margin: 20px;
			padding: 10px;
			border: 1px dashed var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%">
		<svg viewBox="0 0 2417 143" preserveAspectRatio="none" overflow="visible">
			<g transform="scale(1 -1)" transform-origin="center center" style="--count: 6;">
				<g style="--index: 0;">
					<path d="M0,2L0,2L0,2L1,2L1,3L9,3L9,4L19,4L19,0L21,0L21,1L61,1L61,2L74,2L74,3L92,3L92,4L406,4L406,5L845,5L845,6L863,6L863,7L1038,7L1038,8L1047,8L1047,9L1098,9L1098,10L1103,10L1103,11L1132,11L1132,12L1177,12L1177,13L1446,13L1446,14L1530,14L1530,15L1572,15L1572,16L1592,16L1592,17L1884,17L1884,18L1973,18L1973,19L2076,19L2076,20L2093,20L2093,21L2156,21L2156,22L2210,22L2210,23L2212,23L2212,24L2368,24L2368,25L2370,25L2370,26L2392,26L2392,27L2409,27L2409,28L2410,28L2410,29L2417,29" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,2L0,2L0,2L2,2L2,2L9,2L9,4L18,4L18,0L21,0L21,1L85,1L85,2L92,2L92,3L634,3L634,4L834,4L834,5L848,5L848,6L885,6L885,7L910,7L910,8L1025,8L1025,9L1041,9L1041,10L1042,10L1042,11L1102,11L1102,12L1109,12L1109,13L1117,13L1117,14L1121,14L1121,15L1131,15L1131,16L1157,16L1157,17L1177,17L1177,18L1185,18L1185,19L1198,19L1198,20L1200,20L1200,21L1386,21L1386,22L1457,22L1457,23L1462,23L1462,24L1472,24L1472,25L1509,25L1509,27L1513,27L1513,28L1564,28L1564,29L1595,29L1595,30L1630,30L1630,31L1634,31L1634,32L1635,32L1635,33L1653,33L1653,34L1666,34L1666,35L1678,35L1678,36L1682,36L1682,37L1693,37L1693,38L1694,38L1694,39L1750,39L1750,40L1885,40L1885,41L1889,41L1889,42L1900,42L1900,43L1929,43L1929,45L1943,45L1943,46L1978,46L1978,47L1990,47L1990,48L2041,48L2041,49L2152,49L2152,50L2159,50L2159,51L2189,51L2189,52L2314,52L2314,53L2329,53L2329,54L2342,54L2342,55L2344,55L2344,56L2355,56L2355,57L2363,57L2363,59L2417,59L2417,60L2417,60" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,1L14,1L14,1L15,1L15,0L16,0L16,0L90,0L90,1L363,1L363,2L853,2L853,3L956,3L956,4L1049,4L1049,5L1067,5L1067,6L1073,6L1073,7L1090,7L1090,8L1116,8L1116,9L1185,9L1185,10L1516,10L1516,11L1572,11L1572,12L1634,12L1634,13L1696,13L1696,14L1705,14L1705,15L1765,15L1765,16L1827,16L1827,17L1887,17L1887,18L1901,18L1901,19L1924,19L1924,20L1976,20L1976,21L1985,21L1985,22L2049,22L2049,23L2062,23L2062,24L2111,24L2111,25L2152,25L2152,26L2217,26L2217,27L2363,27L2363,28L2394,28L2394,29L2417,29" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L16,3L16,0L51,0L51,1L60,1L60,2L90,2L90,3L425,3L425,4L514,4L514,5L515,5L515,6L764,6L764,7L845,7L845,8L863,8L863,10L1018,10L1018,11L1022,11L1022,12L1026,12L1026,13L1038,13L1038,14L1041,14L1041,15L1042,15L1042,16L1045,16L1045,17L1061,17L1061,18L1082,18L1082,19L1109,19L1109,20L1151,20L1151,21L1158,21L1158,22L1161,22L1161,23L1173,23L1173,24L1221,24L1221,25L1286,25L1286,26L1449,26L1449,27L1456,27L1456,28L1469,28L1469,29L1509,29L1509,30L1515,30L1515,32L1528,32L1528,33L1541,33L1541,34L1549,34L1549,35L1565,35L1565,36L1570,36L1570,38L1573,38L1573,39L1599,39L1599,40L1621,40L1621,41L1626,41L1626,42L1628,42L1628,43L1631,43L1631,44L1634,44L1634,45L1641,45L1641,46L1649,46L1649,47L1653,47L1653,48L1654,48L1654,49L1665,49L1665,50L1672,50L1672,51L1675,51L1675,52L1676,52L1676,53L1678,53L1678,54L1680,54L1680,55L1739,55L1739,56L1743,56L1743,57L1755,57L1755,58L1759,58L1759,59L1781,59L1781,60L1789,60L1789,61L1815,61L1815,62L1819,62L1819,63L1821,63L1821,64L1834,64L1834,65L1836,65L1836,66L1880,66L1880,67L1885,67L1885,68L1886,68L1886,69L1887,69L1887,70L1893,70L1893,71L1901,71L1901,72L1903,72L1903,73L1905,73L1905,74L1913,74L1913,75L1916,75L1916,76L1921,76L1921,77L1923,77L1923,78L1926,78L1926,79L1942,79L1942,80L1943,80L1943,82L1949,82L1949,84L1954,84L1954,85L1978,85L1978,86L1992,86L1992,87L2004,87L2004,88L2006,88L2006,89L2008,89L2008,90L2032,90L2032,91L2042,91L2042,93L2050,93L2050,94L2079,94L2079,95L2090,95L2090,96L2097,96L2097,97L2099,97L2099,98L2115,98L2115,99L2116,99L2116,100L2130,100L2130,101L2145,101L2145,103L2209,103L2209,104L2210,104L2210,106L2234,106L2234,107L2253,107L2253,108L2267,108L2267,109L2276,109L2276,110L2279,110L2279,111L2293,111L2293,112L2296,112L2296,113L2313,113L2313,114L2314,114L2314,116L2322,116L2322,117L2331,117L2331,119L2344,119L2344,120L2349,120L2349,121L2351,121L2351,122L2352,122L2352,123L2353,123L2353,124L2354,124L2354,125L2357,125L2357,126L2361,126L2361,127L2364,127L2364,128L2365,128L2365,129L2368,129L2368,131L2371,131L2371,132L2376,132L2376,133L2380,133L2380,134L2382,134L2382,135L2386,135L2386,136L2392,136L2392,138L2394,138L2394,139L2397,139L2397,140L2402,140L2402,141L2405,141L2405,142L2416,142L2416,143L2417,143" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,1L16,1L16,1L17,1L17,0L90,0L90,1L859,1L859,2L956,2L956,3L1041,3L1041,4L1081,4L1081,5L1090,5L1090,6L1116,6L1116,7L1630,7L1630,8L1634,8L1634,9L1697,9L1697,10L1759,10L1759,11L1798,11L1798,12L1875,12L1875,13L1887,13L1887,14L1901,14L1901,15L1955,15L1955,16L1984,16L1984,17L1997,17L1997,18L2145,18L2145,19L2152,19L2152,20L2191,20L2191,21L2219,21L2219,22L2296,22L2296,23L2362,23L2362,24L2372,24L2372,25L2394,25L2394,26L2398,26L2398,27L2417,27" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L19,0L19,0L22,0L22,1L92,1L92,2L574,2L574,3L749,3L749,4L864,4L864,5L892,5L892,6L957,6L957,7L1041,7L1041,8L1069,8L1069,9L1090,9L1090,10L1109,10L1109,11L1131,11L1131,12L1808,12L1808,13L1910,13L1910,14L1998,14L1998,15L2152,15L2152,16L2403,16L2403,17L2417,17" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
