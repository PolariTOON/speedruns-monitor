<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player 814zn7l8</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2020-12-17</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-30</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">252</text>
		</svg>
		<svg viewBox="0 0 1717 252" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 252) scale(1 -1)" style="--count: 19;">
				<g>
					<rect x="0" y="0" width="1717" height="252"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,20L1,20L1,19L2,19L2,21L30,21L30,23L41,23L41,23L55,23L55,24L72,24L72,25L75,25L75,26L76,26L76,27L110,27L110,28L114,28L114,29L118,29L118,30L132,30L132,31L138,31L138,32L144,32L144,33L168,33L168,34L182,34L182,35L187,35L187,36L195,36L195,37L213,37L213,36L216,36L216,37L232,37L232,38L295,38L295,39L304,39L304,40L315,40L315,41L318,41L318,43L339,43L339,44L351,44L351,45L354,45L354,46L370,46L370,47L389,47L389,48L393,48L393,49L394,49L394,50L405,50L405,51L408,51L408,52L420,52L420,53L423,53L423,54L428,54L428,55L435,55L435,56L437,56L437,57L444,57L444,58L446,58L446,59L451,59L451,60L453,60L453,61L454,61L454,62L458,62L458,63L461,63L461,64L476,64L476,65L491,65L491,66L499,66L499,68L530,68L530,69L531,69L531,70L532,70L532,71L535,71L535,72L537,72L537,73L565,73L565,74L567,74L567,75L568,75L568,74L569,74L569,75L573,75L573,77L576,77L576,78L577,78L577,79L578,79L578,80L588,80L588,82L606,82L606,83L608,83L608,84L611,84L611,85L613,85L613,87L615,87L615,88L618,88L618,90L620,90L620,91L625,91L625,93L633,93L633,94L634,94L634,95L638,95L638,96L641,96L641,97L644,97L644,98L649,98L649,99L659,99L659,100L661,100L661,101L663,101L663,102L664,102L664,103L666,103L666,104L667,104L667,105L689,105L689,106L696,106L696,107L713,107L713,108L717,108L717,109L721,109L721,110L725,110L725,111L731,111L731,112L744,112L744,113L749,113L749,114L754,114L754,115L762,115L762,116L763,116L763,117L768,117L768,118L781,118L781,119L786,119L786,120L788,120L788,122L792,122L792,124L793,124L793,125L802,125L802,126L810,126L810,127L815,127L815,128L820,128L820,129L824,129L824,130L835,130L835,131L836,131L836,132L840,132L840,133L844,133L844,134L846,134L846,135L849,135L849,136L850,136L850,137L870,137L870,138L871,138L871,139L878,139L878,140L880,140L880,141L885,141L885,142L892,142L892,143L893,143L893,144L895,144L895,145L905,145L905,146L919,146L919,147L926,147L926,148L929,148L929,149L949,149L949,150L960,150L960,151L1001,151L1001,152L1013,152L1013,153L1034,153L1034,154L1040,154L1040,155L1046,155L1046,157L1052,157L1052,158L1060,158L1060,159L1087,159L1087,160L1116,160L1116,160L1141,160L1141,161L1183,161L1183,162L1184,162L1184,163L1204,163L1204,164L1207,164L1207,165L1214,165L1214,166L1239,166L1239,167L1249,167L1249,168L1251,168L1251,169L1257,169L1257,170L1287,170L1287,171L1313,171L1313,173L1320,173L1320,174L1328,174L1328,175L1341,175L1341,176L1342,176L1342,177L1349,177L1349,178L1354,178L1354,179L1358,179L1358,180L1360,180L1360,181L1370,181L1370,182L1382,182L1382,183L1390,183L1390,184L1410,184L1410,185L1415,185L1415,186L1416,186L1416,188L1431,188L1431,189L1443,189L1443,190L1449,190L1449,191L1452,191L1452,192L1458,192L1458,193L1461,193L1461,194L1489,194L1489,195L1495,195L1495,196L1497,196L1497,197L1507,197L1507,198L1508,198L1508,199L1512,199L1512,200L1518,200L1518,202L1520,202L1520,203L1523,203L1523,204L1528,204L1528,205L1537,205L1537,206L1546,206L1546,208L1551,208L1551,209L1552,209L1552,211L1555,211L1555,212L1558,212L1558,213L1562,213L1562,214L1575,214L1575,215L1576,215L1576,216L1577,216L1577,215L1578,215L1578,216L1579,216L1579,217L1580,217L1580,217L1584,217L1584,218L1585,218L1585,219L1587,219L1587,220L1592,220L1592,221L1596,221L1596,222L1632,222L1632,223L1653,223L1653,224L1659,224L1659,225L1664,225L1664,227L1671,227L1671,228L1676,228L1676,229L1680,229L1680,230L1684,230L1684,231L1686,231L1686,233L1688,233L1688,234L1701,234L1701,235L1709,235L1709,236L1711,236L1711,237L1717,237" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L0,0L0,4L4,4L4,3L5,3L5,6L30,6L30,8L38,8L38,7L442,7L442,6L453,6L453,7L524,7L524,7L533,7L533,8L598,8L598,9L723,9L723,10L724,10L724,11L727,11L727,12L731,12L731,13L818,13L818,14L825,14L825,14L971,14L971,15L1088,15L1088,16L1233,16L1233,17L1238,17L1238,18L1240,18L1240,19L1261,19L1261,20L1328,20L1328,19L1356,19L1356,20L1364,20L1364,21L1382,21L1382,22L1390,22L1390,23L1429,23L1429,24L1431,24L1431,25L1450,25L1450,26L1455,26L1455,27L1545,27L1545,28L1549,28L1549,29L1557,29L1557,30L1559,30L1559,31L1587,31L1587,30L1598,30L1598,30L1643,30L1643,30L1654,30L1654,29L1659,29L1659,30L1664,30L1664,31L1665,31L1665,31L1668,31L1668,31L1679,31L1679,32L1681,32L1681,33L1682,33L1682,34L1684,34L1684,32L1689,32L1689,33L1698,33L1698,33L1703,33L1703,34L1704,34L1704,35L1711,35L1711,37L1715,37L1715,37L1717,37L1717,38L1717,38" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L2,0L2,10L8,10L8,10L25,10L25,11L27,11L27,10L28,10L28,12L51,12L51,12L86,12L86,11L120,11L120,12L126,12L126,14L289,14L289,15L355,15L355,16L387,16L387,17L451,17L451,18L479,18L479,19L507,19L507,20L569,20L569,21L579,21L579,22L588,22L588,23L601,23L601,24L604,24L604,25L614,25L614,26L616,26L616,27L631,27L631,27L640,27L640,28L688,28L688,29L689,29L689,30L695,30L695,31L700,31L700,32L762,32L762,33L769,33L769,34L783,34L783,35L795,35L795,36L822,36L822,38L836,38L836,39L859,39L859,40L904,40L904,41L911,41L911,42L920,42L920,44L936,44L936,45L969,45L969,46L984,46L984,47L1046,47L1046,48L1087,48L1087,49L1089,49L1089,50L1122,50L1122,51L1144,51L1144,52L1152,52L1152,52L1231,52L1231,53L1235,53L1235,54L1298,54L1298,55L1329,55L1329,55L1368,55L1368,56L1382,56L1382,57L1387,57L1387,56L1443,56L1443,57L1444,57L1444,58L1479,58L1479,59L1490,59L1490,60L1499,60L1499,61L1504,61L1504,62L1508,62L1508,63L1534,63L1534,64L1535,64L1535,65L1536,65L1536,66L1539,66L1539,67L1540,67L1540,68L1568,68L1568,68L1585,68L1585,69L1596,69L1596,70L1598,70L1598,71L1627,71L1627,71L1635,71L1635,72L1647,72L1647,71L1648,71L1648,72L1652,72L1652,72L1660,72L1660,72L1662,72L1662,73L1675,73L1675,74L1687,74L1687,74L1690,74L1690,75L1693,75L1693,76L1704,76L1704,77L1710,77L1710,78L1712,78L1712,78L1717,78" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L3,0L3,7L30,7L30,10L32,10L32,9L34,9L34,10L37,10L37,9L64,9L64,10L84,10L84,10L99,10L99,9L264,9L264,10L569,10L569,11L628,11L628,10L655,10L655,11L724,11L724,12L835,12L835,13L891,13L891,13L909,13L909,14L976,14L976,15L1015,15L1015,16L1173,16L1173,17L1235,17L1235,18L1329,18L1329,19L1382,19L1382,20L1475,20L1475,21L1508,21L1508,22L1573,22L1573,22L1574,22L1574,22L1575,22L1575,23L1579,23L1579,22L1586,22L1586,23L1596,23L1596,23L1603,23L1603,24L1666,24L1666,24L1687,24L1687,24L1689,24L1689,25L1708,25L1708,25L1714,25L1714,24L1717,24" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L4,0L4,9L5,9L5,9L25,9L25,10L27,10L27,9L28,9L28,10L44,10L44,10L66,10L66,10L743,10L743,10L845,10L845,11L933,11L933,11L1087,11L1087,12L1205,12L1205,11L1338,11L1338,12L1382,12L1382,12L1431,12L1431,13L1532,13L1532,14L1538,14L1538,15L1548,15L1548,16L1559,16L1559,16L1562,16L1562,16L1563,16L1563,15L1565,15L1565,16L1585,16L1585,17L1596,17L1596,18L1604,18L1604,19L1628,19L1628,20L1655,20L1655,20L1660,20L1660,20L1668,20L1668,21L1692,21L1692,22L1704,22L1704,23L1715,23L1715,22L1717,22" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L5,0L5,3L16,3L16,4L17,4L17,4L38,4L38,3L51,3L51,4L446,4L446,4L1089,4L1089,5L1161,5L1161,4L1542,4L1542,4L1717,4" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.z19md2jl</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L9,0L9,5L17,5L17,6L21,6L21,5L31,5L31,7L38,7L38,6L82,6L82,6L566,6L566,6L569,6L569,7L935,7L935,6L1104,6L1104,6L1172,6L1172,7L1240,7L1240,8L1338,8L1338,9L1355,9L1355,10L1382,10L1382,10L1542,10L1542,10L1553,10L1553,11L1573,11L1573,11L1657,11L1657,10L1716,10L1716,9L1717,9" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L10,0L10,5L13,5L13,5L17,5L17,6L22,6L22,8L27,8L27,9L30,9L30,10L39,10L39,11L73,11L73,12L150,12L150,13L184,13L184,14L186,14L186,15L196,15L196,14L293,14L293,15L374,15L374,17L403,17L403,18L406,18L406,19L468,19L468,20L505,20L505,21L537,21L537,22L561,22L561,22L573,22L573,23L580,23L580,24L590,24L590,25L613,25L613,26L619,26L619,27L621,27L621,28L669,28L669,26L1684,26L1684,26L1717,26" tabindex="0">
						<title>xd17x94d-9l71pv4l.zqo20y2l</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L17,0L17,2L42,2L42,2L82,2L82,3L117,3L117,3L1287,3L1287,4L1543,4L1543,4L1645,4L1645,4L1717,4" tabindex="0">
						<title>l_o9xo3rp9-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L20,0L20,5L26,5L26,6L42,6L42,6L297,6L297,7L633,7L633,8L905,8L905,7L1089,7L1089,8L1296,8L1296,9L1347,9L1347,10L1356,10L1356,11L1494,11L1494,12L1569,12L1569,13L1570,13L1570,14L1644,14L1644,14L1645,14L1645,14L1675,14L1675,14L1676,14L1676,14L1699,14L1699,15L1711,15L1711,16L1717,16" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L21,0L21,5L42,5L42,5L1295,5L1295,6L1601,6L1601,7L1676,7L1676,7L1686,7L1686,7L1714,7L1714,7L1717,7" tabindex="0">
						<title>l_o9xo3rp9-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L24,0L24,6L37,6L37,5L66,5L66,6L109,6L109,6L882,6L882,6L1583,6L1583,6L1717,6" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.ln8rzznl</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L29,0L29,17L38,17L38,16L76,16L76,17L108,17L108,16L320,16L320,17L378,17L378,18L563,18L563,19L569,19L569,20L589,20L589,21L619,21L619,22L641,22L641,23L643,23L643,24L657,24L657,25L723,25L723,26L754,26L754,26L756,26L756,27L840,27L840,28L865,28L865,29L985,29L985,30L1002,30L1002,31L1045,31L1045,32L1099,32L1099,33L1173,33L1173,34L1233,34L1233,35L1242,35L1242,36L1273,36L1273,37L1326,37L1326,38L1327,38L1327,39L1336,39L1336,40L1382,40L1382,41L1395,41L1395,42L1458,42L1458,43L1507,43L1507,44L1519,44L1519,45L1520,45L1520,46L1523,46L1523,48L1530,48L1530,49L1535,49L1535,50L1545,50L1545,51L1564,51L1564,51L1565,51L1565,50L1586,50L1586,51L1610,51L1610,52L1635,52L1635,53L1645,53L1645,54L1651,54L1651,55L1665,55L1665,55L1675,55L1675,56L1676,56L1676,57L1677,57L1677,58L1679,58L1679,60L1680,60L1680,61L1683,61L1683,60L1684,60L1684,61L1686,61L1686,60L1696,60L1696,62L1703,62L1703,63L1704,63L1704,64L1717,64" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L32,0L32,4L42,4L42,4L116,4L116,4L857,4L857,5L998,5L998,6L1043,6L1043,7L1089,7L1089,8L1187,8L1187,7L1197,7L1197,8L1387,8L1387,9L1494,9L1494,10L1536,10L1536,11L1542,11L1542,11L1609,11L1609,12L1679,12L1679,13L1711,13L1711,14L1715,14L1715,14L1717,14" tabindex="0">
						<title>l_r9gn1qpd-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L108,0L108,30L110,30L110,31L156,31L156,32L179,32L179,32L213,32L213,31L221,31L221,32L303,32L303,32L305,32L305,33L364,33L364,32L384,32L384,33L391,33L391,34L404,34L404,35L444,35L444,36L450,36L450,38L453,38L453,39L455,39L455,40L463,40L463,41L476,41L476,42L484,42L484,43L500,43L500,44L505,44L505,46L508,46L508,47L534,47L534,48L556,48L556,49L561,49L561,50L563,50L563,51L566,51L566,52L569,52L569,53L576,53L576,54L584,54L584,55L588,55L588,56L589,56L589,57L600,57L600,58L604,58L604,59L607,59L607,60L610,60L610,61L611,61L611,61L613,61L613,62L615,62L615,63L616,63L616,64L674,64L674,65L678,65L678,66L688,66L688,67L694,67L694,68L709,68L709,69L716,69L716,70L724,70L724,71L750,71L750,72L754,72L754,73L756,73L756,74L769,74L769,75L771,75L771,76L815,76L815,77L820,77L820,78L821,78L821,79L822,79L822,80L828,80L828,81L834,81L834,80L836,80L836,81L838,81L838,82L840,82L840,83L844,83L844,84L848,84L848,85L851,85L851,86L856,86L856,87L858,87L858,88L861,88L861,89L877,89L877,90L878,90L878,92L884,92L884,94L888,94L888,95L889,95L889,96L913,96L913,98L927,98L927,99L939,99L939,100L941,100L941,101L943,101L943,102L967,102L967,103L970,103L970,104L977,104L977,106L980,106L980,105L985,105L985,106L1014,106L1014,106L1025,106L1025,107L1032,107L1032,108L1034,108L1034,109L1050,109L1050,110L1051,110L1051,111L1065,111L1065,112L1077,112L1077,113L1080,113L1080,115L1118,115L1118,114L1144,114L1144,115L1145,115L1145,117L1169,117L1169,118L1188,118L1188,119L1202,119L1202,120L1211,120L1211,121L1214,121L1214,122L1228,122L1228,123L1231,123L1231,124L1234,124L1234,125L1248,125L1248,126L1249,126L1249,128L1257,128L1257,129L1266,129L1266,131L1279,131L1279,132L1284,132L1284,133L1286,133L1286,134L1287,134L1287,135L1288,135L1288,136L1289,136L1289,137L1292,137L1292,138L1296,138L1296,139L1299,139L1299,140L1300,140L1300,141L1303,141L1303,143L1306,143L1306,144L1311,144L1311,145L1315,145L1315,146L1317,146L1317,147L1321,147L1321,148L1327,148L1327,150L1329,150L1329,151L1332,151L1332,152L1334,152L1334,151L1337,151L1337,152L1340,152L1340,153L1351,153L1351,154L1353,154L1353,156L1360,156L1360,157L1361,157L1361,159L1370,159L1370,158L1372,158L1372,159L1378,159L1378,158L1382,158L1382,157L1392,157L1392,158L1395,158L1395,159L1403,159L1403,159L1409,159L1409,161L1415,161L1415,162L1425,162L1425,162L1426,162L1426,163L1430,163L1430,164L1431,164L1431,165L1434,165L1434,166L1438,166L1438,167L1441,167L1441,169L1451,169L1451,170L1452,170L1452,171L1460,171L1460,172L1462,172L1462,173L1466,173L1466,174L1469,174L1469,175L1470,175L1470,177L1476,177L1476,177L1480,177L1480,178L1482,178L1482,180L1485,180L1485,182L1491,182L1491,184L1495,184L1495,185L1499,185L1499,186L1506,186L1506,188L1509,188L1509,189L1520,189L1520,190L1522,190L1522,191L1524,191L1524,192L1526,192L1526,193L1527,193L1527,194L1537,194L1537,195L1542,195L1542,196L1546,196L1546,195L1548,195L1548,196L1552,196L1552,196L1555,196L1555,197L1559,197L1559,198L1564,198L1564,199L1569,199L1569,200L1572,200L1572,201L1574,201L1574,202L1580,202L1580,203L1583,203L1583,204L1585,204L1585,205L1591,205L1591,206L1596,206L1596,207L1599,207L1599,208L1602,208L1602,209L1605,209L1605,211L1606,211L1606,212L1610,212L1610,213L1611,213L1611,215L1612,215L1612,214L1613,214L1613,215L1616,215L1616,214L1618,214L1618,215L1620,215L1620,216L1629,216L1629,218L1633,218L1633,217L1634,217L1634,218L1641,218L1641,219L1642,219L1642,221L1649,221L1649,223L1651,223L1651,223L1656,223L1656,224L1658,224L1658,224L1663,224L1663,225L1664,225L1664,227L1666,227L1666,228L1667,228L1667,229L1673,229L1673,230L1675,230L1675,231L1676,231L1676,232L1679,232L1679,233L1681,233L1681,234L1685,234L1685,236L1686,236L1686,238L1690,238L1690,239L1697,239L1697,242L1698,242L1698,243L1701,243L1701,244L1702,244L1702,246L1704,246L1704,247L1709,247L1709,248L1712,248L1712,249L1713,249L1713,250L1715,250L1715,252L1717,252" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L109,0L109,13L182,13L182,14L302,14L302,15L317,15L317,16L447,16L447,17L449,17L449,18L509,18L509,19L563,19L563,20L607,20L607,21L642,21L642,22L697,22L697,23L733,23L733,24L740,24L740,25L795,25L795,26L800,26L800,27L801,27L801,28L802,28L802,29L804,29L804,30L824,30L824,31L830,31L830,32L840,32L840,33L841,33L841,34L865,34L865,35L866,35L866,36L890,36L890,37L899,37L899,38L913,38L913,39L941,39L941,40L975,40L975,41L1020,41L1020,42L1088,42L1088,43L1101,43L1101,42L1172,42L1172,43L1185,43L1185,44L1217,44L1217,45L1267,45L1267,46L1268,46L1268,47L1270,47L1270,48L1279,48L1279,49L1314,49L1314,50L1325,50L1325,51L1351,51L1351,52L1352,52L1352,54L1382,54L1382,55L1405,55L1405,56L1418,56L1418,57L1454,57L1454,58L1457,58L1457,59L1483,59L1483,60L1489,60L1489,61L1499,61L1499,62L1501,62L1501,63L1502,63L1502,64L1526,64L1526,65L1528,65L1528,66L1529,66L1529,67L1530,67L1530,68L1547,68L1547,69L1548,69L1548,70L1549,70L1549,71L1552,71L1552,72L1586,72L1586,73L1655,73L1655,74L1658,74L1658,73L1661,73L1661,74L1662,74L1662,74L1663,74L1663,74L1668,74L1668,75L1669,75L1669,76L1674,76L1674,77L1678,77L1678,78L1679,78L1679,78L1683,78L1683,79L1684,79L1684,80L1687,80L1687,80L1689,80L1689,81L1695,81L1695,81L1697,81L1697,81L1707,81L1707,82L1708,82L1708,83L1710,83L1710,84L1717,84" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L299,0L299,9L449,9L449,10L477,10L477,11L492,11L492,12L519,12L519,11L547,11L547,12L567,12L567,12L588,12L588,13L600,13L600,14L614,14L614,15L642,15L642,16L720,16L720,17L769,17L769,18L819,18L819,18L824,18L824,19L878,19L878,20L936,20L936,21L970,21L970,22L976,22L976,23L1011,23L1011,24L1087,24L1087,25L1093,25L1093,26L1188,26L1188,27L1261,27L1261,28L1305,28L1305,29L1333,29L1333,30L1355,30L1355,31L1379,31L1379,30L1425,30L1425,31L1475,31L1475,32L1508,32L1508,33L1509,33L1509,33L1574,33L1574,33L1580,33L1580,34L1585,34L1585,35L1596,35L1596,36L1611,36L1611,37L1628,37L1628,38L1644,38L1644,39L1647,39L1647,38L1657,38L1657,37L1660,37L1660,38L1668,38L1668,39L1677,39L1677,40L1679,40L1679,41L1680,41L1680,42L1681,42L1681,43L1686,43L1686,43L1693,43L1693,44L1703,44L1703,43L1705,43L1705,44L1709,44L1709,43L1717,43" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L303,0L303,10L323,10L323,11L618,11L618,12L1584,12L1584,13L1717,13" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.814y45w1</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L310,0L310,4L361,4L361,5L558,5L558,6L822,6L822,7L905,7L905,8L1017,8L1017,8L1089,8L1089,9L1121,9L1121,10L1195,10L1195,11L1354,11L1354,12L1516,12L1516,13L1519,13L1519,14L1539,14L1539,15L1542,15L1542,14L1560,14L1560,15L1648,15L1648,16L1689,16L1689,16L1705,16L1705,17L1717,17" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.5leogx5q</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
