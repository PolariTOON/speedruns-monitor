<svg xmlns="http://www.w3.org/2000/svg" lang="en" style="color-scheme: dark light;">
	<title>Time by leaderboard for player 86rpw3p8</title>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject &gt; div {
			position: absolute;
			left: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg {
			width: calc(100% - 40px);
			height: calc(100% - 40px);
			margin: 20px;
			padding: 10px;
			border: 1px dashed var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%">
		<svg viewBox="0 0 428 24353" preserveAspectRatio="none" overflow="visible">
			<g transform="scale(1 -1)" transform-origin="center center" style="--count: 15;">
				<g style="--index: 0;">
					<path d="M0,1913L224,1913L224,1707" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
					<rect x="0" y="1707" width="224" height="206"/>
					<path d="M0,1913L0,1913" tabindex="0">
						<title>00:19.13 on 2023-10-29</title>
					</path>
					<line x1="0" y1="1913" x2="428" y2="1913"/>
					<line x1="0" y1="0" x2="0" y2="24353"/>
					<path d="M224,1707L224,1707" tabindex="0">
						<title>00:17.07 on 2024-06-09</title>
					</path>
					<line x1="0" y1="1707" x2="428" y2="1707"/>
					<line x1="224" y1="0" x2="224" y2="24353"/>
				</g>
				<g style="--index: 1;">
					<path d="M0,6277" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klr25nj1</title>
					</path>
					<rect x="0" y="6277" width="0" height="0"/>
					<path d="M0,6277L0,6277" tabindex="0">
						<title>01:02.77 on 2023-10-29</title>
					</path>
					<line x1="0" y1="6277" x2="428" y2="6277"/>
					<line x1="0" y1="0" x2="0" y2="24353"/>
				</g>
				<g style="--index: 2;">
					<path d="M2,897" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
					<rect x="2" y="897" width="0" height="0"/>
					<path d="M2,897L2,897" tabindex="0">
						<title>00:08.97 on 2023-10-31</title>
					</path>
					<line x1="0" y1="897" x2="428" y2="897"/>
					<line x1="2" y1="0" x2="2" y2="24353"/>
				</g>
				<g style="--index: 3;">
					<path d="M227,1062" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
					<rect x="227" y="1062" width="0" height="0"/>
					<path d="M227,1062L227,1062" tabindex="0">
						<title>00:10.62 on 2024-06-12</title>
					</path>
					<line x1="0" y1="1062" x2="428" y2="1062"/>
					<line x1="227" y1="0" x2="227" y2="24353"/>
				</g>
				<g style="--index: 4;">
					<path d="M259,914" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
					<rect x="259" y="914" width="0" height="0"/>
					<path d="M259,914L259,914" tabindex="0">
						<title>00:09.14 on 2024-07-14</title>
					</path>
					<line x1="0" y1="914" x2="428" y2="914"/>
					<line x1="259" y1="0" x2="259" y2="24353"/>
				</g>
				<g style="--index: 5;">
					<path d="M267,1430" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
					<rect x="267" y="1430" width="0" height="0"/>
					<path d="M267,1430L267,1430" tabindex="0">
						<title>00:14.30 on 2024-07-22</title>
					</path>
					<line x1="0" y1="1430" x2="428" y2="1430"/>
					<line x1="267" y1="0" x2="267" y2="24353"/>
				</g>
				<g style="--index: 6;">
					<path d="M268,10867" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.4qywn341</title>
					</path>
					<rect x="268" y="10867" width="0" height="0"/>
					<path d="M268,10867L268,10867" tabindex="0">
						<title>01:48.67 on 2024-07-23</title>
					</path>
					<line x1="0" y1="10867" x2="428" y2="10867"/>
					<line x1="268" y1="0" x2="268" y2="24353"/>
				</g>
				<g style="--index: 7;">
					<path d="M291,1247L292,1247L292,1238L293,1238L293,1234L294,1234L294,1228" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
					<rect x="291" y="1228" width="3" height="19"/>
					<path d="M291,1247L291,1247" tabindex="0">
						<title>00:12.47 on 2024-08-15</title>
					</path>
					<line x1="0" y1="1247" x2="428" y2="1247"/>
					<line x1="291" y1="0" x2="291" y2="24353"/>
					<path d="M292,1238L292,1238" tabindex="0">
						<title>00:12.38 on 2024-08-16</title>
					</path>
					<line x1="0" y1="1238" x2="428" y2="1238"/>
					<line x1="292" y1="0" x2="292" y2="24353"/>
					<path d="M293,1234L293,1234" tabindex="0">
						<title>00:12.34 on 2024-08-17</title>
					</path>
					<line x1="0" y1="1234" x2="428" y2="1234"/>
					<line x1="293" y1="0" x2="293" y2="24353"/>
					<path d="M294,1228L294,1228" tabindex="0">
						<title>00:12.28 on 2024-08-18</title>
					</path>
					<line x1="0" y1="1228" x2="428" y2="1228"/>
					<line x1="294" y1="0" x2="294" y2="24353"/>
				</g>
				<g style="--index: 8;">
					<path d="M298,13519" tabindex="0">
						<title>l_xd0mnpjw-rkl3znrk-wley4prn.192xe54q</title>
					</path>
					<rect x="298" y="13519" width="0" height="0"/>
					<path d="M298,13519L298,13519" tabindex="0">
						<title>02:15.19 on 2024-08-22</title>
					</path>
					<line x1="0" y1="13519" x2="428" y2="13519"/>
					<line x1="298" y1="0" x2="298" y2="24353"/>
				</g>
				<g style="--index: 9;">
					<path d="M306,1682" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.jq606z3q</title>
					</path>
					<rect x="306" y="1682" width="0" height="0"/>
					<path d="M306,1682L306,1682" tabindex="0">
						<title>00:16.82 on 2024-08-30</title>
					</path>
					<line x1="0" y1="1682" x2="428" y2="1682"/>
					<line x1="306" y1="0" x2="306" y2="24353"/>
				</g>
				<g style="--index: 10;">
					<path d="M319,14788L324,14788L324,14679L326,14679L326,14601" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-38dz6v1n.q755eky1</title>
					</path>
					<rect x="319" y="14601" width="7" height="187"/>
					<path d="M319,14788L319,14788" tabindex="0">
						<title>02:27.88 on 2024-09-12</title>
					</path>
					<line x1="0" y1="14788" x2="428" y2="14788"/>
					<line x1="319" y1="0" x2="319" y2="24353"/>
					<path d="M324,14679L324,14679" tabindex="0">
						<title>02:26.79 on 2024-09-17</title>
					</path>
					<line x1="0" y1="14679" x2="428" y2="14679"/>
					<line x1="324" y1="0" x2="324" y2="24353"/>
					<path d="M326,14601L326,14601" tabindex="0">
						<title>02:26.01 on 2024-09-19</title>
					</path>
					<line x1="0" y1="14601" x2="428" y2="14601"/>
					<line x1="326" y1="0" x2="326" y2="24353"/>
				</g>
				<g style="--index: 11;">
					<path d="M371,2035" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
					<rect x="371" y="2035" width="0" height="0"/>
					<path d="M371,2035L371,2035" tabindex="0">
						<title>00:20.35 on 2024-11-03</title>
					</path>
					<line x1="0" y1="2035" x2="428" y2="2035"/>
					<line x1="371" y1="0" x2="371" y2="24353"/>
				</g>
				<g style="--index: 12;">
					<path d="M400,6095" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.mlno5r0q</title>
					</path>
					<rect x="400" y="6095" width="0" height="0"/>
					<path d="M400,6095L400,6095" tabindex="0">
						<title>01:00.95 on 2024-12-02</title>
					</path>
					<line x1="0" y1="6095" x2="428" y2="6095"/>
					<line x1="400" y1="0" x2="400" y2="24353"/>
				</g>
				<g style="--index: 13;">
					<path d="M409,24353L428,24353L428,23201" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.p12dx07q</title>
					</path>
					<rect x="409" y="23201" width="19" height="1152"/>
					<path d="M409,24353L409,24353" tabindex="0">
						<title>04:03.53 on 2024-12-11</title>
					</path>
					<line x1="0" y1="24353" x2="428" y2="24353"/>
					<line x1="409" y1="0" x2="409" y2="24353"/>
					<path d="M428,23201L428,23201" tabindex="0">
						<title>03:52.01 on 2024-12-30</title>
					</path>
					<line x1="0" y1="23201" x2="428" y2="23201"/>
					<line x1="428" y1="0" x2="428" y2="24353"/>
				</g>
				<g style="--index: 14;">
					<path d="M410,20430" tabindex="0">
						<title>l_495zlx39-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
					<rect x="410" y="20430" width="0" height="0"/>
					<path d="M410,20430L410,20430" tabindex="0">
						<title>03:24.30 on 2024-12-12</title>
					</path>
					<line x1="0" y1="20430" x2="428" y2="20430"/>
					<line x1="410" y1="0" x2="410" y2="24353"/>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
