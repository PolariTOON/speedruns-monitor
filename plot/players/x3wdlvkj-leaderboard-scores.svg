<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player x3wdlvkj</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2023-01-29</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-31</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">211</text>
		</svg>
		<svg viewBox="0 0 945 211" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 211) scale(1 -1)" style="--count: 30;">
				<g>
					<rect x="0" y="0" width="945" height="211"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,16L43,16L43,17L44,17L44,18L47,18L47,19L53,19L53,20L57,20L57,20L61,20L61,21L71,21L71,22L73,22L73,23L80,23L80,24L83,24L83,23L84,23L84,23L91,23L91,24L97,24L97,25L120,25L120,26L126,26L126,27L130,27L130,28L138,28L138,29L140,29L140,30L144,30L144,31L147,31L147,32L153,32L153,33L158,33L158,35L171,35L171,36L177,36L177,37L178,37L178,38L183,38L183,39L184,39L184,40L185,40L185,41L187,41L187,42L189,42L189,43L191,43L191,44L198,44L198,45L205,45L205,46L241,46L241,47L245,47L245,49L250,49L250,50L252,50L252,51L259,51L259,52L265,52L265,53L271,53L271,54L287,54L287,55L292,55L292,56L300,56L300,57L307,57L307,58L313,58L313,59L356,59L356,60L401,60L401,61L418,61L418,62L419,62L419,64L423,64L423,65L436,65L436,66L437,66L437,67L460,67L460,68L461,68L461,69L466,69L466,71L468,71L468,72L483,72L483,73L487,73L487,74L505,74L505,75L513,75L513,76L532,76L532,77L533,77L533,78L539,78L539,79L546,79L546,80L548,80L548,81L552,81L552,81L558,81L558,80L572,80L572,81L573,81L573,82L579,82L579,83L580,83L580,84L581,84L581,86L589,86L589,87L591,87L591,88L596,88L596,89L604,89L604,88L606,88L606,89L612,89L612,91L628,91L628,90L630,90L630,91L644,91L644,90L657,90L657,91L660,91L660,93L664,93L664,94L668,94L668,95L670,95L670,96L671,96L671,97L674,97L674,98L702,98L702,99L706,99L706,100L709,100L709,100L711,100L711,101L718,101L718,102L720,102L720,103L726,103L726,104L730,104L730,105L731,105L731,106L735,106L735,107L736,107L736,109L740,109L740,110L744,110L744,111L745,111L745,112L749,112L749,113L750,113L750,114L751,114L751,115L752,115L752,116L755,116L755,117L762,117L762,118L764,118L764,119L768,119L768,121L770,121L770,122L782,122L782,123L783,123L783,124L791,124L791,125L806,125L806,126L813,126L813,127L822,127L822,128L825,128L825,129L833,129L833,130L834,130L834,131L838,131L838,132L840,132L840,133L846,133L846,134L848,134L848,135L850,135L850,136L852,136L852,137L858,137L858,138L860,138L860,137L862,137L862,138L868,138L868,139L869,139L869,140L876,140L876,141L877,141L877,142L885,142L885,141L890,141L890,142L891,142L891,143L895,143L895,144L897,144L897,145L898,145L898,146L903,146L903,147L906,147L906,148L910,148L910,149L911,149L911,151L913,151L913,152L917,152L917,153L918,153L918,154L919,154L919,155L921,155L921,157L922,157L922,158L923,158L923,159L925,159L925,160L933,160L933,161L938,161L938,163L939,163L939,162L942,162L942,164L945,164" tabindex="0">
						<title>xd17x94d-9l71pv4l.21gpn081</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L31,0L31,8L208,8L208,9L231,9L231,10L277,10L277,11L341,11L341,12L366,12L366,12L384,12L384,12L459,12L459,13L470,13L470,13L505,13L505,13L591,13L591,14L593,14L593,15L609,15L609,15L617,15L617,16L618,16L618,25L739,25L739,26L775,26L775,26L837,26L837,27L847,27L847,28L848,28L848,27L884,27L884,26L892,26L892,26L894,26L894,26L895,26L895,27L903,27L903,28L906,28L906,28L907,28L907,29L921,29L921,30L925,30L925,30L945,30" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L37,0L37,113L38,113L38,112L42,112L42,113L47,113L47,114L51,114L51,115L62,115L62,116L63,116L63,117L67,117L67,117L71,117L71,117L73,117L73,118L76,118L76,119L77,119L77,120L96,120L96,126L97,126L97,127L98,127L98,128L105,128L105,129L107,129L107,130L112,130L112,131L119,131L119,132L120,132L120,133L122,133L122,134L132,134L132,135L146,135L146,136L153,136L153,137L156,137L156,137L176,137L176,138L187,138L187,139L228,139L228,140L240,140L240,141L261,141L261,142L267,142L267,143L273,143L273,145L279,145L279,146L287,146L287,147L314,147L314,148L343,148L343,149L368,149L368,150L410,150L410,151L411,151L411,152L431,152L431,153L434,153L434,154L441,154L441,155L466,155L466,156L476,156L476,157L478,157L478,158L484,158L484,159L514,159L514,160L540,160L540,162L547,162L547,163L555,163L555,164L568,164L568,165L569,165L569,165L576,165L576,166L581,166L581,167L585,167L585,168L587,168L587,169L597,169L597,169L609,169L609,169L617,169L617,170L637,170L637,170L642,170L642,171L643,171L643,172L658,172L658,172L670,172L670,173L676,173L676,174L679,174L679,175L685,175L685,176L688,176L688,177L716,177L716,177L722,177L722,178L724,178L724,179L734,179L734,180L735,180L735,181L739,181L739,182L745,182L745,184L747,184L747,185L750,185L750,185L755,185L755,186L764,186L764,187L773,187L773,189L778,189L778,190L779,190L779,192L782,192L782,192L785,192L785,193L789,193L789,193L795,193L795,192L800,192L800,191L802,191L802,192L803,192L803,193L805,193L805,193L806,193L806,194L807,194L807,194L811,194L811,195L812,195L812,196L814,196L814,197L819,197L819,198L823,198L823,199L859,199L859,200L880,200L880,200L886,200L886,201L891,201L891,203L898,203L898,204L903,204L903,204L907,204L907,205L911,205L911,205L913,205L913,207L915,207L915,208L928,208L928,209L936,209L936,210L938,210L938,211L945,211" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L101,0L101,9L368,9L368,10L466,10L466,11L555,11L555,12L609,12L609,12L617,12L617,13L787,13L787,13L800,13L800,12L804,12L804,12L861,12L861,12L881,12L881,11L882,11L882,11L898,11L898,11L915,11L915,11L945,11" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.xqkjmnnl</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L110,0L110,8L273,8L273,9L425,9L425,10L435,10L435,10L468,10L468,10L605,10L605,10L615,10L615,10L617,10L617,11L703,11L703,11L705,11L705,11L765,11L765,11L776,11L776,11L801,11L801,10L878,10L878,10L887,10L887,10L897,10L897,10L898,10L898,10L903,10L903,10L906,10L906,10L907,10L907,10L908,10L908,10L909,10L909,29L914,29L914,28L920,28L920,27L922,27L922,28L934,28L934,29L936,29L936,30L942,30L942,29L944,29L944,30L945,30" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L117,0L117,28L146,28L146,29L159,29L159,30L164,30L164,31L307,31L307,32L314,32L314,33L317,33L317,34L339,34L339,35L378,35L378,36L381,36L381,37L447,37L447,38L458,38L458,39L462,39L462,40L524,40L524,41L534,41L534,43L556,43L556,43L557,43L557,44L560,44L560,45L579,45L579,46L588,46L588,47L609,47L609,49L639,49L639,50L659,50L659,51L692,51L692,52L696,52L696,53L702,53L702,54L704,54L704,55L726,55L726,56L742,56L742,57L746,57L746,58L750,58L750,59L751,59L751,60L755,60L755,61L762,61L762,62L763,62L763,63L764,63L764,64L770,64L770,65L771,65L771,66L789,66L789,67L791,67L791,67L795,67L795,66L807,66L807,67L809,67L809,66L812,66L812,67L823,67L823,68L825,68L825,69L838,69L838,70L843,70L843,70L846,70L846,71L847,71L847,72L854,72L854,71L857,71L857,72L858,72L858,72L874,72L874,72L885,72L885,73L886,73L886,73L889,73L889,74L900,74L900,75L902,75L902,76L908,76L908,77L914,77L914,77L931,77L931,78L932,78L932,79L936,79L936,78L937,78L937,79L945,79" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L118,0L118,14L136,14L136,15L203,15L203,16L242,16L242,17L400,17L400,18L462,18L462,19L556,19L556,20L609,20L609,21L702,21L702,22L735,22L735,23L800,23L800,23L801,23L801,23L802,23L802,24L806,24L806,23L813,23L813,24L823,24L823,24L830,24L830,25L893,25L893,26L914,26L914,26L916,26L916,27L935,27L935,27L945,27" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L132,0L132,1L134,1L134,1L160,1L160,2L215,2L215,3L321,3L321,2L450,2L450,3L521,3L521,4L523,4L523,5L584,5L584,5L595,5L595,6L609,6L609,6L638,6L638,7L682,7L682,8L701,8L701,9L704,9L704,10L715,10L715,11L716,11L716,12L732,12L732,12L769,12L769,11L773,11L773,12L802,12L802,12L810,12L810,12L825,12L825,13L861,13L861,13L883,13L883,13L885,13L885,12L907,12L907,13L912,13L912,14L915,14L915,15L916,15L916,16L922,16L922,17L932,17L932,18L945,18" tabindex="0">
						<title>l_gdr5onk9-rkl3znrk-rn1g06dn.qj77o50q</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L167,0L167,10L237,10L237,10L609,10L609,10L673,10L673,10L685,10L685,11L716,11L716,11L734,11L734,11L773,11L773,11L844,11L844,11L848,11L848,11L860,11L860,11L875,11L875,10L878,10L878,10L883,10L883,10L907,10L907,10L930,10L930,10L941,10L941,11L945,11" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L167,0L167,2L170,2L170,2L199,2L199,3L524,3L524,3L592,3L592,3L600,3L600,2L692,2L692,3L772,3L772,4L774,4L774,4L787,4L787,5L803,5L803,5L905,5L905,5L935,5L935,5L938,5L938,5L945,5" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.qj7jxxoq</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L167,0L167,24L361,24L361,25L400,25L400,26L457,26L457,27L460,27L460,28L496,28L496,29L564,29L564,29L568,29L568,30L590,30L590,29L591,29L591,30L609,30L609,31L776,31L776,31L780,31L780,31L813,31L813,32L815,32L815,32L870,32L870,33L874,33L874,33L882,33L882,33L910,33L910,33L911,33L911,34L930,34L930,36L938,36L938,37L941,37L941,36L945,36L945,37L945,37" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L168,0L168,2L169,2L169,2L170,2L170,2L175,2L175,3L177,3L177,3L182,3L182,3L183,3L183,7L184,7L184,7L192,7L192,8L194,8L194,8L195,8L195,9L200,9L200,10L208,10L208,11L244,11L244,12L249,12L249,13L250,13L250,12L251,12L251,12L305,12L305,13L435,13L435,14L466,14L466,15L514,15L514,16L518,16L518,17L549,17L549,18L552,18L552,18L559,18L559,19L613,19L613,19L648,19L648,20L653,20L653,21L660,21L660,22L684,22L684,23L702,23L702,24L724,24L724,25L725,25L725,26L727,26L727,25L731,25L731,26L756,26L756,27L759,27L759,28L762,28L762,29L765,29L765,30L770,30L770,31L777,31L777,31L785,31L785,31L825,31L825,32L834,32L834,33L852,33L852,34L860,34L860,34L871,34L871,35L872,35L872,34L875,34L875,34L881,34L881,34L889,34L889,34L896,34L896,35L903,35L903,35L905,35L905,36L910,36L910,36L912,36L912,38L914,38L914,38L919,38L919,38L927,38L927,38L934,38L934,39L937,39L937,39L944,39L944,40L945,40" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.1dk62o3l</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L174,0L174,2L178,2L178,2L181,2L181,2L183,2L183,4L184,4L184,4L200,4L200,5L208,5L208,6L268,6L268,7L285,7L285,8L394,8L394,9L561,9L561,10L587,10L587,10L634,10L634,10L728,10L728,10L735,10L735,11L752,11L752,12L773,12L773,13L788,13L788,13L790,13L790,14L826,14L826,15L838,15L838,16L860,16L860,16L881,16L881,17L885,17L885,17L890,17L890,17L892,17L892,17L904,17L904,18L906,18L906,17L910,17L910,17L915,17L915,17L927,17L927,17L934,17L934,18L938,18L938,19L945,19" tabindex="0">
						<title>rkl9qwrk-6njkg4el.lr3x560l</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L215,0L215,2L273,2L273,3L571,3L571,3L747,3L747,4L758,4L758,4L799,4L799,4L811,4L811,3L862,3L862,3L874,3L874,3L944,3L944,3L945,3" tabindex="0">
						<title>l_xd0mnpjw-rkl3znrk-wley4prn.192xe54q</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L221,0L221,3L275,3L275,3L283,3L283,3L688,3L688,4L711,4L711,4L770,4L770,4L877,4L877,3L881,3L881,4L896,4L896,4L929,4L929,4L945,4" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.qoxdrr4q</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L230,0L230,1L302,1L302,1L735,1L735,1L767,1L767,1L768,1L768,2L906,2L906,1L907,1L907,1L930,1L930,1L944,1L944,7L945,7" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.q5vkg7vl</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L250,0L250,20L272,20L272,21L400,21L400,22L564,22L564,23L761,23L761,24L780,24L780,24L781,24L781,24L782,24L782,25L813,25L813,26L878,26L878,26L882,26L882,26L907,26L907,28L912,28L912,28L913,28L913,28L918,28L918,28L922,28L922,29L939,29L939,30L943,30L943,29L945,29" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L266,0L266,5L464,5L464,6L557,6L557,7L609,7L609,8L738,8L738,9L790,9L790,9L806,9L806,9L883,9L883,9L899,9L899,9L903,9L903,11L905,11L905,11L919,11L919,11L930,11L930,12L945,12" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.gq7jzvnq</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L298,0L298,6L463,6L463,7L738,7L738,7L884,7L884,7L914,7L914,8L926,8L926,8L936,8L936,8L945,8" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.rqvp5e7q</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L317,0L317,7L342,7L342,6L344,6L344,7L413,7L413,7L434,7L434,8L440,8L440,8L464,8L464,8L488,8L488,8L529,8L529,8L567,8L567,8L754,8L754,9L908,9L908,9L931,9L931,8L945,8" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.9qj0kxel</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L338,0L338,17L339,17L339,18L369,18L369,17L438,17L438,17L462,17L462,17L529,17L529,16L674,16L674,17L749,17L749,17L754,17L754,18L764,18L764,19L771,19L771,19L890,19L890,18L904,18L904,18L910,18L910,18L930,18L930,17L945,17" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.4qypgj4q</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L463,0L463,4L506,4L506,4L507,4L507,4L518,4L518,5L529,5L529,5L589,5L589,6L591,6L591,7L609,7L609,8L617,8L617,9L693,9L693,10L756,10L756,10L763,10L763,11L776,11L776,12L792,12L792,13L796,13L796,11L797,11L797,11L831,11L831,12L839,12L839,11L866,11L866,11L871,11L871,11L881,11L881,11L907,11L907,12L908,12L908,13L910,13L910,13L944,13L944,15L945,15" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.qj7zdm3q</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L573,0L573,23L617,23L617,24L693,24L693,25L694,25L694,26L720,26L720,27L724,27L724,28L726,28L726,29L727,29L727,30L729,30L729,31L735,31L735,32L742,32L742,33L746,33L746,34L761,34L761,35L770,35L770,36L776,36L776,37L779,37L779,38L781,38L781,39L794,39L794,39L795,39L795,39L801,39L801,40L820,40L820,41L825,41L825,42L828,42L828,43L838,43L838,44L866,44L866,44L878,44L878,43L887,43L887,44L889,44L889,44L890,44L890,44L892,44L892,45L893,45L893,46L894,46L894,47L895,47L895,48L900,48L900,48L903,48L903,49L906,49L906,56L907,56L907,57L908,57L908,58L909,58L909,59L922,59L922,60L927,60L927,61L930,61L930,62L931,62L931,63L932,63L932,64L938,64L938,65L941,65L941,66L943,66L943,67L944,67L944,68L945,68" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L579,0L579,3L909,3L909,4L920,4L920,5L923,5L923,6L942,6L942,7L945,7" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.1dkg795l</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L587,0L587,3L609,3L609,3L738,3L738,4L767,4L767,5L780,5L780,5L803,5L803,5L882,5L882,4L895,4L895,4L896,4L896,4L945,4" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6ejq</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L604,0L604,9L609,9L609,10L644,10L644,10L735,10L735,11L779,11L779,12L814,12L814,11L825,11L825,12L882,12L882,12L894,12L894,12L905,12L905,11L906,11L906,11L930,11L930,11L945,11" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L648,0L648,6L758,6L758,7L879,7L879,7L912,7L912,8L923,8L923,9L929,9L929,10L945,10L945,9L945,9" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.zqop6rp1</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L764,0L764,10L786,10L786,11L885,11L885,12L886,12L886,13L907,13L907,13L918,13L918,14L919,14L919,14L924,14L924,13L929,13L929,13L945,13" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.814y0701</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L886,0L886,1L887,1L887,1L890,1L890,2L892,2L892,2L893,2L893,3L894,3L894,4L896,4L896,6L897,6L897,5L936,5L936,6L945,6" tabindex="0">
						<title>l_drpxgo6w-rkl3znrk-68kwx3z8.1w4w8x5q</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L910,0L910,3L932,3L932,3L945,3" tabindex="0">
						<title>l_gdr5onk9-rkl3znrk-rn1g06dn.lmooe9y1</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
