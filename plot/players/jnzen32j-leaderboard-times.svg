<svg xmlns="http://www.w3.org/2000/svg" lang="en" style="color-scheme: dark light;">
	<title>Time by leaderboard for player jnzen32j</title>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject &gt; div {
			position: absolute;
			inset: 0 auto auto 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg {
			width: calc(100% - 40px);
			height: calc(100% - 40px);
			margin: 20px;
			padding: 10px;
			border: 1px dashed var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%">
		<svg viewBox="0 0 766 133761" preserveAspectRatio="none" overflow="visible">
			<g transform="scale(1 -1)" transform-origin="center center" style="--count: 14;">
				<g style="--index: 0;">
					<path d="M0,1686" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
					<rect x="0" y="1686" width="0" height="0"/>
					<path d="M0,1686L0,1686" tabindex="0">
						<title>00:16.86 on 2021-04-16</title>
					</path>
					<line x1="0" y1="1686" x2="766" y2="1686"/>
					<line x1="0" y1="0" x2="0" y2="133761"/>
				</g>
				<g style="--index: 1;">
					<path d="M0,1923L1,1923L1,1898" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
					<rect x="0" y="1898" width="1" height="25"/>
					<path d="M0,1923L0,1923" tabindex="0">
						<title>00:19.23 on 2021-04-16</title>
					</path>
					<line x1="0" y1="1923" x2="766" y2="1923"/>
					<line x1="0" y1="0" x2="0" y2="133761"/>
					<path d="M1,1898L1,1898" tabindex="0">
						<title>00:18.98 on 2021-04-17</title>
					</path>
					<line x1="0" y1="1898" x2="766" y2="1898"/>
					<line x1="1" y1="0" x2="1" y2="133761"/>
				</g>
				<g style="--index: 2;">
					<path d="M22,11055" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.5leogx5q</title>
					</path>
					<rect x="22" y="11055" width="0" height="0"/>
					<path d="M22,11055L22,11055" tabindex="0">
						<title>01:50.55 on 2021-05-08</title>
					</path>
					<line x1="0" y1="11055" x2="766" y2="11055"/>
					<line x1="22" y1="0" x2="22" y2="133761"/>
				</g>
				<g style="--index: 3;">
					<path d="M29,21074" tabindex="0">
						<title>l_495zlx39-xd144xzd-38dz6v1n.5leogx5q</title>
					</path>
					<rect x="29" y="21074" width="0" height="0"/>
					<path d="M29,21074L29,21074" tabindex="0">
						<title>03:30.74 on 2021-05-15</title>
					</path>
					<line x1="0" y1="21074" x2="766" y2="21074"/>
					<line x1="29" y1="0" x2="29" y2="133761"/>
				</g>
				<g style="--index: 4;">
					<path d="M53,1559" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
					<rect x="53" y="1559" width="0" height="0"/>
					<path d="M53,1559L53,1559" tabindex="0">
						<title>00:15.59 on 2021-06-08</title>
					</path>
					<line x1="0" y1="1559" x2="766" y2="1559"/>
					<line x1="53" y1="0" x2="53" y2="133761"/>
				</g>
				<g style="--index: 5;">
					<path d="M57,3326L76,3326L76,3211" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.mlnwjz0l</title>
					</path>
					<rect x="57" y="3211" width="19" height="115"/>
					<path d="M57,3326L57,3326" tabindex="0">
						<title>00:33.26 on 2021-06-12</title>
					</path>
					<line x1="0" y1="3326" x2="766" y2="3326"/>
					<line x1="57" y1="0" x2="57" y2="133761"/>
					<path d="M76,3211L76,3211" tabindex="0">
						<title>00:32.11 on 2021-07-01</title>
					</path>
					<line x1="0" y1="3211" x2="766" y2="3211"/>
					<line x1="76" y1="0" x2="76" y2="133761"/>
				</g>
				<g style="--index: 6;">
					<path d="M58,2636L91,2636L91,2529L453,2529L453,2498L509,2498L509,2490L766,2490L766,2472" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.4qypgj4q</title>
					</path>
					<rect x="58" y="2472" width="708" height="164"/>
					<path d="M58,2636L58,2636" tabindex="0">
						<title>00:26.36 on 2021-06-13</title>
					</path>
					<line x1="0" y1="2636" x2="766" y2="2636"/>
					<line x1="58" y1="0" x2="58" y2="133761"/>
					<path d="M91,2529L91,2529" tabindex="0">
						<title>00:25.29 on 2021-07-16</title>
					</path>
					<line x1="0" y1="2529" x2="766" y2="2529"/>
					<line x1="91" y1="0" x2="91" y2="133761"/>
					<path d="M453,2498L453,2498" tabindex="0">
						<title>00:24.98 on 2022-07-13</title>
					</path>
					<line x1="0" y1="2498" x2="766" y2="2498"/>
					<line x1="453" y1="0" x2="453" y2="133761"/>
					<path d="M509,2490L509,2490" tabindex="0">
						<title>00:24.90 on 2022-09-07</title>
					</path>
					<line x1="0" y1="2490" x2="766" y2="2490"/>
					<line x1="509" y1="0" x2="509" y2="133761"/>
					<path d="M766,2472L766,2472" tabindex="0">
						<title>00:24.72 on 2023-05-22</title>
					</path>
					<line x1="0" y1="2472" x2="766" y2="2472"/>
					<line x1="766" y1="0" x2="766" y2="133761"/>
				</g>
				<g style="--index: 7;">
					<path d="M64,133761L65,133761L65,129471L66,129471L66,118495L97,118495L97,111247" tabindex="0">
						<title>xd17x94d-9l71pv4l.zqo20y2l</title>
					</path>
					<rect x="64" y="111247" width="33" height="22514"/>
					<path d="M64,133761L64,133761" tabindex="0">
						<title>22:17.61 on 2021-06-19</title>
					</path>
					<line x1="0" y1="133761" x2="766" y2="133761"/>
					<line x1="64" y1="0" x2="64" y2="133761"/>
					<path d="M65,129471L65,129471" tabindex="0">
						<title>21:34.71 on 2021-06-20</title>
					</path>
					<line x1="0" y1="129471" x2="766" y2="129471"/>
					<line x1="65" y1="0" x2="65" y2="133761"/>
					<path d="M66,118495L66,118495" tabindex="0">
						<title>19:44.95 on 2021-06-21</title>
					</path>
					<line x1="0" y1="118495" x2="766" y2="118495"/>
					<line x1="66" y1="0" x2="66" y2="133761"/>
					<path d="M97,111247L97,111247" tabindex="0">
						<title>18:32.47 on 2021-07-22</title>
					</path>
					<line x1="0" y1="111247" x2="766" y2="111247"/>
					<line x1="97" y1="0" x2="97" y2="133761"/>
				</g>
				<g style="--index: 8;">
					<path d="M65,4359L414,4359L414,4118" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.z19mo80l</title>
					</path>
					<rect x="65" y="4118" width="349" height="241"/>
					<path d="M65,4359L65,4359" tabindex="0">
						<title>00:43.59 on 2021-06-20</title>
					</path>
					<line x1="0" y1="4359" x2="766" y2="4359"/>
					<line x1="65" y1="0" x2="65" y2="133761"/>
					<path d="M414,4118L414,4118" tabindex="0">
						<title>00:41.18 on 2022-06-04</title>
					</path>
					<line x1="0" y1="4118" x2="766" y2="4118"/>
					<line x1="414" y1="0" x2="414" y2="133761"/>
				</g>
				<g style="--index: 9;">
					<path d="M68,3565L453,3565L453,3408" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.9qj0kxel</title>
					</path>
					<rect x="68" y="3408" width="385" height="157"/>
					<path d="M68,3565L68,3565" tabindex="0">
						<title>00:35.65 on 2021-06-23</title>
					</path>
					<line x1="0" y1="3565" x2="766" y2="3565"/>
					<line x1="68" y1="0" x2="68" y2="133761"/>
					<path d="M453,3408L453,3408" tabindex="0">
						<title>00:34.08 on 2022-07-13</title>
					</path>
					<line x1="0" y1="3408" x2="766" y2="3408"/>
					<line x1="453" y1="0" x2="453" y2="133761"/>
				</g>
				<g style="--index: 10;">
					<path d="M116,1595" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.jq6d86v1</title>
					</path>
					<rect x="116" y="1595" width="0" height="0"/>
					<path d="M116,1595L116,1595" tabindex="0">
						<title>00:15.95 on 2021-08-10</title>
					</path>
					<line x1="0" y1="1595" x2="766" y2="1595"/>
					<line x1="116" y1="0" x2="116" y2="133761"/>
				</g>
				<g style="--index: 11;">
					<path d="M120,92303" tabindex="0">
						<title>xd17x94d-9l71pv4l.81wrgm5l</title>
					</path>
					<rect x="120" y="92303" width="0" height="0"/>
					<path d="M120,92303L120,92303" tabindex="0">
						<title>15:23.03 on 2021-08-14</title>
					</path>
					<line x1="0" y1="92303" x2="766" y2="92303"/>
					<line x1="120" y1="0" x2="120" y2="133761"/>
				</g>
				<g style="--index: 12;">
					<path d="M535,1972" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.9qj3pk7l</title>
					</path>
					<rect x="535" y="1972" width="0" height="0"/>
					<path d="M535,1972L535,1972" tabindex="0">
						<title>00:19.72 on 2022-10-03</title>
					</path>
					<line x1="0" y1="1972" x2="766" y2="1972"/>
					<line x1="535" y1="0" x2="535" y2="133761"/>
				</g>
				<g style="--index: 13;">
					<path d="M576,94450" tabindex="0">
						<title>xd17x94d-9l71pv4l.21gpn081</title>
					</path>
					<rect x="576" y="94450" width="0" height="0"/>
					<path d="M576,94450L576,94450" tabindex="0">
						<title>15:44.50 on 2022-11-13</title>
					</path>
					<line x1="0" y1="94450" x2="766" y2="94450"/>
					<line x1="576" y1="0" x2="576" y2="133761"/>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
