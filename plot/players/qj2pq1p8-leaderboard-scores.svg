<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player qj2pq1p8</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2017-12-30</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-31</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">153</text>
		</svg>
		<svg viewBox="0 0 2801 153" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 153) scale(1 -1)" style="--count: 27;">
				<g>
					<rect x="0" y="0" width="2801" height="153"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,1L1,1L1,2L3,2L3,2L4,2L4,3L5,3L5,2L7,2L7,2L2624,2L2624,2L2658,2L2658,2L2801,2" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.q75zmmn1</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L1,0L1,1L2,1L2,2L7,2L7,3L8,3L8,3L9,3L9,2L2630,2L2630,2L2658,2L2658,2L2801,2" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.1gnozzxl</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L4,0L4,2L5,2L5,2L6,2L6,2L8,2L8,2L9,2L9,2L2624,2L2624,2L2794,2L2794,3L2801,3" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.ln8kgdol</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L4,0L4,1L7,1L7,1L2630,1L2630,1L2794,1L2794,1L2801,1" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.qyz3jjd1</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L9,0L9,1L10,1L10,1L14,1L14,1L80,1L80,1L113,1L113,1L604,1L604,2L879,2L879,2L1038,2L1038,2L1056,2L1056,2L1063,2L1063,2L1149,2L1149,2L1525,2L1525,3L1557,3L1557,4L1583,4L1583,4L1610,4L1610,4L1652,4L1652,4L1670,4L1670,4L1672,4L1672,5L1676,5L1676,6L1678,6L1678,7L1710,7L1710,8L1740,8L1740,8L1787,8L1787,8L1794,8L1794,9L1806,9L1806,10L1858,10L1858,10L1870,10L1870,11L1911,11L1911,11L1917,11L1917,12L1920,12L1920,12L1927,12L1927,12L1936,12L1936,13L1949,13L1949,13L1978,13L1978,13L1990,13L1990,14L2059,14L2059,15L2083,15L2083,16L2092,16L2092,17L2128,17L2128,18L2131,18L2131,18L2133,18L2133,18L2174,18L2174,18L2256,18L2256,18L2283,18L2283,18L2285,18L2285,19L2299,19L2299,20L2315,20L2315,21L2316,21L2316,21L2333,21L2333,21L2338,21L2338,22L2342,22L2342,22L2390,22L2390,23L2409,23L2409,23L2419,23L2419,24L2442,24L2442,24L2447,24L2447,24L2465,24L2465,24L2513,24L2513,24L2514,24L2514,24L2550,24L2550,25L2580,25L2580,26L2588,26L2588,26L2590,26L2590,27L2591,27L2591,26L2601,26L2601,27L2607,27L2607,27L2609,27L2609,27L2611,27L2611,27L2618,27L2618,27L2620,27L2620,28L2621,28L2621,27L2630,27L2630,28L2634,28L2634,28L2635,28L2635,29L2639,29L2639,29L2649,29L2649,29L2657,29L2657,30L2666,30L2666,30L2669,30L2669,30L2679,30L2679,30L2684,30L2684,31L2723,31L2723,31L2727,31L2727,31L2728,31L2728,31L2732,31L2732,31L2733,31L2733,31L2739,31L2739,31L2746,31L2746,31L2747,31L2747,31L2752,31L2752,31L2760,31L2760,31L2772,31L2772,31L2774,31L2774,31L2778,31L2778,31L2782,31L2782,31L2786,31L2786,31L2794,31L2794,32L2801,32L2801,32L2801,32" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L10,0L10,1L14,1L14,1L16,1L16,2L18,2L18,3L19,3L19,3L20,3L20,4L23,4L23,3L25,3L25,4L27,4L27,5L28,5L28,5L37,5L37,4L39,4L39,5L79,5L79,6L92,6L92,6L110,6L110,6L424,6L424,6L591,6L591,7L651,7L651,8L863,8L863,8L881,8L881,8L1043,8L1043,9L1056,9L1056,9L1065,9L1065,9L1082,9L1082,10L1115,10L1115,11L1116,11L1116,10L1121,10L1121,10L1150,10L1150,10L1158,10L1158,11L1195,11L1195,10L1209,10L1209,11L1212,11L1212,12L1409,12L1409,13L1435,13L1435,14L1438,14L1438,15L1439,15L1439,16L1464,16L1464,16L1494,16L1494,17L1495,17L1495,18L1523,18L1523,19L1528,19L1528,20L1547,20L1547,21L1548,21L1548,20L1563,20L1563,21L1583,21L1583,22L1588,22L1588,23L1590,23L1590,22L1592,22L1592,23L1610,23L1610,23L1612,23L1612,24L1624,24L1624,25L1651,25L1651,26L1671,26L1671,27L1676,27L1676,28L1693,28L1693,29L1714,29L1714,30L1716,30L1716,31L1720,31L1720,32L1782,32L1782,33L1788,33L1788,34L1852,34L1852,35L1897,35L1897,36L1902,36L1902,36L1905,36L1905,37L1907,37L1907,38L1918,38L1918,41L1947,41L1947,42L1956,42L1956,43L1958,43L1958,44L1961,44L1961,45L1975,45L1975,47L1981,47L1981,48L1989,48L1989,49L1991,49L1991,48L2000,48L2000,49L2019,49L2019,50L2027,50L2027,51L2031,51L2031,53L2044,53L2044,54L2047,54L2047,55L2053,55L2053,56L2059,56L2059,57L2064,57L2064,58L2080,58L2080,58L2094,58L2094,58L2107,58L2107,59L2108,59L2108,60L2111,60L2111,60L2117,60L2117,61L2170,61L2170,62L2174,62L2174,62L2225,62L2225,63L2226,63L2226,64L2228,64L2228,65L2229,65L2229,66L2230,66L2230,65L2244,65L2244,66L2249,66L2249,67L2271,67L2271,68L2277,68L2277,69L2283,69L2283,70L2294,70L2294,71L2316,71L2316,72L2331,72L2331,73L2336,73L2336,74L2346,74L2346,76L2363,76L2363,77L2376,77L2376,78L2382,78L2382,79L2383,79L2383,80L2386,80L2386,80L2388,80L2388,80L2410,80L2410,80L2412,80L2412,81L2414,81L2414,82L2426,82L2426,83L2427,83L2427,83L2428,83L2428,82L2436,82L2436,83L2443,83L2443,84L2444,84L2444,85L2469,85L2469,86L2479,86L2479,87L2506,87L2506,88L2521,88L2521,89L2529,89L2529,90L2530,90L2530,91L2542,91L2542,92L2580,92L2580,93L2588,93L2588,95L2592,95L2592,96L2598,96L2598,97L2616,97L2616,99L2636,99L2636,99L2638,99L2638,100L2647,100L2647,100L2657,100L2657,101L2665,101L2665,102L2667,102L2667,102L2673,102L2673,102L2679,102L2679,103L2680,103L2680,104L2681,104L2681,104L2708,104L2708,105L2724,105L2724,107L2727,107L2727,108L2733,108L2733,108L2742,108L2742,109L2743,109L2743,109L2745,109L2745,110L2746,110L2746,109L2747,109L2747,111L2754,111L2754,112L2757,112L2757,113L2758,113L2758,114L2759,114L2759,114L2764,114L2764,115L2769,115L2769,115L2778,115L2778,116L2786,116L2786,117L2788,117L2788,118L2800,118L2800,119L2801,119L2801,120L2801,120" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L10,0L10,1L14,1L14,1L18,1L18,2L20,2L20,1L27,1L27,3L36,3L36,2L39,2L39,5L82,5L82,7L103,7L103,7L110,7L110,7L592,7L592,8L652,8L652,8L852,8L852,8L866,8L866,8L928,8L928,8L1043,8L1043,8L1059,8L1059,8L1060,8L1060,8L1120,8L1120,8L1127,8L1127,8L1134,8L1134,9L1135,9L1135,10L1139,10L1139,10L1149,10L1149,11L1158,11L1158,12L1175,12L1175,12L1195,12L1195,12L1203,12L1203,12L1206,12L1206,13L1216,13L1216,13L1218,13L1218,13L1372,13L1372,14L1404,14L1404,15L1475,15L1475,15L1480,15L1480,15L1490,15L1490,15L1491,15L1491,16L1511,16L1511,17L1527,17L1527,17L1531,17L1531,17L1532,17L1532,16L1533,16L1533,17L1582,17L1582,17L1613,17L1613,17L1641,17L1641,18L1648,18L1648,18L1652,18L1652,18L1653,18L1653,18L1671,18L1671,18L1684,18L1684,18L1696,18L1696,18L1700,18L1700,18L1711,18L1711,18L1712,18L1712,18L1746,18L1746,19L1765,19L1765,20L1768,20L1768,20L1814,20L1814,21L1855,21L1855,22L1903,22L1903,22L1907,22L1907,22L1918,22L1918,22L1947,22L1947,22L1954,22L1954,23L1961,23L1961,23L1996,23L1996,23L2008,23L2008,23L2053,23L2053,24L2059,24L2059,24L2064,24L2064,25L2170,25L2170,25L2177,25L2177,25L2207,25L2207,25L2316,25L2316,26L2327,26L2327,27L2332,27L2332,27L2347,27L2347,27L2360,27L2360,27L2362,27L2362,27L2373,27L2373,27L2379,27L2379,28L2381,28L2381,28L2435,28L2435,28L2465,28L2465,28L2479,28L2479,29L2508,29L2508,29L2524,29L2524,29L2533,29L2533,30L2546,30L2546,30L2549,30L2549,31L2567,31L2567,31L2572,31L2572,31L2587,31L2587,31L2595,31L2595,32L2602,32L2602,33L2603,33L2603,33L2605,33L2605,33L2608,33L2608,33L2611,33L2611,34L2612,34L2612,34L2617,34L2617,34L2623,34L2623,34L2633,34L2633,34L2653,34L2653,35L2657,35L2657,35L2663,35L2663,35L2667,35L2667,35L2668,35L2668,35L2679,35L2679,35L2681,35L2681,35L2698,35L2698,35L2742,35L2742,35L2759,35L2759,35L2762,35L2762,35L2781,35L2781,35L2784,35L2784,35L2788,35L2788,35L2791,35L2791,35L2796,35L2796,35L2801,35" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L10,0L10,1L14,1L14,1L40,1L40,2L82,2L82,3L112,3L112,3L604,3L604,4L849,4L849,4L851,4L851,4L855,4L855,4L869,4L869,4L960,4L960,4L986,4L986,4L1036,4L1036,4L1054,4L1054,4L1056,4L1056,4L1061,4L1061,4L1063,4L1063,4L1112,4L1112,4L1159,4L1159,4L1403,4L1403,4L1461,4L1461,4L1646,4L1646,4L1652,4L1652,4L1672,4L1672,4L1702,4L1702,4L1724,4L1724,4L1726,4L1726,4L1740,4L1740,4L1806,4L1806,4L1837,4L1837,4L1839,4L1839,4L1923,4L1923,4L1948,4L1948,4L2068,4L2068,4L2085,4L2085,4L2128,4L2128,4L2182,4L2182,4L2256,4L2256,4L2316,4L2316,5L2325,5L2325,5L2356,5L2356,5L2409,5L2409,5L2410,5L2410,5L2419,5L2419,5L2465,5L2465,5L2478,5L2478,5L2541,5L2541,5L2590,5L2590,5L2602,5L2602,5L2603,5L2603,5L2606,5L2606,5L2613,5L2613,5L2618,5L2618,5L2628,5L2628,5L2647,5L2647,5L2669,5L2669,5L2693,5L2693,5L2718,5L2718,5L2728,5L2728,5L2734,5L2734,5L2748,5L2748,5L2758,5L2758,5L2759,5L2759,5L2760,5L2760,5L2762,5L2762,5L2763,5L2763,5L2766,5L2766,5L2767,5L2767,5L2779,5L2779,5L2786,5L2786,5L2787,5L2787,5L2801,5" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L10,0L10,1L19,1L19,1L68,1L68,2L82,2L82,3L108,3L108,3L592,3L592,4L873,4L873,4L1036,4L1036,4L1059,4L1059,4L1382,4L1382,4L1532,4L1532,4L1560,4L1560,5L1575,5L1575,5L1630,5L1630,6L1650,6L1650,6L1671,6L1671,7L1683,7L1683,8L1697,8L1697,9L1725,9L1725,10L1803,10L1803,10L1852,10L1852,11L1872,11L1872,10L1902,10L1902,10L1907,10L1907,11L1961,11L1961,12L2019,12L2019,13L2053,13L2053,14L2059,14L2059,15L2094,15L2094,15L2170,15L2170,15L2176,15L2176,16L2182,16L2182,15L2271,15L2271,16L2344,16L2344,16L2388,16L2388,16L2416,16L2416,16L2438,16L2438,16L2508,16L2508,16L2558,16L2558,17L2591,17L2591,17L2592,17L2592,17L2657,17L2657,17L2663,17L2663,18L2668,18L2668,18L2679,18L2679,19L2694,19L2694,19L2711,19L2711,19L2727,19L2727,20L2743,20L2743,20L2751,20L2751,21L2760,21L2760,21L2762,21L2762,21L2763,21L2763,21L2764,21L2764,21L2769,21L2769,21L2776,21L2776,21L2788,21L2788,22L2801,22" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L16,0L16,1L26,1L26,1L66,1L66,1L82,1L82,2L195,2L195,2L604,2L604,3L767,3L767,4L897,4L897,4L1043,4L1043,4L1056,4L1056,4L1068,4L1068,5L1082,5L1082,5L1125,5L1125,5L1159,5L1159,6L1192,6L1192,6L1265,6L1265,7L1385,7L1385,8L1400,8L1400,9L1530,9L1530,10L1532,10L1532,11L1592,11L1592,12L1646,12L1646,13L1690,13L1690,14L1725,14L1725,15L1780,15L1780,16L1816,16L1816,17L1823,17L1823,18L1878,18L1878,19L1883,19L1883,20L1884,20L1884,21L1885,21L1885,22L1887,22L1887,23L1907,23L1907,24L1913,24L1913,25L1923,25L1923,26L1924,26L1924,27L1948,27L1948,28L1949,28L1949,29L1973,29L1973,30L1982,30L1982,31L1996,31L1996,32L2024,32L2024,33L2058,33L2058,34L2103,34L2103,35L2171,35L2171,36L2184,36L2184,35L2255,35L2255,36L2268,36L2268,37L2300,37L2300,38L2350,38L2350,39L2351,39L2351,40L2353,40L2353,41L2362,41L2362,42L2397,42L2397,43L2408,43L2408,44L2434,44L2434,45L2435,45L2435,47L2465,47L2465,48L2488,48L2488,49L2501,49L2501,50L2537,50L2537,51L2540,51L2540,52L2566,52L2566,53L2572,53L2572,54L2582,54L2582,55L2584,55L2584,56L2585,56L2585,57L2609,57L2609,58L2611,58L2611,59L2612,59L2612,60L2613,60L2613,61L2630,61L2630,62L2631,62L2631,63L2632,63L2632,64L2635,64L2635,65L2669,65L2669,66L2738,66L2738,67L2741,67L2741,66L2744,66L2744,66L2745,66L2745,66L2746,66L2746,66L2751,66L2751,67L2752,67L2752,68L2757,68L2757,68L2761,68L2761,69L2762,69L2762,69L2766,69L2766,69L2767,69L2767,69L2770,69L2770,69L2772,69L2772,69L2778,69L2778,69L2780,69L2780,69L2790,69L2790,69L2791,69L2791,70L2793,70L2793,71L2797,71L2797,70L2801,70" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path dtabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L18,0L18,1L20,1L20,1L32,1L32,2L33,2L33,1L34,1L34,1L82,1L82,2L108,2L108,2L190,2L190,3L381,3L381,3L591,3L591,4L871,4L871,4L974,4L974,4L1059,4L1059,4L1085,4L1085,4L1091,4L1091,4L1108,4L1108,4L1134,4L1134,4L1203,4L1203,4L1209,4L1209,5L1372,5L1372,6L1438,6L1438,7L1470,7L1470,8L1534,8L1534,8L1562,8L1562,9L1590,9L1590,9L1652,9L1652,9L1662,9L1662,10L1671,10L1671,11L1684,11L1684,12L1687,12L1687,13L1697,13L1697,14L1699,14L1699,15L1714,15L1714,15L1723,15L1723,15L1771,15L1771,16L1772,16L1772,17L1778,17L1778,18L1783,18L1783,18L1845,18L1845,18L1852,18L1852,19L1866,19L1866,20L1867,20L1867,19L1878,19L1878,20L1905,20L1905,21L1919,21L1919,21L1942,21L1942,21L1987,21L1987,22L1994,22L1994,22L2003,22L2003,23L2019,23L2019,24L2052,24L2052,25L2067,25L2067,25L2080,25L2080,24L2129,24L2129,24L2170,24L2170,24L2172,24L2172,25L2205,25L2205,26L2227,26L2227,27L2231,27L2231,26L2235,26L2235,26L2314,26L2314,26L2318,26L2318,27L2381,27L2381,27L2412,27L2412,27L2451,27L2451,27L2465,27L2465,27L2526,27L2526,27L2527,27L2527,27L2562,27L2562,27L2573,27L2573,27L2582,27L2582,27L2587,27L2587,28L2591,28L2591,29L2617,29L2617,30L2618,30L2618,30L2619,30L2619,31L2622,31L2622,31L2623,31L2623,31L2651,31L2651,31L2668,31L2668,31L2679,31L2679,32L2681,32L2681,33L2710,33L2710,33L2718,33L2718,33L2731,33L2731,33L2735,33L2735,33L2743,33L2743,33L2745,33L2745,34L2758,34L2758,34L2770,34L2770,34L2773,34L2773,35L2776,35L2776,35L2787,35L2787,36L2793,36L2793,36L2795,36L2795,36L2801,36" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L18,0L18,1L20,1L20,1L32,1L32,1L34,1L34,2L35,2L35,1L78,1L78,1L108,1L108,1L592,1L592,2L877,2L877,2L974,2L974,2L1059,2L1059,2L1099,2L1099,2L1108,2L1108,2L1134,2L1134,2L1208,2L1208,2L1648,2L1648,2L1652,2L1652,2L1671,2L1671,3L1683,3L1683,4L1697,4L1697,5L1701,5L1701,6L1712,6L1712,7L1715,7L1715,7L1777,7L1777,7L1804,7L1804,8L1816,8L1816,8L1852,8L1852,9L1869,9L1869,10L1893,10L1893,10L1905,10L1905,11L1919,11L1919,11L1973,11L1973,11L2002,11L2002,11L2015,11L2015,11L2020,11L2020,12L2163,12L2163,12L2170,12L2170,12L2173,12L2173,13L2195,13L2195,13L2234,13L2234,14L2237,14L2237,14L2303,14L2303,15L2314,15L2314,15L2318,15L2318,16L2380,16L2380,16L2390,16L2390,17L2412,17L2412,17L2413,17L2413,18L2416,18L2416,18L2435,18L2435,19L2444,19L2444,20L2465,20L2465,21L2495,21L2495,21L2515,21L2515,21L2548,21L2548,21L2552,21L2552,21L2558,21L2558,22L2560,22L2560,23L2582,23L2582,23L2598,23L2598,24L2602,24L2602,24L2606,24L2606,25L2607,25L2607,25L2611,25L2611,25L2618,25L2618,26L2619,26L2619,26L2620,26L2620,26L2626,26L2626,26L2627,26L2627,26L2645,26L2645,26L2647,26L2647,26L2663,26L2663,27L2668,27L2668,27L2679,27L2679,28L2681,28L2681,28L2694,28L2694,28L2699,28L2699,28L2702,28L2702,29L2703,29L2703,29L2713,29L2713,29L2714,29L2714,29L2730,29L2730,29L2741,29L2741,29L2742,29L2742,29L2745,29L2745,30L2756,30L2756,30L2758,30L2758,30L2764,30L2764,30L2770,30L2770,30L2787,30L2787,30L2788,30L2788,31L2793,31L2793,31L2801,31" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L18,0L18,2L19,2L19,2L34,2L34,2L39,2L39,2L69,2L69,4L78,4L78,4L108,4L108,4L443,4L443,4L532,4L532,4L533,4L533,4L592,4L592,5L782,5L782,5L863,5L863,5L881,5L881,5L1036,5L1036,5L1040,5L1040,5L1044,5L1044,5L1056,5L1056,5L1059,5L1059,5L1060,5L1060,5L1063,5L1063,5L1079,5L1079,5L1100,5L1100,5L1127,5L1127,5L1136,5L1136,6L1140,6L1140,7L1169,7L1169,7L1176,7L1176,7L1179,7L1179,7L1191,7L1191,7L1193,7L1193,8L1239,8L1239,8L1304,8L1304,8L1388,8L1388,9L1467,9L1467,9L1474,9L1474,9L1487,9L1487,9L1527,9L1527,9L1533,9L1533,10L1536,10L1536,11L1538,11L1538,12L1546,12L1546,13L1559,13L1559,14L1567,14L1567,14L1583,14L1583,14L1588,14L1588,14L1591,14L1591,14L1617,14L1617,14L1639,14L1639,14L1644,14L1644,14L1646,14L1646,15L1649,15L1649,15L1652,15L1652,15L1659,15L1659,15L1667,15L1667,15L1671,15L1671,15L1672,15L1672,15L1683,15L1683,15L1687,15L1687,16L1690,16L1690,16L1693,16L1693,16L1694,16L1694,16L1696,16L1696,16L1698,16L1698,16L1699,16L1699,17L1757,17L1757,17L1761,17L1761,17L1771,17L1771,18L1773,18L1773,17L1777,17L1777,17L1792,17L1792,18L1799,18L1799,18L1807,18L1807,18L1833,18L1833,18L1837,18L1837,18L1839,18L1839,18L1852,18L1852,18L1854,18L1854,18L1898,18L1898,18L1903,18L1903,18L1904,18L1904,18L1905,18L1905,19L1911,19L1911,19L1919,19L1919,19L1921,19L1921,19L1923,19L1923,19L1927,19L1927,20L1931,20L1931,20L1934,20L1934,20L1939,20L1939,20L1941,20L1941,20L1944,20L1944,20L1960,20L1960,20L1961,20L1961,20L1967,20L1967,20L1971,20L1971,21L1972,21L1972,21L1996,21L1996,22L2010,22L2010,22L2022,22L2022,22L2024,22L2024,22L2026,22L2026,22L2050,22L2050,22L2053,22L2053,23L2060,23L2060,23L2068,23L2068,23L2097,23L2097,23L2108,23L2108,23L2115,23L2115,23L2117,23L2117,23L2133,23L2133,24L2134,24L2134,24L2148,24L2148,24L2160,24L2160,25L2163,25L2163,25L2227,25L2227,25L2228,25L2228,26L2252,26L2252,26L2271,26L2271,26L2285,26L2285,26L2294,26L2294,26L2297,26L2297,26L2311,26L2311,26L2314,26L2314,26L2317,26L2317,27L2331,27L2331,27L2332,27L2332,27L2340,27L2340,27L2349,27L2349,27L2362,27L2362,27L2367,27L2367,27L2369,27L2369,27L2370,27L2370,27L2371,27L2371,27L2372,27L2372,27L2375,27L2375,27L2379,27L2379,27L2382,27L2382,27L2383,27L2383,27L2386,27L2386,27L2389,27L2389,27L2394,27L2394,27L2398,27L2398,27L2400,27L2400,27L2404,27L2404,27L2410,27L2410,27L2412,27L2412,27L2415,27L2415,27L2420,27L2420,27L2423,27L2423,27L2434,27L2434,27L2436,27L2436,28L2443,28L2443,28L2444,28L2444,28L2455,28L2455,28L2475,28L2475,28L2478,28L2478,28L2486,28L2486,28L2492,28L2492,28L2498,28L2498,28L2508,28L2508,28L2509,28L2509,28L2513,28L2513,28L2514,28L2514,28L2517,28L2517,28L2521,28L2521,28L2524,28L2524,29L2534,29L2534,29L2535,29L2535,29L2543,29L2543,29L2545,29L2545,29L2549,29L2549,29L2552,29L2552,30L2553,30L2553,30L2559,30L2559,30L2563,30L2563,30L2565,30L2565,30L2568,30L2568,30L2574,30L2574,30L2578,30L2578,30L2582,30L2582,30L2589,30L2589,30L2592,30L2592,30L2603,30L2603,31L2605,31L2605,31L2607,31L2607,31L2609,31L2609,31L2610,31L2610,31L2620,31L2620,32L2625,32L2625,32L2629,32L2629,32L2631,32L2631,32L2635,32L2635,32L2638,32L2638,32L2639,32L2639,31L2642,31L2642,31L2647,31L2647,32L2652,32L2652,32L2655,32L2655,32L2657,32L2657,32L2663,32L2663,32L2666,32L2666,32L2668,32L2668,32L2674,32L2674,32L2679,32L2679,33L2682,33L2682,33L2685,33L2685,33L2688,33L2688,34L2689,34L2689,34L2693,34L2693,34L2694,34L2694,34L2696,34L2696,34L2701,34L2701,34L2703,34L2703,35L2712,35L2712,35L2717,35L2717,35L2724,35L2724,35L2725,35L2725,35L2732,35L2732,35L2734,35L2734,35L2739,35L2739,35L2741,35L2741,35L2746,35L2746,35L2747,35L2747,35L2749,35L2749,35L2750,35L2750,35L2756,35L2756,35L2758,35L2758,35L2759,35L2759,35L2762,35L2762,35L2764,35L2764,35L2768,35L2768,35L2769,35L2769,35L2773,35L2773,35L2780,35L2780,36L2781,36L2781,36L2784,36L2784,36L2785,36L2785,37L2787,37L2787,37L2792,37L2792,37L2795,37L2795,37L2796,37L2796,37L2798,37L2798,37L2801,37" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L18,0L18,1L197,1L197,1L1039,1L1039,1L1103,1L1103,1L1106,1L1106,1L1107,1L1107,1L1965,1L1965,1L2666,1L2666,1L2801,1" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.ln8rzznl</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L18,0L18,1L82,1L82,2L115,2L115,2L750,2L750,3L876,3L876,3L1049,3L1049,3L1063,3L1063,3L1096,3L1096,3L1154,3L1154,3L1157,3L1157,3L1494,3L1494,3L1548,3L1548,3L1616,3L1616,3L1634,3L1634,3L1652,3L1652,3L1653,3L1653,3L1674,3L1674,3L1680,3L1680,4L1710,4L1710,4L1715,4L1715,5L1783,5L1783,5L1789,5L1789,5L1896,5L1896,5L1948,5L1948,5L2023,5L2023,5L2217,5L2217,5L2256,5L2256,5L2313,5L2313,5L2316,5L2316,6L2352,6L2352,6L2420,6L2420,6L2424,6L2424,6L2447,6L2447,6L2465,6L2465,6L2632,6L2632,6L2636,6L2636,6L2669,6L2669,6L2671,6L2671,6L2726,6L2726,6L2730,6L2730,6L2738,6L2738,6L2766,6L2766,6L2767,6L2767,6L2786,6L2786,7L2794,7L2794,8L2801,8L2801,8L2801,8" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L18,0L18,1L19,1L19,1L28,1L28,2L34,2L34,2L195,2L195,2L1018,2L1018,3L1039,3L1039,4L1063,4L1063,3L1104,3L1104,4L1224,4L1224,5L1236,5L1236,6L1386,6L1386,6L1406,6L1406,7L1701,7L1701,8L2667,8L2667,8L2801,8" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.814y45w1</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L40,0L40,2L110,2L110,2L427,2L427,3L592,3L592,4L767,4L767,5L768,5L768,4L882,4L882,4L975,4L975,4L1059,4L1059,4L1087,4L1087,4L1108,4L1108,4L1127,4L1127,4L1149,4L1149,4L1826,4L1826,4L1928,4L1928,4L2016,4L2016,4L2170,4L2170,4L2421,4L2421,4L2465,4L2465,4L2514,4L2514,4L2615,4L2615,5L2621,5L2621,5L2631,5L2631,5L2642,5L2642,5L2645,5L2645,5L2648,5L2648,6L2668,6L2668,6L2679,6L2679,7L2687,7L2687,7L2711,7L2711,7L2738,7L2738,7L2743,7L2743,7L2751,7L2751,7L2775,7L2775,7L2787,7L2787,7L2801,7" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L41,0L41,1L196,1L196,1L1068,1L1068,1L1088,1L1088,1L1134,1L1134,1L1529,1L1529,1L2172,1L2172,1L2625,1L2625,1L2801,1" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.z19md2jl</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L66,0L66,1L82,1L82,2L113,2L113,2L427,2L427,3L851,3L851,3L877,3L877,3L974,3L974,2L1039,2L1039,2L1056,2L1056,2L1061,2L1061,3L1086,3L1086,3L1113,3L1113,3L1167,3L1167,3L1347,3L1347,3L1652,3L1652,3L1711,3L1711,3L1738,3L1738,3L1807,3L1807,3L1918,3L1918,3L1974,3L1974,3L1992,3L1992,4L2059,4L2059,5L2098,5L2098,6L2256,6L2256,6L2318,6L2318,7L2412,7L2412,7L2465,7L2465,7L2558,7L2558,7L2591,7L2591,7L2656,7L2656,7L2657,7L2657,7L2658,7L2658,7L2669,7L2669,7L2679,7L2679,7L2686,7L2686,7L2749,7L2749,7L2770,7L2770,7L2772,7L2772,7L2791,7L2791,7L2801,7" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L69,0L69,1L80,1L80,1L102,1L102,2L104,2L104,1L115,1L115,1L873,1L873,1L874,1L874,1L920,1L920,1L1036,1L1036,1L1054,1L1054,1L1056,1L1056,1L1063,1L1063,1L1082,1L1082,1L1157,1L1157,1L1628,1L1628,1L1652,1L1652,1L1694,1L1694,1L1800,1L1800,1L1807,1L1807,1L1866,1L1866,1L1924,1L1924,1L1948,1L1948,1L2059,1L2059,1L2106,1L2106,1L2128,1L2128,1L2256,1L2256,1L2420,1L2420,1L2617,1L2617,1L2636,1L2636,1L2637,1L2637,1L2638,1L2638,1L2669,1L2669,1L2734,1L2734,1L2738,1L2738,1L2763,1L2763,1L2768,1L2768,1L2769,1L2769,1L2774,1L2774,1L2778,1L2778,1L2795,1L2795,1L2801,1" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L187,0L187,2L192,2L192,2L862,2L862,2L920,2L920,2L974,2L974,2L1032,2L1032,2L1057,2L1057,2L1059,2L1059,2L1063,2L1063,2L1064,2L1064,2L1066,2L1066,2L1146,2L1146,2L1208,2L1208,3L1509,3L1509,3L1537,3L1537,4L1547,4L1547,4L1550,4L1550,4L1575,4L1575,4L1621,4L1621,4L1656,4L1656,4L1794,4L1794,4L1807,4L1807,4L1868,4L1868,5L1919,5L1919,5L2060,5L2060,6L2127,6L2127,6L2129,6L2129,5L2421,5L2421,5L2659,5L2659,5L2801,5" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L190,0L190,3L191,3L191,2L866,2L866,2L874,2L874,2L1057,2L1057,2L1060,2L1060,2L1061,2L1061,2L1063,2L1063,2L1082,2L1082,2L1265,2L1265,3L1536,3L1536,4L1628,4L1628,4L1711,4L1711,4L1806,4L1806,4L1807,4L1807,4L1851,4L1851,5L1922,5L1922,5L2223,5L2223,5L2314,5L2314,5L2315,5L2315,6L2324,6L2324,6L2362,6L2362,6L2373,6L2373,6L2419,6L2419,6L2429,6L2429,6L2473,6L2473,6L2549,6L2549,6L2550,6L2550,6L2576,6L2576,6L2580,6L2580,6L2582,6L2582,6L2583,6L2583,6L2585,6L2585,6L2591,6L2591,6L2598,6L2598,6L2602,6L2602,6L2617,6L2617,6L2626,6L2626,6L2632,6L2632,7L2635,7L2635,7L2637,7L2637,7L2650,7L2650,7L2651,7L2651,7L2657,7L2657,7L2676,7L2676,7L2681,7L2681,7L2684,7L2684,7L2694,7L2694,7L2722,7L2722,7L2743,7L2743,7L2745,7L2745,7L2746,7L2746,7L2748,7L2748,7L2749,7L2749,7L2750,7L2750,7L2751,7L2751,7L2756,7L2756,7L2759,7L2759,7L2762,7L2762,8L2763,8L2763,8L2764,8L2764,8L2765,8L2765,8L2778,8L2778,8L2783,8L2783,8L2786,8L2786,8L2787,8L2787,8L2788,8L2788,8L2794,8L2794,8L2797,8L2797,8L2799,8L2799,8L2800,8L2800,8L2801,8" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L190,0L190,3L191,3L191,3L872,3L872,3L1056,3L1056,3L1064,3L1064,3L1079,3L1079,3L1154,3L1154,3L1772,3L1772,3L1860,3L1860,4L1934,4L1934,5L1935,5L1935,5L1966,5L1966,5L2129,5L2129,5L2281,5L2281,5L2291,5L2291,5L2324,5L2324,5L2461,5L2461,5L2471,5L2471,5L2473,5L2473,5L2559,5L2559,5L2561,5L2561,5L2621,5L2621,5L2632,5L2632,5L2734,5L2734,5L2743,5L2743,5L2753,5L2753,5L2754,5L2754,5L2759,5L2759,5L2762,5L2762,5L2763,5L2763,5L2764,5L2764,5L2778,5L2778,5L2792,5L2792,5L2800,5L2800,5L2801,5" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L425,0L425,1L426,1L426,1L1063,1L1063,1L1099,1L1099,1L1115,1L1115,1L1125,1L1125,1L1199,1L1199,1L1940,1L1940,2L2081,2L2081,3L2126,3L2126,3L2172,3L2172,3L2280,3L2280,4L2470,4L2470,4L2577,4L2577,5L2619,5L2619,6L2625,6L2625,6L2692,6L2692,6L2762,6L2762,6L2794,6L2794,7L2798,7L2798,7L2801,7" tabindex="0">
						<title>l_r9gn1qpd-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L427,0L427,1L1004,1L1004,1L1063,1L1063,1L1103,1L1103,1L1104,1L1104,1L1125,1L1125,1L2378,1L2378,1L2684,1L2684,1L2759,1L2759,1L2769,1L2769,1L2797,1L2797,1L2801,1" tabindex="0">
						<title>l_o9xo3rp9-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L473,0L473,3L536,3L536,4L565,4L565,3L1323,3L1323,3L1325,3L1325,3L2631,3L2631,3L2709,3L2709,3L2801,3" tabindex="0">
						<title>xd17x94d-9l71pv4l.81wrgm5l</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
