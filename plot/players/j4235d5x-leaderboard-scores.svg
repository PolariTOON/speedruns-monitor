<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player j4235d5x</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2021-05-16</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-31</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">191</text>
		</svg>
		<svg viewBox="0 0 1568 191" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 191) scale(1 -1)" style="--count: 22;">
				<g>
					<rect x="0" y="0" width="1568" height="191"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,7L34,7L34,7L36,7L36,8L143,8L143,9L224,9L224,11L226,11L226,10L253,10L253,11L256,11L256,12L318,12L318,13L355,13L355,14L387,14L387,14L411,14L411,14L414,14L414,17L423,17L423,18L430,18L430,19L440,19L440,20L463,20L463,21L469,21L469,22L471,22L471,23L478,23L478,27L492,27L492,26L513,26L513,27L519,27L519,28L532,28L532,31L542,31L542,30L1534,30L1534,30L1568,30" tabindex="0">
						<title>xd17x94d-9l71pv4l.zqo20y2l</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L415,0L415,37L419,37L419,38L420,38L420,39L438,39L438,40L451,40L451,41L463,41L463,42L467,42L467,42L478,42L478,43L479,43L479,44L513,44L513,45L532,45L532,46L535,46L535,47L581,47L581,48L605,48L605,47L622,47L622,48L670,48L670,48L674,48L674,49L685,49L685,50L714,50L714,52L721,52L721,53L728,53L728,54L763,54L763,55L775,55L775,56L820,56L820,57L826,57L826,58L831,58L831,59L937,59L937,60L944,60L944,61L974,61L974,61L996,61L996,60L1083,60L1083,61L1094,61L1094,62L1099,62L1099,62L1114,62L1114,63L1116,63L1116,62L1127,62L1127,63L1129,63L1129,63L1140,63L1140,64L1146,64L1146,65L1148,65L1148,66L1202,66L1202,67L1232,67L1232,67L1246,67L1246,68L1275,68L1275,68L1291,68L1291,69L1300,69L1300,70L1313,70L1313,71L1316,71L1316,73L1334,73L1334,75L1339,75L1339,76L1354,76L1354,77L1362,77L1362,78L1369,78L1369,79L1370,79L1370,81L1372,81L1372,82L1375,82L1375,83L1378,83L1378,84L1379,84L1379,84L1384,84L1384,84L1390,84L1390,84L1400,84L1400,84L1420,84L1420,85L1424,85L1424,85L1430,85L1430,86L1434,86L1434,86L1435,86L1435,86L1446,86L1446,87L1448,87L1448,87L1465,87L1465,88L1509,88L1509,88L1526,88L1526,89L1529,89L1529,89L1548,89L1548,89L1551,89L1551,89L1555,89L1555,90L1558,90L1558,91L1563,91L1563,92L1568,92" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L415,0L415,14L470,14L470,15L485,15L485,17L535,17L535,18L573,18L573,19L683,19L683,19L799,19L799,20L807,20L807,21L1551,21L1551,22L1568,22" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.jq6d86v1</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L418,0L418,3L455,3L455,4L589,4L589,5L637,5L637,6L645,6L645,7L653,7L653,8L683,8L683,9L684,9L684,8L933,8L933,8L1090,8L1090,9L1197,9L1197,10L1232,10L1232,10L1339,10L1339,12L1380,12L1380,13L1408,13L1408,14L1417,14L1417,14L1503,14L1503,14L1505,14L1505,14L1514,14L1514,14L1516,14L1516,14L1520,14L1520,14L1528,14L1528,14L1529,14L1529,13L1535,13L1535,13L1537,13L1537,13L1541,13L1541,12L1550,12L1550,12L1568,12L1568,12L1568,12" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyrgl</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L418,0L418,3L716,3L716,3L889,3L889,4L1200,4L1200,4L1227,4L1227,4L1232,4L1232,4L1267,4L1267,4L1358,4L1358,5L1402,5L1402,5L1448,5L1448,5L1505,5L1505,4L1517,4L1517,4L1528,4L1528,3L1529,3L1529,3L1553,3L1553,3L1568,3" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L419,0L419,9L461,9L461,10L567,10L567,10L570,10L570,16L574,16L574,17L576,17L576,16L633,16L633,17L691,17L691,18L715,18L715,19L826,19L826,20L873,20L873,21L895,21L895,22L1023,22L1023,23L1187,23L1187,24L1384,24L1384,25L1403,25L1403,26L1404,26L1404,27L1405,27L1405,28L1436,28L1436,29L1501,29L1501,29L1505,29L1505,29L1530,29L1530,31L1535,31L1535,31L1536,31L1536,31L1541,31L1541,31L1545,31L1545,31L1562,31L1562,32L1566,32L1566,31L1568,31" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L419,0L419,5L785,5L785,10L954,10L954,10L1022,10L1022,11L1090,11L1090,12L1188,12L1188,13L1205,13L1205,14L1232,14L1232,15L1392,15L1392,15L1403,15L1403,16L1423,16L1423,17L1507,17L1507,16L1568,16" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L419,0L419,7L478,7L478,11L505,11L505,12L511,12L511,13L574,13L574,14L685,14L685,15L741,15L741,16L759,16L759,17L826,17L826,18L865,18L865,19L1023,19L1023,20L1085,20L1085,21L1179,21L1179,22L1232,22L1232,23L1325,23L1325,24L1358,24L1358,25L1423,25L1423,25L1424,25L1424,25L1425,25L1425,26L1436,26L1436,27L1446,27L1446,28L1453,28L1453,29L1477,29L1477,28L1516,28L1516,29L1537,29L1537,29L1539,29L1539,30L1558,30L1558,30L1568,30" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L419,0L419,15L439,15L439,16L469,16L469,17L491,17L491,18L493,18L493,18L507,18L507,19L573,19L573,20L604,20L604,20L606,20L606,21L690,21L690,21L715,21L715,22L835,22L835,23L852,23L852,24L895,24L895,25L949,25L949,25L1023,25L1023,26L1083,26L1083,27L1092,27L1092,28L1123,28L1123,28L1176,28L1176,29L1177,29L1177,29L1186,29L1186,30L1232,30L1232,30L1245,30L1245,31L1308,31L1308,32L1320,32L1320,31L1357,31L1357,32L1369,32L1369,32L1370,32L1370,33L1373,33L1373,34L1380,34L1380,34L1385,34L1385,35L1395,35L1395,35L1414,35L1414,35L1436,35L1436,36L1443,36L1443,35L1460,35L1460,36L1485,36L1485,37L1495,37L1495,38L1501,38L1501,37L1515,37L1515,37L1525,37L1525,38L1526,38L1526,38L1527,38L1527,38L1529,38L1529,39L1530,39L1530,39L1533,39L1533,39L1534,39L1534,40L1546,40L1546,41L1553,41L1553,41L1554,41L1554,42L1568,42" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L419,0L419,11L437,11L437,12L439,12L439,13L443,13L443,14L445,14L445,15L477,15L477,16L478,16L478,19L481,19L481,20L507,20L507,21L554,21L554,22L561,22L561,23L573,23L573,24L625,24L625,25L637,25L637,26L678,26L678,27L684,27L684,28L687,28L687,28L694,28L694,29L703,29L703,30L716,30L716,31L745,31L745,32L757,32L757,33L826,33L826,34L850,34L850,35L859,35L859,36L895,36L895,37L898,37L898,38L900,38L900,39L941,39L941,40L1023,40L1023,41L1050,41L1050,42L1052,42L1052,43L1066,43L1066,44L1082,44L1082,45L1083,45L1083,46L1100,46L1100,47L1105,47L1105,48L1109,48L1109,49L1157,49L1157,50L1176,50L1176,51L1186,51L1186,52L1209,52L1209,53L1214,53L1214,54L1232,54L1232,55L1280,55L1280,56L1281,56L1281,57L1317,57L1317,58L1343,58L1343,57L1347,57L1347,59L1355,59L1355,60L1357,60L1357,61L1368,61L1368,62L1374,62L1374,63L1376,63L1376,64L1378,64L1378,65L1385,65L1385,66L1387,66L1387,67L1397,67L1397,68L1401,68L1401,70L1402,70L1402,71L1406,71L1406,72L1416,72L1416,72L1424,72L1424,73L1433,73L1433,74L1436,74L1436,75L1437,75L1437,74L1446,74L1446,75L1451,75L1451,76L1490,76L1490,77L1494,77L1494,78L1495,78L1495,80L1497,80L1497,79L1499,79L1499,80L1500,80L1500,81L1506,81L1506,81L1513,81L1513,83L1514,83L1514,84L1519,84L1519,85L1527,85L1527,85L1539,85L1539,86L1541,86L1541,86L1545,86L1545,88L1549,88L1549,91L1550,91L1550,90L1553,90L1553,91L1561,91L1561,93L1564,93L1564,92L1568,92L1568,93L1568,93" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L419,0L419,9L424,9L424,10L515,10L515,11L520,11L520,12L574,12L574,13L576,13L576,14L581,14L581,15L689,15L689,15L715,15L715,16L720,16L720,17L752,17L752,17L889,17L889,18L910,18L910,19L961,19L961,20L1023,20L1023,21L1111,21L1111,21L1163,21L1163,21L1182,21L1182,21L1196,21L1196,22L1214,22L1214,22L1232,22L1232,22L1320,22L1320,21L1324,21L1324,22L1326,22L1326,23L1360,23L1360,24L1388,24L1388,24L1402,24L1402,23L1426,23L1426,23L1427,23L1427,23L1436,23L1436,23L1438,23L1438,23L1505,23L1505,23L1513,23L1513,23L1515,23L1515,23L1525,23L1525,24L1528,24L1528,24L1530,24L1530,24L1531,24L1531,24L1533,24L1533,24L1540,24L1540,24L1543,24L1543,24L1551,24L1551,24L1558,24L1558,24L1561,24L1561,24L1568,24" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path dtabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L467,0L467,2L1182,2L1182,3L1346,3L1346,3L1394,3L1394,3L1568,3" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.10v3wwpl</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L468,0L468,7L1434,7L1434,7L1568,7" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.814y45w1</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L482,0L482,18L544,18L544,19L571,19L571,20L583,20L583,20L619,20L619,21L636,21L636,22L660,22L660,23L672,23L672,25L686,25L686,26L740,26L740,26L769,26L769,27L782,27L782,28L787,28L787,29L930,29L930,30L937,30L937,31L940,31L940,32L962,32L962,33L1001,33L1001,34L1004,34L1004,35L1070,35L1070,36L1081,36L1081,37L1085,37L1085,38L1147,38L1147,39L1157,39L1157,41L1179,41L1179,41L1180,41L1180,42L1183,42L1183,43L1202,43L1202,44L1211,44L1211,45L1232,45L1232,47L1233,47L1233,46L1262,46L1262,47L1282,47L1282,48L1315,48L1315,49L1319,49L1319,50L1325,50L1325,51L1327,51L1327,52L1349,52L1349,53L1365,53L1365,54L1369,54L1369,55L1373,55L1373,56L1374,56L1374,57L1378,57L1378,58L1385,58L1385,59L1386,59L1386,60L1387,60L1387,61L1393,61L1393,62L1394,62L1394,63L1412,63L1412,64L1414,64L1414,64L1418,64L1418,63L1430,63L1430,64L1432,64L1432,63L1435,63L1435,64L1446,64L1446,65L1448,65L1448,66L1461,66L1461,67L1466,67L1466,67L1469,67L1469,68L1470,68L1470,69L1477,69L1477,68L1480,68L1480,69L1481,69L1481,69L1497,69L1497,69L1508,69L1508,70L1509,70L1509,70L1512,70L1512,71L1523,71L1523,72L1525,72L1525,73L1531,73L1531,74L1537,74L1537,74L1554,74L1554,75L1555,75L1555,76L1560,76L1560,77L1568,77" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L485,0L485,4L573,4L573,5L672,5L672,6L699,6L699,6L1090,6L1090,7L1387,7L1387,7L1409,7L1409,8L1508,8L1508,9L1509,9L1509,10L1530,10L1530,10L1541,10L1541,11L1542,11L1542,11L1547,11L1547,10L1552,10L1552,10L1568,10" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.814y0701</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L570,0L570,6L572,6L572,7L573,7L573,8L574,8L574,9L577,9L577,10L582,10L582,11L583,11L583,12L613,12L613,13L615,13L615,14L617,14L617,15L618,15L618,15L623,15L623,15L666,15L666,16L667,16L667,17L670,17L670,18L676,18L676,19L680,19L680,19L684,19L684,20L694,20L694,21L696,21L696,22L703,22L703,23L706,23L706,22L707,22L707,22L714,22L714,23L720,23L720,24L743,24L743,25L749,25L749,26L753,26L753,27L761,27L761,28L763,28L763,29L767,29L767,30L770,30L770,31L776,31L776,32L781,32L781,34L794,34L794,35L800,35L800,36L801,36L801,37L806,37L806,38L810,38L810,39L812,39L812,40L814,40L814,41L821,41L821,42L828,42L828,43L864,43L864,44L868,44L868,46L873,46L873,47L875,47L875,48L882,48L882,49L888,49L888,50L894,50L894,51L902,51L902,50L910,50L910,51L915,51L915,52L923,52L923,53L930,53L930,53L936,53L936,54L979,54L979,55L1024,55L1024,56L1041,56L1041,57L1042,57L1042,59L1046,59L1046,60L1059,60L1059,61L1060,61L1060,61L1083,61L1083,62L1084,62L1084,63L1089,63L1089,65L1091,65L1091,66L1092,66L1092,65L1104,65L1104,64L1106,64L1106,65L1110,65L1110,66L1128,66L1128,67L1136,67L1136,68L1155,68L1155,69L1156,69L1156,70L1162,70L1162,70L1169,70L1169,70L1171,70L1171,71L1195,71L1195,72L1196,72L1196,72L1202,72L1202,73L1203,73L1203,74L1204,74L1204,76L1212,76L1212,77L1214,77L1214,78L1219,78L1219,78L1229,78L1229,79L1231,79L1231,77L1235,77L1235,79L1253,79L1253,80L1280,80L1280,81L1283,81L1283,83L1287,83L1287,84L1291,84L1291,85L1293,85L1293,86L1294,86L1294,87L1297,87L1297,88L1325,88L1325,89L1329,89L1329,90L1332,90L1332,90L1334,90L1334,91L1341,91L1341,92L1343,92L1343,93L1349,93L1349,94L1353,94L1353,94L1354,94L1354,95L1358,95L1358,96L1359,96L1359,98L1363,98L1363,99L1367,99L1367,100L1368,100L1368,101L1372,101L1372,102L1373,102L1373,103L1374,103L1374,104L1375,104L1375,105L1377,105L1377,104L1378,104L1378,105L1385,105L1385,106L1387,106L1387,107L1389,107L1389,106L1391,106L1391,108L1393,108L1393,109L1405,109L1405,110L1406,110L1406,111L1414,111L1414,112L1429,112L1429,113L1436,113L1436,114L1445,114L1445,114L1448,114L1448,115L1456,115L1456,116L1457,116L1457,117L1461,117L1461,118L1463,118L1463,118L1469,118L1469,119L1471,119L1471,120L1473,120L1473,121L1475,121L1475,122L1481,122L1481,123L1483,123L1483,122L1485,122L1485,123L1491,123L1491,124L1492,124L1492,125L1499,125L1499,126L1500,126L1500,127L1503,127L1503,126L1513,126L1513,127L1514,127L1514,128L1518,128L1518,129L1520,129L1520,129L1521,129L1521,130L1526,130L1526,130L1529,130L1529,131L1533,131L1533,131L1534,131L1534,133L1536,133L1536,133L1540,133L1540,133L1541,133L1541,133L1542,133L1542,134L1544,134L1544,135L1545,135L1545,136L1546,136L1546,136L1548,136L1548,137L1556,137L1556,138L1561,138L1561,139L1565,139L1565,141L1567,141L1567,140L1568,140" tabindex="0">
						<title>xd17x94d-9l71pv4l.21gpn081</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path dtabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L680,0L680,17L690,17L690,18L691,18L691,19L715,19L715,20L716,20L716,21L740,21L740,21L749,21L749,22L763,22L763,22L791,22L791,23L825,23L825,24L870,24L870,25L938,25L938,26L1022,26L1022,27L1035,27L1035,28L1067,28L1067,29L1117,29L1117,30L1118,30L1118,31L1120,31L1120,32L1129,32L1129,33L1164,33L1164,33L1175,33L1175,34L1201,34L1201,33L1202,33L1202,35L1224,35L1224,40L1232,40L1232,41L1255,41L1255,42L1268,42L1268,43L1304,43L1304,44L1307,44L1307,45L1333,45L1333,46L1339,46L1339,47L1349,47L1349,48L1351,48L1351,49L1352,49L1352,50L1376,50L1376,51L1378,51L1378,52L1379,52L1379,53L1380,53L1380,54L1397,54L1397,55L1398,55L1398,56L1399,56L1399,57L1402,57L1402,58L1436,58L1436,59L1505,59L1505,60L1508,60L1508,59L1511,59L1511,59L1512,59L1512,59L1513,59L1513,58L1518,58L1518,58L1519,58L1519,58L1524,58L1524,58L1528,58L1528,58L1529,58L1529,58L1533,58L1533,58L1534,58L1534,58L1537,58L1537,58L1539,58L1539,58L1545,58L1545,58L1547,58L1547,58L1557,58L1557,58L1558,58L1558,58L1560,58L1560,58L1564,58L1564,57L1568,57" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L783,0L783,15L937,15L937,16L960,16L960,15L1188,15L1188,16L1232,16L1232,17L1281,17L1281,18L1382,18L1382,19L1388,19L1388,20L1398,20L1398,21L1409,21L1409,21L1412,21L1412,22L1415,22L1415,23L1423,23L1423,22L1435,22L1435,23L1446,23L1446,24L1454,24L1454,25L1478,25L1478,26L1505,26L1505,26L1510,26L1510,27L1518,27L1518,28L1542,28L1542,29L1554,29L1554,30L1565,30L1565,29L1568,29" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L793,0L793,3L822,3L822,2L1147,2L1147,2L1215,2L1215,2L1223,2L1223,5L1315,5L1315,6L1395,6L1395,7L1397,7L1397,7L1410,7L1410,8L1426,8L1426,8L1528,8L1528,8L1558,8L1558,8L1561,8L1561,8L1568,8" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.qj7jxxoq</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L1236,0L1236,24L1237,24L1237,25L1271,25L1271,26L1276,26L1276,27L1283,27L1283,28L1307,28L1307,29L1325,29L1325,30L1347,30L1347,31L1348,31L1348,32L1354,32L1354,33L1379,33L1379,34L1382,34L1382,35L1385,35L1385,36L1388,36L1388,37L1393,37L1393,38L1400,38L1400,39L1408,39L1408,40L1448,40L1448,41L1457,41L1457,42L1475,42L1475,43L1483,43L1483,43L1494,43L1494,45L1498,45L1498,46L1504,46L1504,47L1512,47L1512,48L1513,48L1513,47L1519,47L1519,48L1526,48L1526,49L1528,49L1528,50L1533,50L1533,52L1535,52L1535,54L1537,54L1537,54L1539,54L1539,53L1542,53L1542,54L1549,54L1549,53L1550,53L1550,54L1553,54L1553,52L1557,52L1557,53L1560,53L1560,54L1567,54L1567,55L1568,55" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.1dk62o3l</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
