<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player j9rlkzoj</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2019-08-13</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-31</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">124</text>
		</svg>
		<svg viewBox="0 0 2210 124" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 124) scale(1 -1)" style="--count: 17;">
				<g>
					<rect x="0" y="0" width="2210" height="124"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,1L60,1L60,1L272,1L272,1L290,1L290,1L452,1L452,1L465,1L465,1L474,1L474,1L491,1L491,1L524,1L524,1L530,1L530,1L559,1L559,1L567,1L567,1L618,1L618,1L621,1L621,1L818,1L818,1L844,1L844,1L847,1L847,1L848,1L848,1L873,1L873,1L903,1L903,1L904,1L904,1L932,1L932,1L937,1L937,1L956,1L956,1L972,1L972,1L992,1L992,1L997,1L997,1L999,1L999,24L1001,24L1001,25L1019,25L1019,25L1021,25L1021,26L1033,26L1033,27L1060,27L1060,28L1080,28L1080,29L1085,29L1085,30L1102,30L1102,31L1123,31L1123,32L1125,32L1125,33L1129,33L1129,34L1191,34L1191,35L1197,35L1197,36L1261,36L1261,37L1306,37L1306,38L1311,38L1311,38L1314,38L1314,39L1316,39L1316,40L1327,40L1327,43L1356,43L1356,44L1365,44L1365,45L1367,45L1367,46L1370,46L1370,47L1384,47L1384,49L1390,49L1390,50L1398,50L1398,51L1409,51L1409,52L1423,52L1423,51L1428,51L1428,52L1436,52L1436,53L1440,53L1440,55L1453,55L1453,56L1456,56L1456,57L1462,57L1462,58L1468,58L1468,59L1473,59L1473,60L1489,60L1489,60L1503,60L1503,60L1516,60L1516,61L1517,61L1517,62L1520,62L1520,62L1526,62L1526,63L1579,63L1579,64L1583,64L1583,65L1634,65L1634,66L1635,66L1635,67L1637,67L1637,68L1638,68L1638,69L1653,69L1653,70L1658,70L1658,71L1680,71L1680,72L1686,72L1686,73L1692,73L1692,74L1703,74L1703,75L1725,75L1725,76L1740,76L1740,77L1745,77L1745,78L1755,78L1755,80L1772,80L1772,81L1785,81L1785,82L1791,82L1791,83L1792,83L1792,84L1795,84L1795,84L1797,84L1797,84L1819,84L1819,84L1821,84L1821,85L1823,85L1823,86L1835,86L1835,87L1836,87L1836,87L1837,87L1837,86L1845,86L1845,87L1852,87L1852,88L1853,88L1853,89L1862,89L1862,88L1878,88L1878,89L1888,89L1888,90L1915,90L1915,91L1930,91L1930,92L1938,92L1938,93L1939,93L1939,94L1951,94L1951,95L1989,95L1989,96L1997,96L1997,98L2001,98L2001,99L2007,99L2007,100L2025,100L2025,102L2045,102L2045,102L2047,102L2047,103L2056,103L2056,103L2066,103L2066,104L2074,104L2074,105L2076,105L2076,105L2082,105L2082,105L2088,105L2088,106L2089,106L2089,107L2090,107L2090,107L2117,107L2117,108L2133,108L2133,110L2136,110L2136,111L2142,111L2142,112L2151,112L2151,113L2152,113L2152,113L2154,113L2154,114L2155,114L2155,113L2156,113L2156,115L2163,115L2163,116L2166,116L2166,117L2167,117L2167,118L2168,118L2168,118L2173,118L2173,119L2178,119L2178,119L2187,119L2187,120L2195,120L2195,121L2197,121L2197,122L2209,122L2209,123L2210,123L2210,124L2210,124" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L0,0L0,1L280,1L280,1L383,1L383,1L468,1L468,1L494,1L494,1L500,1L500,1L517,1L517,1L543,1L543,1L612,1L612,1L618,1L618,1L781,1L781,2L847,2L847,2L879,2L879,3L943,3L943,3L971,3L971,4L999,4L999,4L1061,4L1061,4L1071,4L1071,5L1080,5L1080,6L1093,6L1093,6L1096,6L1096,6L1106,6L1106,6L1108,6L1108,7L1123,7L1123,7L1132,7L1132,7L1180,7L1180,8L1181,8L1181,8L1187,8L1187,9L1192,9L1192,9L1254,9L1254,9L1261,9L1261,9L1275,9L1275,9L1287,9L1287,9L1314,9L1314,10L1328,10L1328,10L1351,10L1351,10L1396,10L1396,10L1403,10L1403,10L1412,10L1412,11L1428,11L1428,12L1461,12L1461,13L1476,13L1476,13L1489,13L1489,12L1538,12L1538,12L1579,12L1579,12L1581,12L1581,12L1614,12L1614,13L1636,13L1636,14L1640,14L1640,13L1644,13L1644,13L1723,13L1723,13L1727,13L1727,14L1790,14L1790,14L1821,14L1821,14L1860,14L1860,14L1874,14L1874,14L1935,14L1935,14L1936,14L1936,14L1971,14L1971,14L1982,14L1982,14L1991,14L1991,14L1996,14L1996,14L2000,14L2000,14L2026,14L2026,15L2027,15L2027,15L2028,15L2028,16L2031,16L2031,16L2032,16L2032,16L2060,16L2060,16L2077,16L2077,16L2088,16L2088,17L2090,17L2090,18L2119,18L2119,18L2127,18L2127,18L2140,18L2140,18L2144,18L2144,18L2152,18L2152,18L2154,18L2154,19L2167,19L2167,19L2179,19L2179,19L2182,19L2182,20L2185,20L2185,20L2196,20L2196,20L2202,20L2202,20L2204,20L2204,20L2210,20" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L1,0L1,2L176,2L176,2L291,2L291,2L384,2L384,2L468,2L468,2L496,2L496,2L517,2L517,2L536,2L536,2L558,2L558,2L1235,2L1235,2L1337,2L1337,2L1425,2L1425,2L1579,2L1579,2L1830,2L1830,2L1874,2L1874,2L1923,2L1923,2L2024,2L2024,2L2030,2L2030,2L2040,2L2040,2L2051,2L2051,2L2054,2L2054,2L2057,2L2057,2L2077,2L2077,2L2088,2L2088,2L2096,2L2096,2L2120,2L2120,2L2147,2L2147,2L2152,2L2152,2L2160,2L2160,2L2184,2L2184,2L2196,2L2196,2L2210,2" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L1,0L1,1L286,1L286,1L383,1L383,1L468,1L468,1L508,1L508,1L517,1L517,1L543,1L543,1L617,1L617,1L1057,1L1057,1L1061,1L1061,1L1080,1L1080,2L1092,2L1092,2L1106,2L1106,2L1110,2L1110,3L1121,3L1121,3L1124,3L1124,3L1186,3L1186,3L1213,3L1213,3L1225,3L1225,3L1261,3L1261,3L1278,3L1278,3L1302,3L1302,3L1314,3L1314,4L1328,4L1328,4L1382,4L1382,4L1411,4L1411,4L1424,4L1424,4L1429,4L1429,4L1572,4L1572,4L1579,4L1579,4L1582,4L1582,4L1604,4L1604,4L1643,4L1643,4L1646,4L1646,4L1712,4L1712,5L1723,5L1723,5L1727,5L1727,6L1789,6L1789,6L1799,6L1799,7L1821,7L1821,7L1822,7L1822,8L1825,8L1825,8L1844,8L1844,8L1853,8L1853,8L1874,8L1874,9L1904,9L1904,9L1924,9L1924,9L1957,9L1957,9L1961,9L1961,9L1967,9L1967,9L1969,9L1969,10L1991,10L1991,10L2007,10L2007,10L2011,10L2011,10L2015,10L2015,11L2016,11L2016,11L2020,11L2020,11L2027,11L2027,12L2028,12L2028,12L2029,12L2029,12L2035,12L2035,12L2036,12L2036,12L2054,12L2054,12L2056,12L2056,12L2072,12L2072,12L2077,12L2077,12L2088,12L2088,12L2090,12L2090,12L2103,12L2103,12L2108,12L2108,12L2111,12L2111,12L2112,12L2112,12L2122,12L2122,12L2123,12L2123,12L2139,12L2139,12L2150,12L2150,12L2151,12L2151,12L2154,12L2154,12L2165,12L2165,12L2167,12L2167,12L2173,12L2173,12L2179,12L2179,12L2196,12L2196,12L2197,12L2197,13L2202,13L2202,13L2210,13" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L1,0L1,1L191,1L191,1L272,1L272,1L290,1L290,1L445,1L445,1L449,1L449,1L453,1L453,1L465,1L465,1L468,1L468,1L469,1L469,1L472,1L472,1L488,1L488,1L509,1L509,1L536,1L536,1L545,1L545,2L549,2L549,3L578,3L578,3L585,3L585,3L588,3L588,3L600,3L600,3L602,3L602,3L648,3L648,3L713,3L713,3L797,3L797,3L876,3L876,3L883,3L883,3L896,3L896,3L936,3L936,3L942,3L942,3L945,3L945,4L947,4L947,5L955,5L955,5L968,5L968,5L976,5L976,5L992,5L992,5L997,5L997,5L1000,5L1000,5L1026,5L1026,5L1048,5L1048,5L1053,5L1053,5L1055,5L1055,5L1058,5L1058,5L1061,5L1061,5L1068,5L1068,5L1076,5L1076,5L1080,5L1080,5L1081,5L1081,5L1092,5L1092,5L1096,5L1096,6L1099,6L1099,6L1102,6L1102,6L1103,6L1103,6L1105,6L1105,6L1107,6L1107,6L1108,6L1108,7L1166,7L1166,7L1170,7L1170,7L1180,7L1180,7L1186,7L1186,7L1201,7L1201,7L1208,7L1208,7L1216,7L1216,7L1242,7L1242,7L1246,7L1246,7L1248,7L1248,7L1261,7L1261,7L1263,7L1263,7L1307,7L1307,7L1312,7L1312,7L1313,7L1313,7L1314,7L1314,7L1320,7L1320,7L1328,7L1328,7L1330,7L1330,7L1332,7L1332,7L1336,7L1336,8L1340,8L1340,7L1343,7L1343,7L1348,7L1348,7L1350,7L1350,7L1353,7L1353,7L1369,7L1369,7L1370,7L1370,7L1376,7L1376,7L1380,7L1380,8L1381,8L1381,8L1405,8L1405,8L1419,8L1419,8L1431,8L1431,8L1433,8L1433,8L1435,8L1435,8L1459,8L1459,8L1462,8L1462,9L1469,9L1469,9L1477,9L1477,9L1506,9L1506,9L1517,9L1517,9L1524,9L1524,9L1526,9L1526,9L1542,9L1542,9L1543,9L1543,9L1557,9L1557,9L1569,9L1569,10L1572,10L1572,10L1636,10L1636,10L1637,10L1637,10L1661,10L1661,10L1680,10L1680,10L1694,10L1694,10L1703,10L1703,10L1706,10L1706,10L1720,10L1720,10L1723,10L1723,10L1726,10L1726,11L1740,11L1740,11L1741,11L1741,11L1749,11L1749,11L1758,11L1758,11L1771,11L1771,11L1776,11L1776,11L1778,11L1778,11L1779,11L1779,11L1780,11L1780,11L1781,11L1781,11L1784,11L1784,11L1788,11L1788,11L1791,11L1791,11L1792,11L1792,11L1795,11L1795,11L1798,11L1798,11L1803,11L1803,11L1807,11L1807,11L1809,11L1809,11L1813,11L1813,11L1819,11L1819,11L1821,11L1821,11L1824,11L1824,11L1829,11L1829,11L1832,11L1832,11L1843,11L1843,11L1845,11L1845,11L1852,11L1852,11L1853,11L1853,11L1864,11L1864,11L1884,11L1884,11L1887,11L1887,11L1895,11L1895,11L1901,11L1901,11L1907,11L1907,11L1917,11L1917,11L1918,11L1918,11L1922,11L1922,11L1923,11L1923,11L1926,11L1926,11L1930,11L1930,11L1933,11L1933,11L1943,11L1943,11L1944,11L1944,11L1952,11L1952,11L1954,11L1954,11L1958,11L1958,11L1961,11L1961,11L1962,11L1962,11L1968,11L1968,11L1972,11L1972,11L1974,11L1974,11L1977,11L1977,11L1983,11L1983,11L1987,11L1987,11L1991,11L1991,11L1998,11L1998,11L2001,11L2001,11L2012,11L2012,12L2014,12L2014,12L2016,12L2016,12L2018,12L2018,12L2019,12L2019,12L2029,12L2029,13L2034,13L2034,13L2038,13L2038,13L2040,13L2040,13L2044,13L2044,13L2047,13L2047,13L2048,13L2048,12L2051,12L2051,12L2056,12L2056,12L2061,12L2061,12L2064,12L2064,12L2066,12L2066,12L2072,12L2072,12L2075,12L2075,12L2077,12L2077,12L2083,12L2083,12L2088,12L2088,12L2091,12L2091,12L2094,12L2094,12L2097,12L2097,12L2098,12L2098,12L2102,12L2102,12L2103,12L2103,12L2105,12L2105,12L2110,12L2110,12L2112,12L2112,13L2121,13L2121,13L2126,13L2126,13L2133,13L2133,13L2134,13L2134,13L2141,13L2141,13L2143,13L2143,13L2148,13L2148,13L2150,13L2150,13L2155,13L2155,13L2156,13L2156,13L2158,13L2158,13L2159,13L2159,13L2165,13L2165,13L2167,13L2167,13L2168,13L2168,13L2171,13L2171,13L2173,13L2173,13L2177,13L2177,13L2178,13L2178,13L2182,13L2182,13L2189,13L2189,14L2190,14L2190,14L2193,14L2193,14L2194,14L2194,14L2196,14L2196,14L2201,14L2201,14L2204,14L2204,14L2205,14L2205,14L2207,14L2207,14L2210,14" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L1,0L1,2L155,2L155,3L176,3L176,3L286,3L286,3L311,3L311,3L394,3L394,3L451,3L451,3L452,3L452,3L453,3L453,4L467,4L467,4L470,4L470,4L472,4L472,4L473,4L473,4L474,4L474,4L487,4L487,4L489,4L489,5L492,5L492,5L533,5L533,5L547,5L547,6L548,6L548,5L564,5L564,5L567,5L567,6L602,6L602,7L606,7L606,8L610,8L610,9L624,9L624,10L630,10L630,10L636,10L636,10L660,10L660,11L674,11L674,12L679,12L679,12L687,12L687,12L708,12L708,13L714,13L714,12L787,12L787,12L796,12L796,13L807,13L807,14L810,14L810,15L831,15L831,15L843,15L843,15L846,15L846,16L862,16L862,16L881,16L881,16L885,16L885,16L886,16L886,17L897,17L897,17L900,17L900,17L912,17L912,17L915,17L915,17L920,17L920,17L927,17L927,17L929,17L929,17L936,17L936,17L938,17L938,18L943,18L943,18L945,18L945,19L946,19L946,20L950,20L950,20L953,20L953,20L968,20L968,21L971,21L971,20L983,20L983,20L991,20L991,20L1022,20L1022,20L1023,20L1023,21L1024,21L1024,22L1025,22L1025,21L1027,21L1027,22L1029,22L1029,22L1057,22L1057,22L1059,22L1059,22L1061,22L1061,22L1065,22L1065,22L1068,22L1068,22L1069,22L1069,23L1070,23L1070,23L1080,23L1080,23L1098,23L1098,23L1100,23L1100,24L1103,24L1103,24L1105,24L1105,25L1107,25L1107,25L1109,25L1109,24L1110,24L1110,26L1112,26L1112,26L1117,26L1117,26L1125,26L1125,26L1126,26L1126,26L1130,26L1130,26L1133,26L1133,26L1136,26L1136,26L1141,26L1141,26L1151,26L1151,26L1153,26L1153,26L1155,26L1155,26L1156,26L1156,27L1158,27L1158,27L1159,27L1159,28L1181,28L1181,28L1188,28L1188,29L1205,29L1205,29L1209,29L1209,29L1213,29L1213,29L1217,29L1217,29L1223,29L1223,29L1236,29L1236,29L1241,29L1241,28L1246,28L1246,29L1254,29L1254,29L1255,29L1255,29L1260,29L1260,29L1273,29L1273,29L1278,29L1278,29L1280,29L1280,29L1284,29L1284,30L1285,30L1285,30L1294,30L1294,31L1302,31L1302,31L1307,31L1307,31L1312,31L1312,32L1316,32L1316,32L1327,32L1327,32L1328,32L1328,32L1332,32L1332,32L1336,32L1336,32L1338,32L1338,32L1341,32L1341,32L1342,32L1342,32L1362,32L1362,32L1363,32L1363,33L1370,33L1370,33L1372,33L1372,34L1377,34L1377,34L1384,34L1384,34L1385,34L1385,34L1387,34L1387,34L1397,34L1397,34L1411,34L1411,35L1418,35L1418,35L1421,35L1421,35L1441,35L1441,35L1452,35L1452,36L1493,36L1493,36L1505,36L1505,36L1526,36L1526,36L1532,36L1532,37L1538,37L1538,37L1544,37L1544,37L1552,37L1552,38L1579,38L1579,38L1608,38L1608,38L1633,38L1633,38L1675,38L1675,38L1676,38L1676,39L1696,39L1696,40L1699,40L1699,40L1706,40L1706,40L1731,40L1731,40L1741,40L1741,40L1743,40L1743,40L1749,40L1749,40L1779,40L1779,40L1805,40L1805,41L1812,41L1812,41L1820,41L1820,41L1833,41L1833,41L1834,41L1834,41L1841,41L1841,41L1846,41L1846,41L1850,41L1850,41L1852,41L1852,41L1862,41L1862,42L1874,42L1874,42L1882,42L1882,42L1902,42L1902,42L1907,42L1907,42L1908,42L1908,42L1923,42L1923,42L1935,42L1935,42L1941,42L1941,42L1944,42L1944,42L1950,42L1950,43L1953,43L1953,43L1981,43L1981,43L1987,43L1987,44L1989,44L1989,44L1999,44L1999,44L2000,44L2000,44L2004,44L2004,45L2010,45L2010,45L2012,45L2012,45L2015,45L2015,45L2020,45L2020,45L2029,45L2029,46L2038,46L2038,47L2043,47L2043,48L2044,48L2044,48L2047,48L2047,48L2050,48L2050,49L2054,49L2054,49L2067,49L2067,49L2068,49L2068,49L2070,49L2070,49L2071,49L2071,49L2072,49L2072,49L2076,49L2076,49L2077,49L2077,49L2079,49L2079,49L2084,49L2084,49L2088,49L2088,49L2124,49L2124,49L2139,49L2139,48L2145,48L2145,48L2151,48L2151,48L2156,48L2156,48L2163,48L2163,48L2168,48L2168,48L2172,48L2172,48L2176,48L2176,48L2178,48L2178,48L2180,48L2180,48L2193,48L2193,48L2201,48L2201,48L2203,48L2203,49L2210,49" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L1,0L1,1L282,1L282,1L445,1L445,1L468,1L468,1L791,1L791,1L941,1L941,1L969,1L969,2L984,2L984,2L1039,2L1039,2L1059,2L1059,2L1080,2L1080,2L1092,2L1092,3L1106,3L1106,3L1134,3L1134,3L1212,3L1212,3L1261,3L1261,3L1311,3L1311,3L1316,3L1316,3L1370,3L1370,3L1428,3L1428,3L1462,3L1462,4L1468,4L1468,5L1503,5L1503,5L1579,5L1579,5L1585,5L1585,5L1680,5L1680,5L1753,5L1753,5L1797,5L1797,5L1825,5L1825,5L1847,5L1847,5L1917,5L1917,5L1967,5L1967,5L2000,5L2000,5L2001,5L2001,5L2066,5L2066,5L2072,5L2072,5L2077,5L2077,5L2088,5L2088,5L2103,5L2103,5L2120,5L2120,5L2136,5L2136,5L2152,5L2152,5L2160,5L2160,5L2169,5L2169,5L2171,5L2171,5L2172,5L2172,5L2173,5L2173,5L2178,5L2178,5L2185,5L2185,5L2197,5L2197,6L2210,6" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L1,0L1,4L61,4L61,4L261,4L261,4L275,4L275,4L337,4L337,4L452,4L452,4L468,4L468,4L469,4L469,4L529,4L529,4L536,4L536,4L543,4L543,5L544,5L544,5L548,5L548,5L558,5L558,5L567,5L567,6L584,6L584,6L604,6L604,6L612,6L612,6L615,6L615,7L625,7L625,7L627,7L627,7L781,7L781,8L813,8L813,8L884,8L884,8L889,8L889,8L899,8L899,8L900,8L900,9L920,9L920,10L936,10L936,10L940,10L940,10L942,10L942,11L991,11L991,11L1022,11L1022,11L1050,11L1050,12L1057,12L1057,12L1061,12L1061,12L1062,12L1062,12L1080,12L1080,12L1093,12L1093,12L1105,12L1105,12L1109,12L1109,12L1120,12L1120,12L1121,12L1121,12L1155,12L1155,13L1174,13L1174,14L1177,14L1177,14L1223,14L1223,15L1264,15L1264,16L1312,16L1312,16L1316,16L1316,16L1327,16L1327,16L1356,16L1356,16L1363,16L1363,17L1370,17L1370,17L1405,17L1405,17L1417,17L1417,17L1462,17L1462,18L1468,18L1468,18L1473,18L1473,19L1579,19L1579,19L1586,19L1586,19L1616,19L1616,19L1725,19L1725,20L1736,20L1736,21L1741,21L1741,21L1756,21L1756,21L1769,21L1769,21L1771,21L1771,21L1782,21L1782,21L1788,21L1788,22L1790,22L1790,22L1844,22L1844,22L1874,22L1874,22L1888,22L1888,23L1917,23L1917,23L1933,23L1933,23L1942,23L1942,24L1955,24L1955,24L1958,24L1958,25L1976,25L1976,25L1981,25L1981,25L1996,25L1996,25L2004,25L2004,26L2011,26L2011,27L2012,27L2012,27L2014,27L2014,27L2017,27L2017,27L2020,27L2020,28L2021,28L2021,28L2026,28L2026,28L2032,28L2032,28L2042,28L2042,28L2062,28L2062,29L2066,29L2066,29L2072,29L2072,29L2076,29L2076,29L2077,29L2077,29L2088,29L2088,29L2090,29L2090,29L2107,29L2107,29L2151,29L2151,29L2168,29L2168,29L2171,29L2171,29L2190,29L2190,29L2193,29L2193,29L2197,29L2197,29L2200,29L2200,29L2205,29L2205,29L2210,29" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L13,0L13,1L176,1L176,1L306,1L306,1L452,1L452,1L465,1L465,1L477,1L477,1L491,1L491,1L534,1L534,1L568,1L568,1L601,1L601,1L674,1L674,1L794,1L794,2L809,2L809,3L939,3L939,4L941,4L941,5L1001,5L1001,6L1055,6L1055,7L1099,7L1099,8L1134,8L1134,9L1189,9L1189,10L1225,10L1225,11L1232,11L1232,12L1287,12L1287,13L1292,13L1292,14L1293,14L1293,15L1294,15L1294,16L1296,16L1296,17L1316,17L1316,18L1322,18L1322,19L1332,19L1332,20L1333,20L1333,21L1357,21L1357,22L1358,22L1358,23L1382,23L1382,24L1391,24L1391,25L1405,25L1405,26L1433,26L1433,27L1467,27L1467,28L1512,28L1512,29L1580,29L1580,30L1593,30L1593,29L1664,29L1664,30L1677,30L1677,31L1709,31L1709,32L1759,32L1759,33L1760,33L1760,34L1762,34L1762,35L1771,35L1771,36L1806,36L1806,37L1817,37L1817,38L1843,38L1843,39L1844,39L1844,41L1874,41L1874,42L1897,42L1897,43L1910,43L1910,44L1946,44L1946,45L1949,45L1949,46L1975,46L1975,47L1981,47L1981,48L1991,48L1991,49L1993,49L1993,50L1994,50L1994,51L2018,51L2018,52L2020,52L2020,53L2021,53L2021,54L2022,54L2022,55L2039,55L2039,56L2040,56L2040,57L2041,57L2041,58L2044,58L2044,59L2078,59L2078,60L2147,60L2147,61L2150,61L2150,60L2153,60L2153,60L2154,60L2154,60L2155,60L2155,59L2160,59L2160,60L2161,60L2161,60L2166,60L2166,60L2170,60L2170,60L2171,60L2171,60L2175,60L2175,60L2176,60L2176,60L2179,60L2179,60L2181,60L2181,60L2187,60L2187,60L2189,60L2189,60L2199,60L2199,60L2200,60L2200,60L2202,60L2202,60L2206,60L2206,59L2210,59" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L13,0L13,1L258,1L258,1L260,1L260,1L264,1L264,1L278,1L278,1L369,1L369,1L395,1L395,1L445,1L445,1L463,1L463,1L465,1L465,1L470,1L470,1L472,1L472,1L521,1L521,1L568,1L568,1L812,1L812,1L870,1L870,1L1055,1L1055,1L1061,1L1061,1L1081,1L1081,1L1111,1L1111,1L1133,1L1133,1L1135,1L1135,1L1149,1L1149,1L1215,1L1215,1L1246,1L1246,1L1248,1L1248,1L1332,1L1332,1L1357,1L1357,1L1477,1L1477,1L1494,1L1494,1L1537,1L1537,1L1591,1L1591,1L1665,1L1665,1L1725,1L1725,1L1734,1L1734,1L1765,1L1765,1L1818,1L1818,1L1819,1L1819,1L1828,1L1828,1L1874,1L1874,1L1887,1L1887,1L1950,1L1950,1L1999,1L1999,1L2011,1L2011,1L2012,1L2012,1L2015,1L2015,1L2022,1L2022,1L2027,1L2027,1L2037,1L2037,1L2056,1L2056,1L2078,1L2078,1L2102,1L2102,1L2127,1L2127,1L2137,1L2137,1L2143,1L2143,1L2157,1L2157,1L2167,1L2167,1L2168,1L2168,1L2169,1L2169,1L2171,1L2171,1L2172,1L2172,1L2175,1L2175,1L2176,1L2176,1L2188,1L2188,1L2195,1L2195,1L2196,1L2196,1L2210,1" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L13,0L13,1L288,1L288,1L447,1L447,1L465,1L465,1L472,1L472,1L558,1L558,1L934,1L934,1L966,1L966,2L992,2L992,2L1019,2L1019,2L1061,2L1061,2L1079,2L1079,2L1081,2L1081,3L1085,3L1085,3L1087,3L1087,3L1119,3L1119,4L1149,4L1149,4L1196,4L1196,4L1203,4L1203,4L1215,4L1215,4L1267,4L1267,4L1279,4L1279,4L1320,4L1320,4L1326,4L1326,4L1329,4L1329,4L1336,4L1336,4L1345,4L1345,4L1358,4L1358,4L1387,4L1387,4L1399,4L1399,4L1468,4L1468,4L1492,4L1492,5L1501,5L1501,6L1524,6L1524,5L1537,5L1537,5L1540,5L1540,5L1542,5L1542,5L1583,5L1583,5L1665,5L1665,5L1692,5L1692,5L1694,5L1694,5L1708,5L1708,5L1724,5L1724,6L1725,6L1725,6L1742,6L1742,6L1747,6L1747,6L1751,6L1751,6L1799,6L1799,7L1818,7L1818,7L1828,7L1828,7L1851,7L1851,7L1856,7L1856,7L1874,7L1874,7L1922,7L1922,7L1923,7L1923,7L1950,7L1950,6L1959,6L1959,6L1989,6L1989,6L1997,6L1997,6L1999,6L1999,6L2010,6L2010,7L2016,7L2016,7L2018,7L2018,7L2019,7L2019,6L2020,6L2020,6L2027,6L2027,6L2029,6L2029,6L2039,6L2039,6L2043,6L2043,6L2044,6L2044,6L2048,6L2048,6L2058,6L2058,6L2066,6L2066,6L2075,6L2075,6L2078,6L2078,6L2088,6L2088,6L2093,6L2093,7L2132,7L2132,7L2136,7L2136,7L2137,7L2137,7L2141,7L2141,7L2142,7L2142,7L2148,7L2148,7L2155,7L2155,7L2156,7L2156,7L2161,7L2161,7L2169,7L2169,7L2181,7L2181,7L2183,7L2183,7L2187,7L2187,7L2191,7L2191,7L2195,7L2195,7L2203,7L2203,8L2210,8L2210,8L2210,8" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L159,0L159,2L285,2L285,2L458,2L458,2L472,2L472,2L505,2L505,2L563,2L563,2L566,2L566,2L903,2L903,2L957,2L957,2L1025,2L1025,2L1043,2L1043,2L1061,2L1061,2L1062,2L1062,2L1083,2L1083,2L1089,2L1089,3L1119,3L1119,3L1124,3L1124,3L1192,3L1192,3L1198,3L1198,3L1305,3L1305,3L1357,3L1357,3L1432,3L1432,3L1626,3L1626,3L1665,3L1665,3L1722,3L1722,3L1725,3L1725,4L1761,4L1761,4L1829,4L1829,4L1833,4L1833,4L1856,4L1856,4L1874,4L1874,4L2041,4L2041,4L2045,4L2045,4L2078,4L2078,4L2080,4L2080,4L2135,4L2135,4L2139,4L2139,4L2147,4L2147,4L2175,4L2175,4L2176,4L2176,4L2195,4L2195,5L2203,5L2203,6L2210,6L2210,6L2210,6" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L566,0L566,1L1127,1L1127,1L1215,1L1215,1L1314,1L1314,1L1341,1L1341,1L1732,1L1732,1L2029,1L2029,1L2051,1L2051,1L2150,1L2150,1L2151,1L2151,1L2172,1L2172,1L2183,1L2183,1L2184,1L2184,1L2194,1L2194,1L2210,1" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.814y0701</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L567,0L567,2L677,2L677,2L1029,2L1029,2L1173,2L1173,2L1581,2L1581,3L2195,3L2195,3L2196,3L2196,3L2210,3" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.z19mo80l</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L568,0L568,1L2210,1" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.jq606z3q</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L758,0L758,2L1342,2L1342,2L1579,2L1579,3L1913,3L1913,3L2023,3L2023,3L2144,3L2144,3L2177,3L2177,3L2194,3L2194,3L2210,3" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.zqop6rp1</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L758,0L758,8L817,8L817,9L954,9L954,10L991,10L991,10L1007,10L1007,10L1057,10L1057,10L1112,10L1112,11L1215,11L1215,12L1325,12L1325,12L1441,12L1441,13L1449,13L1449,14L2193,14L2193,14L2210,14" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.jq6d86v1</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
