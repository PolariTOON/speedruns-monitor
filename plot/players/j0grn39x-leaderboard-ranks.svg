<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Rank by leaderboard for player j0grn39x</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2022-07-20</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-30</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">208</text>
		</svg>
		<svg viewBox="0 0 1168 208" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 208) scale(1 -1)" style="--count: 9;">
				<g>
					<rect x="0" y="0" width="1168" height="208"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,29L0,29L0,22L10,22L10,23L33,23L33,24L1104,24L1104,25L1146,25L1146,26L1151,26L1151,27L1152,27L1152,28L1168,28" tabindex="0">
						<title>xd17x94d-9l71pv4l.zqo20y2l</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,43L8,43L8,30L13,30L13,31L30,31L30,32L53,32L53,33L57,33L57,34L119,34L119,35L125,35L125,36L234,36L234,37L239,37L239,38L242,38L242,39L255,39L255,40L284,40L284,41L298,41L298,42L312,42L312,43L328,43L328,44L364,44L364,45L381,45L381,46L384,46L384,47L401,47L401,48L417,48L417,49L431,49L431,50L448,50L448,51L454,51L454,52L511,52L511,53L562,53L562,54L565,54L565,55L567,55L567,56L581,56L581,57L631,57L631,58L668,58L668,59L673,59L673,60L685,60L685,61L720,61L720,62L723,62L723,63L725,63L725,64L747,64L747,65L749,65L749,66L764,66L764,67L773,67L773,68L780,68L780,69L781,69L781,70L806,70L806,71L816,71L816,72L843,72L843,73L858,73L858,74L866,74L866,75L925,75L925,76L953,76L953,78L973,78L973,79L984,79L984,80L1004,80L1004,81L1010,81L1010,82L1017,82L1017,83L1018,83L1018,84L1061,84L1061,85L1064,85L1064,86L1070,86L1070,87L1079,87L1079,88L1080,88L1080,89L1082,89L1082,90L1083,90L1083,92L1084,92L1084,93L1096,93L1096,94L1101,94L1101,95L1106,95L1106,96L1123,96L1123,97L1125,97L1125,98L1137,98L1137,99L1138,99L1138,100L1141,100L1141,101L1144,101L1144,102L1158,102L1158,103L1165,103L1165,104L1167,104L1167,105L1168,105" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,27L8,27L8,22L21,22L21,23L24,23L24,24L34,24L34,25L51,25L51,26L60,26L60,27L109,27L109,28L115,28L115,29L120,29L120,30L182,30L182,31L189,31L189,32L203,32L203,33L215,33L215,34L242,34L242,35L256,35L256,36L279,36L279,37L324,37L324,38L331,38L331,39L340,39L340,40L404,40L404,41L417,41L417,42L466,42L466,43L507,43L507,44L509,44L509,45L568,45L568,46L572,46L572,47L651,47L651,48L718,48L718,49L749,49L749,50L788,50L788,51L802,51L802,52L863,52L863,53L864,53L864,54L899,54L899,55L910,55L910,56L919,56L919,57L924,57L924,58L928,58L928,59L955,59L955,60L956,60L956,61L959,61L959,62L960,62L960,63L988,63L988,64L1005,64L1005,65L1018,65L1018,66L1047,66L1047,67L1055,67L1055,68L1068,68L1068,69L1072,69L1072,70L1080,70L1080,71L1107,71L1107,72L1110,72L1110,73L1113,73L1113,74L1118,74L1118,75L1124,75L1124,76L1130,76L1130,77L1132,77L1132,78L1142,78L1142,79L1155,79L1155,80L1158,80L1158,81L1163,81L1163,82L1167,82L1167,83L1168,83" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,58L8,58L8,34L20,34L20,35L30,35L30,36L31,36L31,37L33,37L33,38L35,38L35,39L94,39L94,40L98,40L98,41L110,41L110,42L114,42L114,43L136,43L136,44L144,44L144,45L170,45L170,46L174,46L174,47L191,47L191,48L235,48L235,49L240,49L240,50L248,50L248,51L256,51L256,52L260,52L260,53L278,53L278,54L281,54L281,55L298,55L298,57L304,57L304,59L309,59L309,60L333,60L333,61L359,61L359,62L361,62L361,63L363,63L363,64L387,64L387,65L397,65L397,67L405,67L405,68L434,68L434,69L452,69L452,70L454,70L454,71L471,71L471,72L500,72L500,73L564,73L564,74L565,74L565,75L589,75L589,76L631,76L631,77L634,77L634,78L648,78L648,79L651,79L651,80L668,80L668,81L669,81L669,83L686,83L686,84L699,84L699,85L706,85L706,86L707,86L707,87L708,87L708,88L709,88L709,89L712,89L712,90L716,90L716,91L719,91L719,92L720,92L720,93L723,93L723,95L731,95L731,96L735,96L735,97L737,97L737,98L741,98L741,99L747,99L747,101L749,101L749,102L752,102L752,103L757,103L757,104L760,104L760,105L771,105L771,106L773,106L773,107L780,107L780,108L781,108L781,110L792,110L792,111L815,111L815,112L823,112L823,113L829,113L829,115L845,115L845,116L846,116L846,117L850,117L850,118L851,118L851,119L854,119L854,120L858,120L858,121L861,121L861,122L871,122L871,123L872,123L872,124L880,124L880,125L882,125L882,126L886,126L886,127L890,127L890,128L896,128L896,129L900,129L900,130L902,130L902,132L905,132L905,134L911,134L911,136L919,136L919,137L926,137L926,139L929,139L929,140L942,140L942,141L944,141L944,142L946,142L946,143L947,143L947,144L957,144L957,145L962,145L962,146L966,146L966,147L968,147L968,148L972,148L972,149L975,149L975,150L979,150L979,151L989,151L989,152L992,152L992,153L994,153L994,154L1005,154L1005,155L1011,155L1011,156L1019,156L1019,157L1025,157L1025,158L1026,158L1026,159L1031,159L1031,161L1033,161L1033,162L1038,162L1038,163L1049,163L1049,165L1054,165L1054,166L1061,166L1061,167L1062,167L1062,168L1069,168L1069,170L1071,170L1071,171L1076,171L1076,175L1078,175L1078,176L1083,176L1083,177L1084,177L1084,178L1086,178L1086,179L1093,179L1093,180L1095,180L1095,181L1096,181L1096,182L1099,182L1099,183L1101,183L1101,184L1105,184L1105,185L1110,185L1110,187L1117,187L1117,189L1121,189L1121,190L1122,190L1122,191L1124,191L1124,192L1129,192L1129,193L1132,193L1132,194L1133,194L1133,195L1135,195L1135,196L1139,196L1139,197L1141,197L1141,198L1145,198L1145,199L1146,199L1146,200L1150,200L1150,201L1152,201L1152,202L1154,202L1154,203L1155,203L1155,204L1156,204L1156,205L1161,205L1161,206L1166,206L1166,207L1168,207L1168,208L1168,208" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,15L8,15L8,11L34,11L34,12L62,12L62,13L140,13L140,14L239,14L239,15L244,15L244,16L298,16L298,17L431,17L431,19L507,19L507,20L519,20L519,21L681,21L681,22L725,22L725,23L753,23L753,24L775,24L775,25L845,25L845,26L928,26L928,28L929,28L929,29L994,29L994,30L1005,30L1005,31L1031,31L1031,32L1048,32L1048,33L1080,33L1080,34L1097,34L1097,35L1099,35L1099,36L1101,36L1101,37L1106,37L1106,38L1107,38L1107,39L1113,39L1113,40L1141,40L1141,42L1160,42L1160,43L1166,43L1166,44L1168,44" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,83L8,83L8,52L31,52L31,53L37,53L37,54L40,54L40,55L45,55L45,57L53,57L53,58L54,58L54,59L58,59L58,60L64,60L64,61L69,61L69,62L79,62L79,63L81,63L81,64L83,64L83,65L86,65L86,66L109,66L109,67L133,67L133,68L137,68L137,69L141,69L141,70L145,70L145,71L151,71L151,72L164,72L164,73L169,73L169,75L182,75L182,76L183,76L183,77L188,77L188,78L201,78L201,79L207,79L207,80L208,80L208,82L212,82L212,83L213,83L213,84L230,84L230,85L235,85L235,86L244,86L244,87L255,87L255,88L256,88L256,89L260,89L260,90L264,90L264,91L266,91L266,92L269,92L269,93L270,93L270,94L298,94L298,95L305,95L305,96L312,96L312,97L313,97L313,98L315,98L315,99L325,99L325,100L346,100L346,101L349,101L349,102L370,102L370,103L421,103L421,104L433,104L433,105L454,105L454,106L466,106L466,108L472,108L472,109L507,109L507,110L536,110L536,111L561,111L561,112L600,112L600,113L603,113L603,114L627,114L627,115L634,115L634,116L659,116L659,117L669,117L669,118L671,118L671,119L677,119L677,120L707,120L707,121L733,121L733,122L740,122L740,123L748,123L748,124L761,124L761,125L762,125L762,126L769,126L769,127L774,127L774,128L778,128L778,129L780,129L780,130L802,130L802,131L810,131L810,132L830,132L830,133L835,133L835,134L836,134L836,136L851,136L851,137L863,137L863,138L869,138L869,139L872,139L872,140L881,140L881,141L909,141L909,142L917,142L917,143L927,143L927,144L928,144L928,145L938,145L938,146L940,146L940,147L943,147L943,148L948,148L948,149L966,149L966,150L972,150L972,152L975,152L975,153L982,153L982,154L995,154L995,155L996,155L996,157L998,157L998,158L999,158L999,159L1000,159L1000,160L1004,160L1004,161L1005,161L1005,162L1007,162L1007,163L1012,163L1012,164L1052,164L1052,165L1067,165L1067,166L1073,166L1073,167L1079,167L1079,168L1084,168L1084,169L1091,169L1091,170L1096,170L1096,171L1100,171L1100,172L1104,172L1104,173L1106,173L1106,175L1108,175L1108,176L1121,176L1121,177L1129,177L1129,178L1140,178L1140,179L1151,179L1151,180L1155,180L1155,181L1158,181L1158,182L1168,182" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,15L8,15L8,14L20,14L20,15L34,15L34,16L49,16L49,17L52,17L52,18L114,18L114,19L141,19L141,20L153,20L153,21L189,21L189,22L206,22L206,23L230,23L230,24L242,24L242,25L256,25L256,26L310,26L310,27L339,27L339,28L352,28L352,29L357,29L357,30L500,30L500,31L507,31L507,32L510,32L510,33L532,33L532,34L571,34L571,35L574,35L574,36L651,36L651,37L717,37L717,38L727,38L727,39L749,39L749,40L750,40L750,41L753,41L753,42L772,42L772,43L781,43L781,44L802,44L802,45L832,45L832,46L852,46L852,47L885,47L885,48L889,48L889,49L895,49L895,50L919,50L919,51L935,51L935,52L939,52L939,53L944,53L944,54L948,54L948,55L956,55L956,56L957,56L957,57L963,57L963,58L964,58L964,59L982,59L982,60L984,60L984,61L1000,61L1000,62L1005,62L1005,63L1016,63L1016,64L1018,64L1018,65L1031,65L1031,66L1036,66L1036,67L1039,67L1039,68L1040,68L1040,69L1050,69L1050,70L1051,70L1051,71L1067,71L1067,72L1078,72L1078,73L1079,73L1079,74L1082,74L1082,75L1093,75L1093,76L1101,76L1101,77L1107,77L1107,79L1118,79L1118,80L1124,80L1124,81L1125,81L1125,82L1130,82L1130,83L1142,83L1142,84L1155,84L1155,85L1158,85L1158,86L1166,86L1166,87L1168,87" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,48L8,48L8,26L21,26L21,27L33,27L33,28L37,28L37,29L49,29L49,30L105,30L105,31L240,31L240,32L244,32L244,33L255,33L255,34L298,34L298,35L333,35L333,36L345,36L345,37L507,37L507,38L514,38L514,39L544,39L544,40L669,40L669,41L684,41L684,42L697,42L697,43L699,43L699,44L710,44L710,45L718,45L718,47L772,47L772,48L802,48L802,49L845,49L845,50L861,50L861,51L886,51L886,52L904,52L904,53L909,53L909,54L924,54L924,55L945,55L945,56L949,56L949,57L954,57L954,58L960,58L960,60L970,60L970,61L994,61L994,62L1000,62L1000,63L1004,63L1004,65L1005,65L1005,66L1018,66L1018,67L1035,67L1035,68L1079,68L1079,69L1096,69L1096,71L1099,71L1099,73L1118,73L1118,74L1121,74L1121,75L1125,75L1125,76L1128,76L1128,77L1133,77L1133,78L1141,78L1141,79L1146,79L1146,80L1147,80L1147,81L1152,81L1152,82L1155,82L1155,83L1157,83L1157,84L1159,84L1159,85L1161,85L1161,86L1168,86" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,34L331,34L331,30L333,30L333,31L337,31L337,32L351,32L351,34L370,34L370,35L380,35L380,36L382,36L382,37L384,37L384,38L398,38L398,39L434,39L434,40L438,40L438,42L443,42L443,43L445,43L445,44L452,44L452,45L458,45L458,46L464,46L464,47L480,47L480,48L485,48L485,49L493,49L493,50L500,50L500,51L506,51L506,52L549,52L549,53L594,53L594,54L611,54L611,55L612,55L612,57L616,57L616,58L629,58L629,59L630,59L630,60L653,60L653,61L654,61L654,62L659,62L659,64L661,64L661,65L676,65L676,66L680,66L680,67L698,67L698,68L706,68L706,69L725,69L725,70L726,70L726,71L732,71L732,72L739,72L739,73L765,73L765,74L766,74L766,75L772,75L772,76L774,76L774,78L782,78L782,79L784,79L784,80L789,80L789,81L799,81L799,82L805,82L805,84L823,84L823,85L850,85L850,86L853,86L853,88L857,88L857,89L861,89L861,90L863,90L863,91L864,91L864,92L867,92L867,93L895,93L895,94L899,94L899,95L902,95L902,96L904,96L904,97L911,97L911,98L913,98L913,99L919,99L919,100L923,100L923,101L924,101L924,102L928,102L928,103L929,103L929,105L933,105L933,106L938,106L938,107L942,107L942,108L943,108L943,109L944,109L944,110L945,110L945,111L948,111L948,112L955,112L955,113L957,113L957,114L961,114L961,116L963,116L963,118L975,118L975,119L976,119L976,120L984,120L984,121L999,121L999,122L1006,122L1006,123L1015,123L1015,124L1018,124L1018,125L1026,125L1026,126L1027,126L1027,127L1031,127L1031,128L1033,128L1033,129L1039,129L1039,130L1041,130L1041,131L1043,131L1043,132L1045,132L1045,133L1051,133L1051,135L1055,135L1055,136L1061,136L1061,137L1069,137L1069,138L1070,138L1070,140L1083,140L1083,141L1084,141L1084,142L1088,142L1088,144L1090,144L1090,145L1091,145L1091,146L1096,146L1096,147L1099,147L1099,148L1103,148L1103,149L1104,149L1104,152L1106,152L1106,153L1110,153L1110,154L1111,154L1111,155L1112,155L1112,156L1114,156L1114,158L1115,158L1115,159L1116,159L1116,160L1118,160L1118,161L1126,161L1126,162L1131,162L1131,163L1135,163L1135,165L1138,165L1138,166L1141,166L1141,167L1144,167L1144,168L1147,168L1147,169L1151,169L1151,170L1159,170L1159,172L1160,172L1160,173L1161,173L1161,174L1166,174L1166,175L1168,175" tabindex="0">
						<title>xd17x94d-9l71pv4l.21gpn081</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
