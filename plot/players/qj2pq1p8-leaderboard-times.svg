<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Time by leaderboard for player qj2pq1p8</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 80;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2017-12-30</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2019-04-17</text>
		</svg>
		<svg viewBox="0 0 80 20">
			<text x="40" y="10" dx="0" dy="2" textLength="80" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">00:00.00</text>
		</svg>
		<svg viewBox="0 0 80 20">
			<text x="40" y="10" dx="0" dy="2" textLength="80" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">18:01.88</text>
		</svg>
		<svg viewBox="0 0 473 108188" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 108188) scale(1 -1)" style="--count: 27;">
				<g style="--index: 0;">
					<path d="M0,6895L1,6895L1,5895L3,5895L3,5324L4,5324L4,5130" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.q75zmmn1</title>
					</path>
					<rect x="0" y="5130" width="4" height="1765"/>
					<path d="M0,6895L0,6895" tabindex="0">
						<title>01:08.95 on 2017-12-30</title>
					</path>
					<line x1="0" y1="6895" x2="473" y2="6895"/>
					<line x1="0" y1="0" x2="0" y2="108188"/>
					<path d="M1,5895L1,5895" tabindex="0">
						<title>00:58.95 on 2017-12-31</title>
					</path>
					<line x1="0" y1="5895" x2="473" y2="5895"/>
					<line x1="1" y1="0" x2="1" y2="108188"/>
					<path d="M3,5324L3,5324" tabindex="0">
						<title>00:53.24 on 2018-01-02</title>
					</path>
					<line x1="0" y1="5324" x2="473" y2="5324"/>
					<line x1="3" y1="0" x2="3" y2="108188"/>
					<path d="M4,5130L4,5130" tabindex="0">
						<title>00:51.30 on 2018-01-03</title>
					</path>
					<line x1="0" y1="5130" x2="473" y2="5130"/>
					<line x1="4" y1="0" x2="4" y2="108188"/>
				</g>
				<g style="--index: 1;">
					<path d="M1,10321L2,10321L2,9757L7,9757L7,3753L8,3753L8,3506" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.1gnozzxl</title>
					</path>
					<rect x="1" y="3506" width="7" height="6815"/>
					<path d="M1,10321L1,10321" tabindex="0">
						<title>01:43.21 on 2017-12-31</title>
					</path>
					<line x1="0" y1="10321" x2="473" y2="10321"/>
					<line x1="1" y1="0" x2="1" y2="108188"/>
					<path d="M2,9757L2,9757" tabindex="0">
						<title>01:37.57 on 2018-01-01</title>
					</path>
					<line x1="0" y1="9757" x2="473" y2="9757"/>
					<line x1="2" y1="0" x2="2" y2="108188"/>
					<path d="M7,3753L7,3753" tabindex="0">
						<title>00:37.53 on 2018-01-06</title>
					</path>
					<line x1="0" y1="3753" x2="473" y2="3753"/>
					<line x1="7" y1="0" x2="7" y2="108188"/>
					<path d="M8,3506L8,3506" tabindex="0">
						<title>00:35.06 on 2018-01-07</title>
					</path>
					<line x1="0" y1="3506" x2="473" y2="3506"/>
					<line x1="8" y1="0" x2="8" y2="108188"/>
				</g>
				<g style="--index: 2;">
					<path d="M4,13406L5,13406L5,12668L6,12668L6,11932L8,11932L8,9772L9,9772L9,8638" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.ln8kgdol</title>
					</path>
					<rect x="4" y="8638" width="5" height="4768"/>
					<path d="M4,13406L4,13406" tabindex="0">
						<title>02:14.06 on 2018-01-03</title>
					</path>
					<line x1="0" y1="13406" x2="473" y2="13406"/>
					<line x1="4" y1="0" x2="4" y2="108188"/>
					<path d="M5,12668L5,12668" tabindex="0">
						<title>02:06.68 on 2018-01-04</title>
					</path>
					<line x1="0" y1="12668" x2="473" y2="12668"/>
					<line x1="5" y1="0" x2="5" y2="108188"/>
					<path d="M6,11932L6,11932" tabindex="0">
						<title>01:59.32 on 2018-01-05</title>
					</path>
					<line x1="0" y1="11932" x2="473" y2="11932"/>
					<line x1="6" y1="0" x2="6" y2="108188"/>
					<path d="M8,9772L8,9772" tabindex="0">
						<title>01:37.72 on 2018-01-07</title>
					</path>
					<line x1="0" y1="9772" x2="473" y2="9772"/>
					<line x1="8" y1="0" x2="8" y2="108188"/>
					<path d="M9,8638L9,8638" tabindex="0">
						<title>01:26.38 on 2018-01-08</title>
					</path>
					<line x1="0" y1="8638" x2="473" y2="8638"/>
					<line x1="9" y1="0" x2="9" y2="108188"/>
				</g>
				<g style="--index: 3;">
					<path d="M4,16238L7,16238L7,11830" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.qyz3jjd1</title>
					</path>
					<rect x="4" y="11830" width="3" height="4408"/>
					<path d="M4,16238L4,16238" tabindex="0">
						<title>02:42.38 on 2018-01-03</title>
					</path>
					<line x1="0" y1="16238" x2="473" y2="16238"/>
					<line x1="4" y1="0" x2="4" y2="108188"/>
					<path d="M7,11830L7,11830" tabindex="0">
						<title>01:58.30 on 2018-01-06</title>
					</path>
					<line x1="0" y1="11830" x2="473" y2="11830"/>
					<line x1="7" y1="0" x2="7" y2="108188"/>
				</g>
				<g style="--index: 4;">
					<path d="M9,996" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
					<rect x="9" y="996" width="0" height="0"/>
					<path d="M9,996L9,996" tabindex="0">
						<title>00:09.96 on 2018-01-08</title>
					</path>
					<line x1="0" y1="996" x2="473" y2="996"/>
					<line x1="9" y1="0" x2="9" y2="108188"/>
				</g>
				<g style="--index: 5;">
					<path d="M10,1550L16,1550L16,1261L20,1261L20,1134L25,1134L25,1075L27,1075L27,1057L28,1057L28,1052L39,1052L39,1045" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
					<rect x="10" y="1045" width="29" height="505"/>
					<path d="M10,1550L10,1550" tabindex="0">
						<title>00:15.50 on 2018-01-09</title>
					</path>
					<line x1="0" y1="1550" x2="473" y2="1550"/>
					<line x1="10" y1="0" x2="10" y2="108188"/>
					<path d="M16,1261L16,1261" tabindex="0">
						<title>00:12.61 on 2018-01-15</title>
					</path>
					<line x1="0" y1="1261" x2="473" y2="1261"/>
					<line x1="16" y1="0" x2="16" y2="108188"/>
					<path d="M20,1134L20,1134" tabindex="0">
						<title>00:11.34 on 2018-01-19</title>
					</path>
					<line x1="0" y1="1134" x2="473" y2="1134"/>
					<line x1="20" y1="0" x2="20" y2="108188"/>
					<path d="M25,1075L25,1075" tabindex="0">
						<title>00:10.75 on 2018-01-24</title>
					</path>
					<line x1="0" y1="1075" x2="473" y2="1075"/>
					<line x1="25" y1="0" x2="25" y2="108188"/>
					<path d="M27,1057L27,1057" tabindex="0">
						<title>00:10.57 on 2018-01-26</title>
					</path>
					<line x1="0" y1="1057" x2="473" y2="1057"/>
					<line x1="27" y1="0" x2="27" y2="108188"/>
					<path d="M28,1052L28,1052" tabindex="0">
						<title>00:10.52 on 2018-01-27</title>
					</path>
					<line x1="0" y1="1052" x2="473" y2="1052"/>
					<line x1="28" y1="0" x2="28" y2="108188"/>
					<path d="M39,1045L39,1045" tabindex="0">
						<title>00:10.45 on 2018-02-07</title>
					</path>
					<line x1="0" y1="1045" x2="473" y2="1045"/>
					<line x1="39" y1="0" x2="39" y2="108188"/>
				</g>
				<g style="--index: 6;">
					<path d="M10,2591L27,2591L27,2299L39,2299L39,2044" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
					<rect x="10" y="2044" width="29" height="547"/>
					<path d="M10,2591L10,2591" tabindex="0">
						<title>00:25.91 on 2018-01-09</title>
					</path>
					<line x1="0" y1="2591" x2="473" y2="2591"/>
					<line x1="10" y1="0" x2="10" y2="108188"/>
					<path d="M27,2299L27,2299" tabindex="0">
						<title>00:22.99 on 2018-01-26</title>
					</path>
					<line x1="0" y1="2299" x2="473" y2="2299"/>
					<line x1="27" y1="0" x2="27" y2="108188"/>
					<path d="M39,2044L39,2044" tabindex="0">
						<title>00:20.44 on 2018-02-07</title>
					</path>
					<line x1="0" y1="2044" x2="473" y2="2044"/>
					<line x1="39" y1="0" x2="39" y2="108188"/>
				</g>
				<g style="--index: 7;">
					<path d="M10,1886L40,1886L40,1841" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
					<rect x="10" y="1841" width="30" height="45"/>
					<path d="M10,1886L10,1886" tabindex="0">
						<title>00:18.86 on 2018-01-09</title>
					</path>
					<line x1="0" y1="1886" x2="473" y2="1886"/>
					<line x1="10" y1="0" x2="10" y2="108188"/>
					<path d="M40,1841L40,1841" tabindex="0">
						<title>00:18.41 on 2018-02-08</title>
					</path>
					<line x1="0" y1="1841" x2="473" y2="1841"/>
					<line x1="40" y1="0" x2="40" y2="108188"/>
				</g>
				<g style="--index: 8;">
					<path d="M10,2191L68,2191L68,1832" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
					<rect x="10" y="1832" width="58" height="359"/>
					<path d="M10,2191L10,2191" tabindex="0">
						<title>00:21.91 on 2018-01-09</title>
					</path>
					<line x1="0" y1="2191" x2="473" y2="2191"/>
					<line x1="10" y1="0" x2="10" y2="108188"/>
					<path d="M68,1832L68,1832" tabindex="0">
						<title>00:18.32 on 2018-03-08</title>
					</path>
					<line x1="0" y1="1832" x2="473" y2="1832"/>
					<line x1="68" y1="0" x2="68" y2="108188"/>
				</g>
				<g style="--index: 9;">
					<path d="M16,9751L26,9751L26,9578L66,9578L66,9491" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
					<rect x="16" y="9491" width="50" height="260"/>
					<path d="M16,9751L16,9751" tabindex="0">
						<title>01:37.51 on 2018-01-15</title>
					</path>
					<line x1="0" y1="9751" x2="473" y2="9751"/>
					<line x1="16" y1="0" x2="16" y2="108188"/>
					<path d="M26,9578L26,9578" tabindex="0">
						<title>01:35.78 on 2018-01-25</title>
					</path>
					<line x1="0" y1="9578" x2="473" y2="9578"/>
					<line x1="26" y1="0" x2="26" y2="108188"/>
					<path d="M66,9491L66,9491" tabindex="0">
						<title>01:34.91 on 2018-03-06</title>
					</path>
					<line x1="0" y1="9491" x2="473" y2="9491"/>
					<line x1="66" y1="0" x2="66" y2="108188"/>
				</g>
				<g style="--index: 10;">
					<path d="M16,6318L25,6318L25,5913L34,5913L34,5812L66,5812L66,5586" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
					<rect x="16" y="5586" width="50" height="732"/>
					<path d="M16,6318L16,6318" tabindex="0">
						<title>01:03.18 on 2018-01-15</title>
					</path>
					<line x1="0" y1="6318" x2="473" y2="6318"/>
					<line x1="16" y1="0" x2="16" y2="108188"/>
					<path d="M25,5913L25,5913" tabindex="0">
						<title>00:59.13 on 2018-01-24</title>
					</path>
					<line x1="0" y1="5913" x2="473" y2="5913"/>
					<line x1="25" y1="0" x2="25" y2="108188"/>
					<path d="M34,5812L34,5812" tabindex="0">
						<title>00:58.12 on 2018-02-02</title>
					</path>
					<line x1="0" y1="5812" x2="473" y2="5812"/>
					<line x1="34" y1="0" x2="34" y2="108188"/>
					<path d="M66,5586L66,5586" tabindex="0">
						<title>00:55.86 on 2018-03-06</title>
					</path>
					<line x1="0" y1="5586" x2="473" y2="5586"/>
					<line x1="66" y1="0" x2="66" y2="108188"/>
				</g>
				<g style="--index: 11;">
					<path d="M18,2391L20,2391L20,2250L32,2250L32,2173L34,2173L34,2049" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
					<rect x="18" y="2049" width="16" height="342"/>
					<path d="M18,2391L18,2391" tabindex="0">
						<title>00:23.91 on 2018-01-17</title>
					</path>
					<line x1="0" y1="2391" x2="473" y2="2391"/>
					<line x1="18" y1="0" x2="18" y2="108188"/>
					<path d="M20,2250L20,2250" tabindex="0">
						<title>00:22.50 on 2018-01-19</title>
					</path>
					<line x1="0" y1="2250" x2="473" y2="2250"/>
					<line x1="20" y1="0" x2="20" y2="108188"/>
					<path d="M32,2173L32,2173" tabindex="0">
						<title>00:21.73 on 2018-01-31</title>
					</path>
					<line x1="0" y1="2173" x2="473" y2="2173"/>
					<line x1="32" y1="0" x2="32" y2="108188"/>
					<path d="M34,2049L34,2049" tabindex="0">
						<title>00:20.49 on 2018-02-02</title>
					</path>
					<line x1="0" y1="2049" x2="473" y2="2049"/>
					<line x1="34" y1="0" x2="34" y2="108188"/>
				</g>
				<g style="--index: 12;">
					<path d="M18,2370L20,2370L20,2249L32,2249L32,2170L34,2170L34,2084" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
					<rect x="18" y="2084" width="16" height="286"/>
					<path d="M18,2370L18,2370" tabindex="0">
						<title>00:23.70 on 2018-01-17</title>
					</path>
					<line x1="0" y1="2370" x2="473" y2="2370"/>
					<line x1="18" y1="0" x2="18" y2="108188"/>
					<path d="M20,2249L20,2249" tabindex="0">
						<title>00:22.49 on 2018-01-19</title>
					</path>
					<line x1="0" y1="2249" x2="473" y2="2249"/>
					<line x1="20" y1="0" x2="20" y2="108188"/>
					<path d="M32,2170L32,2170" tabindex="0">
						<title>00:21.70 on 2018-01-31</title>
					</path>
					<line x1="0" y1="2170" x2="473" y2="2170"/>
					<line x1="32" y1="0" x2="32" y2="108188"/>
					<path d="M34,2084L34,2084" tabindex="0">
						<title>00:20.84 on 2018-02-02</title>
					</path>
					<line x1="0" y1="2084" x2="473" y2="2084"/>
					<line x1="34" y1="0" x2="34" y2="108188"/>
				</g>
				<g style="--index: 13;">
					<path d="M18,1589L39,1589L39,1456L69,1456L69,1370" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
					<rect x="18" y="1370" width="51" height="219"/>
					<path d="M18,1589L18,1589" tabindex="0">
						<title>00:15.89 on 2018-01-17</title>
					</path>
					<line x1="0" y1="1589" x2="473" y2="1589"/>
					<line x1="18" y1="0" x2="18" y2="108188"/>
					<path d="M39,1456L39,1456" tabindex="0">
						<title>00:14.56 on 2018-02-07</title>
					</path>
					<line x1="0" y1="1456" x2="473" y2="1456"/>
					<line x1="39" y1="0" x2="39" y2="108188"/>
					<path d="M69,1370L69,1370" tabindex="0">
						<title>00:13.70 on 2018-03-09</title>
					</path>
					<line x1="0" y1="1370" x2="473" y2="1370"/>
					<line x1="69" y1="0" x2="69" y2="108188"/>
				</g>
				<g style="--index: 14;">
					<path d="M18,17740" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.ln8rzznl</title>
					</path>
					<rect x="18" y="17740" width="0" height="0"/>
					<path d="M18,17740L18,17740" tabindex="0">
						<title>02:57.40 on 2018-01-17</title>
					</path>
					<line x1="0" y1="17740" x2="473" y2="17740"/>
					<line x1="18" y1="0" x2="18" y2="108188"/>
				</g>
				<g style="--index: 15;">
					<path d="M18,1923" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
					<rect x="18" y="1923" width="0" height="0"/>
					<path d="M18,1923L18,1923" tabindex="0">
						<title>00:19.23 on 2018-01-17</title>
					</path>
					<line x1="0" y1="1923" x2="473" y2="1923"/>
					<line x1="18" y1="0" x2="18" y2="108188"/>
				</g>
				<g style="--index: 16;">
					<path d="M18,10521L19,10521L19,9942L28,9942L28,9432L34,9432L34,8888" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.814y45w1</title>
					</path>
					<rect x="18" y="8888" width="16" height="1633"/>
					<path d="M18,10521L18,10521" tabindex="0">
						<title>01:45.21 on 2018-01-17</title>
					</path>
					<line x1="0" y1="10521" x2="473" y2="10521"/>
					<line x1="18" y1="0" x2="18" y2="108188"/>
					<path d="M19,9942L19,9942" tabindex="0">
						<title>01:39.42 on 2018-01-18</title>
					</path>
					<line x1="0" y1="9942" x2="473" y2="9942"/>
					<line x1="19" y1="0" x2="19" y2="108188"/>
					<path d="M28,9432L28,9432" tabindex="0">
						<title>01:34.32 on 2018-01-27</title>
					</path>
					<line x1="0" y1="9432" x2="473" y2="9432"/>
					<line x1="28" y1="0" x2="28" y2="108188"/>
					<path d="M34,8888L34,8888" tabindex="0">
						<title>01:28.88 on 2018-02-02</title>
					</path>
					<line x1="0" y1="8888" x2="473" y2="8888"/>
					<line x1="34" y1="0" x2="34" y2="108188"/>
				</g>
				<g style="--index: 17;">
					<path d="M40,32855L427,32855L427,28042" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
					<rect x="40" y="28042" width="387" height="4813"/>
					<path d="M40,32855L40,32855" tabindex="0">
						<title>05:28.55 on 2018-02-08</title>
					</path>
					<line x1="0" y1="32855" x2="473" y2="32855"/>
					<line x1="40" y1="0" x2="40" y2="108188"/>
					<path d="M427,28042L427,28042" tabindex="0">
						<title>04:40.42 on 2019-03-02</title>
					</path>
					<line x1="0" y1="28042" x2="473" y2="28042"/>
					<line x1="427" y1="0" x2="427" y2="108188"/>
				</g>
				<g style="--index: 18;">
					<path d="M41,41523" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.z19md2jl</title>
					</path>
					<rect x="41" y="41523" width="0" height="0"/>
					<path d="M41,41523L41,41523" tabindex="0">
						<title>06:55.23 on 2018-02-09</title>
					</path>
					<line x1="0" y1="41523" x2="473" y2="41523"/>
					<line x1="41" y1="0" x2="41" y2="108188"/>
				</g>
				<g style="--index: 19;">
					<path d="M66,2291L427,2291L427,1977" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
					<rect x="66" y="1977" width="361" height="314"/>
					<path d="M66,2291L66,2291" tabindex="0">
						<title>00:22.91 on 2018-03-06</title>
					</path>
					<line x1="0" y1="2291" x2="473" y2="2291"/>
					<line x1="66" y1="0" x2="66" y2="108188"/>
					<path d="M427,1977L427,1977" tabindex="0">
						<title>00:19.77 on 2019-03-02</title>
					</path>
					<line x1="0" y1="1977" x2="473" y2="1977"/>
					<line x1="427" y1="0" x2="427" y2="108188"/>
				</g>
				<g style="--index: 20;">
					<path d="M69,3327L102,3327L102,3118" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
					<rect x="69" y="3118" width="33" height="209"/>
					<path d="M69,3327L69,3327" tabindex="0">
						<title>00:33.27 on 2018-03-09</title>
					</path>
					<line x1="0" y1="3327" x2="473" y2="3327"/>
					<line x1="69" y1="0" x2="69" y2="108188"/>
					<path d="M102,3118L102,3118" tabindex="0">
						<title>00:31.18 on 2018-04-11</title>
					</path>
					<line x1="0" y1="3118" x2="473" y2="3118"/>
					<line x1="102" y1="0" x2="102" y2="108188"/>
				</g>
				<g style="--index: 21;">
					<path d="M187,3721" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
					</path>
					<rect x="187" y="3721" width="0" height="0"/>
					<path d="M187,3721L187,3721" tabindex="0">
						<title>00:37.21 on 2018-07-05</title>
					</path>
					<line x1="0" y1="3721" x2="473" y2="3721"/>
					<line x1="187" y1="0" x2="187" y2="108188"/>
				</g>
				<g style="--index: 22;">
					<path d="M190,1951" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
					<rect x="190" y="1951" width="0" height="0"/>
					<path d="M190,1951L190,1951" tabindex="0">
						<title>00:19.51 on 2018-07-08</title>
					</path>
					<line x1="0" y1="1951" x2="473" y2="1951"/>
					<line x1="190" y1="0" x2="190" y2="108188"/>
				</g>
				<g style="--index: 23;">
					<path d="M190,3345" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
					<rect x="190" y="3345" width="0" height="0"/>
					<path d="M190,3345L190,3345" tabindex="0">
						<title>00:33.45 on 2018-07-08</title>
					</path>
					<line x1="0" y1="3345" x2="473" y2="3345"/>
					<line x1="190" y1="0" x2="190" y2="108188"/>
				</g>
				<g style="--index: 24;">
					<path d="M425,40285L426,40285L426,39898" tabindex="0">
						<title>l_r9gn1qpd-xd144xwd</title>
					</path>
					<rect x="425" y="39898" width="1" height="387"/>
					<path d="M425,40285L425,40285" tabindex="0">
						<title>06:42.85 on 2019-02-28</title>
					</path>
					<line x1="0" y1="40285" x2="473" y2="40285"/>
					<line x1="425" y1="0" x2="425" y2="108188"/>
					<path d="M426,39898L426,39898" tabindex="0">
						<title>06:38.98 on 2019-03-01</title>
					</path>
					<line x1="0" y1="39898" x2="473" y2="39898"/>
					<line x1="426" y1="0" x2="426" y2="108188"/>
				</g>
				<g style="--index: 25;">
					<path d="M427,21523" tabindex="0">
						<title>l_o9xo3rp9-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
					<rect x="427" y="21523" width="0" height="0"/>
					<path d="M427,21523L427,21523" tabindex="0">
						<title>03:35.23 on 2019-03-02</title>
					</path>
					<line x1="0" y1="21523" x2="473" y2="21523"/>
					<line x1="427" y1="0" x2="427" y2="108188"/>
				</g>
				<g style="--index: 26;">
					<path d="M473,108188" tabindex="0">
						<title>xd17x94d-9l71pv4l.81wrgm5l</title>
					</path>
					<rect x="473" y="108188" width="0" height="0"/>
					<path d="M473,108188L473,108188" tabindex="0">
						<title>18:01.88 on 2019-04-17</title>
					</path>
					<line x1="0" y1="108188" x2="473" y2="108188"/>
					<line x1="473" y1="0" x2="473" y2="108188"/>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
