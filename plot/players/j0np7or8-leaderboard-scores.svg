<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player j0np7or8</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2020-10-31</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-30</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">223</text>
		</svg>
		<svg viewBox="0 0 1795 223" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 223) scale(1 -1)" style="--count: 61;">
				<g>
					<rect x="0" y="0" width="1795" height="223"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,9L4,9L4,9L8,9L8,10L20,10L20,10L23,10L23,10L24,10L24,10L27,10L27,11L43,11L43,12L64,12L64,12L91,12L91,12L100,12L100,13L104,13L104,14L133,14L133,15L140,15L140,16L143,16L143,17L155,17L155,17L157,17L157,18L159,18L159,20L203,20L203,21L268,21L268,22L352,22L352,23L431,23L431,24L438,24L438,25L451,25L451,26L491,26L491,27L497,27L497,28L500,28L500,29L502,29L502,30L510,30L510,31L523,31L523,32L531,32L531,33L547,33L547,34L551,34L551,33L552,33L552,35L555,35L555,36L581,36L581,36L603,36L603,37L608,37L608,38L610,38L610,39L613,39L613,40L616,40L616,41L623,41L623,42L631,42L631,43L635,43L635,44L636,44L636,45L647,45L647,46L651,46L651,47L654,47L654,48L657,48L657,49L658,49L658,49L660,49L660,50L662,50L662,51L663,51L663,52L721,52L721,53L725,53L725,54L735,54L735,55L741,55L741,56L756,56L756,57L763,57L763,58L771,58L771,59L797,59L797,60L801,60L801,61L803,61L803,62L816,62L816,63L818,63L818,64L862,64L862,65L867,65L867,65L868,65L868,66L869,66L869,67L875,67L875,68L881,68L881,67L883,67L883,67L885,67L885,68L887,68L887,69L891,69L891,70L895,70L895,71L898,71L898,72L903,72L903,73L905,73L905,74L908,74L908,74L924,74L924,75L925,75L925,77L931,77L931,79L935,79L935,80L936,80L936,81L960,81L960,83L974,83L974,84L986,84L986,85L988,85L988,86L990,86L990,86L1014,86L1014,87L1017,87L1017,88L1024,88L1024,89L1032,89L1032,90L1061,90L1061,90L1072,90L1072,91L1079,91L1079,92L1081,92L1081,93L1097,93L1097,94L1098,94L1098,95L1112,95L1112,96L1124,96L1124,97L1127,97L1127,99L1191,99L1191,100L1192,100L1192,101L1193,101L1193,100L1216,100L1216,101L1235,101L1235,102L1249,102L1249,103L1258,103L1258,104L1261,104L1261,105L1275,105L1275,105L1278,105L1278,105L1281,105L1281,106L1295,106L1295,107L1296,107L1296,109L1304,109L1304,110L1312,110L1312,109L1313,109L1313,111L1326,111L1326,112L1331,112L1331,113L1333,113L1333,114L1334,114L1334,115L1335,115L1335,116L1336,116L1336,116L1339,116L1339,117L1343,117L1343,118L1346,118L1346,119L1347,119L1347,120L1350,120L1350,121L1353,121L1353,122L1358,122L1358,123L1362,123L1362,124L1364,124L1364,125L1368,125L1368,126L1374,126L1374,128L1376,128L1376,129L1379,129L1379,130L1384,130L1384,131L1385,131L1385,130L1387,130L1387,131L1398,131L1398,132L1400,132L1400,134L1401,134L1401,133L1404,133L1404,132L1407,132L1407,132L1408,132L1408,133L1419,133L1419,134L1439,134L1439,135L1442,135L1442,136L1450,136L1450,136L1456,136L1456,137L1462,137L1462,138L1464,138L1464,137L1472,137L1472,137L1473,137L1473,138L1477,138L1477,138L1478,138L1478,139L1481,139L1481,140L1485,140L1485,140L1488,140L1488,142L1498,142L1498,142L1499,142L1499,143L1507,143L1507,144L1509,144L1509,145L1513,145L1513,146L1516,146L1516,147L1517,147L1517,149L1523,149L1523,149L1527,149L1527,150L1529,150L1529,152L1532,152L1532,153L1538,153L1538,155L1542,155L1542,156L1546,156L1546,157L1553,157L1553,158L1556,158L1556,159L1567,159L1567,160L1568,160L1568,159L1569,159L1569,160L1571,160L1571,160L1573,160L1573,161L1574,161L1574,161L1584,161L1584,162L1589,162L1589,162L1593,162L1593,162L1595,162L1595,163L1599,163L1599,163L1602,163L1602,164L1606,164L1606,165L1611,165L1611,166L1616,166L1616,167L1619,167L1619,168L1621,168L1621,169L1627,169L1627,170L1630,170L1630,171L1632,171L1632,172L1638,172L1638,173L1643,173L1643,174L1646,174L1646,175L1649,175L1649,176L1652,176L1652,178L1653,178L1653,179L1657,179L1657,180L1658,180L1658,181L1660,181L1660,181L1663,181L1663,180L1665,180L1665,181L1667,181L1667,182L1672,182L1672,181L1676,181L1676,182L1681,182L1681,183L1688,183L1688,184L1689,184L1689,186L1696,186L1696,188L1698,188L1698,188L1703,188L1703,189L1705,189L1705,189L1710,189L1710,190L1711,190L1711,191L1713,191L1713,192L1714,192L1714,193L1720,193L1720,194L1722,194L1722,195L1723,195L1723,196L1726,196L1726,197L1728,197L1728,198L1732,198L1732,199L1733,199L1733,201L1737,201L1737,202L1744,202L1744,205L1745,205L1745,206L1748,206L1748,207L1749,207L1749,209L1751,209L1751,210L1753,210L1753,209L1756,209L1756,210L1759,210L1759,210L1760,210L1760,211L1762,211L1762,213L1766,213L1766,213L1768,213L1768,214L1772,214L1772,215L1773,215L1773,216L1777,216L1777,217L1779,217L1779,217L1781,217L1781,218L1782,218L1782,220L1783,220L1783,221L1788,221L1788,222L1793,222L1793,222L1794,222L1794,223L1795,223L1795,223L1795,223" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L0,0L0,5L23,5L23,5L346,5L346,5L496,5L496,5L524,5L524,6L539,6L539,6L594,6L594,7L614,7L614,7L635,7L635,8L647,8L647,9L661,9L661,10L689,10L689,11L767,11L767,12L816,12L816,13L866,13L866,13L871,13L871,14L925,14L925,15L983,15L983,16L1017,16L1017,17L1023,17L1023,18L1058,18L1058,19L1134,19L1134,20L1140,20L1140,21L1235,21L1235,22L1308,22L1308,22L1352,22L1352,23L1380,23L1380,23L1402,23L1402,24L1434,24L1434,23L1472,23L1472,23L1522,23L1522,24L1555,24L1555,25L1556,25L1556,25L1621,25L1621,25L1627,25L1627,26L1632,26L1632,27L1643,27L1643,28L1658,28L1658,28L1675,28L1675,28L1691,28L1691,29L1704,29L1704,28L1707,28L1707,28L1715,28L1715,29L1724,29L1724,29L1726,29L1726,29L1728,29L1728,30L1733,30L1733,30L1734,30L1734,30L1740,30L1740,30L1752,30L1752,31L1768,31L1768,33L1769,33L1769,32L1782,32L1782,33L1787,33L1787,34L1793,34L1793,35L1795,35" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L2,0L2,4L20,4L20,4L27,4L27,4L77,4L77,7L113,7L113,8L155,8L155,8L452,8L452,7L489,7L489,8L521,8L521,9L547,9L547,10L574,10L574,10L616,10L616,10L634,10L634,11L636,11L636,12L640,12L640,13L642,13L642,14L674,14L674,15L704,15L704,16L751,16L751,17L758,17L758,18L770,18L770,19L822,19L822,19L834,19L834,20L875,20L875,21L881,21L881,22L884,22L884,22L891,22L891,23L900,23L900,24L913,24L913,25L942,25L942,25L954,25L954,26L1023,26L1023,27L1047,27L1047,28L1056,28L1056,29L1092,29L1092,30L1095,30L1095,31L1097,31L1097,32L1138,32L1138,33L1220,33L1220,33L1247,33L1247,34L1249,34L1249,35L1263,35L1263,36L1279,36L1279,37L1280,37L1280,38L1297,38L1297,39L1302,39L1302,40L1306,40L1306,40L1354,40L1354,41L1373,41L1373,41L1383,41L1383,42L1406,42L1406,42L1411,42L1411,43L1429,43L1429,43L1477,43L1477,43L1478,43L1478,43L1514,43L1514,44L1544,44L1544,46L1552,46L1552,47L1554,47L1554,48L1565,48L1565,49L1571,49L1571,50L1573,50L1573,51L1575,51L1575,52L1582,52L1582,52L1584,52L1584,53L1594,53L1594,54L1598,54L1598,56L1599,56L1599,57L1603,57L1603,58L1613,58L1613,58L1621,58L1621,59L1630,59L1630,59L1633,59L1633,60L1634,60L1634,59L1643,59L1643,59L1648,59L1648,60L1687,60L1687,61L1691,61L1691,62L1692,62L1692,62L1696,62L1696,62L1697,62L1697,63L1703,63L1703,63L1710,63L1710,64L1716,64L1716,64L1724,64L1724,64L1725,64L1725,63L1736,63L1736,63L1738,63L1738,63L1742,63L1742,65L1746,65L1746,67L1747,67L1747,66L1750,66L1750,67L1758,67L1758,69L1765,69L1765,70L1770,70L1770,71L1780,71L1780,71L1785,71L1785,72L1791,72L1791,73L1795,73" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L7,0L7,5L20,5L20,5L32,5L32,6L46,6L46,6L79,6L79,8L89,8L89,8L123,8L123,9L156,9L156,9L229,9L229,10L349,10L349,11L364,11L364,12L494,12L494,13L496,13L496,14L556,14L556,15L610,15L610,16L654,16L654,17L689,17L689,18L744,18L744,19L780,19L780,20L787,20L787,21L842,21L842,22L847,22L847,23L848,23L848,24L849,24L849,25L851,25L851,26L871,26L871,27L877,27L877,28L887,28L887,29L888,29L888,30L912,30L912,31L913,31L913,32L937,32L937,33L946,33L946,34L960,34L960,35L988,35L988,36L1022,36L1022,37L1067,37L1067,38L1135,38L1135,39L1148,39L1148,38L1219,38L1219,39L1232,39L1232,40L1264,40L1264,41L1314,41L1314,42L1315,42L1315,43L1317,43L1317,44L1326,44L1326,45L1361,45L1361,46L1372,46L1372,47L1398,47L1398,48L1399,48L1399,50L1429,50L1429,51L1452,51L1452,52L1465,52L1465,53L1501,53L1501,54L1504,54L1504,55L1530,55L1530,56L1536,56L1536,57L1546,57L1546,58L1548,58L1548,59L1549,59L1549,60L1573,60L1573,61L1575,61L1575,62L1576,62L1576,63L1577,63L1577,64L1594,64L1594,65L1595,65L1595,66L1596,66L1596,67L1599,67L1599,68L1633,68L1633,69L1702,69L1702,70L1705,70L1705,69L1708,69L1708,70L1709,70L1709,70L1710,70L1710,70L1715,70L1715,71L1716,71L1716,72L1721,72L1721,72L1725,72L1725,73L1726,73L1726,73L1730,73L1730,73L1731,73L1731,74L1734,74L1734,74L1736,74L1736,74L1742,74L1742,74L1744,74L1744,74L1754,74L1754,75L1755,75L1755,76L1757,76L1757,77L1761,77L1761,76L1769,76L1769,76L1779,76L1779,78L1785,78L1785,79L1795,79" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L7,0L7,5L20,5L20,5L29,5L29,5L46,5L46,6L79,6L79,7L80,7L80,6L85,6L85,6L114,6L114,6L122,6L122,7L159,7L159,12L173,12L173,13L176,13L176,14L373,14L373,15L399,15L399,16L402,16L402,17L403,17L403,18L428,18L428,18L458,18L458,19L459,19L459,20L487,20L487,21L492,21L492,22L511,22L511,23L512,23L512,22L527,22L527,23L547,23L547,24L552,24L552,25L556,25L556,26L574,26L574,26L576,26L576,27L588,27L588,28L615,28L615,29L635,29L635,30L640,30L640,31L657,31L657,32L678,32L678,33L680,33L680,34L684,34L684,35L746,35L746,36L752,36L752,37L816,37L816,38L861,38L861,39L866,39L866,39L869,39L869,40L871,40L871,41L882,41L882,44L911,44L911,45L920,45L920,46L922,46L922,47L925,47L925,48L939,48L939,50L945,50L945,51L953,51L953,52L964,52L964,53L978,53L978,52L983,52L983,53L991,53L991,54L995,54L995,56L1008,56L1008,57L1011,57L1011,58L1017,58L1017,59L1023,59L1023,60L1028,60L1028,61L1044,61L1044,61L1058,61L1058,61L1071,61L1071,62L1072,62L1072,63L1075,63L1075,63L1081,63L1081,64L1134,64L1134,65L1138,65L1138,66L1189,66L1189,67L1190,67L1190,68L1192,68L1192,69L1193,69L1193,70L1208,70L1208,71L1213,71L1213,72L1235,72L1235,73L1241,73L1241,74L1247,74L1247,75L1258,75L1258,76L1280,76L1280,77L1295,77L1295,78L1300,78L1300,79L1310,79L1310,81L1327,81L1327,82L1340,82L1340,83L1346,83L1346,84L1347,84L1347,85L1350,85L1350,85L1352,85L1352,85L1374,85L1374,85L1376,85L1376,86L1378,86L1378,87L1390,87L1390,88L1391,88L1391,88L1392,88L1392,87L1400,87L1400,88L1407,88L1407,89L1408,89L1408,90L1417,90L1417,89L1433,89L1433,90L1443,90L1443,91L1470,91L1470,92L1485,92L1485,93L1493,93L1493,94L1494,94L1494,95L1506,95L1506,96L1544,96L1544,97L1552,97L1552,99L1556,99L1556,100L1562,100L1562,101L1580,101L1580,103L1600,103L1600,103L1602,103L1602,104L1611,104L1611,104L1621,104L1621,105L1629,105L1629,106L1631,106L1631,106L1637,106L1637,106L1643,106L1643,107L1644,107L1644,108L1645,108L1645,108L1672,108L1672,109L1688,109L1688,111L1691,111L1691,112L1697,112L1697,113L1706,113L1706,114L1707,114L1707,114L1709,114L1709,115L1710,115L1710,116L1711,116L1711,117L1718,117L1718,118L1721,118L1721,119L1722,119L1722,120L1723,120L1723,120L1728,120L1728,121L1733,121L1733,121L1742,121L1742,122L1750,122L1750,123L1752,123L1752,124L1764,124L1764,125L1765,125L1765,126L1768,126L1768,127L1771,127L1771,128L1781,128L1781,129L1782,129L1782,130L1785,130L1785,131L1792,131L1792,132L1793,132L1793,133L1794,133L1794,134L1795,134" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L7,0L7,7L8,7L8,8L22,8L22,9L25,9L25,10L27,10L27,11L28,11L28,12L29,12L29,13L42,13L42,14L44,14L44,15L47,15L47,15L48,15L48,14L79,14L79,16L88,16L88,16L102,16L102,17L119,17L119,18L122,18L122,19L157,19L157,20L161,20L161,21L165,21L165,22L179,22L179,23L185,23L185,24L191,24L191,24L215,24L215,25L229,25L229,26L234,26L234,26L242,26L242,26L263,26L263,27L341,27L341,32L342,32L342,33L351,33L351,34L362,34L362,35L365,35L365,37L386,37L386,38L398,38L398,39L401,39L401,40L404,40L404,39L417,39L417,40L436,40L436,41L440,41L440,42L441,42L441,43L452,43L452,44L455,44L455,45L467,45L467,46L470,46L470,47L475,47L475,48L482,48L482,49L484,49L484,50L491,50L491,51L493,51L493,52L498,52L498,53L500,53L500,54L501,54L501,55L505,55L505,56L508,56L508,57L523,57L523,58L538,58L538,59L546,59L546,60L577,60L577,61L578,61L578,62L579,62L579,63L582,63L582,64L584,64L584,65L612,65L612,66L614,66L614,67L616,67L616,68L620,68L620,70L623,70L623,71L624,71L624,72L625,72L625,73L635,73L635,75L653,75L653,76L655,76L655,77L658,77L658,78L660,78L660,80L662,80L662,80L665,80L665,82L667,82L667,83L672,83L672,85L680,85L680,86L681,86L681,87L685,87L685,88L688,88L688,89L691,89L691,90L696,90L696,91L706,91L706,92L708,92L708,93L710,93L710,94L711,94L711,95L713,95L713,96L714,96L714,97L736,97L736,98L743,98L743,99L760,99L760,100L764,100L764,101L768,101L768,102L772,102L772,103L778,103L778,104L791,104L791,105L796,105L796,106L801,106L801,107L809,107L809,108L810,108L810,108L815,108L815,108L828,108L828,109L833,109L833,110L835,110L835,112L839,112L839,114L840,114L840,115L849,115L849,116L857,116L857,117L858,117L858,116L862,116L862,117L867,117L867,118L871,118L871,119L882,119L882,120L883,120L883,121L887,121L887,121L891,121L891,122L893,122L893,123L896,123L896,124L897,124L897,125L908,125L908,124L916,124L916,123L917,123L917,124L918,124L918,125L925,125L925,126L927,126L927,127L932,127L932,128L939,128L939,129L940,129L940,130L942,130L942,131L952,131L952,132L966,132L966,133L973,133L973,134L976,134L976,134L996,134L996,135L1007,135L1007,136L1048,136L1048,137L1060,137L1060,137L1081,137L1081,138L1087,138L1087,139L1093,139L1093,141L1099,141L1099,142L1107,142L1107,143L1134,143L1134,144L1150,144L1150,143L1163,143L1163,144L1188,144L1188,145L1230,145L1230,146L1231,146L1231,147L1251,147L1251,148L1254,148L1254,149L1261,149L1261,150L1286,150L1286,151L1296,151L1296,152L1298,152L1298,153L1304,153L1304,154L1334,154L1334,154L1360,154L1360,156L1367,156L1367,157L1375,157L1375,158L1388,158L1388,159L1389,159L1389,158L1396,158L1396,159L1401,159L1401,160L1405,160L1405,161L1407,161L1407,162L1417,162L1417,163L1429,163L1429,163L1437,163L1437,164L1457,164L1457,164L1462,164L1462,165L1463,165L1463,166L1478,166L1478,166L1490,166L1490,167L1496,167L1496,168L1499,168L1499,169L1505,169L1505,170L1508,170L1508,171L1536,171L1536,171L1542,171L1542,172L1544,172L1544,173L1554,173L1554,174L1555,174L1555,175L1559,175L1559,176L1565,176L1565,177L1567,177L1567,178L1570,178L1570,178L1575,178L1575,179L1584,179L1584,180L1593,180L1593,182L1598,182L1598,183L1599,183L1599,185L1602,185L1602,185L1605,185L1605,186L1609,186L1609,186L1615,186L1615,185L1620,185L1620,184L1622,184L1622,185L1623,185L1623,186L1625,186L1625,186L1626,186L1626,187L1627,187L1627,187L1631,187L1631,188L1632,188L1632,189L1634,189L1634,190L1639,190L1639,191L1643,191L1643,192L1679,192L1679,193L1700,193L1700,193L1706,193L1706,193L1711,193L1711,195L1718,195L1718,196L1723,196L1723,196L1727,196L1727,197L1731,197L1731,197L1733,197L1733,198L1735,198L1735,199L1748,199L1748,200L1756,200L1756,200L1758,200L1758,201L1767,201L1767,202L1778,202L1778,203L1782,203L1782,204L1785,204L1785,205L1795,205" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L7,0L7,11L23,11L23,11L24,11L24,12L84,12L84,13L91,13L91,13L98,13L98,14L99,14L99,15L103,15L103,16L113,16L113,17L122,17L122,18L139,18L139,19L159,19L159,19L167,19L167,20L170,20L170,21L180,21L180,22L182,22L182,22L336,22L336,23L368,23L368,24L439,24L439,25L444,25L444,26L454,26L454,27L455,27L455,28L475,28L475,29L491,29L491,29L495,29L495,30L497,30L497,31L546,31L546,32L577,32L577,33L605,33L605,34L612,34L612,34L616,34L616,35L617,35L617,36L635,36L635,37L648,37L648,38L660,38L660,39L664,39L664,39L675,39L675,40L676,40L676,41L710,41L710,42L729,42L729,43L732,43L732,44L778,44L778,45L802,45L802,44L819,44L819,45L867,45L867,45L871,45L871,46L882,46L882,47L911,47L911,49L918,49L918,50L925,50L925,51L960,51L960,52L972,52L972,53L1017,53L1017,54L1023,54L1023,55L1028,55L1028,56L1134,56L1134,57L1141,57L1141,58L1171,58L1171,58L1193,58L1193,57L1280,57L1280,58L1291,58L1291,59L1296,59L1296,59L1311,59L1311,60L1313,60L1313,59L1324,59L1324,59L1326,59L1326,59L1337,59L1337,60L1343,60L1343,61L1345,61L1345,62L1399,62L1399,63L1429,63L1429,63L1443,63L1443,64L1472,64L1472,64L1488,64L1488,65L1497,65L1497,66L1510,66L1510,67L1513,67L1513,69L1531,69L1531,71L1536,71L1536,72L1551,72L1551,73L1559,73L1559,74L1566,74L1566,75L1567,75L1567,77L1569,77L1569,78L1572,78L1572,79L1575,79L1575,79L1576,79L1576,79L1581,79L1581,79L1587,79L1587,79L1597,79L1597,79L1617,79L1617,80L1621,80L1621,80L1627,80L1627,81L1631,81L1631,81L1632,81L1632,81L1643,81L1643,82L1645,82L1645,82L1662,82L1662,83L1706,83L1706,83L1723,83L1723,84L1726,84L1726,84L1745,84L1745,84L1748,84L1748,84L1752,84L1752,85L1755,85L1755,86L1760,86L1760,86L1768,86L1768,87L1773,87L1773,87L1774,87L1774,87L1779,87L1779,88L1782,88L1782,89L1784,89L1784,89L1786,89L1786,89L1788,89L1788,89L1795,89" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L7,0L7,1L31,1L31,1L63,1L63,1L119,1L119,2L1703,2L1703,2L1737,2L1737,2L1738,2L1738,2L1744,2L1744,1L1758,1L1758,2L1795,2" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0q5njgmq</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L7,0L7,1L13,1L13,2L43,2L43,2L285,2L285,2L549,2L549,2L1737,2L1737,3L1738,3L1738,3L1744,3L1744,2L1759,2L1759,1L1795,1" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.4lxp7e2q</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L7,0L7,1L14,1L14,1L20,1L20,1L65,1L65,1L123,1L123,2L159,2L159,3L1772,3L1772,3L1795,3" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.jq606z3q</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L7,0L7,1L19,1L19,1L40,1L40,1L117,1L117,1L778,1L778,2L936,2L936,2L1083,2L1083,3L1118,3L1118,3L1283,3L1283,3L1558,3L1558,3L1704,3L1704,3L1734,3L1734,4L1746,4L1746,4L1756,4L1756,4L1795,4" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.rqvp5e7q</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L8,0L8,1L95,1L95,1L122,1L122,1L232,1L232,1L584,1L584,1L728,1L728,1L1136,1L1136,2L1750,2L1750,2L1751,2L1751,2L1795,2" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.z19mo80l</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L13,0L13,5L27,5L27,6L60,6L60,6L62,6L62,5L118,5L118,5L121,5L121,6L128,6L128,6L453,6L453,5L458,5L458,5L512,5L512,5L580,5L580,6L598,6L598,7L616,7L616,7L617,7L617,8L638,8L638,9L644,9L644,10L674,10L674,10L679,10L679,11L747,11L747,11L753,11L753,11L860,11L860,11L912,11L912,12L987,12L987,12L1181,12L1181,12L1220,12L1220,13L1277,13L1277,14L1280,14L1280,15L1316,15L1316,15L1384,15L1384,15L1388,15L1388,15L1411,15L1411,15L1429,15L1429,15L1545,15L1545,14L1596,14L1596,14L1600,14L1600,14L1633,14L1633,14L1635,14L1635,14L1690,14L1690,14L1694,14L1694,14L1702,14L1702,14L1730,14L1730,14L1731,14L1731,14L1750,14L1750,15L1758,15L1758,16L1765,16L1765,16L1779,16L1779,16L1792,16L1792,16L1795,16" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L13,0L13,3L20,3L20,3L23,3L23,3L45,3L45,3L49,3L49,3L122,3L122,4L155,4L155,5L233,5L233,6L515,6L515,6L579,6L579,7L580,7L580,8L581,8L581,7L607,7L607,7L616,7L616,7L621,7L621,8L712,8L712,9L717,9L717,9L771,9L771,10L773,10L773,11L778,11L778,12L886,12L886,12L912,12L912,13L917,13L917,14L949,14L949,14L1086,14L1086,14L1107,14L1107,15L1158,15L1158,16L1220,16L1220,17L1308,17L1308,17L1360,17L1360,17L1379,17L1379,17L1393,17L1393,18L1411,18L1411,18L1429,18L1429,18L1517,18L1517,17L1521,17L1521,18L1523,18L1523,18L1557,18L1557,18L1585,18L1585,18L1623,18L1623,18L1624,18L1624,18L1633,18L1633,18L1635,18L1635,18L1702,18L1702,18L1710,18L1710,18L1712,18L1712,18L1722,18L1722,19L1725,19L1725,19L1727,19L1727,19L1728,19L1728,19L1730,19L1730,19L1737,19L1737,19L1740,19L1740,19L1748,19L1748,19L1755,19L1755,19L1758,19L1758,19L1776,19L1776,19L1779,19L1779,19L1793,19L1793,19L1795,19" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path dtabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L18,0L18,4L20,4L20,4L27,4L27,4L46,4L46,4L121,4L121,5L128,5L128,6L592,6L592,6L616,6L616,6L658,6L658,7L764,7L764,7L771,7L771,8L830,8L830,8L888,8L888,8L912,8L912,9L1023,9L1023,10L1070,10L1070,10L1092,10L1092,11L1220,11L1220,11L1384,11L1384,11L1581,11L1581,11L1600,11L1600,11L1601,11L1601,11L1602,11L1602,11L1633,11L1633,11L1698,11L1698,11L1702,11L1702,11L1727,11L1727,11L1732,11L1732,11L1733,11L1733,11L1738,11L1738,11L1742,11L1742,11L1759,11L1759,11L1795,11" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L23,0L23,7L27,7L27,8L28,8L28,7L30,7L30,8L31,8L31,7L38,7L38,11L43,11L43,12L44,12L44,11L110,11L110,12L124,12L124,11L172,11L172,12L259,12L259,14L260,14L260,13L385,13L385,12L473,12L473,13L488,13L488,12L501,12L501,13L511,13L511,14L514,14L514,15L539,15L539,16L570,16L570,15L585,15L585,16L616,16L616,16L620,16L620,17L758,17L758,18L771,18L771,19L832,19L832,20L883,20L883,21L1024,21L1024,22L1091,22L1091,22L1385,22L1385,23L1623,23L1623,24L1795,24" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L23,0L23,6L24,6L24,5L37,5L37,5L53,5L53,5L118,5L118,5L220,5L220,6L501,6L501,7L511,7L511,8L578,8L578,8L676,8L676,9L739,9L739,9L772,9L772,10L815,10L815,11L825,11L825,12L843,12L843,13L851,13L851,14L1028,14L1028,15L1051,15L1051,16L1097,16L1097,17L1161,17L1161,18L1186,18L1186,19L1204,19L1204,20L1205,20L1205,19L1279,19L1279,20L1290,20L1290,21L1325,21L1325,22L1411,22L1411,23L1413,23L1413,24L1429,24L1429,25L1437,25L1437,26L1438,26L1438,26L1559,26L1559,27L1595,27L1595,27L1657,27L1657,28L1667,28L1667,29L1704,29L1704,28L1712,28L1712,28L1714,28L1714,29L1715,29L1715,30L1726,30L1726,30L1727,30L1727,31L1733,31L1733,30L1741,30L1741,31L1745,31L1745,31L1780,31L1780,33L1786,33L1786,34L1788,34L1788,35L1794,35L1794,35L1795,35" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L25,0L25,8L27,8L27,7L32,7L32,6L46,6L46,6L52,6L52,5L229,5L229,6L500,6L500,7L592,7L592,7L675,7L675,7L770,7L770,8L771,8L771,9L815,9L815,10L886,10L886,11L1187,11L1187,12L1278,12L1278,13L1279,13L1279,14L1288,14L1288,15L1326,15L1326,16L1337,16L1337,17L1375,17L1375,16L1383,16L1383,17L1393,17L1393,17L1437,17L1437,18L1513,18L1513,19L1514,19L1514,20L1540,20L1540,21L1544,21L1544,22L1546,22L1546,23L1547,23L1547,24L1549,24L1549,25L1555,25L1555,26L1562,26L1562,27L1566,27L1566,28L1581,28L1581,29L1590,29L1590,30L1596,30L1596,31L1599,31L1599,32L1601,32L1601,32L1607,32L1607,31L1614,31L1614,31L1615,31L1615,31L1621,31L1621,30L1640,30L1640,30L1645,30L1645,30L1648,30L1648,30L1658,30L1658,31L1686,31L1686,31L1707,31L1707,32L1709,32L1709,32L1710,32L1710,33L1713,33L1713,34L1714,34L1714,35L1715,35L1715,35L1720,35L1720,35L1723,35L1723,36L1726,36L1726,36L1727,36L1727,37L1728,37L1728,38L1729,38L1729,38L1742,38L1742,38L1745,38L1745,38L1747,38L1747,39L1750,39L1750,40L1751,40L1751,41L1752,41L1752,42L1758,42L1758,43L1761,43L1761,44L1763,44L1763,45L1764,45L1764,46L1780,46L1780,47L1787,47L1787,48L1792,48L1792,48L1793,48L1793,47L1795,47" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L43,0L43,5L80,5L80,6L118,6L118,6L736,6L736,6L824,6L824,7L898,7L898,8L899,8L899,9L930,9L930,10L1093,10L1093,11L1245,11L1245,12L1255,12L1255,13L1288,13L1288,13L1425,13L1425,13L1435,13L1435,13L1437,13L1437,14L1523,14L1523,14L1525,14L1525,14L1585,14L1585,15L1586,15L1586,14L1596,14L1596,14L1698,14L1698,14L1707,14L1707,14L1717,14L1717,14L1718,14L1718,14L1723,14L1723,14L1726,14L1726,14L1727,14L1727,14L1728,14L1728,14L1729,14L1729,13L1731,13L1731,12L1742,12L1742,12L1756,12L1756,13L1764,13L1764,14L1766,14L1766,14L1780,14L1780,15L1788,15L1788,16L1795,16" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L43,0L43,3L47,3L47,3L51,3L51,2L52,2L52,2L80,2L80,2L500,2L500,3L571,3L571,3L580,3L580,4L581,4L581,3L645,3L645,4L770,4L770,5L771,5L771,6L774,6L774,7L778,7L778,8L865,8L865,9L872,9L872,9L1018,9L1018,10L1135,10L1135,11L1280,11L1280,12L1285,12L1285,12L1287,12L1287,13L1308,13L1308,13L1403,13L1403,13L1411,13L1411,14L1429,14L1429,14L1437,14L1437,15L1476,15L1476,16L1478,16L1478,16L1497,16L1497,17L1502,17L1502,18L1592,18L1592,18L1596,18L1596,19L1604,19L1604,20L1606,20L1606,21L1621,21L1621,20L1645,20L1645,20L1690,20L1690,20L1706,20L1706,21L1712,21L1712,21L1715,21L1715,21L1726,21L1726,21L1728,21L1728,22L1729,22L1729,22L1736,22L1736,22L1745,22L1745,22L1750,22L1750,22L1751,22L1751,23L1758,23L1758,24L1762,24L1762,24L1764,24L1764,24L1780,24L1780,24L1786,24L1786,24L1787,24L1787,25L1795,25" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L58,0L58,2L59,2L59,1L98,1L98,2L104,2L104,1L659,1L659,1L664,1L664,1L1379,1L1379,2L1543,2L1543,2L1591,2L1591,2L1778,2L1778,2L1795,2" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.10v3wwpl</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L63,0L63,2L79,2L79,2L89,2L89,2L163,2L163,2L904,2L904,3L1045,3L1045,4L1090,4L1090,5L1136,5L1136,5L1244,5L1244,6L1434,6L1434,6L1541,6L1541,7L1583,7L1583,8L1589,8L1589,8L1656,8L1656,8L1726,8L1726,8L1758,8L1758,9L1762,9L1762,9L1773,9L1773,9L1795,9" tabindex="0">
						<title>l_r9gn1qpd-xd144xwd</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L63,0L63,1L106,1L106,1L737,1L737,1L787,1L787,2L1134,2L1134,3L1700,3L1700,3L1722,3L1722,3L1733,3L1733,3L1743,3L1743,2L1776,2L1776,2L1795,2" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0138n5dq</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L63,0L63,1L77,1L77,1L121,1L121,3L682,3L682,3L770,3L770,4L869,4L869,5L896,5L896,5L1287,5L1287,5L1584,5L1584,5L1606,5L1606,5L1705,5L1705,6L1706,6L1706,6L1727,6L1727,5L1738,5L1738,6L1739,6L1739,6L1744,6L1744,5L1749,5L1749,5L1776,5L1776,5L1795,5" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.814y0701</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L64,0L64,3L129,3L129,3L613,3L613,3L616,3L616,3L1151,3L1151,3L1219,3L1219,3L1287,3L1287,4L1385,4L1385,4L1402,4L1402,5L1429,5L1429,5L1589,5L1589,5L1600,5L1600,5L1620,5L1620,5L1704,5L1704,4L1772,4L1772,4L1779,4L1779,4L1795,4" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L66,0L66,1L119,1L119,2L137,2L137,2L1180,2L1180,2L1294,2L1294,2L1429,2L1429,2L1577,2L1577,2L1587,2L1587,2L1613,2L1613,2L1703,2L1703,2L1780,2L1780,2L1785,2L1785,2L1795,2" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21g8owxl</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L67,0L67,2L68,2L68,2L89,2L89,2L1342,2L1342,2L1648,2L1648,2L1723,2L1723,2L1733,2L1733,2L1761,2L1761,2L1777,2L1777,2L1795,2" tabindex="0">
						<title>l_o9xo3rp9-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L67,0L67,2L70,2L70,2L71,2L71,2L155,2L155,3L929,3L929,3L1630,3L1630,3L1772,3L1772,3L1795,3" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.ln8rzznl</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L68,0L68,2L188,2L188,3L200,3L200,4L350,4L350,4L370,4L370,5L665,5L665,5L1631,5L1631,5L1772,5L1772,5L1779,5L1779,5L1795,5" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.814y45w1</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L69,0L69,2L70,2L70,1L122,1L122,1L146,1L146,1L590,1L590,1L623,1L623,2L1554,2L1554,2L1777,2L1777,2L1779,2L1779,2L1795,2" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.lmozgg01</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L69,0L69,1L588,1L588,1L1503,1L1503,1L1508,1L1508,1L1590,1L1590,1L1693,1L1693,1L1787,1L1787,1L1795,1" tabindex="0">
						<title>l_495zlx39-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L70,0L70,3L159,3L159,3L228,3L228,4L615,4L615,5L652,5L652,6L786,6L786,7L834,7L834,8L842,8L842,9L850,9L850,10L880,10L880,11L881,11L881,10L1130,10L1130,10L1287,10L1287,11L1394,11L1394,12L1429,12L1429,13L1536,13L1536,15L1577,15L1577,16L1605,16L1605,17L1614,17L1614,18L1700,18L1700,18L1702,18L1702,17L1711,17L1711,17L1713,17L1713,17L1717,17L1717,17L1725,17L1725,17L1726,17L1726,16L1732,16L1732,16L1734,16L1734,16L1738,16L1738,15L1746,15L1746,14L1747,14L1747,14L1765,14L1765,14L1780,14L1780,14L1795,14" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyrgl</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L72,0L72,3L172,3L172,3L770,3L770,4L771,4L771,4L850,4L850,5L921,5L921,5L1188,5L1188,6L1286,6L1286,6L1375,6L1375,6L1429,6L1429,6L1437,6L1437,6L1607,6L1607,6L1624,6L1624,6L1681,6L1681,6L1702,6L1702,6L1718,6L1718,6L1735,6L1735,6L1780,6L1780,6L1795,6" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.xqkjmnnl</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L72,0L72,3L128,3L128,4L567,4L567,4L791,4L791,4L1385,4L1385,4L1429,4L1429,4L1502,4L1502,4L1507,4L1507,4L1515,4L1515,4L1525,4L1525,4L1591,4L1591,4L1612,4L1612,4L1701,4L1701,3L1702,3L1702,3L1737,3L1737,3L1780,3L1780,3L1795,3" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.p12dx07q</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L72,0L72,3L87,3L87,2L88,2L88,2L114,2L114,2L285,2L285,2L368,2L368,3L521,3L521,4L594,4L594,4L595,4L595,4L839,4L839,5L842,5L842,6L936,6L936,7L947,7L947,8L957,8L957,8L987,8L987,8L1057,8L1057,8L1429,8L1429,8L1493,8L1493,8L1505,8L1505,9L1536,9L1536,9L1554,9L1554,9L1593,9L1593,9L1664,9L1664,9L1668,9L1668,9L1680,9L1680,9L1695,9L1695,8L1698,8L1698,8L1703,8L1703,8L1727,8L1727,8L1750,8L1750,8L1761,8L1761,9L1775,9L1775,10L1780,10L1780,10L1795,10" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L72,0L72,5L98,5L98,5L121,5L121,7L122,7L122,6L172,6L172,7L612,7L612,8L616,8L616,9L635,9L635,10L647,10L647,11L661,11L661,12L665,12L665,13L676,13L676,14L679,14L679,14L741,14L741,15L768,15L768,16L780,16L780,16L816,16L816,17L833,17L833,18L857,18L857,19L869,19L869,21L883,21L883,22L937,22L937,22L966,22L966,22L979,22L979,23L984,23L984,24L1127,24L1127,25L1134,25L1134,26L1137,26L1137,27L1159,27L1159,28L1198,28L1198,29L1201,29L1201,30L1211,30L1211,29L1267,29L1267,30L1278,30L1278,31L1282,31L1282,32L1344,32L1344,33L1354,33L1354,35L1376,35L1376,35L1377,35L1377,36L1380,36L1380,37L1399,37L1399,38L1408,38L1408,39L1429,39L1429,40L1459,40L1459,41L1479,41L1479,42L1512,42L1512,42L1516,42L1516,43L1522,43L1522,44L1524,44L1524,45L1546,45L1546,46L1562,46L1562,47L1566,47L1566,48L1570,48L1570,49L1571,49L1571,50L1575,50L1575,51L1582,51L1582,52L1583,52L1583,53L1584,53L1584,53L1590,53L1590,53L1591,53L1591,53L1609,53L1609,54L1611,54L1611,54L1624,54L1624,53L1627,53L1627,54L1632,54L1632,55L1643,55L1643,56L1645,56L1645,56L1658,56L1658,56L1663,56L1663,56L1666,56L1666,57L1667,57L1667,57L1677,57L1677,58L1678,58L1678,58L1694,58L1694,58L1705,58L1705,59L1706,59L1706,59L1709,59L1709,60L1720,60L1720,61L1728,61L1728,62L1733,62L1733,61L1734,61L1734,61L1745,61L1745,62L1751,62L1751,63L1752,63L1752,64L1757,64L1757,65L1769,65L1769,66L1782,66L1782,67L1785,67L1785,67L1793,67L1793,67L1795,67" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L72,0L72,6L91,6L91,6L113,6L113,6L790,6L790,6L892,6L892,6L980,6L980,6L1134,6L1134,6L1385,6L1385,6L1429,6L1429,6L1478,6L1478,7L1579,7L1579,8L1585,8L1585,8L1595,8L1595,8L1606,8L1606,8L1609,8L1609,8L1612,8L1612,9L1632,9L1632,9L1643,9L1643,10L1651,10L1651,10L1675,10L1675,10L1702,10L1702,10L1707,10L1707,10L1715,10L1715,10L1739,10L1739,10L1751,10L1751,11L1753,11L1753,10L1768,10L1768,11L1778,11L1778,11L1782,11L1782,12L1789,12L1789,12L1795,12" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L72,0L72,7L98,7L98,7L121,7L121,8L167,8L167,9L173,9L173,11L336,11L336,12L402,12L402,13L434,13L434,14L498,14L498,15L526,15L526,16L554,16L554,17L616,17L616,18L626,18L626,19L635,19L635,20L648,20L648,21L651,21L651,22L661,22L661,23L663,23L663,24L678,24L678,24L687,24L687,25L735,25L735,26L736,26L736,27L742,27L742,28L747,28L747,28L809,28L809,28L816,28L816,29L830,29L830,30L842,30L842,31L869,31L869,33L883,33L883,34L906,34L906,35L951,35L951,36L958,36L958,36L967,36L967,38L983,38L983,39L1016,39L1016,40L1031,40L1031,41L1093,41L1093,42L1134,42L1134,43L1136,43L1136,44L1169,44L1169,45L1191,45L1191,46L1199,46L1199,46L1278,46L1278,47L1282,47L1282,48L1345,48L1345,48L1376,48L1376,48L1409,48L1409,47L1415,47L1415,48L1429,48L1429,48L1490,48L1490,49L1491,49L1491,49L1526,49L1526,50L1537,50L1537,51L1546,51L1546,52L1551,52L1551,53L1555,53L1555,54L1581,54L1581,55L1582,55L1582,56L1583,56L1583,57L1586,57L1586,57L1587,57L1587,57L1615,57L1615,57L1632,57L1632,58L1643,58L1643,59L1645,59L1645,60L1674,60L1674,60L1682,60L1682,60L1695,60L1695,61L1699,61L1699,61L1707,61L1707,61L1709,61L1709,62L1734,62L1734,62L1737,62L1737,63L1740,63L1740,63L1745,63L1745,63L1751,63L1751,64L1757,64L1757,65L1759,65L1759,65L1769,65L1769,66L1782,66L1782,67L1785,67L1785,67L1790,67L1790,67L1794,67L1794,68L1795,68" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L73,0L73,1L89,1L89,1L680,1L680,1L1136,1L1136,2L1234,2L1234,1L1343,1L1343,2L1394,2L1394,2L1403,2L1403,3L1541,3L1541,3L1616,3L1616,3L1617,3L1617,3L1691,3L1691,3L1692,3L1692,3L1722,3L1722,3L1723,3L1723,3L1746,3L1746,4L1758,4L1758,4L1785,4L1785,4L1788,4L1788,4L1795,4" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L73,0L73,1L588,1L588,1L1771,1L1771,1L1778,1L1778,1L1795,1" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.qvv3eeyq</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L77,0L77,6L86,6L86,7L120,7L120,8L166,8L166,7L197,7L197,8L231,8L231,9L232,9L232,8L233,8L233,9L340,9L340,10L421,10L421,12L423,12L423,11L450,11L450,12L453,12L453,13L515,13L515,14L552,14L552,15L584,15L584,15L608,15L608,15L611,15L611,14L620,14L620,15L627,15L627,16L637,16L637,17L646,17L646,16L660,16L660,17L664,17L664,16L666,16L666,17L668,17L668,18L1731,18L1731,18L1773,18L1773,18L1778,18L1778,18L1779,18L1779,18L1795,18" tabindex="0">
						<title>xd17x94d-9l71pv4l.zqo20y2l</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L77,0L77,5L131,5L131,5L155,5L155,5L311,5L311,6L549,6L549,5L616,5L616,5L675,5L675,5L702,5L702,6L771,6L771,7L882,7L882,8L938,8L938,8L956,8L956,9L1023,9L1023,10L1062,10L1062,11L1220,11L1220,12L1282,12L1282,13L1376,13L1376,14L1429,14L1429,14L1522,14L1522,15L1545,15L1545,14L1555,14L1555,15L1620,15L1620,15L1621,15L1621,15L1622,15L1622,15L1633,15L1633,16L1643,16L1643,16L1650,16L1650,16L1695,16L1695,15L1713,15L1713,15L1734,15L1734,15L1736,15L1736,15L1755,15L1755,15L1779,15L1779,15L1795,15" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L81,0L81,1L338,1L338,1L703,1L703,1L1372,1L1372,2L1702,2L1702,2L1713,2L1713,2L1795,2" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.5ler7m5q</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,0L81,0L81,2L92,2L92,2L554,2L554,2L701,2L701,2L1633,2L1633,2L1743,2L1743,2L1764,2L1764,3L1776,3L1776,3L1795,3" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.81wpx5oq</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,0L83,0L83,1L280,1L280,1L313,1L313,1L897,1L897,1L1134,1L1134,1L1468,1L1468,1L1578,1L1578,1L1699,1L1699,1L1732,1L1732,1L1749,1L1749,1L1777,1L1777,1L1795,1" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.zqop6rp1</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,0L88,0L88,1L91,1L91,2L92,2L92,4L159,4L159,5L564,5L564,5L1719,5L1719,5L1743,5L1743,5L1752,5L1752,6L1795,6" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.5lmk0gjq</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,0L89,0L89,1L94,1L94,1L259,1L259,1L676,1L676,1L1092,1L1092,2L1140,2L1140,1L1231,1L1231,1L1279,1L1279,1L1280,1L1280,1L1349,1L1349,1L1658,1L1658,1L1728,1L1728,1L1730,1L1730,1L1795,1" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.810zkwwq</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,0L89,0L89,1L188,1L188,2L203,2L203,2L225,2L225,2L278,2L278,2L328,2L328,3L657,3L657,3L931,3L931,3L935,3L935,3L975,3L975,4L1027,4L1027,5L1086,5L1086,6L1139,6L1139,5L1158,5L1158,5L1159,5L1159,5L1258,5L1258,5L1282,5L1282,5L1494,5L1494,5L1569,5L1569,5L1574,5L1574,5L1584,5L1584,5L1591,5L1591,5L1724,5L1724,5L1730,5L1730,5L1795,5" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.4qypgj4q</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,0L94,0L94,1L666,1L666,1L1579,1L1579,1L1592,1L1592,1L1795,1" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.le2dmv6l</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,0L94,0L94,1L235,1L235,1L278,1L278,1L1095,1L1095,2L1137,2L1137,2L1140,2L1140,1L1233,1L1233,1L1254,1L1254,1L1260,1L1260,1L1284,1L1284,1L1308,1L1308,1L1349,1L1349,1L1387,1L1387,1L1574,1L1574,1L1728,1L1728,1L1783,1L1783,1L1795,1" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.9qj0kxel</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,0L94,0L94,2L224,2L224,2L259,2L259,2L937,2L937,2L1027,2L1027,3L1086,3L1086,4L1140,4L1140,3L1253,3L1253,3L1283,3L1283,3L1284,3L1284,3L1349,3L1349,3L1492,3L1492,3L1621,3L1621,3L1728,3L1728,3L1795,3" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.mlnwjz0l</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path d="M0,0L98,0L98,2L493,2L493,2L1136,2L1136,2L1589,2L1589,2L1795,2" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.z19md2jl</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,0L101,0L101,1L496,1L496,1L597,1L597,1L1507,1L1507,1L1553,1L1553,1L1589,1L1589,1L1750,1L1750,1L1795,1" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.1w43556q</title>
					</path>
				</g>
				<g style="--index: 54;">
					<path d="M0,0L106,0L106,2L128,2L128,3L450,3L450,3L881,3L881,3L1429,3L1429,3L1555,3L1555,4L1567,4L1567,5L1577,5L1577,6L1591,6L1591,7L1603,7L1603,7L1606,7L1606,7L1607,7L1607,6L1702,6L1702,5L1725,5L1725,5L1750,5L1750,5L1780,5L1780,6L1795,6" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6e0q</title>
					</path>
				</g>
				<g style="--index: 55;">
					<path d="M0,0L106,0L106,1L770,1L770,2L887,2L887,2L1086,2L1086,2L1284,2L1284,2L1377,2L1377,2L1429,2L1429,2L1558,2L1558,3L1610,3L1610,3L1626,3L1626,3L1703,3L1703,3L1719,3L1719,3L1724,3L1724,2L1725,2L1725,2L1750,2L1750,2L1780,2L1780,2L1795,2" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.gq7jzvnq</title>
					</path>
				</g>
				<g style="--index: 56;">
					<path d="M0,0L114,0L114,1L155,1L155,1L488,1L488,1L903,1L903,1L1407,1L1407,1L1429,1L1429,1L1558,1L1558,2L1587,2L1587,3L1600,3L1600,3L1623,3L1623,3L1702,3L1702,3L1715,3L1715,3L1716,3L1716,3L1795,3" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6ejq</title>
					</path>
				</g>
				<g style="--index: 57;">
					<path d="M0,0L119,0L119,3L128,3L128,3L581,3L581,3L588,3L588,3L615,3L615,4L913,4L913,4L1086,4L1086,5L1397,5L1397,6L1424,6L1424,6L1429,6L1429,6L1464,6L1464,6L1555,6L1555,7L1599,7L1599,8L1624,8L1624,7L1645,7L1645,8L1702,8L1702,7L1714,7L1714,7L1725,7L1725,6L1726,6L1726,6L1750,6L1750,6L1780,6L1780,7L1795,7" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
				</g>
				<g style="--index: 58;">
					<path d="M0,0L128,0L128,4L605,4L605,4L887,4L887,4L935,4L935,5L1284,5L1284,5L1290,5L1290,6L1376,6L1376,7L1388,7L1388,7L1429,7L1429,7L1513,7L1513,8L1528,8L1528,9L1558,9L1558,10L1586,10L1586,10L1644,10L1644,10L1645,10L1645,11L1702,11L1702,10L1703,10L1703,10L1725,10L1725,9L1775,9L1775,9L1776,9L1776,9L1780,9L1780,9L1795,9" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.5q86rxr1</title>
					</path>
				</g>
				<g style="--index: 59;">
					<path d="M0,0L128,0L128,4L488,4L488,4L600,4L600,4L898,4L898,4L1309,4L1309,5L1429,5L1429,6L1547,6L1547,7L1558,7L1558,8L1585,8L1585,9L1628,9L1628,9L1697,9L1697,9L1702,9L1702,8L1713,8L1713,8L1725,8L1725,7L1795,7" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21dzoj3l</title>
					</path>
				</g>
				<g style="--index: 60;">
					<path d="M0,0L129,0L129,2L164,2L164,2L1334,2L1334,3L1590,3L1590,3L1692,3L1692,3L1795,3" tabindex="0">
						<title>l_o9xo3rp9-xd144xwd</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
