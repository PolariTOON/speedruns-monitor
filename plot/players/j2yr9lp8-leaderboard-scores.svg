<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player j2yr9lp8</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2020-08-30</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-30</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">275</text>
		</svg>
		<svg viewBox="0 0 1857 275" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 275) scale(1 -1)" style="--count: 46;">
				<g>
					<rect x="0" y="0" width="1857" height="275"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,10L2,10L2,9L31,9L31,10L85,10L85,11L111,11L111,12L117,12L117,12L134,12L134,13L160,13L160,13L181,13L181,15L209,15L209,14L213,14L213,15L229,15L229,16L235,16L235,18L398,18L398,19L464,19L464,20L496,20L496,21L560,21L560,22L588,22L588,23L616,23L616,24L678,24L678,25L688,25L688,26L697,26L697,27L710,27L710,28L713,28L713,29L723,29L723,30L725,30L725,31L740,31L740,32L749,32L749,33L797,33L797,34L798,34L798,35L804,35L804,36L809,36L809,37L822,37L822,36L871,36L871,37L878,37L878,38L892,38L892,39L904,39L904,40L931,40L931,42L945,42L945,43L968,43L968,44L1013,44L1013,45L1020,45L1020,46L1029,46L1029,48L1045,48L1045,49L1078,49L1078,50L1093,50L1093,51L1155,51L1155,52L1196,52L1196,53L1198,53L1198,54L1231,54L1231,55L1253,55L1253,56L1261,56L1261,57L1340,57L1340,58L1344,58L1344,59L1407,59L1407,60L1438,60L1438,61L1477,61L1477,62L1491,62L1491,63L1552,63L1552,64L1553,64L1553,65L1588,65L1588,66L1599,66L1599,67L1608,67L1608,68L1613,68L1613,69L1617,69L1617,70L1643,70L1643,71L1644,71L1644,72L1645,72L1645,73L1648,73L1648,74L1649,74L1649,75L1677,75L1677,75L1694,75L1694,76L1705,76L1705,77L1707,77L1707,78L1736,78L1736,79L1744,79L1744,80L1757,80L1757,81L1761,81L1761,82L1765,82L1765,81L1769,81L1769,82L1771,82L1771,83L1796,83L1796,84L1799,84L1799,85L1802,85L1802,86L1807,86L1807,87L1813,87L1813,88L1819,88L1819,89L1821,89L1821,90L1831,90L1831,91L1838,91L1838,90L1844,90L1844,91L1847,91L1847,92L1852,92L1852,92L1854,92L1854,91L1856,91L1856,92L1857,92" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L0,0L0,2L58,2L58,2L71,2L71,1L82,1L82,1L83,1L83,4L84,4L84,3L168,3L168,4L643,4L643,5L832,5L832,6L949,6L949,6L1148,6L1148,7L1346,7L1346,8L1439,8L1439,9L1491,9L1491,10L1620,10L1620,11L1672,11L1672,12L1688,12L1688,13L1765,13L1765,14L1781,14L1781,14L1785,14L1785,13L1787,13L1787,13L1812,13L1812,14L1842,14L1842,15L1857,15" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.gq7jzvnq</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L0,0L0,7L31,7L31,7L85,7L85,8L125,8L125,8L134,8L134,9L160,9L160,9L184,9L184,8L234,8L234,12L511,12L511,12L674,12L674,13L678,13L678,14L697,14L697,15L709,15L709,16L723,16L723,17L727,17L727,18L738,18L738,19L741,19L741,20L803,20L803,21L830,21L830,22L842,22L842,22L878,22L878,23L895,23L895,24L919,24L919,25L931,25L931,27L945,27L945,28L999,28L999,29L1028,29L1028,30L1041,30L1041,31L1046,31L1046,32L1189,32L1189,33L1196,33L1196,34L1199,34L1199,35L1221,35L1221,36L1260,36L1260,37L1263,37L1263,38L1329,38L1329,39L1340,39L1340,40L1344,40L1344,41L1406,41L1406,42L1416,42L1416,44L1438,44L1438,45L1439,45L1439,46L1442,46L1442,47L1461,47L1461,48L1470,48L1470,49L1471,49L1471,48L1491,48L1491,50L1521,50L1521,51L1541,51L1541,52L1574,52L1574,53L1578,53L1578,54L1584,54L1584,55L1586,55L1586,56L1608,56L1608,57L1624,57L1624,58L1628,58L1628,59L1632,59L1632,60L1633,60L1633,61L1637,61L1637,62L1644,62L1644,63L1645,63L1645,64L1646,64L1646,65L1652,65L1652,66L1653,66L1653,67L1671,67L1671,68L1673,68L1673,69L1681,69L1681,68L1689,68L1689,69L1694,69L1694,70L1705,70L1705,71L1707,71L1707,72L1720,72L1720,73L1725,73L1725,73L1728,73L1728,74L1729,74L1729,75L1736,75L1736,74L1739,74L1739,75L1740,75L1740,75L1756,75L1756,76L1767,76L1767,77L1768,77L1768,78L1771,78L1771,79L1782,79L1782,80L1790,80L1790,81L1796,81L1796,83L1807,83L1807,84L1813,84L1813,85L1814,85L1814,86L1818,86L1818,85L1819,85L1819,86L1822,86L1822,85L1831,85L1831,86L1838,86L1838,85L1844,85L1844,86L1847,86L1847,87L1853,87L1853,86L1854,86L1854,85L1855,85L1855,86L1857,86" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L82,0L82,7L85,7L85,8L107,8L107,9L111,9L111,9L184,9L184,10L209,10L209,11L295,11L295,12L577,12L577,13L641,13L641,14L642,14L642,15L669,15L669,17L671,17L671,16L676,16L676,17L678,17L678,18L683,18L683,19L774,19L774,20L779,20L779,21L833,21L833,22L835,22L835,23L840,23L840,24L948,24L948,24L974,24L974,25L979,25L979,26L1011,26L1011,27L1148,27L1148,28L1169,28L1169,29L1220,29L1220,30L1282,30L1282,31L1370,31L1370,32L1422,32L1422,33L1441,33L1441,34L1455,34L1455,35L1473,35L1473,36L1491,36L1491,37L1583,37L1583,39L1585,39L1585,40L1619,40L1619,41L1647,41L1647,42L1685,42L1685,43L1686,43L1686,44L1695,44L1695,45L1697,45L1697,46L1747,46L1747,45L1764,45L1764,46L1772,46L1772,47L1774,47L1774,48L1784,48L1784,49L1787,49L1787,50L1789,50L1789,51L1790,51L1790,52L1792,52L1792,53L1798,53L1798,51L1799,51L1799,51L1800,51L1800,50L1802,50L1802,51L1804,51L1804,50L1810,50L1810,51L1817,51L1817,52L1820,52L1820,53L1838,53L1838,54L1841,54L1841,55L1855,55L1855,56L1857,56" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L82,0L82,4L83,4L83,5L87,5L87,6L123,6L123,6L180,6L180,7L190,7L190,8L549,8L549,8L667,8L667,9L949,9L949,9L997,9L997,10L1346,10L1346,11L1352,11L1352,12L1438,12L1438,13L1450,13L1450,14L1491,14L1491,15L1575,15L1575,16L1590,16L1590,17L1620,17L1620,18L1648,18L1648,19L1706,19L1706,20L1707,20L1707,21L1764,21L1764,23L1765,23L1765,22L1837,22L1837,23L1838,23L1838,24L1842,24L1842,25L1857,25" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.5q86rxr1</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L82,0L82,4L85,4L85,5L105,5L105,6L109,6L109,7L113,7L113,6L114,6L114,5L551,5L551,8L562,8L562,9L633,9L633,10L634,10L634,9L635,9L635,10L642,10L642,11L664,11L664,10L666,10L666,11L707,11L707,12L832,12L832,13L833,13L833,14L836,14L836,15L840,15L840,16L927,16L927,17L934,17L934,17L1080,17L1080,18L1197,18L1197,19L1342,19L1342,20L1347,20L1347,21L1349,21L1349,22L1370,22L1370,23L1465,23L1465,24L1473,24L1473,25L1491,25L1491,26L1499,26L1499,27L1538,27L1538,28L1540,28L1540,29L1559,29L1559,30L1564,30L1564,31L1654,31L1654,32L1658,32L1658,33L1666,33L1666,34L1668,34L1668,35L1707,35L1707,36L1752,36L1752,37L1768,37L1768,38L1774,38L1774,39L1775,39L1775,37L1777,37L1777,37L1788,37L1788,38L1790,38L1790,39L1791,39L1791,40L1798,40L1798,41L1804,41L1804,40L1807,40L1807,41L1812,41L1812,43L1813,43L1813,44L1820,44L1820,46L1824,46L1824,46L1826,46L1826,48L1838,48L1838,47L1842,47L1842,48L1848,48L1848,49L1849,49L1849,50L1857,50" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L82,0L82,11L89,11L89,11L175,11L175,12L178,12L178,11L186,11L186,13L208,13L208,13L551,13L551,14L583,14L583,15L609,15L609,16L636,16L636,16L637,16L637,17L678,17L678,18L696,18L696,19L698,19L698,20L702,20L702,21L704,21L704,22L736,22L736,23L766,23L766,24L813,24L813,25L820,25L820,26L832,26L832,27L884,27L884,28L896,28L896,29L937,29L937,30L943,30L943,31L946,31L946,31L953,31L953,32L962,32L962,33L975,33L975,34L1004,34L1004,35L1016,35L1016,36L1085,36L1085,37L1109,37L1109,38L1118,38L1118,39L1154,39L1154,40L1157,40L1157,41L1159,41L1159,42L1200,42L1200,43L1282,43L1282,44L1309,44L1309,45L1311,45L1311,46L1325,46L1325,47L1341,47L1341,48L1342,48L1342,49L1359,49L1359,50L1364,50L1364,51L1368,51L1368,52L1416,52L1416,53L1435,53L1435,54L1445,54L1445,55L1468,55L1468,56L1473,56L1473,57L1491,57L1491,58L1539,58L1539,59L1540,59L1540,60L1576,60L1576,61L1606,61L1606,63L1614,63L1614,64L1616,64L1616,65L1627,65L1627,66L1633,66L1633,68L1635,68L1635,69L1637,69L1637,70L1644,70L1644,71L1646,71L1646,72L1656,72L1656,73L1660,73L1660,76L1661,76L1661,77L1665,77L1665,78L1675,78L1675,79L1683,79L1683,80L1692,80L1692,81L1695,81L1695,82L1705,82L1705,83L1710,83L1710,84L1749,84L1749,85L1753,85L1753,86L1754,86L1754,88L1758,88L1758,89L1759,89L1759,90L1765,90L1765,91L1769,91L1769,90L1772,90L1772,92L1778,92L1778,93L1786,93L1786,94L1787,94L1787,93L1798,93L1798,93L1800,93L1800,94L1804,94L1804,96L1808,96L1808,99L1809,99L1809,100L1812,100L1812,101L1820,101L1820,103L1827,103L1827,104L1832,104L1832,105L1842,105L1842,106L1847,106L1847,107L1853,107L1853,108L1857,108" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L82,0L82,9L89,9L89,10L108,10L108,9L183,9L183,9L549,9L549,12L654,12L654,13L678,13L678,14L720,14L720,15L826,15L826,15L829,15L829,14L833,14L833,15L892,15L892,16L950,16L950,17L974,17L974,18L1085,18L1085,19L1132,19L1132,19L1154,19L1154,20L1282,20L1282,21L1446,21L1446,22L1643,22L1643,23L1662,23L1662,23L1663,23L1663,23L1664,23L1664,24L1695,24L1695,25L1760,25L1760,25L1764,25L1764,25L1789,25L1789,27L1794,27L1794,27L1795,27L1795,27L1800,27L1800,27L1804,27L1804,28L1821,28L1821,29L1825,29L1825,28L1857,28" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L82,0L82,14L87,14L87,15L89,15L89,16L106,16L106,15L138,15L138,15L185,15L185,16L217,16L217,18L429,18L429,19L487,19L487,20L672,20L672,21L678,21L678,22L698,22L698,23L728,23L728,24L750,24L750,25L752,25L752,26L766,26L766,27L832,27L832,28L863,28L863,28L865,28L865,29L949,29L949,30L974,30L974,31L1094,31L1094,32L1111,32L1111,33L1154,33L1154,34L1208,34L1208,35L1282,35L1282,36L1342,36L1342,37L1351,37L1351,38L1382,38L1382,39L1435,39L1435,40L1436,40L1436,41L1445,41L1445,42L1491,42L1491,43L1504,43L1504,44L1567,44L1567,45L1616,45L1616,46L1628,46L1628,47L1629,47L1629,48L1632,48L1632,50L1639,50L1639,51L1644,51L1644,52L1654,52L1654,53L1673,53L1673,55L1674,55L1674,54L1695,54L1695,55L1696,55L1696,54L1719,54L1719,55L1744,55L1744,56L1754,56L1754,57L1760,57L1760,58L1774,58L1774,59L1784,59L1784,60L1785,60L1785,60L1786,60L1786,61L1788,61L1788,63L1789,63L1789,64L1792,64L1792,64L1793,64L1793,65L1795,65L1795,64L1801,64L1801,63L1805,63L1805,65L1812,65L1812,66L1813,66L1813,67L1848,67L1848,68L1857,68" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L82,0L82,18L85,18L85,19L86,19L86,20L87,20L87,20L88,20L88,19L89,19L89,20L105,20L105,21L126,21L126,22L153,22L153,22L162,22L162,23L166,23L166,24L180,24L180,26L181,26L181,25L182,25L182,25L195,25L195,26L202,26L202,27L205,27L205,28L217,28L217,28L219,28L219,29L265,29L265,30L322,30L322,29L330,29L330,30L414,30L414,31L473,31L473,34L493,34L493,35L500,35L500,36L513,36L513,37L553,37L553,38L559,38L559,40L562,40L562,41L564,41L564,42L572,42L572,43L585,43L585,44L593,44L593,45L609,45L609,46L614,46L614,48L617,48L617,49L643,49L643,50L665,50L665,51L670,51L670,52L672,52L672,53L675,53L675,54L676,54L676,54L678,54L678,55L685,55L685,56L693,56L693,57L697,57L697,58L698,58L698,59L709,59L709,60L713,60L713,61L716,61L716,62L719,62L719,63L720,63L720,64L722,64L722,65L724,65L724,66L725,66L725,67L783,67L783,68L787,68L787,69L797,69L797,70L803,70L803,71L810,71L810,70L818,70L818,71L825,71L825,72L833,72L833,73L859,73L859,74L863,74L863,75L865,75L865,76L878,76L878,77L880,77L880,78L924,78L924,79L929,79L929,80L930,80L930,81L931,81L931,82L937,82L937,83L945,83L945,84L947,84L947,85L949,85L949,85L953,85L953,86L957,86L957,87L960,87L960,88L965,88L965,89L967,89L967,90L970,90L970,91L986,91L986,92L987,92L987,94L993,94L993,96L997,96L997,97L998,97L998,98L1022,98L1022,100L1036,100L1036,101L1048,101L1048,102L1050,102L1050,103L1052,103L1052,104L1076,104L1076,105L1079,105L1079,106L1086,106L1086,108L1094,108L1094,109L1123,109L1123,110L1134,110L1134,111L1141,111L1141,112L1143,112L1143,113L1159,113L1159,114L1160,114L1160,115L1174,115L1174,116L1186,116L1186,117L1189,117L1189,119L1227,119L1227,118L1253,118L1253,119L1254,119L1254,121L1278,121L1278,122L1297,122L1297,123L1311,123L1311,124L1320,124L1320,125L1323,125L1323,126L1337,126L1337,127L1340,127L1340,128L1343,128L1343,129L1357,129L1357,130L1358,130L1358,132L1366,132L1366,133L1375,133L1375,135L1388,135L1388,136L1393,136L1393,137L1395,137L1395,138L1396,138L1396,139L1397,139L1397,140L1398,140L1398,141L1401,141L1401,142L1405,142L1405,143L1408,143L1408,144L1409,144L1409,145L1412,145L1412,147L1415,147L1415,148L1420,148L1420,149L1424,149L1424,150L1426,150L1426,151L1430,151L1430,152L1436,152L1436,154L1438,154L1438,155L1441,155L1441,156L1446,156L1446,157L1449,157L1449,158L1460,158L1460,159L1462,159L1462,161L1469,161L1469,162L1470,162L1470,164L1481,164L1481,165L1501,165L1501,166L1504,166L1504,167L1506,167L1506,166L1512,166L1512,166L1518,166L1518,168L1524,168L1524,169L1534,169L1534,169L1535,169L1535,170L1539,170L1539,171L1540,171L1540,172L1543,172L1543,173L1547,173L1547,174L1550,174L1550,176L1560,176L1560,177L1561,177L1561,178L1569,178L1569,179L1571,179L1571,180L1575,180L1575,181L1578,181L1578,182L1579,182L1579,184L1585,184L1585,185L1589,185L1589,186L1591,186L1591,188L1594,188L1594,190L1600,190L1600,192L1604,192L1604,193L1608,193L1608,194L1615,194L1615,196L1618,196L1618,197L1620,197L1620,196L1629,196L1629,197L1631,197L1631,198L1633,198L1633,199L1635,199L1635,200L1636,200L1636,201L1646,201L1646,202L1651,202L1651,203L1655,203L1655,203L1657,203L1657,204L1661,204L1661,205L1664,205L1664,206L1668,206L1668,207L1673,207L1673,208L1678,208L1678,208L1681,208L1681,209L1683,209L1683,210L1689,210L1689,211L1692,211L1692,212L1694,212L1694,213L1700,213L1700,214L1705,214L1705,215L1708,215L1708,216L1711,216L1711,217L1714,217L1714,219L1715,219L1715,220L1719,220L1719,221L1720,221L1720,223L1722,223L1722,224L1727,224L1727,225L1729,225L1729,226L1738,226L1738,228L1743,228L1743,229L1750,229L1750,230L1751,230L1751,232L1753,232L1753,231L1758,231L1758,233L1760,233L1760,233L1765,233L1765,235L1767,235L1767,235L1772,235L1772,236L1773,236L1773,237L1775,237L1775,238L1776,238L1776,239L1782,239L1782,240L1784,240L1784,241L1785,241L1785,242L1788,242L1788,243L1790,243L1790,244L1794,244L1794,245L1795,245L1795,247L1799,247L1799,248L1806,248L1806,251L1807,251L1807,252L1810,252L1810,253L1811,253L1811,255L1813,255L1813,256L1818,256L1818,257L1821,257L1821,258L1822,258L1822,259L1824,259L1824,261L1828,261L1828,262L1830,262L1830,263L1834,263L1834,264L1835,264L1835,265L1839,265L1839,266L1841,266L1841,267L1843,267L1843,268L1844,268L1844,270L1845,270L1845,271L1850,271L1850,272L1855,272L1855,273L1856,273L1856,274L1857,274L1857,275L1857,275" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L82,0L82,4L96,4L96,4L127,4L127,4L152,4L152,3L185,3L185,4L273,4L273,6L1834,6L1834,6L1857,6" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.jq606z3q</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L82,0L82,2L145,2L145,3L178,3L178,3L342,3L342,4L375,4L375,5L959,5L959,5L1196,5L1196,6L1530,6L1530,7L1640,7L1640,8L1761,8L1761,9L1794,9L1794,10L1811,10L1811,11L1827,11L1827,10L1839,10L1839,11L1857,11" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.zqop6rp1</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L82,0L82,2L90,2L90,2L101,2L101,3L125,3L125,4L178,4L178,5L799,5L799,5L1196,5L1196,6L1762,6L1762,7L1784,7L1784,7L1795,7L1795,8L1796,8L1796,7L1838,7L1838,7L1857,7" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0138n5dq</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L82,0L82,2L95,2L95,3L125,3L125,4L183,4L183,5L382,5L382,4L667,4L667,5L744,5L744,6L832,6L832,7L931,7L931,8L958,8L958,8L1349,8L1349,9L1646,9L1646,9L1668,9L1668,10L1767,10L1767,11L1768,11L1768,12L1789,12L1789,12L1800,12L1800,13L1801,13L1801,13L1806,13L1806,12L1811,12L1811,12L1838,12L1838,12L1857,12" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.814y0701</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L83,0L83,7L86,7L86,8L87,8L87,9L89,9L89,8L94,8L94,7L108,7L108,7L114,7L114,6L189,6L189,11L291,11L291,12L562,12L562,13L654,13L654,13L655,13L655,14L737,14L737,15L832,15L832,16L833,16L833,17L877,17L877,18L928,18L928,17L948,17L948,18L1249,18L1249,19L1340,19L1340,20L1341,20L1341,21L1350,21L1350,22L1388,22L1388,23L1399,23L1399,24L1445,24L1445,25L1455,25L1455,26L1499,26L1499,27L1575,27L1575,28L1576,28L1576,29L1602,29L1602,30L1606,30L1606,31L1608,31L1608,32L1609,32L1609,33L1611,33L1611,34L1617,34L1617,35L1624,35L1624,36L1628,36L1628,37L1643,37L1643,38L1652,38L1652,39L1658,39L1658,40L1661,40L1661,41L1663,41L1663,42L1676,42L1676,42L1677,42L1677,42L1683,42L1683,43L1702,43L1702,44L1707,44L1707,45L1710,45L1710,46L1720,46L1720,47L1748,47L1748,47L1762,47L1762,46L1769,46L1769,47L1771,47L1771,47L1772,47L1772,47L1775,47L1775,48L1776,48L1776,49L1777,49L1777,50L1782,50L1782,50L1785,50L1785,51L1788,51L1788,52L1789,52L1789,53L1790,53L1790,54L1791,54L1791,54L1793,54L1793,53L1804,53L1804,54L1807,54L1807,55L1809,55L1809,56L1812,56L1812,57L1813,57L1813,58L1814,58L1814,59L1820,59L1820,60L1823,60L1823,61L1825,61L1825,62L1826,62L1826,63L1842,63L1842,64L1849,64L1849,65L1854,65L1854,65L1855,65L1855,64L1857,64" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L90,0L90,10L91,10L91,9L92,9L92,10L100,10L100,9L115,9L115,8L172,8L172,9L186,9L186,13L234,13L234,14L321,14L321,13L322,13L322,12L447,12L447,11L535,11L535,12L550,12L550,15L563,15L563,16L573,16L573,17L576,17L576,18L601,18L601,19L629,19L629,18L635,18L635,19L637,19L637,18L647,18L647,19L663,19L663,20L682,20L682,21L820,21L820,22L833,22L833,23L894,23L894,24L945,24L945,25L1086,25L1086,26L1153,26L1153,26L1447,26L1447,27L1685,27L1685,28L1857,28" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L175,0L175,12L181,12L181,12L852,12L852,12L954,12L954,13L1042,13L1042,13L1196,13L1196,14L1447,14L1447,15L1491,15L1491,16L1540,16L1540,17L1641,17L1641,18L1647,18L1647,19L1657,19L1657,20L1668,20L1668,20L1671,20L1671,21L1672,21L1672,20L1674,20L1674,21L1694,21L1694,22L1705,22L1705,23L1713,23L1713,24L1737,24L1737,25L1764,25L1764,25L1769,25L1769,26L1777,26L1777,27L1801,27L1801,28L1813,28L1813,29L1824,29L1824,28L1830,28L1830,29L1840,29L1840,30L1844,30L1844,31L1851,31L1851,32L1857,32" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L176,0L176,21L179,21L179,21L184,21L184,22L235,22L235,23L238,23L238,24L323,24L323,23L404,23L404,24L435,24L435,25L461,25L461,26L464,26L464,27L465,27L465,28L490,28L490,29L520,29L520,30L521,30L521,31L549,31L549,32L554,32L554,33L573,33L573,34L589,34L589,35L609,35L609,36L614,36L614,37L618,37L618,38L636,38L636,39L638,39L638,40L650,40L650,41L677,41L677,42L697,42L697,43L702,43L702,44L719,44L719,45L740,45L740,46L742,46L742,47L746,47L746,48L808,48L808,49L814,49L814,50L878,50L878,51L923,51L923,52L928,52L928,52L931,52L931,53L933,53L933,54L944,54L944,57L973,57L973,58L982,58L982,59L984,59L984,60L987,60L987,61L1001,61L1001,63L1007,63L1007,64L1015,64L1015,65L1026,65L1026,66L1045,66L1045,67L1053,67L1053,68L1057,68L1057,70L1070,70L1070,71L1073,71L1073,72L1079,72L1079,73L1085,73L1085,74L1090,74L1090,75L1106,75L1106,76L1120,76L1120,77L1133,77L1133,78L1134,78L1134,79L1137,79L1137,80L1143,80L1143,81L1196,81L1196,82L1200,82L1200,83L1251,83L1251,84L1252,84L1252,85L1254,85L1254,86L1255,86L1255,87L1270,87L1270,88L1275,88L1275,89L1297,89L1297,90L1303,90L1303,91L1309,91L1309,92L1320,92L1320,93L1342,93L1342,94L1357,94L1357,95L1362,95L1362,96L1372,96L1372,98L1389,98L1389,99L1402,99L1402,100L1408,100L1408,101L1409,101L1409,102L1412,102L1412,103L1414,103L1414,104L1436,104L1436,105L1438,105L1438,106L1440,106L1440,107L1452,107L1452,108L1453,108L1453,109L1462,109L1462,110L1469,110L1469,111L1470,111L1470,112L1495,112L1495,113L1505,113L1505,114L1532,114L1532,116L1547,116L1547,117L1555,117L1555,118L1556,118L1556,119L1568,119L1568,120L1606,120L1606,121L1614,121L1614,123L1618,123L1618,124L1624,124L1624,125L1642,125L1642,127L1662,127L1662,127L1664,127L1664,128L1668,128L1668,127L1673,127L1673,128L1683,128L1683,129L1691,129L1691,130L1693,130L1693,131L1695,131L1695,130L1699,130L1699,131L1705,131L1705,132L1706,132L1706,133L1707,133L1707,134L1734,134L1734,135L1736,135L1736,134L1750,134L1750,136L1753,136L1753,137L1759,137L1759,138L1768,138L1768,139L1769,139L1769,140L1771,140L1771,142L1772,142L1772,143L1773,143L1773,144L1780,144L1780,145L1783,145L1783,146L1784,146L1784,147L1785,147L1785,148L1790,148L1790,149L1795,149L1795,150L1804,150L1804,151L1812,151L1812,152L1814,152L1814,153L1826,153L1826,154L1827,154L1827,156L1830,156L1830,157L1833,157L1833,158L1843,158L1843,159L1844,159L1844,160L1847,160L1847,161L1854,161L1854,162L1855,162L1855,163L1856,163L1856,164L1857,164" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L179,0L179,3L928,3L928,3L1015,3L1015,2L1196,2L1196,3L1296,3L1296,2L1651,2L1651,2L1840,2L1840,2L1848,2L1848,3L1850,3L1850,4L1857,4" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.810zdxoq</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L179,0L179,6L180,6L180,6L840,6L840,7L998,7L998,7L1145,7L1145,8L1180,8L1180,9L1345,9L1345,10L1620,10L1620,10L1766,10L1766,11L1796,11L1796,13L1808,13L1808,13L1818,13L1818,13L1857,13" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.rqvp5e7q</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L180,0L180,8L798,8L798,8L886,8L886,9L960,9L960,10L961,10L961,11L992,11L992,12L1155,12L1155,13L1307,13L1307,14L1317,14L1317,15L1350,15L1350,16L1487,16L1487,16L1497,16L1497,17L1499,17L1499,18L1585,18L1585,18L1587,18L1587,18L1647,18L1647,19L1658,19L1658,19L1760,19L1760,20L1763,20L1763,19L1769,19L1769,19L1770,19L1770,18L1779,18L1779,18L1780,18L1780,18L1785,18L1785,18L1788,18L1788,18L1789,18L1789,18L1790,18L1790,18L1791,18L1791,17L1793,17L1793,16L1804,16L1804,17L1818,17L1818,18L1826,18L1826,19L1828,19L1828,21L1842,21L1842,22L1850,22L1850,23L1857,23" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L180,0L180,11L183,11L183,12L208,12L208,12L209,12L209,11L520,11L520,12L574,12L574,13L635,13L635,14L642,14L642,15L660,15L660,16L678,16L678,17L679,17L679,18L700,18L700,19L706,19L706,20L736,20L736,21L741,21L741,22L809,22L809,23L815,23L815,24L922,24L922,25L974,25L974,26L1049,26L1049,27L1089,27L1089,26L1243,26L1243,27L1282,27L1282,28L1339,28L1339,29L1342,29L1342,30L1378,30L1378,31L1446,31L1446,31L1450,31L1450,32L1473,32L1473,33L1491,33L1491,34L1658,34L1658,34L1662,34L1662,35L1681,35L1681,34L1695,34L1695,35L1697,35L1697,36L1750,36L1750,35L1752,35L1752,36L1756,36L1756,36L1764,36L1764,37L1792,37L1792,37L1793,37L1793,39L1800,39L1800,38L1812,38L1812,40L1820,40L1820,41L1827,41L1827,42L1839,42L1839,41L1841,41L1841,42L1854,42L1854,43L1857,43" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L180,0L180,8L221,8L221,8L282,8L282,9L563,9L563,10L573,10L573,11L640,11L640,12L738,12L738,13L801,13L801,13L834,13L834,14L877,14L877,15L887,15L887,16L905,16L905,17L913,17L913,18L1090,18L1090,19L1113,19L1113,20L1159,20L1159,21L1223,21L1223,22L1248,22L1248,23L1266,23L1266,24L1267,24L1267,23L1341,23L1341,24L1352,24L1352,25L1387,25L1387,26L1473,26L1473,27L1475,27L1475,28L1491,28L1491,29L1499,29L1499,30L1500,30L1500,31L1621,31L1621,32L1657,32L1657,32L1719,32L1719,33L1729,33L1729,34L1766,34L1766,33L1774,33L1774,34L1776,34L1776,35L1777,35L1777,36L1788,36L1788,37L1789,37L1789,38L1795,38L1795,37L1803,37L1803,38L1807,38L1807,38L1838,38L1838,37L1842,37L1842,39L1848,39L1848,40L1850,40L1850,41L1856,41L1856,41L1857,41" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L181,0L181,4L182,4L182,3L203,3L203,4L1765,4L1765,5L1799,5L1799,6L1800,6L1800,7L1806,7L1806,6L1820,6L1820,7L1857,7" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0q5njgmq</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L191,0L191,8L675,8L675,8L678,8L678,9L1044,9L1044,8L1213,8L1213,8L1281,8L1281,9L1349,9L1349,10L1447,10L1447,11L1464,11L1464,12L1491,12L1491,13L1651,13L1651,13L1662,13L1662,14L1682,14L1682,15L1687,15L1687,14L1766,14L1766,13L1834,13L1834,13L1841,13L1841,14L1857,14" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L193,0L193,11L208,11L208,11L209,11L209,11L373,11L373,12L676,12L676,12L678,12L678,13L737,13L737,14L764,14L764,15L826,15L826,14L833,14L833,15L944,15L944,16L1000,16L1000,17L1018,17L1018,18L1085,18L1085,19L1124,19L1124,20L1282,20L1282,21L1344,21L1344,22L1438,22L1438,23L1491,23L1491,24L1584,24L1584,25L1617,25L1617,26L1682,26L1682,26L1683,26L1683,26L1684,26L1684,27L1695,27L1695,28L1705,28L1705,29L1712,29L1712,30L1736,30L1736,29L1775,29L1775,30L1796,30L1796,30L1798,30L1798,31L1817,31L1817,31L1838,31L1838,30L1841,30L1841,31L1857,31" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L199,0L199,6L201,6L201,5L643,5L643,6L1242,6L1242,6L1356,6L1356,7L1491,7L1491,8L1639,8L1639,9L1649,9L1649,9L1675,9L1675,10L1765,10L1765,10L1842,10L1842,11L1847,11L1847,11L1857,11" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21g8owxl</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L221,0L221,26L229,26L229,27L232,27L232,28L242,28L242,29L244,29L244,30L398,30L398,31L430,31L430,32L501,32L501,33L506,33L506,34L516,34L516,35L517,35L517,36L537,36L537,37L553,37L553,39L557,39L557,40L559,40L559,41L608,41L608,42L639,42L639,43L667,43L667,44L674,44L674,45L678,45L678,46L679,46L679,47L697,47L697,48L710,48L710,49L722,49L722,50L726,50L726,51L737,51L737,52L738,52L738,53L772,53L772,54L791,54L791,55L794,55L794,56L840,56L840,57L881,57L881,58L929,58L929,58L933,58L933,59L944,59L944,60L973,60L973,62L980,62L980,63L987,63L987,64L1022,64L1022,65L1034,65L1034,66L1079,66L1079,67L1085,67L1085,68L1090,68L1090,69L1196,69L1196,70L1203,70L1203,71L1233,71L1233,72L1342,72L1342,73L1353,73L1353,74L1358,74L1358,75L1373,75L1373,76L1386,76L1386,77L1388,77L1388,78L1399,78L1399,79L1405,79L1405,80L1407,80L1407,82L1461,82L1461,83L1491,83L1491,84L1505,84L1505,85L1534,85L1534,86L1550,86L1550,87L1559,87L1559,88L1572,88L1572,89L1575,89L1575,91L1593,91L1593,93L1598,93L1598,94L1613,94L1613,95L1621,95L1621,96L1628,96L1628,97L1629,97L1629,99L1631,99L1631,100L1634,100L1634,101L1637,101L1637,102L1638,102L1638,103L1643,103L1643,104L1649,104L1649,106L1659,106L1659,107L1679,107L1679,108L1683,108L1683,109L1689,109L1689,110L1693,110L1693,112L1694,112L1694,113L1705,113L1705,114L1707,114L1707,115L1724,115L1724,116L1768,116L1768,117L1785,117L1785,118L1788,118L1788,120L1796,120L1796,119L1807,119L1807,120L1810,120L1810,121L1814,121L1814,122L1817,122L1817,123L1822,123L1822,124L1824,124L1824,123L1830,123L1830,124L1835,124L1835,124L1836,124L1836,125L1838,125L1838,124L1839,124L1839,123L1841,123L1841,124L1844,124L1844,125L1846,125L1846,126L1848,126L1848,126L1850,126L1850,126L1857,126" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L221,0L221,6L290,6L290,7L677,7L677,8L714,8L714,9L848,9L848,10L896,10L896,11L904,11L904,12L912,12L912,13L942,13L942,14L1192,14L1192,15L1211,15L1211,14L1349,14L1349,15L1456,15L1456,16L1491,16L1491,17L1598,17L1598,19L1639,19L1639,20L1667,20L1667,21L1676,21L1676,22L1762,22L1762,23L1764,23L1764,24L1768,24L1768,23L1773,23L1773,23L1774,23L1774,22L1775,22L1775,22L1779,22L1779,22L1787,22L1787,22L1788,22L1788,21L1794,21L1794,21L1796,21L1796,22L1798,22L1798,21L1800,21L1800,20L1808,20L1808,19L1809,19L1809,19L1827,19L1827,19L1842,19L1842,20L1857,20" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyrgl</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L234,0L234,8L832,8L832,9L833,9L833,10L912,10L912,11L983,11L983,12L1250,12L1250,13L1348,13L1348,14L1437,14L1437,15L1491,15L1491,16L1499,16L1499,17L1669,17L1669,17L1686,17L1686,18L1743,18L1743,18L1764,18L1764,19L1779,19L1779,18L1780,18L1780,19L1797,19L1797,19L1825,19L1825,18L1842,18L1842,19L1857,19" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.xqkjmnnl</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L246,0L246,1L251,1L251,2L335,2L335,3L419,3L419,3L470,3L470,4L667,4L667,4L931,4L931,5L1014,5L1014,5L1126,5L1126,5L1198,5L1198,6L1230,6L1230,7L1257,7L1257,6L1304,6L1304,7L1463,7L1463,7L1625,7L1625,7L1628,7L1628,7L1648,7L1648,8L1669,8L1669,9L1757,9L1757,9L1798,9L1798,9L1814,9L1814,9L1843,9L1843,10L1857,10" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.5leogx5q</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L248,0L248,1L956,1L956,2L1049,2L1049,3L1052,3L1052,4L1406,4L1406,5L1474,5L1474,6L1574,6L1574,7L1654,7L1654,8L1656,8L1656,9L1669,9L1669,10L1685,10L1685,10L1787,10L1787,10L1817,10L1817,10L1820,10L1820,10L1835,10L1835,9L1836,9L1836,10L1844,10L1844,11L1857,11" tabindex="0">
						<title>l_o9xo3rp9-xd144xzd-ql69e17l.qj7jxxoq</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L258,0L258,2L658,2L658,2L1103,2L1103,4L1157,4L1157,4L1570,4L1570,5L1593,5L1593,5L1652,5L1652,5L1759,5L1759,4L1763,4L1763,5L1778,5L1778,5L1811,5L1811,5L1857,5" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.qoxdrr4q</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L268,0L268,1L1112,1L1112,2L1184,2L1184,2L1617,2L1617,3L1649,3L1649,4L1650,4L1650,4L1788,4L1788,3L1789,3L1789,3L1812,3L1812,3L1824,3L1824,3L1826,3L1826,2L1857,2" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.q5vkg7vl</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L321,0L321,6L726,6L726,6L999,6L999,6L1089,6L1089,7L1148,7L1148,8L1315,8L1315,9L1345,9L1345,9L1346,9L1346,10L1411,10L1411,10L1554,10L1554,10L1683,10L1683,11L1790,11L1790,11L1813,11L1813,10L1857,10" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.mlnwjz0l</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L321,0L321,6L738,6L738,7L994,7L994,6L1154,6L1154,7L1293,7L1293,8L1341,8L1341,9L1342,9L1342,9L1411,9L1411,9L1720,9L1720,10L1790,10L1790,10L1792,10L1792,10L1857,10" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.810zkwwq</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L340,0L340,5L682,5L682,4L726,4L726,5L1157,5L1157,6L1199,6L1199,6L1224,6L1224,5L1295,5L1295,5L1316,5L1316,5L1322,5L1322,5L1346,5L1346,5L1370,5L1370,5L1411,5L1411,5L1449,5L1449,5L1636,5L1636,6L1790,6L1790,6L1813,6L1813,5L1845,5L1845,5L1857,5" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.9qj0kxel</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L340,0L340,9L390,9L390,10L682,10L682,9L719,9L719,10L726,10L726,11L738,11L738,10L993,10L993,10L997,10L997,10L1037,10L1037,11L1089,11L1089,12L1148,12L1148,13L1220,13L1220,13L1221,13L1221,13L1224,13L1224,12L1320,12L1320,12L1344,12L1344,12L1411,12L1411,11L1556,11L1556,11L1631,11L1631,11L1636,11L1636,11L1646,11L1646,12L1653,12L1653,12L1786,12L1786,12L1792,12L1792,12L1812,12L1812,11L1857,11" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.4qypgj4q</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L347,0L347,7L430,7L430,8L583,8L583,9L656,9L656,10L657,10L657,10L658,10L658,11L901,11L901,12L904,12L904,13L998,13L998,14L1009,14L1009,15L1019,15L1019,16L1022,16L1022,15L1028,15L1028,14L1049,14L1049,15L1119,15L1119,15L1491,15L1491,15L1555,15L1555,15L1567,15L1567,16L1598,16L1598,17L1616,17L1616,17L1655,17L1655,18L1726,18L1726,18L1730,18L1730,18L1742,18L1742,18L1757,18L1757,16L1760,16L1760,16L1763,16L1763,15L1765,15L1765,15L1789,15L1789,15L1812,15L1812,15L1823,15L1823,16L1837,16L1837,17L1842,17L1842,18L1857,18" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L512,0L512,6L943,6L943,6L1491,6L1491,7L1617,7L1617,8L1629,8L1629,9L1639,9L1639,10L1653,10L1653,11L1665,11L1665,12L1668,12L1668,12L1669,12L1669,12L1688,12L1688,11L1764,11L1764,10L1787,10L1787,10L1812,10L1812,10L1842,10L1842,11L1857,11" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6e0q</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L550,0L550,6L965,6L965,6L1469,6L1469,7L1491,7L1491,8L1620,8L1620,9L1649,9L1649,10L1662,10L1662,10L1685,10L1685,11L1764,11L1764,11L1777,11L1777,12L1778,12L1778,12L1839,12L1839,11L1857,11" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6ejq</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L550,0L550,7L662,7L662,8L671,8L671,7L672,7L672,8L960,8L960,8L1371,8L1371,9L1491,9L1491,10L1609,10L1609,11L1620,11L1620,12L1647,12L1647,13L1690,13L1690,14L1759,14L1759,14L1764,14L1764,15L1765,15L1765,14L1775,14L1775,15L1812,15L1812,14L1857,14" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21dzoj3l</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L626,0L626,6L1781,6L1781,7L1805,7L1805,7L1814,7L1814,7L1857,7" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.5lmk0gjq</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L643,0L643,6L644,6L644,5L650,5L650,6L664,6L664,7L671,7L671,7L675,7L675,7L677,7L677,8L975,8L975,8L988,8L988,7L1148,7L1148,8L1459,8L1459,9L1486,9L1486,10L1491,10L1491,11L1526,11L1526,12L1617,12L1617,13L1661,13L1661,14L1707,14L1707,15L1764,15L1764,16L1776,16L1776,16L1788,16L1788,16L1811,16L1811,15L1812,15L1812,15L1842,15L1842,16L1857,16" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,0L646,0L646,6L790,6L790,6L791,6L791,7L792,7L792,6L1198,6L1198,7L1807,7L1807,6L1812,6L1812,6L1813,6L1813,7L1857,7" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.z19mo80l</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,0L676,0L676,14L697,14L697,15L709,15L709,16L723,16L723,17L751,17L751,18L829,18L829,19L878,19L878,20L928,20L928,20L933,20L933,21L987,21L987,22L1045,22L1045,23L1079,23L1079,24L1085,24L1085,25L1120,25L1120,26L1196,26L1196,27L1202,27L1202,28L1297,28L1297,29L1370,29L1370,30L1414,30L1414,31L1442,31L1442,32L1464,32L1464,33L1488,33L1488,32L1534,32L1534,33L1584,33L1584,34L1617,34L1617,35L1618,35L1618,35L1683,35L1683,35L1689,35L1689,36L1694,36L1694,37L1705,37L1705,38L1720,38L1720,39L1737,39L1737,40L1753,40L1753,41L1766,41L1766,40L1769,40L1769,41L1777,41L1777,42L1786,42L1786,43L1788,43L1788,44L1790,44L1790,45L1795,45L1795,46L1796,46L1796,47L1801,47L1801,46L1802,46L1802,47L1812,47L1812,46L1814,46L1814,47L1830,47L1830,49L1844,49L1844,50L1849,50L1849,51L1855,51L1855,52L1857,52" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
