<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player xk1oze6j</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2022-08-20</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-30</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">257</text>
		</svg>
		<svg viewBox="0 0 1137 257" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 257) scale(1 -1)" style="--count: 14;">
				<g>
					<rect x="0" y="0" width="1137" height="257"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,58L2,58L2,62L4,62L4,81L7,81L7,83L9,83L9,84L10,84L10,85L14,85L14,87L21,87L21,88L22,88L22,89L23,89L23,90L24,90L24,90L27,90L27,91L30,91L30,92L33,92L33,93L38,93L38,94L48,94L48,95L50,95L50,96L52,96L52,97L53,97L53,98L55,98L55,99L56,99L56,100L78,100L78,101L85,101L85,102L102,102L102,103L106,103L106,104L110,104L110,105L114,105L114,106L120,106L120,107L133,107L133,108L138,108L138,109L143,109L143,110L151,110L151,111L152,111L152,112L157,112L157,112L170,112L170,113L175,113L175,114L177,114L177,116L181,116L181,118L182,118L182,119L191,119L191,120L199,120L199,121L202,121L202,120L204,120L204,121L209,121L209,122L213,122L213,123L224,123L224,124L225,124L225,125L229,125L229,126L233,126L233,127L235,127L235,128L238,128L238,129L239,129L239,130L259,130L259,131L260,131L260,132L267,132L267,133L269,133L269,134L274,134L274,135L281,135L281,136L282,136L282,137L284,137L284,138L294,138L294,139L308,139L308,140L315,140L315,141L318,141L318,141L338,141L338,142L349,142L349,143L390,143L390,144L402,144L402,145L423,145L423,146L429,146L429,147L435,147L435,149L441,149L441,150L449,150L449,151L476,151L476,152L505,152L505,153L530,153L530,154L572,154L572,155L573,155L573,156L593,156L593,157L596,157L596,158L603,158L603,159L628,159L628,160L638,160L638,161L640,161L640,162L646,162L646,163L676,163L676,164L702,164L702,166L709,166L709,167L717,167L717,168L730,168L730,169L731,169L731,169L738,169L738,170L743,170L743,171L747,171L747,172L749,172L749,173L759,173L759,173L771,173L771,173L779,173L779,174L799,174L799,175L804,175L804,176L805,176L805,178L806,178L806,177L820,177L820,178L832,178L832,179L838,179L838,180L841,180L841,181L847,181L847,182L850,182L850,183L878,183L878,184L884,184L884,185L886,185L886,186L896,186L896,187L897,187L897,188L901,188L901,189L907,189L907,191L909,191L909,192L912,192L912,193L917,193L917,194L926,194L926,195L933,195L933,194L935,194L935,196L940,196L940,197L941,197L941,199L944,199L944,200L947,200L947,201L950,201L950,200L951,200L951,200L962,200L962,199L964,199L964,200L965,200L965,201L967,201L967,201L968,201L968,202L969,202L969,203L973,203L973,204L974,204L974,205L976,205L976,206L981,206L981,207L985,207L985,208L1021,208L1021,209L1042,209L1042,209L1048,209L1048,210L1053,210L1053,212L1060,212L1060,213L1065,213L1065,213L1069,213L1069,214L1073,214L1073,215L1075,215L1075,217L1077,217L1077,218L1090,218L1090,219L1098,219L1098,220L1100,220L1100,221L1109,221L1109,222L1120,222L1120,223L1124,223L1124,224L1127,224L1127,225L1137,225" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L2,0L2,29L4,29L4,43L5,43L5,44L63,44L63,45L67,45L67,45L77,45L77,46L83,46L83,46L98,46L98,47L105,47L105,47L113,47L113,48L139,48L139,49L143,49L143,50L145,50L145,51L158,51L158,52L160,52L160,53L204,53L204,53L209,53L209,54L210,54L210,55L211,55L211,56L217,56L217,56L225,56L225,56L227,56L227,57L229,57L229,57L233,57L233,58L237,58L237,59L240,59L240,60L245,60L245,61L247,61L247,62L250,62L250,62L266,62L266,63L267,63L267,63L273,63L273,65L275,65L275,64L277,64L277,65L278,65L278,66L302,66L302,67L304,67L304,66L316,66L316,67L328,67L328,68L330,68L330,69L332,69L332,69L356,69L356,69L359,69L359,70L366,70L366,70L374,70L374,71L403,71L403,71L414,71L414,72L421,72L421,72L423,72L423,73L439,73L439,74L440,74L440,74L454,74L454,75L466,75L466,76L469,76L469,78L533,78L533,79L534,79L534,80L558,80L558,81L577,81L577,82L591,82L591,83L600,83L600,84L603,84L603,84L617,84L617,84L620,84L620,84L623,84L623,85L637,85L637,85L638,85L638,85L646,85L646,86L654,86L654,125L655,125L655,127L668,127L668,128L673,128L673,129L675,129L675,130L676,130L676,131L677,131L677,132L678,132L678,133L681,133L681,134L685,134L685,135L688,135L688,136L689,136L689,137L692,137L692,139L695,139L695,140L700,140L700,141L704,141L704,142L706,142L706,143L710,143L710,144L716,144L716,146L718,146L718,147L721,147L721,148L723,148L723,147L726,147L726,148L729,148L729,149L740,149L740,150L742,150L742,152L749,152L749,153L750,153L750,155L761,155L761,156L767,156L767,155L771,155L771,154L781,154L781,155L784,155L784,156L792,156L792,156L798,156L798,158L804,158L804,159L805,159L805,158L814,158L814,158L815,158L815,159L819,159L819,160L820,160L820,161L823,161L823,162L827,162L827,163L830,163L830,165L840,165L840,166L841,166L841,167L849,167L849,168L851,168L851,169L855,169L855,170L858,170L858,171L859,171L859,173L865,173L865,173L869,173L869,174L871,174L871,176L874,176L874,178L880,178L880,180L884,180L884,181L888,181L888,182L895,182L895,184L898,184L898,185L909,185L909,186L911,186L911,187L913,187L913,188L915,188L915,189L916,189L916,190L926,190L926,191L931,191L931,192L935,192L935,191L937,191L937,192L941,192L941,192L944,192L944,193L948,193L948,194L953,194L953,195L958,195L958,196L961,196L961,197L963,197L963,198L969,198L969,199L972,199L972,200L974,200L974,201L980,201L980,202L985,202L985,203L988,203L988,204L991,204L991,205L994,205L994,207L995,207L995,208L999,208L999,209L1000,209L1000,211L1001,211L1001,210L1002,210L1002,211L1005,211L1005,210L1007,210L1007,211L1009,211L1009,212L1014,212L1014,211L1017,211L1017,210L1018,210L1018,212L1023,212L1023,213L1030,213L1030,214L1031,214L1031,216L1038,216L1038,218L1040,218L1040,218L1045,218L1045,219L1047,219L1047,219L1052,219L1052,220L1053,220L1053,221L1055,221L1055,222L1056,222L1056,223L1062,223L1062,224L1064,224L1064,225L1065,225L1065,226L1068,226L1068,227L1070,227L1070,228L1074,228L1074,229L1075,229L1075,231L1079,231L1079,232L1086,232L1086,235L1087,235L1087,236L1090,236L1090,237L1091,237L1091,239L1093,239L1093,240L1098,240L1098,241L1101,241L1101,242L1102,242L1102,243L1104,243L1104,245L1108,245L1108,245L1110,245L1110,246L1114,246L1114,247L1115,247L1115,248L1119,248L1119,249L1121,249L1121,250L1123,250L1123,251L1124,251L1124,253L1125,253L1125,254L1127,254L1127,253L1130,253L1130,254L1135,254L1135,255L1136,255L1136,256L1137,256L1137,257L1137,257" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L2,0L2,23L6,23L6,23L15,23L15,33L17,33L17,34L18,34L18,35L52,35L52,36L71,36L71,37L74,37L74,38L120,38L120,39L144,39L144,38L161,38L161,39L209,39L209,39L213,39L213,40L224,40L224,41L253,41L253,43L260,43L260,44L267,44L267,45L302,45L302,46L314,46L314,47L359,47L359,48L365,48L365,49L370,49L370,50L476,50L476,50L483,50L483,51L513,51L513,51L622,51L622,52L633,52L633,53L638,53L638,53L653,53L653,54L655,54L655,68L666,68L666,69L668,69L668,69L679,69L679,70L685,70L685,71L687,71L687,73L741,73L741,74L771,74L771,74L785,74L785,75L814,75L814,76L830,76L830,77L839,77L839,78L852,78L852,79L855,79L855,81L873,81L873,83L878,83L878,84L893,84L893,85L901,85L901,86L908,86L908,87L909,87L909,89L911,89L911,90L914,90L914,91L917,91L917,92L918,92L918,93L923,93L923,93L929,93L929,93L939,93L939,93L959,93L959,94L963,94L963,94L969,94L969,95L973,95L973,96L974,96L974,97L985,97L985,98L987,98L987,98L1004,98L1004,99L1048,99L1048,99L1065,99L1065,100L1068,100L1068,100L1087,100L1087,100L1090,100L1090,100L1094,100L1094,101L1097,101L1097,102L1102,102L1102,103L1110,103L1110,104L1115,104L1115,104L1116,104L1116,104L1121,104L1121,105L1124,105L1124,106L1126,106L1126,107L1128,107L1128,107L1130,107L1130,107L1137,107" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L3,0L3,3L7,3L7,4L14,4L14,5L18,5L18,6L21,6L21,6L83,6L83,6L110,6L110,6L122,6L122,6L158,6L158,7L175,7L175,8L199,8L199,8L211,8L211,9L225,9L225,9L279,9L279,9L308,9L308,9L321,9L321,9L326,9L326,10L469,10L469,10L476,10L476,10L479,10L479,11L501,11L501,11L540,11L540,12L543,12L543,12L609,12L609,13L620,13L620,13L624,13L624,14L686,14L686,14L696,14L696,15L718,15L718,15L719,15L719,16L722,16L722,16L741,16L741,16L750,16L750,17L771,17L771,18L801,18L801,18L821,18L821,18L854,18L854,18L858,18L858,18L864,18L864,19L866,19L866,20L888,20L888,20L904,20L904,21L908,21L908,21L912,21L912,22L913,22L913,22L917,22L917,22L924,22L924,23L925,23L925,23L926,23L926,23L932,23L932,23L933,23L933,23L951,23L951,23L953,23L953,23L969,23L969,24L974,24L974,24L985,24L985,25L987,25L987,25L1000,25L1000,25L1005,25L1005,25L1008,25L1008,26L1009,26L1009,26L1019,26L1019,26L1020,26L1020,26L1036,26L1036,26L1047,26L1047,26L1048,26L1048,26L1051,26L1051,27L1062,27L1062,27L1070,27L1070,27L1076,27L1076,27L1087,27L1087,27L1093,27L1093,27L1094,27L1094,28L1099,28L1099,28L1111,28L1111,28L1124,28L1124,29L1127,29L1127,29L1135,29L1135,29L1137,29" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L3,0L3,12L5,12L5,13L20,13L20,13L29,13L29,13L77,13L77,14L78,14L78,15L84,15L84,16L89,16L89,16L151,16L151,16L158,16L158,17L172,17L172,17L173,17L173,20L184,20L184,21L211,21L211,22L225,22L225,22L248,22L248,22L293,22L293,23L300,23L300,23L309,23L309,24L325,24L325,25L358,25L358,26L373,26L373,26L386,26L386,25L435,25L435,25L476,25L476,25L478,25L478,26L511,26L511,27L533,27L533,28L537,28L537,27L541,27L541,27L620,27L620,27L624,27L624,28L687,28L687,28L718,28L718,28L757,28L757,29L771,29L771,29L832,29L832,29L833,29L833,29L868,29L868,29L879,29L879,30L888,30L888,30L893,30L893,31L897,31L897,32L923,32L923,33L924,33L924,33L925,33L925,34L928,34L928,34L929,34L929,34L957,34L957,34L974,34L974,34L985,34L985,35L987,35L987,36L1016,36L1016,36L1024,36L1024,36L1037,36L1037,36L1041,36L1041,36L1049,36L1049,36L1051,36L1051,37L1076,37L1076,37L1079,37L1079,38L1082,38L1082,38L1087,38L1087,38L1093,38L1093,39L1099,39L1099,39L1101,39L1101,39L1111,39L1111,39L1124,39L1124,40L1127,40L1127,40L1132,40L1132,40L1136,40L1136,41L1137,41" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L3,0L3,8L31,8L31,8L109,8L109,8L158,8L158,9L178,9L178,12L208,12L208,12L213,12L213,13L267,13L267,14L325,14L325,15L359,15L359,16L365,16L365,17L400,17L400,18L476,18L476,18L482,18L482,19L488,19L488,18L577,18L577,19L650,19L650,19L694,19L694,20L722,20L722,20L744,20L744,21L814,21L814,21L864,21L864,22L897,22L897,22L898,22L898,22L963,22L963,22L969,22L969,23L974,23L974,23L985,23L985,24L1000,24L1000,24L1017,24L1017,24L1033,24L1033,25L1046,25L1046,24L1049,24L1049,24L1057,24L1057,25L1066,25L1066,25L1068,25L1068,25L1070,25L1070,25L1075,25L1075,25L1076,25L1076,25L1082,25L1082,25L1094,25L1094,26L1110,26L1110,27L1124,27L1124,28L1129,28L1129,28L1135,28L1135,28L1137,28" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path dtabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L22,0L22,4L42,4L42,5L478,5L478,6L576,6L576,5L685,5L685,6L736,6L736,6L745,6L745,7L883,7L883,7L958,7L958,7L959,7L959,7L1033,7L1033,7L1034,7L1034,7L1064,7L1064,7L1065,7L1065,7L1088,7L1088,8L1100,8L1100,9L1127,9L1127,9L1130,9L1130,9L1137,9" tabindex="0">
						<title>l_r9gn1qpd-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L44,0L44,4L113,4L113,5L224,5L224,6L280,6L280,6L298,6L298,7L365,7L365,8L404,8L404,9L562,9L562,10L624,10L624,11L718,11L718,12L771,12L771,12L864,12L864,13L887,13L887,12L897,12L897,13L962,13L962,13L963,13L963,13L964,13L964,13L975,13L975,13L985,13L985,13L992,13L992,13L1055,13L1055,13L1076,13L1076,13L1078,13L1078,13L1097,13L1097,13L1121,13L1121,13L1137,13" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L46,0L46,18L112,18L112,18L143,18L143,18L145,18L145,19L229,19L229,19L254,19L254,20L374,20L374,21L391,21L391,22L434,22L434,23L488,23L488,23L562,23L562,24L622,24L622,25L631,25L631,26L662,26L662,26L715,26L715,27L716,27L716,27L725,27L725,28L771,28L771,28L784,28L784,28L847,28L847,29L859,29L859,28L896,28L896,29L908,29L908,29L909,29L909,30L912,30L912,31L919,31L919,31L924,31L924,32L934,32L934,32L953,32L953,32L975,32L975,32L999,32L999,33L1024,33L1024,33L1034,33L1034,34L1040,34L1040,33L1054,33L1054,33L1064,33L1064,34L1065,34L1065,34L1066,34L1066,34L1068,34L1068,34L1069,34L1069,34L1072,34L1072,34L1073,34L1073,34L1085,34L1085,35L1092,35L1092,35L1093,35L1093,36L1128,36L1128,36L1137,36" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L54,0L54,8L59,8L59,8L113,8L113,9L115,9L115,10L120,10L120,11L228,11L228,11L254,11L254,12L259,12L259,13L291,13L291,13L428,13L428,13L449,13L449,14L500,14L500,15L562,15L562,16L650,16L650,16L702,16L702,16L721,16L721,16L735,16L735,17L753,17L753,17L771,17L771,17L859,17L859,16L863,16L863,17L865,17L865,17L899,17L899,17L927,17L927,17L965,17L965,17L966,17L966,17L975,17L975,17L977,17L977,17L1044,17L1044,17L1052,17L1052,17L1054,17L1054,17L1064,17L1064,18L1067,18L1067,18L1069,18L1069,18L1070,18L1070,18L1072,18L1072,18L1079,18L1079,18L1082,18L1082,18L1090,18L1090,18L1097,18L1097,18L1100,18L1100,18L1118,18L1118,18L1121,18L1121,18L1135,18L1135,18L1137,18" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L93,0L93,10L100,10L100,11L112,11L112,12L164,12L164,12L176,12L176,13L217,13L217,14L223,14L223,15L226,15L226,15L233,15L233,15L242,15L242,16L255,16L255,17L284,17L284,17L296,17L296,18L365,18L365,19L389,19L389,20L398,20L398,21L434,21L434,22L437,22L437,22L439,22L439,22L480,22L480,23L562,23L562,23L589,23L589,23L591,23L591,24L605,24L605,25L621,25L621,26L622,26L622,26L639,26L639,27L644,27L644,28L648,28L648,28L696,28L696,29L715,29L715,29L725,29L725,30L748,30L748,30L753,30L753,30L771,30L771,30L819,30L819,30L820,30L820,30L856,30L856,31L886,31L886,32L894,32L894,33L896,33L896,34L897,34L897,33L907,33L907,34L913,34L913,35L915,35L915,35L917,35L917,35L924,35L924,35L926,35L926,36L927,36L927,35L936,35L936,36L940,36L940,38L941,38L941,39L945,39L945,39L955,39L955,39L963,39L963,40L972,40L972,40L975,40L975,40L985,40L985,40L990,40L990,41L1029,41L1029,42L1033,42L1033,43L1034,43L1034,43L1038,43L1038,43L1039,43L1039,43L1045,43L1045,43L1052,43L1052,43L1058,43L1058,43L1066,43L1066,43L1078,43L1078,43L1080,43L1080,43L1084,43L1084,43L1088,43L1088,43L1089,43L1089,43L1092,43L1092,43L1100,43L1100,44L1107,44L1107,44L1112,44L1112,44L1122,44L1122,44L1127,44L1127,45L1133,45L1133,46L1137,46" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L95,0L95,18L202,18L202,19L254,19L254,20L329,20L329,20L523,20L523,21L562,21L562,22L619,22L619,23L622,23L622,24L628,24L628,23L658,23L658,23L726,23L726,23L730,23L730,24L731,24L731,23L753,23L753,24L771,24L771,25L930,25L930,24L938,24L938,24L942,24L942,24L975,24L975,25L977,25L977,25L1032,25L1032,25L1036,25L1036,25L1037,25L1037,24L1044,24L1044,24L1072,24L1072,24L1073,24L1073,25L1092,25L1092,26L1100,26L1100,27L1107,27L1107,28L1121,28L1121,28L1134,28L1134,28L1137,28" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L172,0L172,9L230,9L230,9L254,9L254,10L365,10L365,11L412,11L412,11L434,11L434,12L562,12L562,12L726,12L726,12L923,12L923,13L942,13L942,13L943,13L943,13L944,13L944,13L975,13L975,14L1040,14L1040,14L1044,14L1044,14L1069,14L1069,14L1074,14L1074,14L1075,14L1075,14L1080,14L1080,14L1084,14L1084,14L1101,14L1101,14L1137,14" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
