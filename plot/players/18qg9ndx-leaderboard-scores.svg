<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player 18qg9ndx</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-03-18</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-31</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">186</text>
		</svg>
		<svg viewBox="0 0 2723 186" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 186) scale(1 -1)" style="--count: 24;">
				<g>
					<rect x="0" y="0" width="2723" height="186"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,2L30,2L30,2L514,2L514,3L799,3L799,3L896,3L896,3L981,3L981,3L1021,3L1021,3L1030,3L1030,3L1056,3L1056,3L1130,3L1130,3L1570,3L1570,3L1574,3L1574,3L1593,3L1593,4L1605,4L1605,5L1619,5L1619,6L1623,6L1623,7L1634,7L1634,8L1637,8L1637,8L1699,8L1699,8L1726,8L1726,9L1738,9L1738,9L1774,9L1774,10L1791,10L1791,11L1815,11L1815,11L1827,11L1827,12L1841,12L1841,12L1895,12L1895,12L1924,12L1924,12L1937,12L1937,12L1942,12L1942,13L2085,13L2085,13L2092,13L2092,13L2095,13L2095,14L2117,14L2117,14L2156,14L2156,15L2159,15L2159,15L2225,15L2225,16L2236,16L2236,16L2240,16L2240,17L2302,17L2302,17L2312,17L2312,18L2334,18L2334,18L2335,18L2335,19L2338,19L2338,19L2357,19L2357,20L2366,20L2366,21L2387,21L2387,22L2417,22L2417,22L2437,22L2437,22L2470,22L2470,22L2474,22L2474,23L2480,23L2480,24L2482,24L2482,25L2504,25L2504,25L2520,25L2520,26L2524,26L2524,26L2528,26L2528,27L2529,27L2529,27L2533,27L2533,27L2540,27L2540,28L2541,28L2541,28L2542,28L2542,28L2548,28L2548,28L2549,28L2549,28L2567,28L2567,28L2569,28L2569,28L2585,28L2585,29L2590,29L2590,29L2601,29L2601,30L2603,30L2603,30L2616,30L2616,30L2621,30L2621,30L2624,30L2624,31L2625,31L2625,31L2635,31L2635,31L2636,31L2636,31L2652,31L2652,31L2663,31L2663,31L2664,31L2664,31L2667,31L2667,32L2678,32L2678,32L2680,32L2680,32L2686,32L2686,32L2692,32L2692,32L2709,32L2709,32L2710,32L2710,33L2715,33L2715,33L2723,33" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L0,0L0,5L30,5L30,5L365,5L365,5L454,5L454,5L455,5L455,5L514,5L514,6L704,6L704,6L785,6L785,6L803,6L803,6L958,6L958,6L962,6L962,6L966,6L966,6L978,6L978,6L981,6L981,6L982,6L982,6L985,6L985,6L1001,6L1001,6L1022,6L1022,6L1049,6L1049,6L1058,6L1058,7L1062,7L1062,8L1091,8L1091,9L1098,9L1098,9L1101,9L1101,9L1113,9L1113,9L1115,9L1115,10L1161,10L1161,10L1226,10L1226,10L1310,10L1310,11L1389,11L1389,11L1396,11L1396,11L1409,11L1409,11L1449,11L1449,11L1455,11L1455,12L1458,12L1458,13L1460,13L1460,14L1468,14L1468,15L1481,15L1481,16L1489,16L1489,17L1497,17L1497,16L1505,16L1505,16L1510,16L1510,16L1513,16L1513,16L1539,16L1539,16L1561,16L1561,16L1566,16L1566,16L1568,16L1568,17L1571,17L1571,17L1574,17L1574,17L1581,17L1581,17L1589,17L1589,17L1593,17L1593,17L1594,17L1594,18L1605,18L1605,18L1609,18L1609,19L1612,19L1612,19L1615,19L1615,19L1616,19L1616,19L1618,19L1618,19L1620,19L1620,19L1621,19L1621,20L1679,20L1679,20L1683,20L1683,20L1693,20L1693,21L1695,21L1695,20L1699,20L1699,20L1714,20L1714,21L1721,21L1721,21L1729,21L1729,21L1755,21L1755,21L1759,21L1759,21L1761,21L1761,21L1774,21L1774,21L1776,21L1776,21L1820,21L1820,21L1825,21L1825,21L1826,21L1826,21L1827,21L1827,22L1833,22L1833,22L1841,22L1841,22L1843,22L1843,23L1845,23L1845,23L1849,23L1849,24L1853,24L1853,24L1856,24L1856,24L1861,24L1861,25L1863,25L1863,25L1866,25L1866,25L1882,25L1882,25L1883,25L1883,25L1889,25L1889,25L1893,25L1893,26L1894,26L1894,26L1918,26L1918,27L1932,27L1932,28L1944,28L1944,28L1946,28L1946,28L1948,28L1948,28L1972,28L1972,28L1975,28L1975,29L1982,29L1982,29L1990,29L1990,29L2019,29L2019,29L2030,29L2030,29L2037,29L2037,29L2039,29L2039,29L2055,29L2055,30L2056,30L2056,30L2070,30L2070,30L2082,30L2082,31L2085,31L2085,31L2149,31L2149,31L2150,31L2150,32L2174,32L2174,32L2193,32L2193,32L2207,32L2207,32L2216,32L2216,32L2219,32L2219,32L2233,32L2233,32L2236,32L2236,32L2239,32L2239,33L2253,33L2253,33L2254,33L2254,33L2262,33L2262,33L2271,33L2271,33L2284,33L2284,33L2289,33L2289,33L2291,33L2291,33L2292,33L2292,33L2293,33L2293,33L2294,33L2294,33L2297,33L2297,33L2301,33L2301,33L2304,33L2304,33L2305,33L2305,33L2308,33L2308,33L2311,33L2311,33L2316,33L2316,33L2320,33L2320,33L2322,33L2322,33L2326,33L2326,33L2332,33L2332,33L2334,33L2334,33L2337,33L2337,33L2342,33L2342,33L2345,33L2345,33L2356,33L2356,33L2358,33L2358,34L2365,34L2365,34L2366,34L2366,34L2377,34L2377,34L2397,34L2397,34L2400,34L2400,34L2408,34L2408,34L2414,34L2414,34L2420,34L2420,35L2430,35L2430,35L2431,35L2431,35L2435,35L2435,35L2436,35L2436,35L2439,35L2439,35L2443,35L2443,35L2446,35L2446,36L2456,36L2456,36L2457,36L2457,36L2465,36L2465,36L2467,36L2467,36L2471,36L2471,36L2474,36L2474,37L2475,37L2475,37L2481,37L2481,37L2485,37L2485,37L2487,37L2487,37L2490,37L2490,37L2496,37L2496,37L2500,37L2500,38L2504,38L2504,38L2511,38L2511,38L2514,38L2514,38L2525,38L2525,39L2527,39L2527,39L2529,39L2529,39L2531,39L2531,39L2532,39L2532,39L2542,39L2542,40L2547,40L2547,40L2551,40L2551,40L2553,40L2553,40L2557,40L2557,40L2560,40L2560,40L2564,40L2564,40L2569,40L2569,41L2574,41L2574,41L2577,41L2577,41L2579,41L2579,41L2585,41L2585,42L2588,42L2588,43L2590,43L2590,43L2596,43L2596,43L2601,43L2601,44L2604,44L2604,44L2607,44L2607,45L2610,45L2610,46L2611,46L2611,46L2615,46L2615,46L2616,46L2616,46L2618,46L2618,46L2623,46L2623,46L2625,46L2625,47L2634,47L2634,47L2639,47L2639,47L2646,47L2646,47L2647,47L2647,47L2654,47L2654,47L2656,47L2656,47L2661,47L2661,47L2663,47L2663,47L2668,47L2668,47L2669,47L2669,47L2671,47L2671,47L2672,47L2672,47L2678,47L2678,47L2680,47L2680,47L2681,47L2681,47L2684,47L2684,47L2686,47L2686,47L2690,47L2690,47L2691,47L2691,47L2695,47L2695,47L2702,47L2702,48L2703,48L2703,48L2706,48L2706,48L2707,48L2707,49L2709,49L2709,49L2714,49L2714,49L2717,49L2717,49L2718,49L2718,49L2720,49L2720,49L2723,49" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L1,0L1,7L14,7L14,7L25,7L25,8L26,8L26,7L32,7L32,7L346,7L346,7L513,7L513,8L573,8L573,9L785,9L785,9L803,9L803,9L965,9L965,10L978,10L978,10L987,10L987,10L1004,10L1004,11L1037,11L1037,12L1038,12L1038,11L1043,11L1043,11L1072,11L1072,11L1080,11L1080,12L1117,12L1117,11L1131,11L1131,12L1134,12L1134,13L1331,13L1331,14L1357,14L1357,15L1360,15L1360,16L1361,16L1361,17L1386,17L1386,17L1416,17L1416,18L1417,18L1417,19L1445,19L1445,20L1450,20L1450,21L1469,21L1469,22L1470,22L1470,21L1485,21L1485,22L1505,22L1505,23L1510,23L1510,24L1512,24L1512,23L1514,23L1514,24L1532,24L1532,24L1534,24L1534,25L1546,25L1546,26L1573,26L1573,27L1593,27L1593,28L1598,28L1598,29L1615,29L1615,30L1636,30L1636,31L1638,31L1638,32L1642,32L1642,33L1704,33L1704,34L1710,34L1710,35L1774,35L1774,36L1819,36L1819,37L1824,37L1824,37L1827,37L1827,38L1829,38L1829,39L1840,39L1840,42L1869,42L1869,43L1878,43L1878,44L1880,44L1880,45L1883,45L1883,46L1897,46L1897,48L1903,48L1903,49L1911,49L1911,50L1922,50L1922,51L1936,51L1936,50L1941,50L1941,51L1949,51L1949,52L1953,52L1953,54L1966,54L1966,55L1969,55L1969,56L1975,56L1975,57L1981,57L1981,58L1986,58L1986,59L2002,59L2002,59L2016,59L2016,59L2029,59L2029,60L2030,60L2030,61L2033,61L2033,61L2039,61L2039,62L2092,62L2092,63L2096,63L2096,64L2147,64L2147,65L2148,65L2148,66L2150,66L2150,67L2151,67L2151,68L2166,68L2166,69L2171,69L2171,70L2193,70L2193,71L2199,71L2199,72L2205,72L2205,73L2216,73L2216,74L2238,74L2238,75L2253,75L2253,76L2258,76L2258,77L2268,77L2268,79L2285,79L2285,80L2298,80L2298,81L2304,81L2304,82L2305,82L2305,83L2308,83L2308,83L2310,83L2310,83L2332,83L2332,83L2334,83L2334,84L2336,84L2336,85L2348,85L2348,86L2349,86L2349,86L2350,86L2350,85L2358,85L2358,86L2365,86L2365,87L2366,87L2366,88L2375,88L2375,87L2391,87L2391,88L2401,88L2401,89L2428,89L2428,90L2443,90L2443,91L2451,91L2451,92L2452,92L2452,93L2464,93L2464,94L2502,94L2502,95L2510,95L2510,97L2514,97L2514,98L2520,98L2520,99L2538,99L2538,101L2558,101L2558,101L2560,101L2560,102L2569,102L2569,102L2579,102L2579,103L2587,103L2587,104L2589,104L2589,104L2595,104L2595,104L2601,104L2601,105L2602,105L2602,106L2603,106L2603,106L2630,106L2630,107L2646,107L2646,109L2649,109L2649,110L2655,110L2655,111L2664,111L2664,112L2665,112L2665,112L2667,112L2667,113L2668,113L2668,112L2669,112L2669,114L2676,114L2676,115L2679,115L2679,116L2680,116L2680,117L2681,117L2681,117L2686,117L2686,118L2691,118L2691,118L2700,118L2700,119L2708,119L2708,120L2710,120L2710,121L2722,121L2722,122L2723,122L2723,123L2723,123" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L2,0L2,2L35,2L35,2L526,2L526,3L801,3L801,3L960,3L960,3L978,3L978,3L985,3L985,3L1071,3L1071,4L1075,4L1075,3L1447,3L1447,4L1479,4L1479,5L1505,5L1505,5L1532,5L1532,5L1574,5L1574,5L1592,5L1592,5L1594,5L1594,6L1598,6L1598,7L1600,7L1600,8L1632,8L1632,9L1662,9L1662,9L1709,9L1709,9L1716,9L1716,10L1728,10L1728,11L1780,11L1780,11L1792,11L1792,12L1833,12L1833,13L1839,13L1839,14L1842,14L1842,14L1849,14L1849,14L1858,14L1858,15L1871,15L1871,16L1900,16L1900,16L1912,16L1912,17L1981,17L1981,18L2005,18L2005,19L2014,19L2014,20L2050,20L2050,21L2053,21L2053,21L2055,21L2055,21L2096,21L2096,22L2178,22L2178,22L2205,22L2205,22L2207,22L2207,23L2221,23L2221,24L2237,24L2237,25L2238,25L2238,25L2255,25L2255,26L2260,26L2260,27L2264,27L2264,27L2312,27L2312,28L2331,28L2331,28L2341,28L2341,29L2364,29L2364,29L2369,29L2369,29L2387,29L2387,29L2435,29L2435,29L2436,29L2436,29L2472,29L2472,30L2502,30L2502,31L2510,31L2510,31L2512,31L2512,32L2513,32L2513,31L2523,31L2523,32L2529,32L2529,33L2531,33L2531,33L2533,33L2533,33L2540,33L2540,33L2542,33L2542,34L2543,34L2543,33L2552,33L2552,34L2556,34L2556,36L2557,36L2557,37L2561,37L2561,37L2571,37L2571,37L2579,37L2579,38L2588,38L2588,38L2591,38L2591,38L2601,38L2601,38L2606,38L2606,39L2645,39L2645,40L2649,40L2649,41L2650,41L2650,41L2654,41L2654,41L2655,41L2655,41L2661,41L2661,41L2668,41L2668,41L2669,41L2669,41L2674,41L2674,41L2682,41L2682,41L2694,41L2694,41L2696,41L2696,41L2700,41L2700,41L2704,41L2704,41L2708,41L2708,41L2716,41L2716,42L2723,42L2723,42L2723,42" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L2,0L2,2L24,2L24,1L26,1L26,2L37,2L37,2L795,2L795,2L796,2L796,2L842,2L842,2L958,2L958,2L976,2L976,2L978,2L978,2L985,2L985,2L1004,2L1004,2L1079,2L1079,2L1550,2L1550,2L1574,2L1574,2L1616,2L1616,2L1722,2L1722,2L1729,2L1729,2L1788,2L1788,2L1846,2L1846,2L1870,2L1870,2L1981,2L1981,2L2028,2L2028,2L2050,2L2050,3L2178,3L2178,3L2342,3L2342,3L2539,3L2539,3L2558,3L2558,3L2559,3L2559,3L2560,3L2560,3L2591,3L2591,3L2656,3L2656,3L2660,3L2660,3L2685,3L2685,3L2690,3L2690,3L2691,3L2691,3L2696,3L2696,3L2700,3L2700,3L2717,3L2717,3L2723,3" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L4,0L4,1L34,1L34,1L526,1L526,2L771,2L771,2L773,2L773,2L777,2L777,2L791,2L791,2L882,2L882,2L908,2L908,2L958,2L958,2L976,2L976,2L978,2L978,2L983,2L983,2L985,2L985,2L1034,2L1034,2L1081,2L1081,2L1325,2L1325,2L1383,2L1383,2L1568,2L1568,2L1574,2L1574,2L1594,2L1594,2L1624,2L1624,2L1646,2L1646,2L1648,2L1648,2L1662,2L1662,2L1728,2L1728,2L1759,2L1759,2L1761,2L1761,2L1845,2L1845,2L1870,2L1870,2L1990,2L1990,2L2007,2L2007,2L2050,2L2050,2L2104,2L2104,2L2178,2L2178,2L2238,2L2238,3L2247,3L2247,3L2278,3L2278,3L2331,3L2331,3L2332,3L2332,3L2341,3L2341,3L2387,3L2387,3L2400,3L2400,3L2463,3L2463,3L2512,3L2512,3L2524,3L2524,3L2525,3L2525,3L2528,3L2528,3L2535,3L2535,3L2540,3L2540,3L2550,3L2550,3L2569,3L2569,3L2591,3L2591,3L2615,3L2615,3L2640,3L2640,3L2650,3L2650,3L2656,3L2656,3L2670,3L2670,3L2680,3L2680,3L2681,3L2681,3L2682,3L2682,3L2684,3L2684,3L2685,3L2685,3L2688,3L2688,3L2689,3L2689,3L2701,3L2701,3L2708,3L2708,3L2709,3L2709,3L2723,3" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L4,0L4,1L37,1L37,1L672,1L672,1L798,1L798,1L971,1L971,1L985,1L985,1L1018,1L1018,1L1076,1L1076,1L1079,1L1079,1L1416,1L1416,1L1470,1L1470,1L1538,1L1538,1L1556,1L1556,1L1574,1L1574,1L1575,1L1575,1L1596,1L1596,1L1602,1L1602,1L1632,1L1632,1L1637,1L1637,1L1705,1L1705,1L1711,1L1711,1L1818,1L1818,1L1870,1L1870,1L1945,1L1945,1L2139,1L2139,1L2178,1L2178,1L2235,1L2235,1L2238,1L2238,1L2274,1L2274,1L2342,1L2342,1L2346,1L2346,1L2369,1L2369,1L2387,1L2387,1L2554,1L2554,1L2558,1L2558,1L2591,1L2591,1L2593,1L2593,1L2648,1L2648,1L2652,1L2652,1L2660,1L2660,1L2688,1L2688,1L2689,1L2689,1L2708,1L2708,2L2716,2L2716,3L2723,3L2723,3L2723,3" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L4,0L4,1L30,1L30,1L514,1L514,2L795,2L795,2L958,2L958,2L981,2L981,2L1304,2L1304,2L1454,2L1454,2L1482,2L1482,3L1497,3L1497,3L1552,3L1552,3L1572,3L1572,3L1593,3L1593,3L1605,3L1605,4L1619,4L1619,4L1647,4L1647,4L1725,4L1725,4L1774,4L1774,5L1824,5L1824,5L1829,5L1829,5L1883,5L1883,5L1941,5L1941,5L1975,5L1975,6L1981,6L1981,7L2016,7L2016,7L2092,7L2092,7L2098,7L2098,8L2104,8L2104,7L2193,7L2193,8L2266,8L2266,8L2310,8L2310,8L2338,8L2338,8L2360,8L2360,8L2430,8L2430,8L2480,8L2480,8L2513,8L2513,8L2514,8L2514,8L2579,8L2579,8L2585,8L2585,8L2590,8L2590,8L2601,8L2601,9L2616,9L2616,9L2633,9L2633,9L2649,9L2649,10L2665,10L2665,10L2673,10L2673,11L2682,11L2682,11L2684,11L2684,11L2685,11L2685,11L2686,11L2686,11L2691,11L2691,11L2698,11L2698,11L2710,11L2710,12L2723,12" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L4,0L4,1L30,1L30,1L112,1L112,1L303,1L303,1L513,1L513,2L793,2L793,2L896,2L896,2L981,2L981,2L1007,2L1007,2L1013,2L1013,2L1030,2L1030,2L1056,2L1056,2L1125,2L1125,2L1131,2L1131,2L1294,2L1294,3L1360,3L1360,4L1392,4L1392,5L1456,5L1456,5L1484,5L1484,6L1512,6L1512,6L1574,6L1574,6L1584,6L1584,7L1593,7L1593,8L1606,8L1606,8L1609,8L1609,9L1619,9L1619,9L1621,9L1621,10L1636,10L1636,10L1645,10L1645,10L1693,10L1693,11L1694,11L1694,12L1695,12L1695,11L1700,11L1700,12L1705,12L1705,12L1767,12L1767,12L1774,12L1774,13L1788,13L1788,13L1800,13L1800,14L1827,14L1827,15L1841,15L1841,15L1864,15L1864,15L1909,15L1909,16L1916,16L1916,16L1925,16L1925,17L1941,17L1941,18L1974,18L1974,19L1989,19L1989,19L2002,19L2002,18L2051,18L2051,18L2092,18L2092,18L2094,18L2094,19L2127,19L2127,20L2149,20L2149,21L2153,21L2153,20L2157,20L2157,20L2236,20L2236,20L2240,20L2240,21L2303,21L2303,21L2334,21L2334,21L2373,21L2373,21L2387,21L2387,21L2448,21L2448,21L2449,21L2449,21L2484,21L2484,21L2495,21L2495,21L2504,21L2504,21L2509,21L2509,21L2513,21L2513,21L2539,21L2539,22L2540,22L2540,22L2541,22L2541,23L2544,23L2544,23L2545,23L2545,23L2573,23L2573,23L2590,23L2590,23L2601,23L2601,24L2603,24L2603,25L2632,25L2632,25L2640,25L2640,25L2653,25L2653,25L2657,25L2657,25L2665,25L2665,25L2667,25L2667,26L2680,26L2680,26L2692,26L2692,26L2695,26L2695,27L2698,27L2698,27L2709,27L2709,27L2715,27L2715,27L2717,27L2717,27L2723,27" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path dtabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L4,0L4,1L117,1L117,1L526,1L526,2L689,2L689,2L819,2L819,2L965,2L965,2L978,2L978,2L990,2L990,2L1004,2L1004,2L1047,2L1047,2L1081,2L1081,2L1114,2L1114,2L1187,2L1187,3L1307,3L1307,4L1322,4L1322,5L1452,5L1452,6L1454,6L1454,7L1514,7L1514,8L1568,8L1568,9L1612,9L1612,10L1647,10L1647,11L1702,11L1702,12L1738,12L1738,13L1745,13L1745,14L1800,14L1800,15L1805,15L1805,16L1806,16L1806,17L1807,17L1807,18L1809,18L1809,19L1829,19L1829,20L1835,20L1835,21L1845,21L1845,22L1846,22L1846,23L1870,23L1870,24L1871,24L1871,25L1895,25L1895,26L1904,26L1904,27L1918,27L1918,28L1946,28L1946,29L1980,29L1980,30L2025,30L2025,31L2093,31L2093,32L2106,32L2106,31L2177,31L2177,32L2190,32L2190,33L2222,33L2222,34L2272,34L2272,35L2273,35L2273,36L2275,36L2275,37L2284,37L2284,38L2319,38L2319,39L2330,39L2330,40L2356,40L2356,41L2357,41L2357,43L2387,43L2387,44L2410,44L2410,45L2423,45L2423,46L2459,46L2459,47L2462,47L2462,48L2488,48L2488,49L2494,49L2494,50L2504,50L2504,51L2506,51L2506,52L2507,52L2507,53L2531,53L2531,54L2533,54L2533,55L2534,55L2534,56L2535,56L2535,57L2552,57L2552,58L2553,58L2553,59L2554,59L2554,60L2557,60L2557,61L2591,61L2591,62L2660,62L2660,63L2663,63L2663,62L2666,62L2666,62L2667,62L2667,62L2668,62L2668,61L2673,61L2673,62L2674,62L2674,62L2679,62L2679,62L2683,62L2683,62L2684,62L2684,62L2688,62L2688,62L2689,62L2689,62L2692,62L2692,62L2694,62L2694,62L2700,62L2700,62L2702,62L2702,62L2712,62L2712,62L2713,62L2713,62L2715,62L2715,62L2719,62L2719,61L2723,61" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L4,0L4,2L25,2L25,2L32,2L32,2L514,2L514,2L574,2L574,2L774,2L774,2L788,2L788,2L850,2L850,2L965,2L965,2L981,2L981,2L982,2L982,2L1042,2L1042,2L1049,2L1049,2L1056,2L1056,3L1057,3L1057,3L1061,3L1061,3L1071,3L1071,3L1080,3L1080,4L1097,4L1097,4L1117,4L1117,4L1125,4L1125,4L1128,4L1128,5L1138,5L1138,5L1140,5L1140,5L1294,5L1294,5L1326,5L1326,5L1397,5L1397,5L1402,5L1402,5L1412,5L1412,5L1413,5L1413,6L1433,6L1433,7L1449,7L1449,7L1453,7L1453,7L1455,7L1455,8L1504,8L1504,8L1535,8L1535,8L1563,8L1563,9L1570,9L1570,9L1574,9L1574,9L1575,9L1575,9L1593,9L1593,9L1606,9L1606,9L1618,9L1618,9L1622,9L1622,9L1633,9L1633,9L1634,9L1634,9L1668,9L1668,10L1687,10L1687,11L1690,11L1690,11L1736,11L1736,11L1777,11L1777,12L1825,12L1825,12L1829,12L1829,12L1840,12L1840,12L1869,12L1869,12L1876,12L1876,12L1883,12L1883,12L1918,12L1918,12L1930,12L1930,12L1975,12L1975,13L1981,13L1981,13L1986,13L1986,14L2092,14L2092,14L2099,14L2099,14L2129,14L2129,14L2238,14L2238,15L2249,15L2249,16L2254,16L2254,16L2269,16L2269,16L2282,16L2282,16L2284,16L2284,16L2295,16L2295,16L2301,16L2301,17L2303,17L2303,17L2357,17L2357,17L2387,17L2387,17L2401,17L2401,18L2430,18L2430,18L2446,18L2446,18L2455,18L2455,19L2468,19L2468,19L2471,19L2471,20L2489,20L2489,20L2494,20L2494,20L2509,20L2509,20L2517,20L2517,21L2524,21L2524,22L2525,22L2525,22L2527,22L2527,22L2530,22L2530,22L2533,22L2533,23L2534,23L2534,23L2539,23L2539,23L2545,23L2545,23L2555,23L2555,23L2575,23L2575,24L2579,24L2579,24L2585,24L2585,24L2589,24L2589,24L2590,24L2590,24L2601,24L2601,24L2603,24L2603,24L2620,24L2620,24L2664,24L2664,24L2681,24L2681,24L2684,24L2684,24L2703,24L2703,24L2706,24L2706,24L2710,24L2710,24L2713,24L2713,24L2718,24L2718,24L2723,24" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L4,0L4,1L35,1L35,1L773,1L773,1L799,1L799,1L961,1L961,1L978,1L978,1L983,1L983,1L1008,1L1008,1L1035,1L1035,1L1089,1L1089,1L1269,1L1269,1L1574,1L1574,1L1633,1L1633,1L1660,1L1660,1L1729,1L1729,1L1840,1L1840,1L1896,1L1896,1L1914,1L1914,2L1981,2L1981,2L2020,2L2020,2L2178,2L2178,2L2240,2L2240,3L2334,3L2334,3L2387,3L2387,3L2480,3L2480,3L2513,3L2513,3L2578,3L2578,3L2579,3L2579,3L2580,3L2580,3L2591,3L2591,3L2601,3L2601,3L2608,3L2608,3L2671,3L2671,3L2692,3L2692,3L2694,3L2694,3L2713,3L2713,3L2723,3" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L22,0L22,1L31,1L31,1L793,1L793,1L795,1L795,1L981,1L981,1L1011,1L1011,1L1076,1L1076,1L1178,1L1178,1L1459,1L1459,1L1469,1L1469,1L1536,1L1536,1L1634,1L1634,1L1697,1L1697,1L1730,1L1730,1L1773,1L1773,1L1783,1L1783,1L1801,1L1801,1L1809,1L1809,1L1986,1L1986,1L2009,1L2009,1L2055,1L2055,1L2119,1L2119,1L2144,1L2144,1L2162,1L2162,1L2237,1L2237,1L2248,1L2248,1L2283,1L2283,1L2369,1L2369,1L2371,1L2371,1L2387,1L2387,1L2395,1L2395,1L2396,1L2396,1L2517,1L2517,1L2553,1L2553,1L2615,1L2615,1L2625,1L2625,1L2670,1L2670,1L2672,1L2672,1L2673,1L2673,1L2684,1L2684,1L2685,1L2685,1L2699,1L2699,1L2703,1L2703,1L2723,1" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L22,0L22,1L114,1L114,1L795,1L795,1L978,1L978,1L981,1L981,1L1001,1L1001,1L1005,1L1005,1L1010,1L1010,1L1458,1L1458,1L1529,1L1529,1L1538,1L1538,1L1603,1L1603,1L1728,1L1728,1L1729,1L1729,1L1732,1L1732,1L1736,1L1736,1L1823,1L1823,1L1830,1L1830,1L1976,1L1976,1L2093,1L2093,1L2238,1L2238,1L2243,1L2243,1L2245,1L2245,1L2266,1L2266,1L2361,1L2361,1L2369,1L2369,1L2387,1L2387,1L2395,1L2395,1L2434,1L2434,1L2436,1L2436,1L2455,1L2455,1L2460,1L2460,1L2550,1L2550,1L2554,1L2554,1L2562,1L2562,1L2564,1L2564,1L2603,1L2603,1L2648,1L2648,1L2664,1L2664,1L2669,1L2669,1L2670,1L2670,1L2673,1L2673,1L2684,1L2684,1L2686,1L2686,1L2687,1L2687,1L2694,1L2694,1L2703,1L2703,1L2708,1L2708,1L2709,1L2709,1L2716,1L2716,1L2720,1L2720,1L2722,1L2722,1L2723,1" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L23,0L23,1L109,1L109,1L114,1L114,1L784,1L784,1L842,1L842,1L896,1L896,1L954,1L954,1L979,1L979,1L981,1L981,1L985,1L985,1L986,1L986,1L988,1L988,1L1068,1L1068,1L1130,1L1130,2L1431,2L1431,2L1459,2L1459,3L1469,3L1469,3L1472,3L1472,3L1497,3L1497,3L1543,3L1543,3L1578,3L1578,3L1716,3L1716,3L1729,3L1729,3L1790,3L1790,4L1841,4L1841,4L1982,4L1982,4L2049,4L2049,4L2343,4L2343,4L2581,4L2581,4L2723,4" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L24,0L24,1L32,1L32,1L112,1L112,1L788,1L788,1L796,1L796,1L979,1L979,1L982,1L982,1L983,1L983,1L985,1L985,1L1004,1L1004,1L1187,1L1187,1L1458,1L1458,2L1550,2L1550,2L1633,2L1633,2L1728,2L1728,2L1729,2L1729,2L1773,2L1773,3L1844,3L1844,3L2145,3L2145,3L2236,3L2236,3L2237,3L2237,3L2246,3L2246,3L2284,3L2284,3L2295,3L2295,3L2341,3L2341,3L2351,3L2351,3L2395,3L2395,3L2471,3L2471,3L2472,3L2472,3L2498,3L2498,3L2502,3L2502,3L2504,3L2504,3L2505,3L2505,3L2507,3L2507,3L2513,3L2513,3L2520,3L2520,3L2524,3L2524,3L2539,3L2539,3L2548,3L2548,3L2554,3L2554,3L2557,3L2557,3L2559,3L2559,3L2572,3L2572,3L2573,3L2573,3L2579,3L2579,3L2598,3L2598,3L2603,3L2603,3L2606,3L2606,3L2616,3L2616,3L2644,3L2644,3L2665,3L2665,3L2667,3L2667,3L2668,3L2668,3L2670,3L2670,3L2671,3L2671,3L2672,3L2672,3L2673,3L2673,3L2678,3L2678,3L2681,3L2681,3L2684,3L2684,3L2685,3L2685,3L2686,3L2686,3L2687,3L2687,3L2700,3L2700,3L2705,3L2705,3L2708,3L2708,3L2709,3L2709,3L2710,3L2710,3L2716,3L2716,3L2719,3L2719,3L2721,3L2721,3L2722,3L2722,3L2723,3" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L24,0L24,1L31,1L31,1L784,1L784,1L892,1L892,1L979,1L979,1L1007,1L1007,1L1030,1L1030,1L1130,1L1130,1L1728,1L1728,1L1729,1L1729,1L1808,1L1808,2L1879,2L1879,2L2146,2L2146,3L2244,3L2244,3L2333,3L2333,3L2387,3L2387,3L2395,3L2395,3L2565,3L2565,3L2582,3L2582,3L2639,3L2639,3L2660,3L2660,3L2676,3L2676,3L2693,3L2693,3L2723,3" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.xqkjmnnl</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L24,0L24,1L25,1L25,2L26,2L26,1L112,1L112,1L113,1L113,1L794,1L794,1L978,1L978,1L986,1L986,1L1001,1L1001,1L1076,1L1076,1L1694,1L1694,1L1782,1L1782,1L1856,1L1856,1L1857,1L1857,1L1888,1L1888,1L2051,1L2051,1L2203,1L2203,1L2213,1L2213,1L2246,1L2246,1L2383,1L2383,1L2393,1L2393,1L2395,1L2395,1L2481,1L2481,1L2483,1L2483,1L2543,1L2543,1L2554,1L2554,1L2656,1L2656,1L2665,1L2665,1L2675,1L2675,1L2676,1L2676,1L2681,1L2681,1L2684,1L2684,1L2685,1L2685,1L2686,1L2686,1L2700,1L2700,1L2714,1L2714,1L2722,1L2722,1L2723,1" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L25,0L25,1L114,1L114,1L800,1L800,1L979,1L979,1L1030,1L1030,1L1046,1L1046,1L1243,1L1243,1L1326,1L1326,1L1479,1L1479,1L1552,1L1552,1L1553,1L1553,1L1797,1L1797,1L1800,1L1800,1L1894,1L1894,1L1905,1L1905,1L1915,1L1915,1L1945,1L1945,1L2015,1L2015,1L2387,1L2387,1L2451,1L2451,1L2463,1L2463,1L2494,1L2494,1L2512,1L2512,1L2551,1L2551,1L2622,1L2622,1L2626,1L2626,1L2638,1L2638,1L2656,1L2656,1L2661,1L2661,1L2685,1L2685,1L2708,1L2708,1L2719,1L2719,1L2723,1" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L25,0L25,1L114,1L114,1L806,1L806,1L959,1L959,1L978,1L978,1L1030,1L1030,1L1525,1L1525,1L1749,1L1749,1L2343,1L2343,1L2387,1L2387,1L2460,1L2460,1L2465,1L2465,1L2473,1L2473,1L2483,1L2483,1L2549,1L2549,1L2570,1L2570,1L2660,1L2660,1L2695,1L2695,1L2723,1" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.p12dx07q</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L26,0L26,1L37,1L37,1L796,1L796,1L854,1L854,1L971,1L971,1L978,1L978,1L981,1L981,1L1003,1L1003,1L1007,1L1007,1L1080,1L1080,1L1191,1L1191,1L1473,1L1473,1L1537,1L1537,1L1538,1L1538,1L1565,1L1565,1L1574,1L1574,1L1579,1L1579,1L1670,1L1670,1L1675,1L1675,1L1729,1L1729,1L1731,1L1731,1L1736,1L1736,1L1844,1L1844,1L1870,1L1870,1L1875,1L1875,1L1907,1L1907,1L2044,1L2044,1L2065,1L2065,1L2116,1L2116,1L2178,1L2178,1L2266,1L2266,1L2318,1L2318,1L2337,1L2337,1L2351,1L2351,1L2369,1L2369,1L2387,1L2387,1L2479,1L2479,1L2481,1L2481,1L2515,1L2515,1L2543,1L2543,1L2581,1L2581,1L2582,1L2582,1L2591,1L2591,1L2593,1L2593,1L2660,1L2660,1L2668,1L2668,1L2670,1L2670,1L2680,1L2680,1L2683,1L2683,1L2685,1L2685,1L2686,1L2686,1L2688,1L2688,1L2695,1L2695,1L2698,1L2698,1L2706,1L2706,1L2713,1L2713,1L2716,1L2716,1L2723,1" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L166,0L166,2L169,2L169,1L179,1L179,1L1030,1L1030,2L1047,2L1047,3L1146,3L1146,4L1161,4L1161,5L1183,5L1183,4L1236,4L1236,4L1286,4L1286,5L1615,5L1615,5L1889,5L1889,5L1893,5L1893,5L1933,5L1933,6L1985,6L1985,7L2044,7L2044,8L2097,8L2097,7L2116,7L2116,7L2117,7L2117,7L2216,7L2216,7L2240,7L2240,7L2452,7L2452,7L2527,7L2527,7L2532,7L2532,7L2542,7L2542,7L2549,7L2549,7L2682,7L2682,7L2688,7L2688,7L2723,7" tabindex="0">
						<title>l_ldykv1zw-rkl3znrk-wl3059ol.4qypgj4q</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L196,0L196,1L197,1L197,1L305,1L305,1L395,1L395,1L458,1L458,1L1245,1L1245,1L1247,1L1247,1L2553,1L2553,1L2631,1L2631,1L2723,1" tabindex="0">
						<title>xd17x94d-9l71pv4l.81wrgm5l</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
