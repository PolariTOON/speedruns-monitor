<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player xk3m6d68</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2022-04-15</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-31</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">251</text>
		</svg>
		<svg viewBox="0 0 1234 251" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 251) scale(1 -1)" style="--count: 25;">
				<g>
					<rect x="0" y="0" width="1234" height="251"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,16L8,16L8,28L16,28L16,29L20,29L20,41L21,41L21,43L24,43L24,44L48,44L48,46L50,46L50,47L72,47L72,48L77,48L77,49L79,49L79,50L82,50L82,51L85,51L85,52L92,52L92,53L100,53L100,54L104,54L104,55L105,55L105,56L116,56L116,57L120,57L120,58L123,58L123,59L126,59L126,60L127,60L127,60L129,60L129,61L131,61L131,62L132,62L132,63L190,63L190,64L194,64L194,65L204,65L204,66L210,66L210,67L225,67L225,68L232,68L232,69L240,69L240,70L266,70L266,71L270,71L270,72L272,72L272,73L285,73L285,74L287,74L287,75L331,75L331,76L336,76L336,77L337,77L337,78L338,78L338,79L344,79L344,80L350,80L350,79L352,79L352,80L354,80L354,81L356,81L356,82L360,82L360,83L364,83L364,84L367,84L367,85L372,85L372,86L374,86L374,87L377,87L377,88L393,88L393,89L394,89L394,91L400,91L400,93L404,93L404,94L405,94L405,95L429,95L429,97L443,97L443,98L455,98L455,99L457,99L457,100L459,100L459,101L483,101L483,102L486,102L486,103L493,103L493,105L496,105L496,104L501,104L501,105L530,105L530,105L541,105L541,106L548,106L548,107L550,107L550,108L566,108L566,109L567,109L567,110L581,110L581,111L593,111L593,112L596,112L596,114L634,114L634,113L660,113L660,114L661,114L661,116L685,116L685,117L704,117L704,118L718,118L718,119L727,119L727,120L730,120L730,121L744,121L744,122L747,122L747,123L750,123L750,124L764,124L764,125L765,125L765,127L773,127L773,128L782,128L782,130L795,130L795,131L800,131L800,132L802,132L802,133L803,133L803,134L804,134L804,135L805,135L805,136L808,136L808,137L812,137L812,138L815,138L815,139L816,139L816,140L819,140L819,142L822,142L822,143L827,143L827,144L831,144L831,145L833,145L833,146L837,146L837,147L843,147L843,149L845,149L845,150L848,150L848,151L850,151L850,150L853,150L853,151L856,151L856,152L867,152L867,153L869,153L869,155L876,155L876,156L877,156L877,158L886,158L886,157L888,157L888,158L894,158L894,157L898,157L898,156L908,156L908,157L911,157L911,158L919,158L919,158L925,158L925,160L931,160L931,161L941,161L941,161L942,161L942,162L946,162L946,163L947,163L947,164L950,164L950,165L954,165L954,166L957,166L957,168L967,168L967,169L968,169L968,170L976,170L976,171L978,171L978,172L982,172L982,173L985,173L985,174L986,174L986,176L992,176L992,176L996,176L996,177L998,177L998,179L1001,179L1001,181L1007,181L1007,183L1011,183L1011,184L1015,184L1015,185L1022,185L1022,187L1025,187L1025,188L1036,188L1036,189L1038,189L1038,190L1040,190L1040,191L1042,191L1042,192L1043,192L1043,193L1053,193L1053,194L1058,194L1058,195L1062,195L1062,194L1064,194L1064,195L1068,195L1068,195L1071,195L1071,196L1075,196L1075,197L1080,197L1080,198L1085,198L1085,199L1088,199L1088,200L1090,200L1090,201L1096,201L1096,202L1099,202L1099,203L1101,203L1101,204L1107,204L1107,205L1112,205L1112,206L1115,206L1115,207L1118,207L1118,208L1121,208L1121,210L1122,210L1122,211L1126,211L1126,212L1127,212L1127,214L1128,214L1128,213L1129,213L1129,214L1132,214L1132,213L1134,213L1134,214L1136,214L1136,215L1145,215L1145,217L1149,217L1149,216L1150,216L1150,217L1157,217L1157,218L1158,218L1158,220L1165,220L1165,222L1167,222L1167,222L1172,222L1172,223L1174,223L1174,223L1179,223L1179,224L1180,224L1180,226L1182,226L1182,227L1183,227L1183,228L1189,228L1189,229L1191,229L1191,230L1192,230L1192,231L1195,231L1195,232L1197,232L1197,233L1201,233L1201,235L1202,235L1202,237L1206,237L1206,238L1213,238L1213,241L1214,241L1214,242L1217,242L1217,243L1218,243L1218,245L1220,245L1220,246L1225,246L1225,247L1228,247L1228,248L1229,248L1229,249L1231,249L1231,251L1234,251" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L8,0L8,14L39,14L39,17L54,17L54,18L89,18L89,19L227,19L227,20L240,20L240,21L301,21L301,22L352,22L352,23L493,23L493,24L560,24L560,24L854,24L854,25L1092,25L1092,26L1234,26" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L8,0L8,7L20,7L20,11L35,11L35,12L63,12L63,13L83,13L83,13L104,13L104,14L116,14L116,15L130,15L130,16L158,16L158,17L236,17L236,18L285,18L285,19L335,19L335,19L340,19L340,20L394,20L394,21L452,21L452,22L486,22L486,23L492,23L492,24L527,24L527,25L603,25L603,26L609,26L609,27L704,27L704,28L777,28L777,29L821,29L821,30L849,30L849,31L871,31L871,32L895,32L895,31L941,31L941,32L991,32L991,33L1024,33L1024,34L1025,34L1025,34L1090,34L1090,34L1096,34L1096,35L1101,35L1101,36L1112,36L1112,37L1127,37L1127,38L1144,38L1144,39L1160,39L1160,40L1163,40L1163,39L1173,39L1173,38L1176,38L1176,39L1184,39L1184,40L1193,40L1193,41L1195,41L1195,42L1196,42L1196,43L1197,43L1197,44L1202,44L1202,44L1209,44L1209,45L1219,45L1219,44L1221,44L1221,45L1225,45L1225,44L1234,44" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L15,0L15,63L46,63L46,64L47,64L47,65L48,65L48,66L51,66L51,67L53,67L53,68L81,68L81,69L83,69L83,70L84,70L84,75L85,75L85,76L89,76L89,78L92,78L92,79L93,79L93,80L94,80L94,81L104,81L104,83L122,83L122,84L124,84L124,85L127,85L127,86L129,86L129,88L131,88L131,89L134,89L134,91L136,91L136,92L141,92L141,94L149,94L149,95L150,95L150,96L154,96L154,97L157,97L157,98L160,98L160,99L165,99L165,100L175,100L175,101L177,101L177,102L179,102L179,103L180,103L180,104L182,104L182,105L183,105L183,106L205,106L205,107L212,107L212,108L229,108L229,109L233,109L233,110L237,110L237,111L241,111L241,112L247,112L247,113L260,113L260,114L265,114L265,115L270,115L270,116L278,116L278,117L279,117L279,118L284,118L284,119L297,119L297,120L302,120L302,121L304,121L304,123L308,123L308,125L309,125L309,126L318,126L318,127L326,127L326,128L331,128L331,129L336,129L336,130L340,130L340,131L351,131L351,132L352,132L352,133L356,133L356,134L360,134L360,135L362,135L362,136L365,136L365,137L366,137L366,138L386,138L386,139L387,139L387,140L394,140L394,141L396,141L396,142L401,142L401,143L408,143L408,144L409,144L409,145L411,145L411,146L421,146L421,147L435,147L435,148L442,148L442,149L445,149L445,150L465,150L465,151L476,151L476,152L517,152L517,153L529,153L529,154L550,154L550,155L556,155L556,156L562,156L562,158L568,158L568,159L576,159L576,160L603,160L603,161L632,161L632,161L657,161L657,162L699,162L699,163L700,163L700,164L720,164L720,165L723,165L723,166L730,166L730,167L755,167L755,168L765,168L765,169L767,169L767,170L773,170L773,171L803,171L803,172L829,172L829,174L836,174L836,175L844,175L844,176L857,176L857,177L858,177L858,178L865,178L865,179L870,179L870,180L874,180L874,181L876,181L876,182L886,182L886,183L898,183L898,184L906,184L906,185L926,185L926,186L931,186L931,187L932,187L932,189L947,189L947,190L959,190L959,191L965,191L965,192L968,192L968,193L974,193L974,194L977,194L977,195L1005,195L1005,196L1011,196L1011,197L1013,197L1013,198L1023,198L1023,199L1024,199L1024,200L1028,200L1028,201L1034,201L1034,203L1036,203L1036,204L1039,204L1039,205L1044,205L1044,206L1053,206L1053,207L1062,207L1062,209L1067,209L1067,210L1068,210L1068,212L1071,212L1071,213L1074,213L1074,214L1078,214L1078,215L1091,215L1091,216L1092,216L1092,217L1093,217L1093,216L1094,216L1094,217L1095,217L1095,218L1096,218L1096,219L1100,219L1100,220L1101,220L1101,221L1103,221L1103,222L1108,222L1108,223L1112,223L1112,224L1119,224L1119,223L1148,223L1148,224L1169,224L1169,225L1175,225L1175,226L1180,226L1180,228L1187,228L1187,229L1192,229L1192,230L1196,230L1196,231L1200,231L1200,232L1202,232L1202,234L1204,234L1204,235L1217,235L1217,236L1225,236L1225,237L1227,237L1227,238L1234,238" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L15,0L15,14L31,14L31,15L34,15L34,14L52,14L52,16L81,16L81,17L136,17L136,18L201,18L201,17L239,17L239,18L349,18L349,18L465,18L465,19L473,19L473,20L1217,20L1217,21L1234,21" tabindex="0">
						<title>9kv6l5e2-ql6rezjl.jq6d86v1</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L36,0L36,7L260,7L260,7L854,7L854,8L898,8L898,8L971,8L971,8L976,8L976,9L984,9L984,10L994,10L994,11L1056,11L1056,10L1060,10L1060,11L1081,11L1081,12L1171,12L1171,12L1206,12L1206,12L1234,12" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.p12dx07q</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L37,0L37,2L976,2L976,3L1029,3L1029,3L1212,3L1212,3L1219,3L1219,3L1234,3" tabindex="0">
						<title>l_495zlx39-9kv66g32-onv7r45n.810zdxoq</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L40,0L40,9L41,9L41,10L42,10L42,9L49,9L49,10L71,10L71,11L73,11L73,10L114,10L114,11L239,11L239,12L240,12L240,13L243,13L243,14L247,14L247,15L334,15L334,16L341,16L341,16L487,16L487,17L604,17L604,18L749,18L749,19L754,19L754,20L756,20L756,21L777,21L777,22L872,22L872,23L880,23L880,24L898,24L898,25L906,25L906,26L945,26L945,27L947,27L947,28L966,28L966,29L971,29L971,30L1061,30L1061,31L1065,31L1065,32L1073,32L1073,33L1075,33L1075,34L1114,34L1114,35L1159,35L1159,36L1175,36L1175,37L1180,37L1180,38L1181,38L1181,39L1182,39L1182,37L1184,37L1184,37L1195,37L1195,38L1197,38L1197,39L1198,39L1198,40L1205,40L1205,41L1211,41L1211,40L1214,40L1214,41L1219,41L1219,42L1220,42L1220,43L1227,43L1227,45L1231,45L1231,45L1233,45L1233,47L1234,47" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L43,0L43,17L44,17L44,16L85,16L85,17L103,17L103,18L105,18L105,19L109,19L109,20L111,20L111,21L143,21L143,22L173,22L173,23L220,23L220,24L227,24L227,25L239,25L239,26L291,26L291,27L303,27L303,28L344,28L344,29L350,29L350,30L353,30L353,30L360,30L360,31L369,31L369,32L382,32L382,33L411,33L411,34L423,34L423,35L492,35L492,36L516,36L516,37L525,37L525,38L561,38L561,39L564,39L564,40L566,40L566,41L607,41L607,42L689,42L689,43L716,43L716,44L718,44L718,45L732,45L732,46L748,46L748,47L749,47L749,48L766,48L766,49L771,49L771,50L775,50L775,51L823,51L823,52L842,52L842,53L852,53L852,54L875,54L875,55L880,55L880,56L898,56L898,57L946,57L946,58L947,58L947,59L983,59L983,60L1013,60L1013,62L1021,62L1021,63L1023,63L1023,64L1034,64L1034,65L1040,65L1040,67L1042,67L1042,68L1044,68L1044,69L1051,69L1051,70L1053,70L1053,71L1063,71L1063,72L1067,72L1067,75L1068,75L1068,76L1072,76L1072,77L1082,77L1082,78L1090,78L1090,79L1098,79L1098,78L1099,78L1099,79L1102,79L1102,80L1112,80L1112,81L1117,81L1117,82L1156,82L1156,83L1160,83L1160,84L1161,84L1161,86L1165,86L1165,87L1166,87L1166,87L1172,87L1172,88L1176,88L1176,87L1177,87L1177,86L1178,86L1178,85L1179,85L1179,87L1180,87L1180,88L1185,88L1185,89L1193,89L1193,90L1194,90L1194,89L1205,89L1205,90L1207,90L1207,91L1211,91L1211,93L1215,93L1215,96L1219,96L1219,97L1227,97L1227,99L1234,99L1234,100L1234,100" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L47,0L47,11L145,11L145,12L208,12L208,12L241,12L241,13L284,13L284,14L294,14L294,15L312,15L312,16L320,16L320,17L497,17L497,18L520,18L520,19L566,19L566,20L630,20L630,21L655,21L655,22L673,22L673,23L674,23L674,22L748,22L748,23L759,23L759,24L794,24L794,25L880,25L880,26L882,26L882,27L898,27L898,28L906,28L906,29L907,29L907,29L1028,29L1028,30L1064,30L1064,30L1126,30L1126,31L1136,31L1136,32L1173,32L1173,31L1181,31L1181,32L1183,32L1183,33L1184,33L1184,34L1195,34L1195,35L1196,35L1196,36L1202,36L1202,35L1210,35L1210,36L1214,36L1214,36L1234,36" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L57,0L57,4L972,4L972,4L977,4L977,5L1059,5L1059,5L1162,5L1162,5L1234,5" tabindex="0">
						<title>l_495zlx39-9kv66g32-onv7r45n.9qj08g7l</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L57,0L57,5L84,5L84,6L382,6L382,6L555,6L555,7L866,7L866,8L893,8L893,8L898,8L898,9L933,9L933,9L1024,9L1024,10L1068,10L1068,11L1103,11L1103,10L1114,10L1114,11L1171,11L1171,11L1183,11L1183,11L1194,11L1194,10L1195,10L1195,10L1219,10L1219,10L1234,10" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L57,0L57,4L1234,4" tabindex="0">
						<title>l_rdqo542w-xd144xzd-ylpk6768.qvv3eeyq</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L59,0L59,5L92,5L92,6L1023,6L1023,6L1234,6" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.lmozgg01</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L61,0L61,14L62,14L62,13L72,13L72,13L144,13L144,14L239,14L239,15L240,15L240,16L284,16L284,17L335,17L335,16L355,16L355,17L656,17L656,18L747,18L747,19L748,19L748,20L757,20L757,21L795,21L795,22L806,22L806,23L852,23L852,24L862,24L862,25L906,25L906,26L982,26L982,27L983,27L983,28L1009,28L1009,29L1013,29L1013,30L1015,30L1015,31L1016,31L1016,32L1018,32L1018,33L1024,33L1024,34L1031,34L1031,35L1035,35L1035,36L1050,36L1050,37L1059,37L1059,38L1065,38L1065,39L1068,39L1068,40L1070,40L1070,41L1083,41L1083,41L1084,41L1084,41L1090,41L1090,42L1109,42L1109,43L1114,43L1114,44L1117,44L1117,45L1127,45L1127,46L1155,46L1155,46L1169,46L1169,45L1176,45L1176,46L1178,46L1178,46L1179,46L1179,46L1181,46L1181,47L1182,47L1182,48L1183,48L1183,49L1184,49L1184,50L1189,50L1189,50L1192,50L1192,51L1195,51L1195,52L1196,52L1196,53L1197,53L1197,54L1198,54L1198,54L1200,54L1200,53L1211,53L1211,54L1216,54L1216,55L1219,55L1219,56L1220,56L1220,57L1221,57L1221,58L1227,58L1227,59L1230,59L1230,60L1232,60L1232,61L1233,61L1233,62L1234,62" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L61,0L61,12L85,12L85,13L127,13L127,14L233,14L233,14L236,14L236,13L240,13L240,14L299,14L299,15L357,15L357,16L381,16L381,17L492,17L492,18L539,18L539,18L561,18L561,19L689,19L689,20L853,20L853,21L1050,21L1050,22L1069,22L1069,22L1070,22L1070,22L1071,22L1071,23L1102,23L1102,24L1167,24L1167,24L1171,24L1171,24L1196,24L1196,26L1201,26L1201,26L1202,26L1202,26L1207,26L1207,26L1211,26L1211,26L1228,26L1228,27L1232,27L1232,26L1234,26" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L64,0L64,11L65,11L65,10L106,10L106,9L308,9L308,10L311,10L311,11L405,11L405,12L416,12L416,13L422,13L422,12L426,12L426,12L456,12L456,13L526,13L526,13L898,13L898,13L962,13L962,13L974,13L974,14L1005,14L1005,14L1023,14L1023,14L1062,14L1062,15L1133,15L1133,15L1137,15L1137,15L1149,15L1149,15L1164,15L1164,14L1167,14L1167,14L1170,14L1170,13L1172,13L1172,13L1196,13L1196,13L1219,13L1219,13L1230,13L1230,14L1234,14" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L65,0L65,3L510,3L510,5L564,5L564,5L977,5L977,6L1000,6L1000,6L1059,6L1059,6L1166,6L1166,5L1170,5L1170,6L1185,6L1185,6L1218,6L1218,6L1234,6" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.qoxdrr4q</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L66,0L66,3L976,3L976,4L1022,4L1022,4L1058,4L1058,4L1219,4L1219,4L1234,4" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.1w43556q</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L69,0L69,7L78,7L78,8L79,8L79,7L367,7L367,7L778,7L778,8L898,8L898,9L1016,9L1016,10L1027,10L1027,11L1054,11L1054,12L1097,12L1097,13L1166,13L1166,13L1171,13L1171,13L1182,13L1182,14L1219,14L1219,13L1234,13" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21dzoj3l</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L74,0L74,8L356,8L356,8L404,8L404,9L753,9L753,10L759,10L759,11L845,11L845,12L857,12L857,13L898,13L898,14L982,14L982,15L997,15L997,16L1027,16L1027,17L1055,17L1055,18L1113,18L1113,19L1114,19L1114,20L1171,20L1171,21L1172,21L1172,20L1234,20" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.5q86rxr1</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L74,0L74,5L338,5L338,6L421,6L421,6L533,6L533,6L605,6L605,7L637,7L637,8L711,8L711,9L870,9L870,10L1032,10L1032,11L1033,11L1033,10L1035,10L1035,11L1038,11L1038,10L1055,10L1055,11L1058,11L1058,10L1076,10L1076,11L1164,11L1164,11L1205,11L1205,11L1221,11L1221,12L1234,12" tabindex="0">
						<title>l_r9gn1qpd-xd144xzd-38dz6v1n.5leogx5q</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L76,0L76,16L78,16L78,17L83,17L83,16L85,16L85,17L90,17L90,18L181,18L181,19L186,19L186,20L240,20L240,21L242,21L242,22L247,22L247,23L355,23L355,23L381,23L381,24L386,24L386,25L418,25L418,26L555,26L555,27L576,27L576,28L627,28L627,29L689,29L689,30L777,30L777,31L829,31L829,32L848,32L848,33L862,33L862,34L880,34L880,35L898,35L898,36L990,36L990,38L992,38L992,39L1026,39L1026,40L1054,40L1054,41L1092,41L1092,42L1093,42L1093,43L1102,43L1102,44L1104,44L1104,45L1154,45L1154,44L1171,44L1171,44L1179,44L1179,45L1181,45L1181,46L1191,46L1191,47L1194,47L1194,48L1196,48L1196,49L1197,49L1197,50L1199,50L1199,51L1205,51L1205,50L1206,50L1206,50L1207,50L1207,48L1209,48L1209,49L1217,49L1217,50L1224,50L1224,51L1227,51L1227,52L1234,52" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L77,0L77,23L89,23L89,24L96,24L96,25L106,25L106,26L129,26L129,27L135,27L135,28L137,28L137,29L185,29L185,27L1200,27L1200,27L1234,27" tabindex="0">
						<title>xd17x94d-9l71pv4l.zqo20y2l</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L82,0L82,9L85,9L85,10L451,10L451,9L620,9L620,9L688,9L688,10L756,10L756,11L854,11L854,12L871,12L871,13L898,13L898,14L1058,14L1058,14L1069,14L1069,15L1089,15L1089,16L1173,16L1173,15L1234,15" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
