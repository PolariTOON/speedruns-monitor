<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by leaderboard for player x7q00668</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 30;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2020-11-18</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-30</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 30 20">
			<text x="15" y="10" dx="0" dy="2" textLength="30" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">242</text>
		</svg>
		<svg viewBox="0 0 1777 242" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 242) scale(1 -1)" style="--count: 46;">
				<g>
					<rect x="0" y="0" width="1777" height="242"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,4L1,4L1,4L2,4L2,3L21,3L21,3L101,3L101,4L563,4L563,4L570,4L570,4L597,4L597,5L895,5L895,5L1068,5L1068,6L1379,6L1379,7L1406,7L1406,7L1411,7L1411,8L1446,8L1446,8L1537,8L1537,9L1581,9L1581,10L1606,10L1606,9L1627,9L1627,10L1684,10L1684,10L1696,10L1696,10L1707,10L1707,9L1708,9L1708,9L1732,9L1732,9L1762,9L1762,10L1777,10" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyr4l</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L2,0L2,11L11,11L11,11L28,11L28,12L52,12L52,14L61,14L61,15L63,15L63,14L67,14L67,14L96,14L96,14L104,14L104,15L155,15L155,16L158,16L158,17L355,17L355,18L381,18L381,19L384,19L384,20L385,20L385,21L410,21L410,22L440,22L440,23L441,23L441,24L469,24L469,25L474,25L474,26L493,26L493,27L509,27L509,28L529,28L529,29L534,29L534,30L538,30L538,31L556,31L556,31L558,31L558,32L570,32L570,33L597,33L597,34L617,34L617,35L622,35L622,36L639,36L639,37L660,37L660,38L662,38L662,39L666,39L666,40L728,40L728,41L734,41L734,42L798,42L798,43L843,43L843,44L848,44L848,44L851,44L851,45L853,45L853,46L864,46L864,49L893,49L893,50L902,50L902,51L904,51L904,52L907,52L907,53L921,53L921,55L927,55L927,56L935,56L935,57L946,57L946,58L965,58L965,59L973,59L973,60L977,60L977,62L990,62L990,63L993,63L993,64L999,64L999,65L1005,65L1005,66L1010,66L1010,67L1026,67L1026,68L1040,68L1040,69L1053,69L1053,70L1054,70L1054,71L1057,71L1057,71L1063,71L1063,72L1116,72L1116,73L1120,73L1120,74L1171,74L1171,75L1172,75L1172,76L1174,76L1174,77L1175,77L1175,78L1190,78L1190,79L1195,79L1195,80L1217,80L1217,81L1223,81L1223,82L1229,82L1229,83L1240,83L1240,84L1262,84L1262,85L1277,85L1277,86L1282,86L1282,87L1292,87L1292,89L1309,89L1309,90L1322,90L1322,91L1328,91L1328,92L1329,92L1329,93L1332,93L1332,94L1334,94L1334,94L1356,94L1356,94L1358,94L1358,95L1360,95L1360,96L1372,96L1372,97L1373,97L1373,97L1374,97L1374,96L1382,96L1382,97L1389,97L1389,98L1390,98L1390,99L1415,99L1415,99L1425,99L1425,100L1452,100L1452,101L1467,101L1467,102L1475,102L1475,103L1476,103L1476,104L1488,104L1488,105L1526,105L1526,106L1534,106L1534,108L1538,108L1538,109L1544,109L1544,110L1562,110L1562,112L1582,112L1582,112L1584,112L1584,113L1593,113L1593,113L1603,113L1603,114L1611,114L1611,115L1613,115L1613,116L1619,116L1619,116L1625,116L1625,117L1626,117L1626,118L1627,118L1627,118L1654,118L1654,119L1670,119L1670,121L1673,121L1673,122L1679,122L1679,123L1688,123L1688,124L1689,124L1689,124L1691,124L1691,125L1692,125L1692,126L1693,126L1693,127L1700,127L1700,128L1703,128L1703,129L1704,129L1704,130L1705,130L1705,130L1710,130L1710,131L1715,131L1715,131L1724,131L1724,132L1732,132L1732,133L1734,133L1734,134L1746,134L1746,135L1747,135L1747,137L1750,137L1750,138L1753,138L1753,139L1763,139L1763,140L1764,140L1764,141L1767,141L1767,142L1774,142L1774,143L1775,143L1775,144L1776,144L1776,145L1777,145" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.81ppdgg1</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L2,0L2,5L10,5L10,5L25,5L25,6L62,6L62,5L100,5L100,5L718,5L718,5L806,5L806,6L880,6L880,7L881,7L881,8L912,8L912,9L1075,9L1075,10L1227,10L1227,11L1237,11L1237,12L1270,12L1270,12L1407,12L1407,12L1417,12L1417,12L1419,12L1419,13L1505,13L1505,13L1507,13L1507,13L1567,13L1567,14L1568,14L1568,13L1578,13L1578,13L1680,13L1680,13L1689,13L1689,13L1699,13L1699,13L1700,13L1700,13L1705,13L1705,13L1708,13L1708,13L1709,13L1709,13L1710,13L1710,13L1711,13L1711,12L1713,12L1713,11L1724,11L1724,11L1738,11L1738,11L1746,11L1746,12L1748,12L1748,12L1762,12L1762,13L1770,13L1770,13L1777,13" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.81ppd5g1</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L2,0L2,8L14,8L14,9L28,9L28,10L71,10L71,10L105,10L105,11L138,11L138,11L211,11L211,12L331,12L331,13L346,13L346,14L476,14L476,15L478,15L478,16L538,16L538,17L592,17L592,18L636,18L636,19L671,19L671,20L726,20L726,21L762,21L762,22L769,22L769,23L824,23L824,24L829,24L829,25L830,25L830,26L831,26L831,27L833,27L833,28L853,28L853,29L859,29L859,30L869,30L869,31L870,31L870,32L894,32L894,33L895,33L895,34L919,34L919,35L928,35L928,36L942,36L942,37L970,37L970,38L1004,38L1004,39L1049,39L1049,40L1117,40L1117,41L1130,41L1130,40L1201,40L1201,41L1214,41L1214,42L1246,42L1246,43L1296,43L1296,44L1297,44L1297,45L1299,45L1299,46L1308,46L1308,47L1343,47L1343,48L1354,48L1354,49L1380,49L1380,50L1381,50L1381,52L1411,52L1411,53L1434,53L1434,54L1447,54L1447,55L1483,55L1483,56L1486,56L1486,57L1512,57L1512,58L1518,58L1518,59L1528,59L1528,60L1530,60L1530,61L1531,61L1531,62L1555,62L1555,63L1557,63L1557,64L1558,64L1558,65L1559,65L1559,66L1576,66L1576,67L1577,67L1577,68L1578,68L1578,69L1581,69L1581,70L1615,70L1615,71L1684,71L1684,72L1687,72L1687,71L1690,71L1690,72L1691,72L1691,72L1692,72L1692,72L1697,72L1697,73L1698,73L1698,74L1703,74L1703,75L1707,75L1707,76L1708,76L1708,76L1712,76L1712,76L1713,76L1713,77L1716,77L1716,77L1718,77L1718,78L1724,78L1724,78L1726,78L1726,78L1736,78L1736,79L1737,79L1737,80L1739,80L1739,81L1743,81L1743,80L1751,80L1751,80L1761,80L1761,82L1767,82L1767,83L1777,83" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.810zwdwq</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L2,0L2,4L16,4L16,4L26,4L26,3L48,3L48,4L119,4L119,4L121,4L121,6L563,6L563,5L1162,5L1162,5L1276,5L1276,6L1411,6L1411,7L1559,7L1559,8L1569,8L1569,8L1595,8L1595,9L1684,9L1684,8L1685,8L1685,8L1762,8L1762,9L1767,9L1767,9L1777,9" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21g8owxl</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L2,0L2,5L3,5L3,4L40,4L40,5L41,5L41,5L42,5L42,4L54,4L54,5L549,5L549,5L773,5L773,5L1367,5L1367,6L1411,6L1411,6L1484,6L1484,6L1489,6L1489,7L1497,7L1497,8L1507,8L1507,8L1573,8L1573,9L1594,9L1594,10L1595,10L1595,9L1683,9L1683,8L1684,8L1684,8L1719,8L1719,8L1762,8L1762,9L1777,9" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.p12dx07q</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L2,0L2,2L3,2L3,1L58,1L58,2L88,2L88,3L752,3L752,4L869,4L869,4L1068,4L1068,4L1266,4L1266,4L1359,4L1359,5L1411,5L1411,5L1540,5L1540,6L1592,6L1592,6L1608,6L1608,6L1684,6L1684,5L1685,5L1685,5L1701,5L1701,5L1706,5L1706,4L1707,4L1707,4L1732,4L1732,4L1762,4L1762,5L1777,5" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.gq7jzvnq</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L2,0L2,7L9,7L9,7L32,7L32,9L95,9L95,10L471,10L471,11L503,11L503,12L529,12L529,13L556,13L556,13L598,13L598,14L616,14L616,15L618,15L618,16L622,16L622,17L624,17L624,18L656,18L656,19L657,19L657,18L686,18L686,19L733,19L733,20L740,20L740,21L752,21L752,22L804,22L804,22L816,22L816,23L857,23L857,24L863,24L863,25L866,25L866,25L873,25L873,26L882,26L882,27L895,27L895,28L924,28L924,28L936,28L936,29L1005,29L1005,30L1029,30L1029,31L1038,31L1038,32L1074,32L1074,33L1077,33L1077,34L1079,34L1079,35L1120,35L1120,36L1202,36L1202,36L1229,36L1229,37L1231,37L1231,38L1245,38L1245,39L1261,39L1261,40L1262,40L1262,41L1279,41L1279,42L1284,42L1284,43L1288,43L1288,43L1336,43L1336,44L1355,44L1355,44L1365,44L1365,45L1388,45L1388,45L1393,45L1393,46L1411,46L1411,46L1459,46L1459,46L1460,46L1460,46L1496,46L1496,47L1526,47L1526,49L1534,49L1534,50L1536,50L1536,51L1547,51L1547,52L1553,52L1553,53L1555,53L1555,54L1557,54L1557,55L1564,55L1564,55L1566,55L1566,56L1576,56L1576,57L1580,57L1580,59L1581,59L1581,60L1585,60L1585,61L1595,61L1595,61L1603,61L1603,62L1612,62L1612,62L1615,62L1615,63L1616,63L1616,62L1625,62L1625,62L1630,62L1630,63L1669,63L1669,64L1673,64L1673,65L1674,65L1674,65L1677,65L1677,64L1678,64L1678,64L1679,64L1679,65L1685,65L1685,65L1692,65L1692,66L1698,66L1698,66L1706,66L1706,66L1707,66L1707,65L1718,65L1718,65L1720,65L1720,65L1724,65L1724,67L1728,67L1728,69L1729,69L1729,69L1732,69L1732,70L1736,70L1736,69L1740,69L1740,71L1747,71L1747,72L1752,72L1752,73L1762,73L1762,73L1767,73L1767,74L1773,74L1773,75L1777,75" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L2,0L2,5L7,5L7,6L32,6L32,6L59,6L59,7L61,7L61,10L63,10L63,9L66,9L66,8L113,8L113,8L293,8L293,9L598,9L598,10L657,10L657,9L684,9L684,10L753,10L753,11L864,11L864,12L920,12L920,12L938,12L938,13L1005,13L1005,14L1044,14L1044,15L1202,15L1202,16L1264,16L1264,17L1358,17L1358,18L1411,18L1411,18L1504,18L1504,19L1527,19L1527,18L1537,18L1537,19L1602,19L1602,19L1603,19L1603,19L1604,19L1604,19L1615,19L1615,20L1625,20L1625,20L1632,20L1632,21L1695,21L1695,21L1716,21L1716,21L1718,21L1718,22L1737,22L1737,22L1761,22L1761,23L1777,23" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.9qj0x8el</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L3,0L3,2L54,2L54,2L69,2L69,3L70,3L70,3L267,3L267,3L350,3L350,4L503,4L503,5L576,5L576,5L577,5L577,5L821,5L821,6L824,6L824,7L918,7L918,8L929,8L929,9L939,9L939,9L969,9L969,9L1039,9L1039,9L1411,9L1411,9L1475,9L1475,9L1487,9L1487,10L1518,10L1518,10L1536,10L1536,10L1575,10L1575,10L1646,10L1646,10L1650,10L1650,10L1662,10L1662,10L1677,10L1677,9L1680,9L1680,9L1685,9L1685,9L1709,9L1709,9L1732,9L1732,9L1743,9L1743,10L1757,10L1757,11L1762,11L1762,12L1777,12" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.4lxpe62q</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L3,0L3,1L7,1L7,2L16,2L16,2L21,2L21,5L43,5L43,4L110,4L110,5L470,5L470,5L582,5L582,5L880,5L880,5L1291,5L1291,6L1411,6L1411,7L1529,7L1529,8L1540,8L1540,9L1567,9L1567,10L1610,10L1610,11L1679,11L1679,11L1684,11L1684,10L1695,10L1695,10L1707,10L1707,9L1732,9L1732,8L1777,8" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.21dzoj3l</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L3,0L3,4L31,4L31,4L46,4L46,6L47,6L47,5L54,5L54,6L154,6L154,6L752,6L752,7L753,7L753,8L832,8L832,9L903,9L903,10L1170,10L1170,11L1268,11L1268,12L1357,12L1357,13L1411,13L1411,14L1419,14L1419,15L1589,15L1589,15L1606,15L1606,16L1663,16L1663,16L1683,16L1683,15L1684,15L1684,15L1700,15L1700,15L1717,15L1717,15L1745,15L1745,14L1762,14L1762,15L1777,15" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.xqkjmnnl</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L3,0L3,3L7,3L7,4L43,4L43,4L60,4L60,5L110,5L110,6L587,6L587,6L869,6L869,6L917,6L917,7L1266,7L1266,8L1272,8L1272,9L1358,9L1358,10L1370,10L1370,11L1411,11L1411,12L1495,12L1495,13L1510,13L1510,14L1540,14L1540,15L1568,15L1568,16L1626,16L1626,17L1627,17L1627,18L1684,18L1684,17L1685,17L1685,17L1707,17L1707,16L1757,16L1757,16L1758,16L1758,16L1762,16L1762,17L1777,17" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.5q86rxr1</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L3,0L3,3L6,3L6,4L7,4L7,4L9,4L9,4L28,4L28,4L34,4L34,9L109,9L109,8L211,8L211,9L482,9L482,10L574,10L574,10L657,10L657,10L752,10L752,11L753,11L753,12L797,12L797,13L868,13L868,14L1169,14L1169,15L1260,15L1260,16L1261,16L1261,17L1270,17L1270,18L1308,18L1308,19L1319,19L1319,20L1357,20L1357,19L1365,19L1365,20L1375,20L1375,20L1419,20L1419,21L1495,21L1495,22L1496,22L1496,23L1522,23L1522,24L1526,24L1526,25L1528,25L1528,26L1529,26L1529,27L1531,27L1531,28L1537,28L1537,29L1544,29L1544,30L1548,30L1548,31L1563,31L1563,32L1572,32L1572,33L1578,33L1578,34L1581,34L1581,35L1583,35L1583,35L1596,35L1596,35L1597,35L1597,35L1603,35L1603,34L1622,34L1622,35L1627,35L1627,35L1630,35L1630,35L1640,35L1640,36L1668,36L1668,36L1683,36L1683,35L1689,35L1689,36L1691,36L1691,36L1692,36L1692,37L1695,37L1695,38L1696,38L1696,39L1697,39L1697,40L1702,40L1702,40L1705,40L1705,41L1708,41L1708,41L1709,41L1709,42L1710,42L1710,43L1711,43L1711,43L1724,43L1724,43L1727,43L1727,44L1729,44L1729,45L1732,45L1732,46L1733,46L1733,47L1734,47L1734,48L1740,48L1740,49L1743,49L1743,50L1745,50L1745,51L1746,51L1746,52L1762,52L1762,53L1769,53L1769,54L1774,54L1774,54L1775,54L1775,53L1777,53" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L3,0L3,2L45,2L45,4L46,4L46,3L88,3L88,4L432,4L432,4L863,4L863,4L1411,4L1411,5L1537,5L1537,6L1549,6L1549,7L1559,7L1559,8L1573,8L1573,9L1585,9L1585,10L1588,10L1588,10L1589,10L1589,10L1608,10L1608,9L1684,9L1684,8L1707,8L1707,8L1732,8L1732,8L1762,8L1762,9L1777,9" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6e0q</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L3,0L3,1L49,1L49,1L65,1L65,2L68,2L68,2L96,2L96,3L470,3L470,3L885,3L885,3L1389,3L1389,4L1411,4L1411,5L1540,5L1540,6L1569,6L1569,7L1582,7L1582,7L1605,7L1605,7L1684,7L1684,7L1697,7L1697,8L1698,8L1698,8L1759,8L1759,7L1777,7" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.klrp6ejq</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L3,0L3,5L5,5L5,5L9,5L9,5L10,5L10,5L12,5L12,5L35,5L35,10L92,10L92,11L106,11L106,10L154,10L154,11L367,11L367,10L455,10L455,11L483,11L483,12L493,12L493,13L496,13L496,14L521,14L521,15L552,15L552,14L567,14L567,14L602,14L602,15L740,15L740,16L753,16L753,17L814,17L814,18L865,18L865,19L1006,19L1006,20L1073,20L1073,20L1075,20L1075,19L1367,19L1367,19L1605,19L1605,19L1777,19" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path dtabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.xqkjmxnl</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L5,0L5,3L52,3L52,4L141,4L141,4L210,4L210,5L597,5L597,6L634,6L634,7L768,7L768,8L816,8L816,9L824,9L824,10L832,10L832,11L862,11L862,12L1112,12L1112,12L1269,12L1269,13L1376,13L1376,14L1411,14L1411,15L1518,15L1518,17L1559,17L1559,18L1587,18L1587,19L1596,19L1596,20L1682,20L1682,20L1684,20L1684,20L1693,20L1693,20L1695,20L1695,20L1699,20L1699,20L1707,20L1707,20L1708,20L1708,19L1714,19L1714,19L1716,19L1716,19L1720,19L1720,18L1728,18L1728,17L1729,17L1729,17L1747,17L1747,17L1762,17L1762,18L1777,18" tabindex="0">
						<title>l_rdqo542w-9d8eewld-wl30kw9l.jqzpyrgl</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L5,0L5,4L27,4L27,5L31,5L31,5L53,5L53,8L104,8L104,9L215,9L215,10L497,10L497,11L561,11L561,12L562,12L562,13L563,13L563,12L589,12L589,12L598,12L598,13L603,13L603,14L694,14L694,15L699,15L699,16L753,16L753,17L755,17L755,18L760,18L760,19L868,19L868,19L894,19L894,20L899,20L899,21L931,21L931,22L1068,22L1068,23L1089,23L1089,24L1140,24L1140,25L1202,25L1202,26L1290,26L1290,27L1342,27L1342,28L1361,28L1361,28L1366,28L1366,27L1375,27L1375,28L1393,28L1393,28L1411,28L1411,29L1499,29L1499,28L1503,28L1503,29L1505,29L1505,30L1539,30L1539,31L1567,31L1567,31L1581,31L1581,30L1605,30L1605,30L1606,30L1606,30L1615,30L1615,31L1617,31L1617,31L1677,31L1677,30L1684,30L1684,30L1692,30L1692,30L1694,30L1694,30L1704,30L1704,31L1707,31L1707,31L1709,31L1709,32L1710,32L1710,32L1712,32L1712,32L1719,32L1719,32L1722,32L1722,31L1730,31L1730,31L1737,31L1737,31L1740,31L1740,31L1758,31L1758,31L1761,31L1761,31L1775,31L1775,32L1777,32" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L5,0L5,11L6,11L6,11L9,11L9,12L25,12L25,13L46,13L46,13L51,13L51,15L73,15L73,15L82,15L82,16L86,16L86,17L108,17L108,19L115,19L115,20L122,20L122,21L125,21L125,22L137,22L137,22L139,22L139,23L185,23L185,24L250,24L250,25L334,25L334,26L413,26L413,27L420,27L420,28L433,28L433,29L473,29L473,30L479,30L479,32L482,32L482,33L484,33L484,34L492,34L492,35L505,35L505,36L513,36L513,37L529,37L529,38L533,38L533,37L534,37L534,39L537,39L537,40L563,40L563,40L585,40L585,41L590,41L590,42L592,42L592,43L595,43L595,44L598,44L598,45L605,45L605,46L613,46L613,47L617,47L617,48L618,48L618,49L629,49L629,50L633,50L633,51L636,51L636,52L639,52L639,53L640,53L640,53L642,53L642,54L644,54L644,55L645,55L645,56L703,56L703,57L707,57L707,58L717,58L717,59L723,59L723,60L738,60L738,61L745,61L745,62L753,62L753,63L779,63L779,64L783,64L783,65L785,65L785,66L798,66L798,67L800,67L800,68L844,68L844,69L849,69L849,69L850,69L850,70L851,70L851,71L857,71L857,72L863,72L863,71L865,71L865,71L867,71L867,72L869,72L869,73L873,73L873,74L877,74L877,75L880,75L880,76L885,76L885,77L887,77L887,78L890,78L890,78L906,78L906,79L907,79L907,81L913,81L913,83L917,83L917,84L918,84L918,85L942,85L942,87L956,87L956,88L968,88L968,89L970,89L970,90L972,90L972,91L996,91L996,92L999,92L999,93L1006,93L1006,94L1014,94L1014,95L1043,95L1043,95L1054,95L1054,96L1061,96L1061,97L1063,97L1063,98L1079,98L1079,99L1080,99L1080,100L1094,100L1094,101L1106,101L1106,102L1109,102L1109,104L1173,104L1173,105L1174,105L1174,106L1175,106L1175,105L1198,105L1198,106L1217,106L1217,107L1231,107L1231,108L1240,108L1240,109L1243,109L1243,110L1257,110L1257,111L1260,111L1260,111L1263,111L1263,112L1277,112L1277,113L1278,113L1278,115L1286,115L1286,116L1294,116L1294,115L1295,115L1295,117L1308,117L1308,118L1313,118L1313,119L1315,119L1315,120L1316,120L1316,121L1317,121L1317,122L1318,122L1318,122L1321,122L1321,123L1325,123L1325,124L1328,124L1328,125L1329,125L1329,126L1332,126L1332,128L1335,128L1335,129L1340,129L1340,130L1344,130L1344,131L1346,131L1346,132L1350,132L1350,133L1356,133L1356,135L1358,135L1358,136L1361,136L1361,137L1366,137L1366,138L1369,138L1369,139L1380,139L1380,140L1382,140L1382,142L1383,142L1383,141L1389,141L1389,142L1390,142L1390,144L1401,144L1401,145L1417,145L1417,144L1421,144L1421,145L1424,145L1424,146L1432,146L1432,146L1438,146L1438,147L1444,147L1444,148L1446,148L1446,147L1454,147L1454,147L1455,147L1455,148L1459,148L1459,149L1460,149L1460,150L1463,150L1463,151L1467,151L1467,151L1470,151L1470,153L1480,153L1480,154L1481,154L1481,155L1489,155L1489,156L1491,156L1491,157L1495,157L1495,158L1498,158L1498,159L1499,159L1499,161L1505,161L1505,161L1509,161L1509,162L1511,162L1511,164L1514,164L1514,165L1520,165L1520,167L1524,167L1524,168L1528,168L1528,169L1535,169L1535,171L1538,171L1538,172L1549,172L1549,173L1551,173L1551,174L1553,174L1553,175L1555,175L1555,176L1556,176L1556,177L1566,177L1566,178L1571,178L1571,179L1575,179L1575,178L1577,178L1577,179L1581,179L1581,179L1584,179L1584,180L1588,180L1588,181L1593,181L1593,182L1598,182L1598,183L1601,183L1601,184L1603,184L1603,185L1609,185L1609,186L1612,186L1612,187L1614,187L1614,188L1620,188L1620,189L1625,189L1625,190L1628,190L1628,191L1631,191L1631,192L1634,192L1634,194L1635,194L1635,195L1639,195L1639,196L1640,196L1640,197L1642,197L1642,197L1645,197L1645,196L1647,196L1647,197L1649,197L1649,198L1654,198L1654,197L1658,197L1658,199L1663,199L1663,200L1670,200L1670,201L1671,201L1671,203L1678,203L1678,205L1680,205L1680,205L1685,205L1685,206L1687,206L1687,206L1692,206L1692,207L1693,207L1693,208L1695,208L1695,209L1696,209L1696,210L1702,210L1702,211L1704,211L1704,212L1705,212L1705,213L1708,213L1708,214L1710,214L1710,215L1714,215L1714,216L1715,216L1715,218L1719,218L1719,219L1726,219L1726,222L1727,222L1727,223L1730,223L1730,224L1731,224L1731,226L1733,226L1733,227L1735,227L1735,226L1738,226L1738,227L1741,227L1741,228L1742,228L1742,229L1744,229L1744,231L1748,231L1748,231L1750,231L1750,232L1754,232L1754,233L1755,233L1755,234L1759,234L1759,235L1761,235L1761,236L1763,236L1763,237L1764,237L1764,239L1765,239L1765,240L1767,240L1767,239L1770,239L1770,240L1775,240L1775,240L1776,240L1776,241L1777,241L1777,242L1777,242" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.jqzpx3gl</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L5,0L5,5L13,5L13,9L31,9L31,9L37,9L37,9L54,9L54,10L56,10L56,9L80,9L80,9L115,9L115,12L149,12L149,13L155,13L155,15L318,15L318,16L384,16L384,17L416,17L416,18L480,18L480,19L508,19L508,20L536,20L536,21L598,21L598,22L608,22L608,23L617,23L617,24L630,24L630,25L633,25L633,26L643,26L643,27L645,27L645,28L660,28L660,28L669,28L669,29L717,29L717,30L718,30L718,31L724,31L724,32L729,32L729,33L791,33L791,34L798,34L798,35L812,35L812,36L824,36L824,37L851,37L851,39L865,39L865,40L888,40L888,41L933,41L933,42L940,42L940,43L949,43L949,45L965,45L965,46L998,46L998,47L1013,47L1013,48L1075,48L1075,49L1116,49L1116,50L1118,50L1118,51L1151,51L1151,52L1173,52L1173,53L1181,53L1181,54L1182,54L1182,53L1260,53L1260,54L1264,54L1264,55L1327,55L1327,56L1358,56L1358,56L1397,56L1397,57L1411,57L1411,58L1472,58L1472,59L1473,59L1473,60L1508,60L1508,61L1519,61L1519,62L1528,62L1528,63L1533,63L1533,64L1537,64L1537,65L1563,65L1563,66L1564,66L1564,67L1565,67L1565,68L1568,68L1568,69L1569,69L1569,70L1597,70L1597,70L1614,70L1614,71L1625,71L1625,72L1627,72L1627,73L1656,73L1656,73L1664,73L1664,74L1676,74L1676,73L1677,73L1677,74L1681,74L1681,74L1689,74L1689,74L1691,74L1691,75L1716,75L1716,75L1719,75L1719,76L1722,76L1722,77L1727,77L1727,78L1730,78L1730,77L1733,77L1733,78L1739,78L1739,79L1741,79L1741,79L1751,79L1751,80L1764,80L1764,81L1767,81L1767,81L1768,81L1768,80L1772,80L1772,80L1776,80L1776,81L1777,81" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21dz3e4l</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L5,0L5,8L33,8L33,8L54,8L54,9L56,9L56,10L57,10L57,9L73,9L73,9L95,9L95,9L772,9L772,9L874,9L874,10L962,10L962,10L1116,10L1116,11L1234,11L1234,10L1367,10L1367,11L1411,11L1411,11L1460,11L1460,12L1561,12L1561,13L1567,13L1567,14L1577,14L1577,15L1588,15L1588,15L1591,15L1591,14L1594,14L1594,15L1614,15L1614,16L1625,16L1625,17L1633,17L1633,18L1657,18L1657,19L1676,19L1676,18L1684,18L1684,18L1689,18L1689,18L1697,18L1697,19L1721,19L1721,20L1733,20L1733,21L1744,21L1744,20L1750,20L1750,21L1760,21L1760,22L1764,22L1764,23L1771,23L1771,24L1777,24" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.gq7jrxvq</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L5,0L5,4L35,4L35,4L100,4L100,4L202,4L202,4L483,4L483,5L493,5L493,6L560,6L560,6L658,6L658,7L721,7L721,7L754,7L754,8L797,8L797,9L807,9L807,10L825,10L825,11L833,11L833,12L1010,12L1010,13L1033,13L1033,14L1079,14L1079,15L1143,15L1143,16L1168,16L1168,17L1186,17L1186,17L1261,17L1261,18L1272,18L1272,19L1307,19L1307,20L1393,20L1393,21L1395,21L1395,22L1411,22L1411,23L1419,23L1419,24L1420,24L1420,23L1541,23L1541,24L1577,24L1577,24L1639,24L1639,25L1649,25L1649,25L1686,25L1686,24L1694,24L1694,24L1696,24L1696,24L1697,24L1697,25L1708,25L1708,25L1709,25L1709,26L1723,26L1723,27L1727,27L1727,27L1762,27L1762,29L1768,29L1768,30L1770,30L1770,30L1776,30L1776,30L1777,30" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L5,0L5,5L14,5L14,7L45,7L45,7L54,7L54,8L55,8L55,7L80,7L80,7L103,7L103,6L104,6L104,9L154,9L154,9L594,9L594,10L598,10L598,11L617,11L617,12L629,12L629,13L643,13L643,14L647,14L647,15L658,15L658,16L661,16L661,16L723,16L723,17L750,17L750,18L762,18L762,18L798,18L798,19L815,19L815,20L839,20L839,21L851,21L851,23L865,23L865,24L919,24L919,24L948,24L948,24L961,24L961,25L966,25L966,26L1109,26L1109,27L1116,27L1116,28L1119,28L1119,29L1141,29L1141,30L1180,30L1180,31L1183,31L1183,32L1249,32L1249,33L1260,33L1260,34L1264,34L1264,35L1326,35L1326,36L1336,36L1336,38L1358,38L1358,38L1359,38L1359,39L1362,39L1362,40L1381,40L1381,41L1390,41L1390,41L1411,41L1411,43L1441,43L1441,44L1461,44L1461,45L1494,45L1494,46L1498,46L1498,47L1504,47L1504,48L1506,48L1506,49L1528,49L1528,50L1544,50L1544,51L1548,51L1548,52L1552,52L1552,53L1553,53L1553,54L1557,54L1557,55L1564,55L1564,56L1565,56L1565,57L1566,57L1566,58L1572,58L1572,58L1573,58L1573,58L1587,58L1587,57L1591,57L1591,58L1593,58L1593,58L1606,58L1606,57L1609,57L1609,58L1614,58L1614,59L1625,59L1625,60L1627,60L1627,61L1640,61L1640,61L1645,61L1645,61L1648,61L1648,62L1649,62L1649,62L1656,62L1656,61L1659,61L1659,62L1660,62L1660,62L1676,62L1676,62L1687,62L1687,63L1688,63L1688,63L1691,63L1691,64L1702,64L1702,65L1710,65L1710,66L1716,66L1716,66L1727,66L1727,67L1728,67L1728,66L1733,66L1733,67L1734,67L1734,68L1739,68L1739,69L1751,69L1751,70L1764,70L1764,71L1767,71L1767,71L1775,71L1775,71L1777,71" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.klrpy2jq</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L5,0L5,6L328,6L328,6L478,6L478,6L506,6L506,7L521,7L521,8L533,8L533,7L576,7L576,8L596,8L596,8L617,8L617,9L629,9L629,10L643,10L643,11L671,11L671,12L749,12L749,13L798,13L798,14L848,14L848,14L853,14L853,15L907,15L907,16L965,16L965,17L999,17L999,18L1005,18L1005,19L1040,19L1040,20L1116,20L1116,21L1122,21L1122,22L1217,22L1217,23L1290,23L1290,23L1334,23L1334,24L1362,24L1362,25L1384,25L1384,26L1419,26L1419,25L1454,25L1454,26L1504,26L1504,27L1537,27L1537,28L1538,28L1538,28L1603,28L1603,28L1609,28L1609,29L1614,29L1614,30L1625,30L1625,31L1640,31L1640,32L1641,32L1641,31L1657,31L1657,31L1673,31L1673,32L1686,32L1686,31L1689,31L1689,32L1697,32L1697,33L1706,33L1706,33L1708,33L1708,33L1710,33L1710,34L1715,34L1715,34L1716,34L1716,34L1722,34L1722,35L1734,35L1734,36L1750,36L1750,38L1764,38L1764,39L1769,39L1769,40L1775,40L1775,41L1777,41" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L5,0L5,2L25,2L25,2L29,2L29,2L33,2L33,7L34,7L34,7L59,7L59,6L471,6L471,5L482,5L482,6L553,6L553,6L562,6L562,7L627,7L627,8L752,8L752,9L753,9L753,10L756,10L756,11L760,11L760,12L847,12L847,13L854,13L854,13L1000,13L1000,14L1117,14L1117,15L1262,15L1262,16L1267,16L1267,17L1269,17L1269,18L1290,18L1290,19L1357,19L1357,18L1385,18L1385,18L1393,18L1393,19L1411,19L1411,19L1419,19L1419,20L1458,20L1458,21L1460,21L1460,22L1479,22L1479,23L1484,23L1484,24L1574,24L1574,25L1578,25L1578,26L1586,26L1586,27L1588,27L1588,28L1603,28L1603,27L1616,27L1616,26L1627,26L1627,26L1672,26L1672,26L1683,26L1683,25L1688,25L1688,26L1694,26L1694,26L1697,26L1697,26L1708,26L1708,27L1710,27L1710,28L1711,28L1711,29L1713,29L1713,28L1718,28L1718,29L1727,29L1727,29L1732,29L1732,30L1733,30L1733,31L1740,31L1740,33L1744,33L1744,33L1746,33L1746,34L1762,34L1762,35L1768,35L1768,35L1769,35L1769,36L1777,36" tabindex="0">
						<title>l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L9,0L9,9L10,9L10,10L11,10L11,10L24,10L24,11L26,11L26,12L29,12L29,12L30,12L30,20L31,20L31,19L70,19L70,19L84,19L84,20L101,20L101,21L104,21L104,22L139,22L139,23L143,23L143,24L147,24L147,25L161,25L161,26L167,26L167,27L173,27L173,28L197,28L197,29L211,29L211,30L216,30L216,31L224,31L224,31L245,31L245,32L323,32L323,31L324,31L324,32L333,32L333,33L344,33L344,34L347,34L347,36L368,36L368,37L380,37L380,38L383,38L383,39L386,39L386,38L399,38L399,39L418,39L418,40L422,40L422,41L423,41L423,42L434,42L434,43L437,43L437,44L449,44L449,45L452,45L452,46L457,46L457,47L464,47L464,48L466,48L466,49L473,49L473,50L475,50L475,51L480,51L480,52L482,52L482,53L483,53L483,54L487,54L487,55L490,55L490,56L505,56L505,57L520,57L520,58L528,58L528,59L559,59L559,60L560,60L560,61L561,61L561,62L564,62L564,63L566,63L566,64L594,64L594,65L596,65L596,66L598,66L598,67L602,67L602,69L605,69L605,70L606,70L606,71L607,71L607,72L617,72L617,74L635,74L635,75L637,75L637,76L640,76L640,77L642,77L642,79L644,79L644,79L647,79L647,81L649,81L649,82L654,82L654,84L662,84L662,85L663,85L663,86L667,86L667,87L670,87L670,88L673,88L673,89L678,89L678,90L688,90L688,91L690,91L690,92L692,92L692,93L693,93L693,94L695,94L695,95L696,95L696,96L718,96L718,97L725,97L725,98L742,98L742,99L746,99L746,100L750,100L750,101L754,101L754,102L760,102L760,103L773,103L773,104L778,104L778,105L783,105L783,106L791,106L791,107L792,107L792,107L797,107L797,107L810,107L810,108L815,108L815,109L817,109L817,111L821,111L821,113L822,113L822,114L831,114L831,115L839,115L839,116L840,116L840,115L844,115L844,116L849,116L849,117L853,117L853,118L864,118L864,119L865,119L865,120L869,120L869,120L873,120L873,121L875,121L875,122L878,122L878,123L879,123L879,124L890,124L890,123L898,123L898,122L899,122L899,123L900,123L900,124L907,124L907,125L909,125L909,126L914,126L914,127L921,127L921,128L922,128L922,129L924,129L924,130L934,130L934,131L948,131L948,132L955,132L955,133L958,133L958,133L978,133L978,134L989,134L989,135L1030,135L1030,136L1042,136L1042,136L1063,136L1063,137L1069,137L1069,138L1075,138L1075,140L1081,140L1081,141L1089,141L1089,142L1116,142L1116,143L1132,143L1132,142L1145,142L1145,143L1170,143L1170,144L1212,144L1212,145L1213,145L1213,146L1233,146L1233,147L1236,147L1236,148L1243,148L1243,149L1268,149L1268,150L1278,150L1278,151L1280,151L1280,152L1286,152L1286,153L1316,153L1316,153L1342,153L1342,155L1349,155L1349,156L1357,156L1357,157L1370,157L1370,158L1371,158L1371,157L1378,157L1378,158L1383,158L1383,159L1387,159L1387,160L1389,160L1389,161L1399,161L1399,162L1411,162L1411,162L1419,162L1419,163L1439,163L1439,163L1444,163L1444,164L1445,164L1445,165L1460,165L1460,165L1472,165L1472,166L1478,166L1478,167L1481,167L1481,168L1487,168L1487,169L1490,169L1490,170L1518,170L1518,170L1524,170L1524,171L1526,171L1526,172L1536,172L1536,173L1537,173L1537,174L1541,174L1541,175L1547,175L1547,176L1549,176L1549,177L1552,177L1552,177L1557,177L1557,178L1566,178L1566,179L1575,179L1575,181L1580,181L1580,182L1581,182L1581,184L1584,184L1584,184L1587,184L1587,185L1591,185L1591,185L1597,185L1597,184L1602,184L1602,183L1604,183L1604,184L1605,184L1605,185L1607,185L1607,185L1608,185L1608,186L1609,186L1609,186L1613,186L1613,187L1614,187L1614,187L1616,187L1616,188L1621,188L1621,189L1625,189L1625,190L1661,190L1661,191L1676,191L1676,190L1682,190L1682,190L1688,190L1688,190L1693,190L1693,192L1700,192L1700,193L1705,193L1705,193L1709,193L1709,194L1713,194L1713,194L1715,194L1715,195L1717,195L1717,196L1730,196L1730,197L1738,197L1738,197L1740,197L1740,198L1749,198L1749,199L1760,199L1760,200L1764,200L1764,201L1767,201L1767,202L1777,202" tabindex="0">
						<title>l_r9gn1qpd-9d8eewld-0nwoqwkl.p12dx87q</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L9,0L9,4L38,4L38,4L46,4L46,5L50,5L50,7L52,7L52,6L60,6L60,5L111,5L111,5L595,5L595,5L598,5L598,6L964,6L964,5L1133,5L1133,5L1201,5L1201,5L1269,5L1269,6L1367,6L1367,6L1384,6L1384,7L1411,7L1411,7L1571,7L1571,7L1582,7L1582,7L1602,7L1602,7L1677,7L1677,6L1686,6L1686,5L1754,5L1754,5L1761,5L1761,6L1777,6" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L9,0L9,5L24,5L24,6L28,6L28,6L103,6L103,10L469,10L469,9L574,9L574,9L598,9L598,10L640,10L640,11L746,11L746,11L749,11L749,10L753,10L753,11L812,11L812,12L870,12L870,13L894,13L894,14L1005,14L1005,15L1052,15L1052,15L1074,15L1074,16L1202,16L1202,17L1366,17L1366,17L1527,17L1527,16L1563,16L1563,17L1582,17L1582,17L1583,17L1583,17L1584,17L1584,18L1615,18L1615,19L1677,19L1677,18L1680,18L1680,18L1684,18L1684,18L1709,18L1709,20L1714,20L1714,20L1715,20L1715,20L1720,20L1720,20L1724,20L1724,20L1741,20L1741,21L1777,21" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L9,0L9,9L27,9L27,14L58,14L58,14L105,14L105,15L229,15L229,15L349,15L349,16L407,16L407,17L592,17L592,18L598,18L598,19L618,19L618,20L648,20L648,21L670,21L670,22L672,22L672,23L686,23L686,24L752,24L752,25L783,25L783,25L785,25L785,26L869,26L869,27L894,27L894,28L1014,28L1014,29L1031,29L1031,30L1074,30L1074,31L1128,31L1128,32L1202,32L1202,33L1262,33L1262,34L1271,34L1271,35L1302,35L1302,36L1355,36L1355,37L1356,37L1356,38L1365,38L1365,39L1411,39L1411,40L1424,40L1424,41L1487,41L1487,42L1536,42L1536,43L1548,43L1548,44L1549,44L1549,45L1552,45L1552,47L1559,47L1559,48L1564,48L1564,49L1574,49L1574,50L1593,50L1593,50L1594,50L1594,49L1615,49L1615,50L1639,50L1639,51L1664,51L1664,52L1674,52L1674,53L1680,53L1680,53L1694,53L1694,54L1704,54L1704,55L1705,55L1705,55L1706,55L1706,56L1708,56L1708,58L1709,58L1709,59L1712,59L1712,59L1713,59L1713,60L1715,60L1715,59L1725,59L1725,60L1732,60L1732,61L1733,61L1733,62L1750,62L1750,61L1768,61L1768,62L1777,62" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L9,0L9,5L42,5L42,5L44,5L44,9L100,9L100,9L103,9L103,10L438,10L438,9L440,9L440,10L494,10L494,11L498,11L498,10L562,10L562,11L580,11L580,12L598,12L598,13L599,13L599,14L620,14L620,15L626,15L626,16L656,16L656,16L661,16L661,17L729,17L729,18L735,18L735,19L842,19L842,20L894,20L894,21L969,21L969,21L1163,21L1163,22L1202,22L1202,23L1259,23L1259,24L1262,24L1262,25L1268,25L1268,24L1298,24L1298,24L1366,24L1366,24L1370,24L1370,25L1371,25L1371,24L1393,24L1393,25L1411,25L1411,26L1570,26L1570,25L1578,25L1578,25L1582,25L1582,25L1615,25L1615,26L1617,26L1617,26L1672,26L1672,26L1676,26L1676,26L1677,26L1677,25L1684,25L1684,25L1712,25L1712,25L1713,25L1713,26L1732,26L1732,27L1740,27L1740,28L1747,28L1747,29L1761,29L1761,29L1774,29L1774,29L1777,29" tabindex="0">
						<title>l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L13,0L13,3L101,3L101,3L102,3L102,4L123,4L123,3L1685,3L1685,4L1719,4L1719,5L1720,5L1720,6L1726,6L1726,5L1740,5L1740,6L1777,6" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0q5njgmq</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L15,0L15,2L45,2L45,3L103,3L103,4L302,4L302,5L587,5L587,4L664,4L664,5L752,5L752,6L851,6L851,7L878,7L878,7L1269,7L1269,8L1566,8L1566,8L1588,8L1588,9L1687,9L1687,10L1688,10L1688,11L1709,11L1709,11L1720,11L1720,12L1721,12L1721,12L1726,12L1726,11L1731,11L1731,11L1758,11L1758,11L1777,11" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.814y0701</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L21,0L21,2L45,2L45,3L296,3L296,4L719,4L719,4L1116,4L1116,5L1682,5L1682,6L1704,6L1704,6L1715,6L1715,7L1716,7L1716,6L1758,6L1758,6L1777,6" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0138n5dq</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L22,0L22,2L99,2L99,2L760,2L760,3L918,3L918,3L1065,3L1065,4L1100,4L1100,4L1265,4L1265,4L1540,4L1540,4L1686,4L1686,4L1716,4L1716,5L1728,5L1728,5L1738,5L1738,5L1777,5" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.rqvp5e7q</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L23,0L23,2L63,2L63,3L320,3L320,4L685,4L685,4L1354,4L1354,6L1684,6L1684,7L1695,7L1695,7L1726,7L1726,6L1777,6" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.5ler7m5q</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L25,0L25,3L267,3L267,3L531,3L531,3L1719,3L1719,4L1720,4L1720,4L1726,4L1726,3L1741,3L1741,2L1777,2" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.4lxp7e2q</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L39,0L39,3L63,3L63,4L74,4L74,5L85,5L85,4L536,4L536,5L683,5L683,5L690,5L690,4L1615,4L1615,5L1725,5L1725,4L1746,4L1746,5L1758,5L1758,5L1777,5" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.81wpx5oq</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L42,0L42,7L46,7L46,8L51,8L51,7L56,7L56,8L59,8L59,9L64,9L64,8L68,8L68,9L102,9L102,10L179,10L179,11L213,11L213,12L215,12L215,13L225,13L225,12L322,12L322,13L403,13L403,15L432,15L432,16L435,16L435,17L497,17L497,18L534,18L534,19L566,19L566,20L590,20L590,20L602,20L602,21L609,21L609,22L619,22L619,23L642,23L642,24L648,24L648,25L650,25L650,26L657,26L657,25L671,25L671,24L1713,24L1713,24L1755,24L1755,24L1760,24L1760,24L1761,24L1761,24L1777,24" tabindex="0">
						<title>xd17x94d-9l71pv4l.zqo20y2l</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L47,0L47,5L72,5L72,4L105,4L105,5L138,5L138,6L193,6L193,5L1754,5L1754,5L1777,5" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.jq606z3q</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L73,0L73,5L128,5L128,5L141,5L141,4L546,4L546,4L1701,4L1701,4L1725,4L1725,4L1734,4L1734,5L1777,5" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.5lmk0gjq</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L128,0L128,4L572,4L572,4L605,4L605,5L1536,5L1536,5L1759,5L1759,5L1761,5L1761,5L1777,5" tabindex="0">
						<title>l_495zlx39-xd144xzd-onvyv77n.lmozgg01</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L133,0L133,4L163,4L163,5L265,5L265,5L718,5L718,7L851,7L851,8L1006,8L1006,9L1730,9L1730,10L1737,10L1737,9L1753,9L1753,9L1777,9" tabindex="0">
						<title>rkl9qwrk-6njkg4el.z19p2o8l</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,0L262,0L262,3L295,3L295,4L879,4L879,4L1116,4L1116,5L1450,5L1450,5L1560,5L1560,6L1681,6L1681,6L1714,6L1714,7L1731,7L1731,7L1759,7L1759,7L1777,7" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.zqop6rp1</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,0L652,0L652,2L1777,2" tabindex="0">
						<title>mke75px2-yn2mz5d8.4lx6574l</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
