<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Total score by player (races)</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-08-31</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-17</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">74</text>
		</svg>
		<svg viewBox="0 0 2543 74" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 74) scale(1 -1)" style="--count: 39;">
				<g>
					<rect x="0" y="0" width="2543" height="74"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,1L3,1L3,2L13,2L13,2L864,2L864,3L881,3L881,4L980,4L980,5L995,5L995,6L1017,6L1017,5L1070,5L1070,5L1120,5L1120,6L1449,6L1449,6L1723,6L1723,6L1727,6L1727,6L1767,6L1767,7L1819,7L1819,8L1878,8L1878,9L1931,9L1931,8L1950,8L1950,8L1951,8L1951,8L2050,8L2050,8L2074,8L2074,8L2286,8L2286,8L2361,8L2361,8L2366,8L2366,8L2376,8L2376,8L2383,8L2383,8L2516,8L2516,8L2522,8L2522,8L2543,8" tabindex="0">
						<title>48grel1x</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L0,0L0,2L3,2L3,1L13,1L13,1L864,1L864,2L881,2L881,3L980,3L980,4L995,4L995,5L1017,5L1017,4L1070,4L1070,4L1120,4L1120,5L1449,5L1449,5L1723,5L1723,5L1727,5L1727,5L1767,5L1767,6L1819,6L1819,7L1878,7L1878,8L1931,8L1931,7L1950,7L1950,7L1951,7L1951,7L2050,7L2050,7L2074,7L2074,7L2286,7L2286,7L2361,7L2361,7L2366,7L2366,7L2376,7L2376,7L2383,7L2383,7L2516,7L2516,7L2522,7L2522,7L2543,7" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L13,0L13,3L15,3L15,3L864,3L864,4L881,4L881,5L980,5L980,6L995,6L995,7L1017,7L1017,6L1070,6L1070,6L1120,6L1120,7L1449,7L1449,7L1723,7L1723,7L1727,7L1727,7L1767,7L1767,8L1819,8L1819,9L1878,9L1878,10L1950,10L1950,10L1951,10L1951,10L1954,10L1954,9L2050,9L2050,9L2074,9L2074,9L2141,9L2141,59L2179,59L2179,60L2284,60L2284,61L2286,61L2286,62L2361,62L2361,62L2366,62L2366,64L2376,64L2376,65L2383,65L2383,66L2413,66L2413,67L2450,67L2450,68L2516,68L2516,69L2520,69L2520,72L2522,72L2522,74L2543,74" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L687,0L687,1L797,1L797,1L864,1L864,1L881,1L881,2L886,2L886,2L1051,2L1051,2L1468,2L1468,2L1884,2L1884,3L1932,3L1932,2L2023,2L2023,2L2071,2L2071,2L2072,2L2072,2L2141,2L2141,2L2450,2L2450,2L2520,2L2520,2L2522,2L2522,2L2543,2" tabindex="0">
						<title>18vm2258</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L763,0L763,1L864,1L864,7L881,7L881,9L886,9L886,11L980,11L980,12L995,12L995,13L1016,13L1016,16L1017,16L1017,20L1027,20L1027,20L1035,20L1035,19L1039,19L1039,20L1050,20L1050,19L1051,19L1051,19L1070,19L1070,19L1120,19L1120,20L1449,20L1449,21L1468,21L1468,21L1723,21L1723,21L1727,21L1727,21L1729,21L1729,21L1767,21L1767,22L1819,22L1819,24L1878,24L1878,26L1884,26L1884,27L1887,27L1887,28L1929,28L1929,28L1932,28L1932,27L1950,27L1950,27L1951,27L1951,27L1954,27L1954,26L2023,26L2023,27L2025,27L2025,27L2045,27L2045,27L2046,27L2046,27L2050,27L2050,27L2052,27L2052,27L2071,27L2071,28L2072,28L2072,28L2074,28L2074,28L2075,28L2075,28L2076,28L2076,28L2100,28L2100,28L2141,28L2141,27L2179,27L2179,27L2284,27L2284,27L2286,27L2286,27L2361,27L2361,27L2366,27L2366,28L2376,28L2376,29L2383,29L2383,29L2413,29L2413,30L2450,30L2450,30L2516,30L2516,30L2520,30L2520,30L2522,30L2522,30L2542,30L2542,44L2543,44L2543,60L2543,60" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L797,0L797,3L864,3L864,3L881,3L881,4L886,4L886,4L1016,4L1016,4L1051,4L1051,4L1468,4L1468,4L1729,4L1729,4L1819,4L1819,5L1878,5L1878,6L1884,6L1884,7L1932,7L1932,6L2023,6L2023,6L2045,6L2045,6L2071,6L2071,6L2072,6L2072,6L2075,6L2075,6L2076,6L2076,6L2141,6L2141,6L2284,6L2284,6L2413,6L2413,6L2450,6L2450,6L2520,6L2520,6L2522,6L2522,6L2543,6" tabindex="0">
						<title>8e94kq6j</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L881,0L881,2L886,2L886,5L980,5L980,6L995,6L995,6L1016,6L1016,6L1017,6L1017,6L1027,6L1027,6L1051,6L1051,6L1070,6L1070,6L1120,6L1120,7L1449,7L1449,7L1468,7L1468,7L1723,7L1723,7L1727,7L1727,7L1729,7L1729,7L1767,7L1767,8L1819,8L1819,10L1878,10L1878,12L1884,12L1884,13L1887,13L1887,14L1929,14L1929,14L1931,14L1931,13L1932,13L1932,10L1950,10L1950,10L1951,10L1951,10L2023,10L2023,10L2025,10L2025,10L2045,10L2045,10L2046,10L2046,10L2050,10L2050,10L2052,10L2052,10L2071,10L2071,10L2072,10L2072,10L2074,10L2074,10L2075,10L2075,10L2076,10L2076,10L2100,10L2100,10L2141,10L2141,10L2179,10L2179,10L2284,10L2284,10L2286,10L2286,10L2361,10L2361,10L2366,10L2366,10L2376,10L2376,10L2383,10L2383,10L2413,10L2413,10L2450,10L2450,10L2516,10L2516,10L2520,10L2520,10L2522,10L2522,10L2543,10" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L886,0L886,12L887,12L887,12L1016,12L1016,10L1027,10L1027,10L1039,10L1039,9L1051,9L1051,9L1070,9L1070,9L1468,9L1468,9L1729,9L1729,9L1819,9L1819,10L1878,10L1878,11L1884,11L1884,12L1887,12L1887,13L1929,13L1929,13L1932,13L1932,12L1954,12L1954,11L2023,11L2023,12L2025,12L2025,12L2045,12L2045,12L2046,12L2046,12L2052,12L2052,12L2071,12L2071,13L2072,13L2072,13L2075,13L2075,13L2076,13L2076,13L2100,13L2100,13L2141,13L2141,13L2179,13L2179,13L2284,13L2284,13L2366,13L2366,14L2413,14L2413,14L2450,14L2450,14L2520,14L2520,14L2522,14L2522,14L2543,14" tabindex="0">
						<title>jnz1zy2j</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L980,0L980,1L995,1L995,1L1017,1L1017,1L1070,1L1070,1L1120,1L1120,1L1449,1L1449,1L1723,1L1723,1L1727,1L1727,1L1767,1L1767,1L1819,1L1819,1L1878,1L1878,1L1950,1L1950,1L1951,1L1951,1L2050,1L2050,1L2074,1L2074,1L2286,1L2286,1L2361,1L2361,1L2366,1L2366,1L2376,1L2376,1L2383,1L2383,1L2516,1L2516,1L2522,1L2522,1L2543,1" tabindex="0">
						<title>x3qy0dkj</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L995,0L995,3L1017,3L1017,3L1070,3L1070,3L1120,3L1120,4L1449,4L1449,4L1723,4L1723,4L1727,4L1727,4L1767,4L1767,5L1819,5L1819,6L1878,6L1878,7L1931,7L1931,6L1950,6L1950,6L1951,6L1951,6L2050,6L2050,6L2074,6L2074,6L2286,6L2286,6L2361,6L2361,6L2366,6L2366,6L2376,6L2376,6L2383,6L2383,6L2516,6L2516,6L2522,6L2522,6L2543,6" tabindex="0">
						<title>j51493z8</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L1016,0L1016,4L1017,4L1017,11L1027,11L1027,15L1035,15L1035,16L1050,16L1050,17L1051,17L1051,17L1070,17L1070,17L1120,17L1120,18L1412,18L1412,20L1449,20L1449,21L1456,21L1456,19L1468,19L1468,20L1723,20L1723,20L1725,20L1725,21L1727,21L1727,21L1729,21L1729,21L1767,21L1767,22L1819,22L1819,24L1878,24L1878,26L1887,26L1887,27L1929,27L1929,27L1932,27L1932,26L1950,26L1950,26L1951,26L1951,27L1954,27L1954,26L1981,26L1981,25L2025,25L2025,25L2045,25L2045,25L2046,25L2046,25L2050,25L2050,25L2052,25L2052,25L2074,25L2074,25L2075,25L2075,25L2076,25L2076,25L2100,25L2100,25L2141,25L2141,24L2179,24L2179,24L2284,24L2284,24L2286,24L2286,24L2361,24L2361,24L2366,24L2366,25L2376,25L2376,26L2383,26L2383,26L2413,26L2413,27L2516,27L2516,27L2520,27L2520,27L2522,27L2522,27L2542,27L2542,26L2543,26L2543,24L2543,24" tabindex="0">
						<title>jnzen32j</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L1051,0L1051,12L1070,12L1070,26L1120,26L1120,27L1412,27L1412,25L1449,25L1449,26L1456,26L1456,28L1468,28L1468,28L1723,28L1723,28L1724,28L1724,27L1727,27L1727,27L1729,27L1729,27L1767,27L1767,28L1819,28L1819,30L1878,30L1878,32L1884,32L1884,33L1887,33L1887,34L1929,34L1929,34L1950,34L1950,34L1951,34L1951,34L1954,34L1954,32L2023,32L2023,33L2025,33L2025,33L2045,33L2045,34L2046,34L2046,34L2050,34L2050,34L2052,34L2052,34L2071,34L2071,35L2072,35L2072,35L2074,35L2074,35L2075,35L2075,35L2076,35L2076,36L2100,36L2100,36L2141,36L2141,35L2179,35L2179,35L2284,35L2284,35L2286,35L2286,35L2361,35L2361,35L2366,35L2366,36L2376,36L2376,37L2383,37L2383,37L2413,37L2413,38L2450,38L2450,39L2516,39L2516,39L2520,39L2520,39L2522,39L2522,39L2542,39L2542,38L2543,38L2543,36L2543,36" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L1120,0L1120,2L1449,2L1449,2L1723,2L1723,2L1727,2L1727,2L1767,2L1767,2L1819,2L1819,2L1878,2L1878,3L1931,3L1931,2L1950,2L1950,2L1951,2L1951,2L2050,2L2050,2L2074,2L2074,2L2286,2L2286,2L2361,2L2361,2L2366,2L2366,2L2376,2L2376,2L2383,2L2383,2L2516,2L2516,2L2522,2L2522,2L2543,2" tabindex="0">
						<title>8q3yk3qj</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L1449,0L1449,8L1723,8L1723,8L1727,8L1727,8L1767,8L1767,9L1819,9L1819,10L1878,10L1878,11L1950,11L1950,11L1951,11L1951,11L1954,11L1954,10L2050,10L2050,10L2074,10L2074,10L2141,10L2141,9L2286,9L2286,9L2361,9L2361,9L2366,9L2366,9L2376,9L2376,10L2383,10L2383,10L2516,10L2516,10L2522,10L2522,10L2543,10" tabindex="0">
						<title>864ve95j</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L1468,0L1468,6L1723,6L1723,18L1724,18L1724,19L1725,19L1725,18L1727,18L1727,20L1728,20L1728,20L1729,20L1729,27L1767,27L1767,28L1819,28L1819,30L1878,30L1878,32L1884,32L1884,33L1950,33L1950,33L1951,33L1951,34L1954,34L1954,33L1981,33L1981,32L2023,32L2023,33L2045,33L2045,34L2050,34L2050,34L2071,34L2071,35L2072,35L2072,35L2074,35L2074,35L2075,35L2075,36L2076,36L2076,37L2077,37L2077,36L2141,36L2141,35L2284,35L2284,35L2286,35L2286,35L2361,35L2361,35L2366,35L2366,36L2376,36L2376,37L2383,37L2383,37L2413,37L2413,38L2450,38L2450,39L2502,39L2502,38L2516,38L2516,38L2520,38L2520,39L2522,39L2522,39L2542,39L2542,38L2543,38L2543,37L2543,37" tabindex="0">
						<title>jmz3rlox</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L1727,0L1727,11L1767,11L1767,12L1819,12L1819,13L1878,13L1878,14L1950,14L1950,14L1951,14L1951,14L1954,14L1954,13L1981,13L1981,18L2050,18L2050,18L2074,18L2074,18L2141,18L2141,17L2286,17L2286,18L2361,18L2361,18L2366,18L2366,19L2376,19L2376,20L2383,20L2383,21L2502,21L2502,20L2516,20L2516,21L2522,21L2522,21L2542,21L2542,20L2543,20" tabindex="0">
						<title>8lpv0drj</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L1767,0L1767,3L1819,3L1819,3L1878,3L1878,4L1931,4L1931,3L1950,3L1950,3L1951,3L1951,3L2050,3L2050,3L2074,3L2074,3L2286,3L2286,3L2361,3L2361,3L2366,3L2366,3L2376,3L2376,3L2383,3L2383,3L2516,3L2516,3L2522,3L2522,3L2543,3" tabindex="0">
						<title>8g26927j</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L1819,0L1819,5L1878,5L1878,7L1931,7L1931,6L1932,6L1932,5L1950,5L1950,5L1951,5L1951,5L2045,5L2045,5L2050,5L2050,5L2074,5L2074,5L2075,5L2075,5L2076,5L2076,5L2141,5L2141,5L2284,5L2284,5L2286,5L2286,5L2361,5L2361,5L2366,5L2366,5L2376,5L2376,5L2383,5L2383,5L2413,5L2413,5L2516,5L2516,5L2520,5L2520,5L2522,5L2522,5L2543,5" tabindex="0">
						<title>j40p60d8</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L1878,0L1878,3L1884,3L1884,4L1887,4L1887,5L1929,5L1929,5L1931,5L1931,12L1932,12L1932,21L1950,21L1950,21L1951,21L1951,21L1954,21L1954,32L1956,32L1956,31L1981,31L1981,30L2023,30L2023,30L2025,30L2025,30L2045,30L2045,30L2046,30L2046,31L2050,31L2050,31L2052,31L2052,31L2071,31L2071,31L2072,31L2072,31L2074,31L2074,31L2075,31L2075,31L2076,31L2076,31L2100,31L2100,31L2141,31L2141,30L2179,30L2179,30L2284,30L2284,30L2286,30L2286,31L2361,31L2361,31L2366,31L2366,33L2376,33L2376,34L2383,34L2383,34L2413,34L2413,35L2450,35L2450,35L2502,35L2502,34L2516,34L2516,34L2520,34L2520,34L2522,34L2522,34L2542,34L2542,33L2543,33L2543,32L2543,32" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L1929,0L1929,7L1950,7L1950,24L1951,24L1951,25L1954,25L1954,24L1956,24L1956,25L1981,25L1981,24L2025,24L2025,24L2046,24L2046,25L2050,25L2050,25L2052,25L2052,25L2074,25L2074,25L2076,25L2076,25L2100,25L2100,25L2141,25L2141,24L2179,24L2179,24L2286,24L2286,25L2361,25L2361,25L2366,25L2366,27L2376,27L2376,28L2383,28L2383,28L2502,28L2502,27L2516,27L2516,27L2520,27L2520,27L2522,27L2522,27L2542,27L2542,26L2543,26L2543,25L2543,25" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L1951,0L1951,15L1954,15L1954,14L1981,14L1981,13L2050,13L2050,13L2074,13L2074,13L2141,13L2141,12L2286,12L2286,12L2361,12L2361,12L2366,12L2366,12L2376,12L2376,13L2383,13L2383,13L2516,13L2516,13L2522,13L2522,13L2542,13L2542,12L2543,12" tabindex="0">
						<title>jm7qop4j</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L2023,0L2023,5L2025,5L2025,13L2045,13L2045,21L2046,21L2046,22L2050,22L2050,41L2051,41L2051,41L2052,41L2052,42L2071,42L2071,42L2072,42L2072,42L2074,42L2074,42L2075,42L2075,42L2076,42L2076,43L2077,43L2077,42L2100,42L2100,42L2141,42L2141,41L2179,41L2179,42L2284,42L2284,42L2286,42L2286,43L2361,43L2361,43L2366,43L2366,45L2376,45L2376,46L2383,46L2383,47L2413,47L2413,48L2450,48L2450,48L2516,48L2516,49L2520,49L2520,49L2522,49L2522,50L2530,50L2530,49L2542,49L2542,48L2543,48L2543,46L2543,46" tabindex="0">
						<title>8rme6wwj</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L2046,0L2046,6L2052,6L2052,6L2076,6L2076,6L2100,6L2100,6L2141,6L2141,6L2179,6L2179,6L2366,6L2366,7L2520,7L2520,7L2543,7L2543,6L2543,6" tabindex="0">
						<title>xkp59okj</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L2052,0L2052,9L2076,9L2076,9L2100,9L2100,9L2141,9L2141,9L2179,9L2179,9L2366,9L2366,10L2520,10L2520,10L2543,10L2543,9L2543,9" tabindex="0">
						<title>8v0d7qyx</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L2071,0L2071,6L2072,6L2072,6L2100,6L2100,18L2141,18L2141,18L2179,18L2179,19L2366,19L2366,20L2450,20L2450,20L2520,20L2520,21L2522,21L2522,21L2543,21" tabindex="0">
						<title>8l0n2l78</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L2072,0L2072,12L2076,12L2076,11L2141,11L2141,11L2450,11L2450,12L2520,12L2520,13L2522,13L2522,14L2543,14" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L2072,0L2072,11L2074,11L2074,31L2075,31L2075,41L2076,41L2076,54L2077,54L2077,55L2093,55L2093,55L2100,55L2100,55L2141,55L2141,54L2179,54L2179,55L2284,55L2284,56L2286,56L2286,57L2361,57L2361,57L2366,57L2366,59L2376,59L2376,60L2383,60L2383,61L2413,61L2413,62L2450,62L2450,63L2516,63L2516,64L2520,64L2520,67L2522,67L2522,69L2542,69L2542,68L2543,68" tabindex="0">
						<title>jokwe3l8</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L2076,0L2076,8L2077,8L2077,9L2141,9L2141,9L2284,9L2284,9L2413,9L2413,10L2520,10L2520,10L2543,10L2543,9L2543,9" tabindex="0">
						<title>xkpw7g6j</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L2179,0L2179,10L2366,10L2366,11L2520,11L2520,11L2543,11L2543,10L2543,10" tabindex="0">
						<title>j9kqm1r8</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L2284,0L2284,12L2286,12L2286,27L2361,27L2361,27L2366,27L2366,28L2376,28L2376,29L2383,29L2383,29L2413,29L2413,30L2502,30L2502,29L2516,29L2516,29L2520,29L2520,30L2522,30L2522,30L2542,30L2542,29L2543,29" tabindex="0">
						<title>8g2pg71j</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L2361,0L2361,22L2366,22L2366,23L2376,23L2376,24L2383,24L2383,25L2516,25L2516,26L2522,26L2522,27L2543,27" tabindex="0">
						<title>8ek6z678</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L2366,0L2366,2L2520,2L2520,2L2543,2" tabindex="0">
						<title>8ew371p8</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L2366,0L2366,14L2376,14L2376,15L2383,15L2383,15L2502,15L2502,21L2516,21L2516,22L2522,22L2522,22L2542,22L2542,21L2543,21" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L2376,0L2376,9L2383,9L2383,9L2516,9L2516,9L2522,9L2522,9L2543,9" tabindex="0">
						<title>x7mnw5qx</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L2383,0L2383,20L2502,20L2502,19L2516,19L2516,19L2522,19L2522,19L2542,19L2542,18L2543,18" tabindex="0">
						<title>j9v0qvrx</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L2413,0L2413,5L2520,5L2520,5L2543,5" tabindex="0">
						<title>8rmwgpqj</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L2450,0L2450,9L2520,9L2520,9L2522,9L2522,9L2543,9L2543,8L2543,8" tabindex="0">
						<title>j4v29mdj</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L2516,0L2516,20L2520,20L2520,57L2522,57L2522,57L2542,57L2542,56L2543,56L2543,54L2543,54" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L2522,0L2522,36L2530,36L2530,37L2542,37L2542,36L2543,36" tabindex="0">
						<title>86pek6wj</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
