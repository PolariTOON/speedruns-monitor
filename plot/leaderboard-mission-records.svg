<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Record time by leaderboard (missions)</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 80;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2020-10-27</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-27</text>
		</svg>
		<svg viewBox="0 0 80 20">
			<text x="40" y="10" dx="0" dy="2" textLength="80" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">00:00.00</text>
		</svg>
		<svg viewBox="0 0 80 20">
			<text x="40" y="10" dx="0" dy="2" textLength="80" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">00:48.10</text>
		</svg>
		<svg viewBox="0 0 1765 4810" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 4810) scale(1 -1)" style="--count: 11;">
				<g style="--index: 0;">
					<path d="M0,1495L61,1495L61,1218L96,1218L96,1127L107,1127L107,1109L705,1109L705,1096L712,1096L712,1054L1747,1054L1747,1014" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.81wpx5oq</title>
					</path>
					<rect x="0" y="1014" width="1747" height="481"/>
					<path d="M0,1495L0,1495" tabindex="0">
						<title>00:14.95 on 2020-10-27</title>
					</path>
					<line x1="0" y1="1495" x2="1765" y2="1495"/>
					<line x1="0" y1="0" x2="0" y2="4810"/>
					<path d="M61,1218L61,1218" tabindex="0">
						<title>00:12.18 on 2020-12-27</title>
					</path>
					<line x1="0" y1="1218" x2="1765" y2="1218"/>
					<line x1="61" y1="0" x2="61" y2="4810"/>
					<path d="M96,1127L96,1127" tabindex="0">
						<title>00:11.27 on 2021-01-31</title>
					</path>
					<line x1="0" y1="1127" x2="1765" y2="1127"/>
					<line x1="96" y1="0" x2="96" y2="4810"/>
					<path d="M107,1109L107,1109" tabindex="0">
						<title>00:11.09 on 2021-02-11</title>
					</path>
					<line x1="0" y1="1109" x2="1765" y2="1109"/>
					<line x1="107" y1="0" x2="107" y2="4810"/>
					<path d="M705,1096L705,1096" tabindex="0">
						<title>00:10.96 on 2022-10-02</title>
					</path>
					<line x1="0" y1="1096" x2="1765" y2="1096"/>
					<line x1="705" y1="0" x2="705" y2="4810"/>
					<path d="M712,1054L712,1054" tabindex="0">
						<title>00:10.54 on 2022-10-09</title>
					</path>
					<line x1="0" y1="1054" x2="1765" y2="1054"/>
					<line x1="712" y1="0" x2="712" y2="4810"/>
					<path d="M1747,1014L1747,1014" tabindex="0">
						<title>00:10.14 on 2025-08-09</title>
					</path>
					<line x1="0" y1="1014" x2="1765" y2="1014"/>
					<line x1="1747" y1="0" x2="1747" y2="4810"/>
				</g>
				<g style="--index: 1;">
					<path d="M1,3697L24,3697L24,3229L120,3229L120,3184L901,3184L901,3100" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.zqop6rp1</title>
					</path>
					<rect x="1" y="3100" width="900" height="597"/>
					<path d="M1,3697L1,3697" tabindex="0">
						<title>00:36.97 on 2020-10-28</title>
					</path>
					<line x1="0" y1="3697" x2="1765" y2="3697"/>
					<line x1="1" y1="0" x2="1" y2="4810"/>
					<path d="M24,3229L24,3229" tabindex="0">
						<title>00:32.29 on 2020-11-20</title>
					</path>
					<line x1="0" y1="3229" x2="1765" y2="3229"/>
					<line x1="24" y1="0" x2="24" y2="4810"/>
					<path d="M120,3184L120,3184" tabindex="0">
						<title>00:31.84 on 2021-02-24</title>
					</path>
					<line x1="0" y1="3184" x2="1765" y2="3184"/>
					<line x1="120" y1="0" x2="120" y2="4810"/>
					<path d="M901,3100L901,3100" tabindex="0">
						<title>00:31.00 on 2023-04-16</title>
					</path>
					<line x1="0" y1="3100" x2="1765" y2="3100"/>
					<line x1="901" y1="0" x2="901" y2="4810"/>
				</g>
				<g style="--index: 2;">
					<path d="M2,1889L24,1889L24,1605L32,1605L32,1550L120,1550L120,1488L741,1488L741,1475L902,1475L902,1442L1759,1442L1759,1423" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0138n5dq</title>
					</path>
					<rect x="2" y="1423" width="1757" height="466"/>
					<path d="M2,1889L2,1889" tabindex="0">
						<title>00:18.89 on 2020-10-29</title>
					</path>
					<line x1="0" y1="1889" x2="1765" y2="1889"/>
					<line x1="2" y1="0" x2="2" y2="4810"/>
					<path d="M24,1605L24,1605" tabindex="0">
						<title>00:16.05 on 2020-11-20</title>
					</path>
					<line x1="0" y1="1605" x2="1765" y2="1605"/>
					<line x1="24" y1="0" x2="24" y2="4810"/>
					<path d="M32,1550L32,1550" tabindex="0">
						<title>00:15.50 on 2020-11-28</title>
					</path>
					<line x1="0" y1="1550" x2="1765" y2="1550"/>
					<line x1="32" y1="0" x2="32" y2="4810"/>
					<path d="M120,1488L120,1488" tabindex="0">
						<title>00:14.88 on 2021-02-24</title>
					</path>
					<line x1="0" y1="1488" x2="1765" y2="1488"/>
					<line x1="120" y1="0" x2="120" y2="4810"/>
					<path d="M741,1475L741,1475" tabindex="0">
						<title>00:14.75 on 2022-11-07</title>
					</path>
					<line x1="0" y1="1475" x2="1765" y2="1475"/>
					<line x1="741" y1="0" x2="741" y2="4810"/>
					<path d="M902,1442L902,1442" tabindex="0">
						<title>00:14.42 on 2023-04-17</title>
					</path>
					<line x1="0" y1="1442" x2="1765" y2="1442"/>
					<line x1="902" y1="0" x2="902" y2="4810"/>
					<path d="M1759,1423L1759,1423" tabindex="0">
						<title>00:14.23 on 2025-08-21</title>
					</path>
					<line x1="0" y1="1423" x2="1765" y2="1423"/>
					<line x1="1759" y1="0" x2="1759" y2="4810"/>
				</g>
				<g style="--index: 3;">
					<path d="M3,1214L23,1214L23,1213L25,1213L25,1188L38,1188L38,1179L54,1179L54,1161L63,1161L63,1139L88,1139L88,1130L89,1130L89,1119L121,1119L121,1098L122,1098L122,1069L940,1069L940,1068L1562,1068L1562,1009L1571,1009L1571,997L1760,997L1760,966L1762,966L1762,958" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.rqvp5e7q</title>
					</path>
					<rect x="3" y="958" width="1759" height="256"/>
					<path d="M3,1214L3,1214" tabindex="0">
						<title>00:12.14 on 2020-10-30</title>
					</path>
					<line x1="0" y1="1214" x2="1765" y2="1214"/>
					<line x1="3" y1="0" x2="3" y2="4810"/>
					<path d="M23,1213L23,1213" tabindex="0">
						<title>00:12.13 on 2020-11-19</title>
					</path>
					<line x1="0" y1="1213" x2="1765" y2="1213"/>
					<line x1="23" y1="0" x2="23" y2="4810"/>
					<path d="M25,1188L25,1188" tabindex="0">
						<title>00:11.88 on 2020-11-21</title>
					</path>
					<line x1="0" y1="1188" x2="1765" y2="1188"/>
					<line x1="25" y1="0" x2="25" y2="4810"/>
					<path d="M38,1179L38,1179" tabindex="0">
						<title>00:11.79 on 2020-12-04</title>
					</path>
					<line x1="0" y1="1179" x2="1765" y2="1179"/>
					<line x1="38" y1="0" x2="38" y2="4810"/>
					<path d="M54,1161L54,1161" tabindex="0">
						<title>00:11.61 on 2020-12-20</title>
					</path>
					<line x1="0" y1="1161" x2="1765" y2="1161"/>
					<line x1="54" y1="0" x2="54" y2="4810"/>
					<path d="M63,1139L63,1139" tabindex="0">
						<title>00:11.39 on 2020-12-29</title>
					</path>
					<line x1="0" y1="1139" x2="1765" y2="1139"/>
					<line x1="63" y1="0" x2="63" y2="4810"/>
					<path d="M88,1130L88,1130" tabindex="0">
						<title>00:11.30 on 2021-01-23</title>
					</path>
					<line x1="0" y1="1130" x2="1765" y2="1130"/>
					<line x1="88" y1="0" x2="88" y2="4810"/>
					<path d="M89,1119L89,1119" tabindex="0">
						<title>00:11.19 on 2021-01-24</title>
					</path>
					<line x1="0" y1="1119" x2="1765" y2="1119"/>
					<line x1="89" y1="0" x2="89" y2="4810"/>
					<path d="M121,1098L121,1098" tabindex="0">
						<title>00:10.98 on 2021-02-25</title>
					</path>
					<line x1="0" y1="1098" x2="1765" y2="1098"/>
					<line x1="121" y1="0" x2="121" y2="4810"/>
					<path d="M122,1069L122,1069" tabindex="0">
						<title>00:10.69 on 2021-02-26</title>
					</path>
					<line x1="0" y1="1069" x2="1765" y2="1069"/>
					<line x1="122" y1="0" x2="122" y2="4810"/>
					<path d="M940,1068L940,1068" tabindex="0">
						<title>00:10.68 on 2023-05-25</title>
					</path>
					<line x1="0" y1="1068" x2="1765" y2="1068"/>
					<line x1="940" y1="0" x2="940" y2="4810"/>
					<path d="M1562,1009L1562,1009" tabindex="0">
						<title>00:10.09 on 2025-02-05</title>
					</path>
					<line x1="0" y1="1009" x2="1765" y2="1009"/>
					<line x1="1562" y1="0" x2="1562" y2="4810"/>
					<path d="M1571,997L1571,997" tabindex="0">
						<title>00:09.97 on 2025-02-14</title>
					</path>
					<line x1="0" y1="997" x2="1765" y2="997"/>
					<line x1="1571" y1="0" x2="1571" y2="4810"/>
					<path d="M1760,966L1760,966" tabindex="0">
						<title>00:09.66 on 2025-08-22</title>
					</path>
					<line x1="0" y1="966" x2="1765" y2="966"/>
					<line x1="1760" y1="0" x2="1760" y2="4810"/>
					<path d="M1762,958L1762,958" tabindex="0">
						<title>00:09.58 on 2025-08-24</title>
					</path>
					<line x1="0" y1="958" x2="1765" y2="958"/>
					<line x1="1762" y1="0" x2="1762" y2="4810"/>
				</g>
				<g style="--index: 4;">
					<path d="M4,1634L45,1634L45,1513L707,1513L707,1458L990,1458L990,1287L1717,1287L1717,1257" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.5ler7m5q</title>
					</path>
					<rect x="4" y="1257" width="1713" height="377"/>
					<path d="M4,1634L4,1634" tabindex="0">
						<title>00:16.34 on 2020-10-31</title>
					</path>
					<line x1="0" y1="1634" x2="1765" y2="1634"/>
					<line x1="4" y1="0" x2="4" y2="4810"/>
					<path d="M45,1513L45,1513" tabindex="0">
						<title>00:15.13 on 2020-12-11</title>
					</path>
					<line x1="0" y1="1513" x2="1765" y2="1513"/>
					<line x1="45" y1="0" x2="45" y2="4810"/>
					<path d="M707,1458L707,1458" tabindex="0">
						<title>00:14.58 on 2022-10-04</title>
					</path>
					<line x1="0" y1="1458" x2="1765" y2="1458"/>
					<line x1="707" y1="0" x2="707" y2="4810"/>
					<path d="M990,1287L990,1287" tabindex="0">
						<title>00:12.87 on 2023-07-14</title>
					</path>
					<line x1="0" y1="1287" x2="1765" y2="1287"/>
					<line x1="990" y1="0" x2="990" y2="4810"/>
					<path d="M1717,1257L1717,1257" tabindex="0">
						<title>00:12.57 on 2025-07-10</title>
					</path>
					<line x1="0" y1="1257" x2="1765" y2="1257"/>
					<line x1="1717" y1="0" x2="1717" y2="4810"/>
				</g>
				<g style="--index: 5;">
					<path d="M5,2544L35,2544L35,2380L123,2380L123,2171L124,2171L124,2147L145,2147L145,2097L1748,2097L1748,2078" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.0q5njgmq</title>
					</path>
					<rect x="5" y="2078" width="1743" height="466"/>
					<path d="M5,2544L5,2544" tabindex="0">
						<title>00:25.44 on 2020-11-01</title>
					</path>
					<line x1="0" y1="2544" x2="1765" y2="2544"/>
					<line x1="5" y1="0" x2="5" y2="4810"/>
					<path d="M35,2380L35,2380" tabindex="0">
						<title>00:23.80 on 2020-12-01</title>
					</path>
					<line x1="0" y1="2380" x2="1765" y2="2380"/>
					<line x1="35" y1="0" x2="35" y2="4810"/>
					<path d="M123,2171L123,2171" tabindex="0">
						<title>00:21.71 on 2021-02-27</title>
					</path>
					<line x1="0" y1="2171" x2="1765" y2="2171"/>
					<line x1="123" y1="0" x2="123" y2="4810"/>
					<path d="M124,2147L124,2147" tabindex="0">
						<title>00:21.47 on 2021-02-28</title>
					</path>
					<line x1="0" y1="2147" x2="1765" y2="2147"/>
					<line x1="124" y1="0" x2="124" y2="4810"/>
					<path d="M145,2097L145,2097" tabindex="0">
						<title>00:20.97 on 2021-03-21</title>
					</path>
					<line x1="0" y1="2097" x2="1765" y2="2097"/>
					<line x1="145" y1="0" x2="145" y2="4810"/>
					<path d="M1748,2078L1748,2078" tabindex="0">
						<title>00:20.78 on 2025-08-10</title>
					</path>
					<line x1="0" y1="2078" x2="1765" y2="2078"/>
					<line x1="1748" y1="0" x2="1748" y2="4810"/>
				</g>
				<g style="--index: 6;">
					<path d="M6,3121L17,3121L17,3105L47,3105L47,3015L289,3015L289,2997L553,2997L553,2972L564,2972L564,2940L565,2940L565,2897L696,2897L696,2875L806,2875L806,2854L808,2854L808,2847" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.4lxp7e2q</title>
					</path>
					<rect x="6" y="2847" width="802" height="274"/>
					<path d="M6,3121L6,3121" tabindex="0">
						<title>00:31.21 on 2020-11-02</title>
					</path>
					<line x1="0" y1="3121" x2="1765" y2="3121"/>
					<line x1="6" y1="0" x2="6" y2="4810"/>
					<path d="M17,3105L17,3105" tabindex="0">
						<title>00:31.05 on 2020-11-13</title>
					</path>
					<line x1="0" y1="3105" x2="1765" y2="3105"/>
					<line x1="17" y1="0" x2="17" y2="4810"/>
					<path d="M47,3015L47,3015" tabindex="0">
						<title>00:30.15 on 2020-12-13</title>
					</path>
					<line x1="0" y1="3015" x2="1765" y2="3015"/>
					<line x1="47" y1="0" x2="47" y2="4810"/>
					<path d="M289,2997L289,2997" tabindex="0">
						<title>00:29.97 on 2021-08-12</title>
					</path>
					<line x1="0" y1="2997" x2="1765" y2="2997"/>
					<line x1="289" y1="0" x2="289" y2="4810"/>
					<path d="M553,2972L553,2972" tabindex="0">
						<title>00:29.72 on 2022-05-03</title>
					</path>
					<line x1="0" y1="2972" x2="1765" y2="2972"/>
					<line x1="553" y1="0" x2="553" y2="4810"/>
					<path d="M564,2940L564,2940" tabindex="0">
						<title>00:29.40 on 2022-05-14</title>
					</path>
					<line x1="0" y1="2940" x2="1765" y2="2940"/>
					<line x1="564" y1="0" x2="564" y2="4810"/>
					<path d="M565,2897L565,2897" tabindex="0">
						<title>00:28.97 on 2022-05-15</title>
					</path>
					<line x1="0" y1="2897" x2="1765" y2="2897"/>
					<line x1="565" y1="0" x2="565" y2="4810"/>
					<path d="M696,2875L696,2875" tabindex="0">
						<title>00:28.75 on 2022-09-23</title>
					</path>
					<line x1="0" y1="2875" x2="1765" y2="2875"/>
					<line x1="696" y1="0" x2="696" y2="4810"/>
					<path d="M806,2854L806,2854" tabindex="0">
						<title>00:28.54 on 2023-01-11</title>
					</path>
					<line x1="0" y1="2854" x2="1765" y2="2854"/>
					<line x1="806" y1="0" x2="806" y2="4810"/>
					<path d="M808,2847L808,2847" tabindex="0">
						<title>00:28.47 on 2023-01-13</title>
					</path>
					<line x1="0" y1="2847" x2="1765" y2="2847"/>
					<line x1="808" y1="0" x2="808" y2="4810"/>
				</g>
				<g style="--index: 7;">
					<path d="M7,2245L24,2245L24,1914L324,1914L324,1895L609,1895L609,1825L900,1825L900,1769L1357,1769L1357,1621L1754,1621L1754,1616L1765,1616L1765,1586" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.814y0701</title>
					</path>
					<rect x="7" y="1586" width="1758" height="659"/>
					<path d="M7,2245L7,2245" tabindex="0">
						<title>00:22.45 on 2020-11-03</title>
					</path>
					<line x1="0" y1="2245" x2="1765" y2="2245"/>
					<line x1="7" y1="0" x2="7" y2="4810"/>
					<path d="M24,1914L24,1914" tabindex="0">
						<title>00:19.14 on 2020-11-20</title>
					</path>
					<line x1="0" y1="1914" x2="1765" y2="1914"/>
					<line x1="24" y1="0" x2="24" y2="4810"/>
					<path d="M324,1895L324,1895" tabindex="0">
						<title>00:18.95 on 2021-09-16</title>
					</path>
					<line x1="0" y1="1895" x2="1765" y2="1895"/>
					<line x1="324" y1="0" x2="324" y2="4810"/>
					<path d="M609,1825L609,1825" tabindex="0">
						<title>00:18.25 on 2022-06-28</title>
					</path>
					<line x1="0" y1="1825" x2="1765" y2="1825"/>
					<line x1="609" y1="0" x2="609" y2="4810"/>
					<path d="M900,1769L900,1769" tabindex="0">
						<title>00:17.69 on 2023-04-15</title>
					</path>
					<line x1="0" y1="1769" x2="1765" y2="1769"/>
					<line x1="900" y1="0" x2="900" y2="4810"/>
					<path d="M1357,1621L1357,1621" tabindex="0">
						<title>00:16.21 on 2024-07-15</title>
					</path>
					<line x1="0" y1="1621" x2="1765" y2="1621"/>
					<line x1="1357" y1="0" x2="1357" y2="4810"/>
					<path d="M1754,1616L1754,1616" tabindex="0">
						<title>00:16.16 on 2025-08-16</title>
					</path>
					<line x1="0" y1="1616" x2="1765" y2="1616"/>
					<line x1="1754" y1="0" x2="1754" y2="4810"/>
					<path d="M1765,1586L1765,1586" tabindex="0">
						<title>00:15.86 on 2025-08-27</title>
					</path>
					<line x1="0" y1="1586" x2="1765" y2="1586"/>
					<line x1="1765" y1="0" x2="1765" y2="4810"/>
				</g>
				<g style="--index: 8;">
					<path d="M9,4810L99,4810L99,4666L236,4666L236,4359L585,4359L585,4118L588,4118L588,3938L732,3938L732,3935L733,3935L733,3793L734,3793L734,3752L1290,3752L1290,3533L1749,3533L1749,3370" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.z19mo80l</title>
					</path>
					<rect x="9" y="3370" width="1740" height="1440"/>
					<path d="M9,4810L9,4810" tabindex="0">
						<title>00:48.10 on 2020-11-05</title>
					</path>
					<line x1="0" y1="4810" x2="1765" y2="4810"/>
					<line x1="9" y1="0" x2="9" y2="4810"/>
					<path d="M99,4666L99,4666" tabindex="0">
						<title>00:46.66 on 2021-02-03</title>
					</path>
					<line x1="0" y1="4666" x2="1765" y2="4666"/>
					<line x1="99" y1="0" x2="99" y2="4810"/>
					<path d="M236,4359L236,4359" tabindex="0">
						<title>00:43.59 on 2021-06-20</title>
					</path>
					<line x1="0" y1="4359" x2="1765" y2="4359"/>
					<line x1="236" y1="0" x2="236" y2="4810"/>
					<path d="M585,4118L585,4118" tabindex="0">
						<title>00:41.18 on 2022-06-04</title>
					</path>
					<line x1="0" y1="4118" x2="1765" y2="4118"/>
					<line x1="585" y1="0" x2="585" y2="4810"/>
					<path d="M588,3938L588,3938" tabindex="0">
						<title>00:39.38 on 2022-06-07</title>
					</path>
					<line x1="0" y1="3938" x2="1765" y2="3938"/>
					<line x1="588" y1="0" x2="588" y2="4810"/>
					<path d="M732,3935L732,3935" tabindex="0">
						<title>00:39.35 on 2022-10-29</title>
					</path>
					<line x1="0" y1="3935" x2="1765" y2="3935"/>
					<line x1="732" y1="0" x2="732" y2="4810"/>
					<path d="M733,3793L733,3793" tabindex="0">
						<title>00:37.93 on 2022-10-30</title>
					</path>
					<line x1="0" y1="3793" x2="1765" y2="3793"/>
					<line x1="733" y1="0" x2="733" y2="4810"/>
					<path d="M734,3752L734,3752" tabindex="0">
						<title>00:37.52 on 2022-10-31</title>
					</path>
					<line x1="0" y1="3752" x2="1765" y2="3752"/>
					<line x1="734" y1="0" x2="734" y2="4810"/>
					<path d="M1290,3533L1290,3533" tabindex="0">
						<title>00:35.33 on 2024-05-09</title>
					</path>
					<line x1="0" y1="3533" x2="1765" y2="3533"/>
					<line x1="1290" y1="0" x2="1290" y2="4810"/>
					<path d="M1749,3370L1749,3370" tabindex="0">
						<title>00:33.70 on 2025-08-11</title>
					</path>
					<line x1="0" y1="3370" x2="1765" y2="3370"/>
					<line x1="1749" y1="0" x2="1749" y2="4810"/>
				</g>
				<g style="--index: 9;">
					<path d="M87,4411L95,4411L95,4169L150,4169L150,4123L163,4123L163,4117L568,4117L568,4071L1747,4071L1747,4065L1756,4065L1756,4035" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.5lmk0gjq</title>
					</path>
					<rect x="87" y="4035" width="1669" height="376"/>
					<path d="M87,4411L87,4411" tabindex="0">
						<title>00:44.11 on 2021-01-22</title>
					</path>
					<line x1="0" y1="4411" x2="1765" y2="4411"/>
					<line x1="87" y1="0" x2="87" y2="4810"/>
					<path d="M95,4169L95,4169" tabindex="0">
						<title>00:41.69 on 2021-01-30</title>
					</path>
					<line x1="0" y1="4169" x2="1765" y2="4169"/>
					<line x1="95" y1="0" x2="95" y2="4810"/>
					<path d="M150,4123L150,4123" tabindex="0">
						<title>00:41.23 on 2021-03-26</title>
					</path>
					<line x1="0" y1="4123" x2="1765" y2="4123"/>
					<line x1="150" y1="0" x2="150" y2="4810"/>
					<path d="M163,4117L163,4117" tabindex="0">
						<title>00:41.17 on 2021-04-08</title>
					</path>
					<line x1="0" y1="4117" x2="1765" y2="4117"/>
					<line x1="163" y1="0" x2="163" y2="4810"/>
					<path d="M568,4071L568,4071" tabindex="0">
						<title>00:40.71 on 2022-05-18</title>
					</path>
					<line x1="0" y1="4071" x2="1765" y2="4071"/>
					<line x1="568" y1="0" x2="568" y2="4810"/>
					<path d="M1747,4065L1747,4065" tabindex="0">
						<title>00:40.65 on 2025-08-09</title>
					</path>
					<line x1="0" y1="4065" x2="1765" y2="4065"/>
					<line x1="1747" y1="0" x2="1747" y2="4810"/>
					<path d="M1756,4035L1756,4035" tabindex="0">
						<title>00:40.35 on 2025-08-18</title>
					</path>
					<line x1="0" y1="4035" x2="1765" y2="4035"/>
					<line x1="1756" y1="0" x2="1756" y2="4810"/>
				</g>
				<g style="--index: 10;">
					<path d="M1078,3972L1403,3972L1403,1586L1744,1586L1744,1584L1745,1584L1745,1534" tabindex="0">
						<title>l_r9gnozkd-rkl3znrk-wledz9en.1dkg795l</title>
					</path>
					<rect x="1078" y="1534" width="667" height="2438"/>
					<path d="M1078,3972L1078,3972" tabindex="0">
						<title>00:39.72 on 2023-10-10</title>
					</path>
					<line x1="0" y1="3972" x2="1765" y2="3972"/>
					<line x1="1078" y1="0" x2="1078" y2="4810"/>
					<path d="M1403,1586L1403,1586" tabindex="0">
						<title>00:15.86 on 2024-08-30</title>
					</path>
					<line x1="0" y1="1586" x2="1765" y2="1586"/>
					<line x1="1403" y1="0" x2="1403" y2="4810"/>
					<path d="M1744,1584L1744,1584" tabindex="0">
						<title>00:15.84 on 2025-08-06</title>
					</path>
					<line x1="0" y1="1584" x2="1765" y2="1584"/>
					<line x1="1744" y1="0" x2="1744" y2="4810"/>
					<path d="M1745,1534L1745,1534" tabindex="0">
						<title>00:15.34 on 2025-08-07</title>
					</path>
					<line x1="0" y1="1534" x2="1765" y2="1534"/>
					<line x1="1745" y1="0" x2="1745" y2="4810"/>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
