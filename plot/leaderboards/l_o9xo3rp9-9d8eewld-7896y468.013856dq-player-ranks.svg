<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Rank by player for leaderboard l_o9xo3rp9-9d8eewld-7896y468.013856dq</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-01-08</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-04-24</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">82</text>
		</svg>
		<svg viewBox="0 0 2663 82" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 82) scale(1 -1)" style="--count: 83;">
				<g>
					<rect x="0" y="0" width="2663" height="82"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,0L1,0L1,2L5,2L5,3L71,3L71,4L104,4L104,5L870,5L870,6L1029,6L1029,7L1047,7L1047,9L1054,9L1054,10L1140,10L1140,11L1574,11L1574,12L1601,12L1601,13L1643,13L1643,14L1661,14L1661,15L1731,15L1731,16L1778,16L1778,17L1849,17L1849,18L1902,18L1902,19L1911,19L1911,20L1918,20L1918,21L1940,21L1940,22L1969,22L1969,23L2122,23L2122,24L2124,24L2124,25L2165,25L2165,26L2247,26L2247,27L2274,27L2274,28L2307,28L2307,29L2324,29L2324,30L2333,30L2333,31L2400,31L2400,32L2433,32L2433,33L2438,33L2438,34L2456,34L2456,35L2504,35L2504,36L2505,36L2505,37L2571,37L2571,38L2579,38L2579,39L2582,39L2582,40L2598,40L2598,42L2600,42L2600,43L2602,43L2602,44L2609,44L2609,45L2612,45L2612,46L2625,46L2625,49L2630,49L2630,50L2640,50L2640,51L2657,51L2657,52L2660,52L2660,53L2663,53" tabindex="0">
						<title>qj2pq1p8</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,1L1,1L1,0L5,0L5,1L104,1L104,2L870,2L870,3L1047,3L1047,5L1054,5L1054,6L1104,6L1104,7L1148,7L1148,8L1601,8L1601,9L1643,9L1643,10L1661,10L1661,11L1731,11L1731,12L1849,12L1849,13L1911,13L1911,14L1918,14L1918,15L1969,15L1969,16L2122,16L2122,17L2124,17L2124,18L2247,18L2247,19L2307,19L2307,20L2333,20L2333,21L2400,21L2400,22L2433,22L2433,23L2438,23L2438,24L2456,24L2456,25L2504,25L2504,26L2505,26L2505,27L2571,27L2571,28L2582,28L2582,29L2598,29L2598,30L2602,30L2602,31L2609,31L2609,32L2613,32L2613,33L2625,33L2625,34L2630,34L2630,35L2640,35L2640,36L2657,36L2657,37L2663,37" tabindex="0">
						<title>e8e935oj</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,2L1,2L1,1L5,1L5,2L104,2L104,3L870,3L870,4L1047,4L1047,6L1054,6L1054,7L1104,7L1104,8L1147,8L1147,9L1601,9L1601,10L1643,10L1643,11L1661,11L1661,12L1731,12L1731,13L1849,13L1849,14L1911,14L1911,15L1918,15L1918,16L1969,16L1969,17L2122,17L2122,18L2124,18L2124,19L2247,19L2247,20L2307,20L2307,21L2333,21L2333,22L2400,22L2400,23L2433,23L2433,24L2438,24L2438,25L2456,25L2456,26L2504,26L2504,27L2505,27L2505,28L2571,28L2571,29L2582,29L2582,30L2598,30L2598,31L2602,31L2602,32L2609,32L2609,33L2613,33L2613,34L2625,34L2625,35L2630,35L2630,36L2640,36L2640,37L2657,37L2657,38L2663,38" tabindex="0">
						<title>7j47r25j</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L5,3L5,0L14,0L14,0L104,0L104,1L870,1L870,2L1047,2L1047,3L1054,3L1054,4L1077,4L1077,5L1104,5L1104,6L1478,6L1478,7L1601,7L1601,8L1643,8L1643,9L1661,9L1661,10L1849,10L1849,11L1911,11L1911,12L1918,12L1918,13L1969,13L1969,14L2124,14L2124,15L2247,15L2247,16L2333,16L2333,17L2400,17L2400,18L2433,18L2433,19L2456,19L2456,20L2504,20L2504,21L2505,21L2505,22L2598,22L2598,23L2609,23L2609,24L2625,24L2625,25L2639,25L2639,26L2640,26L2640,27L2657,27L2657,28L2661,28L2661,29L2663,29" tabindex="0">
						<title>5j5gggn8</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,4L71,4L71,3L104,3L104,4L870,4L870,5L1029,5L1029,6L1047,6L1047,8L1054,8L1054,9L1144,9L1144,10L1574,10L1574,11L1601,11L1601,12L1643,12L1643,13L1661,13L1661,14L1731,14L1731,15L1778,15L1778,16L1849,16L1849,17L1911,17L1911,18L1918,18L1918,19L1969,19L1969,20L2122,20L2122,21L2124,21L2124,22L2247,22L2247,23L2274,23L2274,24L2307,24L2307,25L2333,25L2333,26L2400,26L2400,27L2433,27L2433,28L2438,28L2438,29L2456,29L2456,30L2504,30L2504,31L2505,31L2505,32L2571,32L2571,33L2579,33L2579,34L2582,34L2582,35L2598,35L2598,36L2600,36L2600,37L2602,37L2602,38L2609,38L2609,39L2612,39L2612,40L2625,40L2625,41L2630,41L2630,42L2640,42L2640,43L2657,43L2657,44L2660,44L2660,45L2663,45" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,5L104,5L104,0L870,0L870,1L965,1L965,0L1047,0L1047,1L1054,1L1054,2L1143,2L1143,0L1151,0L1151,1L1173,1L1173,2L1601,2L1601,3L1705,3L1705,4L1911,4L1911,5L2567,5L2567,6L2598,6L2598,7L2625,7L2625,8L2640,8L2640,9L2661,9L2661,10L2663,10L2663,11L2663,11" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,6L595,6L595,6L870,6L870,7L1029,7L1029,8L1047,8L1047,10L1054,10L1054,11L1140,11L1140,12L1516,12L1516,13L1574,13L1574,14L1601,14L1601,15L1643,15L1643,16L1661,16L1661,17L1667,17L1667,18L1669,18L1669,19L1731,19L1731,20L1778,20L1778,21L1785,21L1785,22L1797,22L1797,23L1849,23L1849,24L1861,24L1861,25L1902,25L1902,26L1908,26L1908,27L1911,27L1911,28L1918,28L1918,29L1927,29L1927,30L1940,30L1940,31L1969,31L1969,32L1981,32L1981,33L2050,33L2050,34L2106,34L2106,35L2119,35L2119,36L2122,36L2122,37L2124,37L2124,38L2165,38L2165,39L2247,39L2247,40L2274,40L2274,41L2276,41L2276,42L2290,42L2290,43L2307,43L2307,44L2324,44L2324,45L2329,45L2329,46L2333,46L2333,47L2400,47L2400,48L2410,48L2410,49L2433,49L2433,50L2438,50L2438,51L2456,51L2456,52L2504,52L2504,53L2505,53L2505,54L2532,54L2532,55L2541,55L2541,56L2571,56L2571,58L2579,58L2579,59L2581,59L2581,60L2598,60L2598,62L2600,62L2600,63L2601,63L2601,64L2602,64L2602,65L2609,65L2609,66L2611,66L2611,67L2621,67L2621,68L2625,68L2625,71L2626,71L2626,72L2630,72L2630,73L2640,73L2640,74L2648,74L2648,75L2657,75L2657,76L2660,76L2660,77L2663,77" tabindex="0">
						<title>j9rlkzoj</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,7L870,7L870,0L965,0L965,1L1047,1L1047,2L1054,2L1054,3L1077,3L1077,4L1601,4L1601,5L1702,5L1702,6L1849,6L1849,7L1911,7L1911,8L1969,8L1969,9L2247,9L2247,10L2333,10L2333,11L2400,11L2400,12L2433,12L2433,13L2456,13L2456,14L2504,14L2504,15L2505,15L2505,16L2598,16L2598,17L2609,17L2609,18L2625,18L2625,19L2640,19L2640,20L2657,20L2657,21L2661,21L2661,22L2663,22" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,8L1029,8L1029,5L1047,5L1047,7L1054,7L1054,8L1104,8L1104,5L1182,5L1182,5L1479,5L1479,6L1601,6L1601,7L1643,7L1643,8L1849,8L1849,9L1911,9L1911,10L1969,10L1969,11L2247,11L2247,12L2333,12L2333,13L2400,13L2400,14L2433,14L2433,15L2456,15L2456,16L2504,16L2504,17L2505,17L2505,18L2598,18L2598,19L2609,19L2609,20L2625,20L2625,21L2640,21L2640,22L2657,22L2657,23L2661,23L2661,24L2663,24" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,9L1047,9L1047,0L1054,0L1054,1L1143,1L1143,2L1151,2L1151,0L1173,0L1173,0L1601,0L1601,1L1602,1L1602,0L1911,0L1911,1L2663,1" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,10L1047,10L1047,4L1054,4L1054,5L1077,5L1077,3L1601,3L1601,4L1702,4L1702,5L1849,5L1849,6L1911,6L1911,7L1969,7L1969,8L2247,8L2247,9L2333,9L2333,10L2400,10L2400,11L2433,11L2433,12L2456,12L2456,13L2504,13L2504,14L2505,14L2505,15L2598,15L2598,16L2609,16L2609,17L2625,17L2625,18L2640,18L2640,19L2657,19L2657,20L2661,20L2661,21L2663,21" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,11L1054,11L1054,0L1143,0L1143,1L1151,1L1151,2L1173,2L1173,1L1601,1L1601,2L1911,2L1911,3L2598,3L2598,4L2640,4L2640,5L2643,5L2643,6L2663,6" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,12L1140,12L1140,10L1143,10L1143,10L1144,10L1144,9L1145,9L1145,9L1147,9L1147,8L1148,8L1148,7L1478,7L1478,6L1479,6L1479,5L1601,5L1601,6L1702,6L1702,7L1849,7L1849,8L1911,8L1911,9L1969,9L1969,10L2247,10L2247,11L2333,11L2333,12L2400,12L2400,13L2433,13L2433,14L2456,14L2456,15L2504,15L2504,16L2505,16L2505,17L2598,17L2598,18L2609,18L2609,19L2625,19L2625,20L2640,20L2640,21L2657,21L2657,22L2661,22L2661,23L2663,23" tabindex="0">
						<title>8grypo7x</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,13L1516,13L1516,12L1574,12L1574,13L1601,13L1601,14L1643,14L1643,15L1661,15L1661,16L1669,16L1669,17L1731,17L1731,18L1778,18L1778,19L1785,19L1785,20L1797,20L1797,21L1849,21L1849,22L1902,22L1902,23L1908,23L1908,24L1911,24L1911,25L1918,25L1918,26L1927,26L1927,27L1940,27L1940,28L1969,28L1969,29L1981,29L1981,30L2050,30L2050,31L2119,31L2119,32L2122,32L2122,33L2124,33L2124,34L2165,34L2165,35L2247,35L2247,36L2274,36L2274,37L2276,37L2276,38L2290,38L2290,39L2307,39L2307,40L2324,40L2324,41L2333,41L2333,42L2400,42L2400,43L2410,43L2410,44L2433,44L2433,45L2438,45L2438,46L2456,46L2456,47L2504,47L2504,48L2505,48L2505,49L2541,49L2541,50L2571,50L2571,52L2579,52L2579,53L2582,53L2582,54L2598,54L2598,56L2600,56L2600,57L2602,57L2602,58L2609,58L2609,59L2611,59L2611,60L2621,60L2621,61L2625,61L2625,64L2626,64L2626,65L2630,65L2630,66L2640,66L2640,67L2648,67L2648,68L2657,68L2657,69L2660,69L2660,70L2663,70" tabindex="0">
						<title>8ek11068</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,14L1548,14L1548,14L1574,14L1574,15L1601,15L1601,16L1643,16L1643,17L1661,17L1661,18L1663,18L1663,19L1667,19L1667,20L1669,20L1669,21L1701,21L1701,22L1731,22L1731,23L1778,23L1778,24L1785,24L1785,25L1797,25L1797,26L1849,26L1849,27L1861,27L1861,28L1902,28L1902,29L1908,29L1908,30L1911,30L1911,31L1918,31L1918,32L1927,32L1927,33L1940,33L1940,34L1969,34L1969,35L1981,35L1981,36L2050,36L2050,37L2083,37L2083,38L2119,38L2119,39L2122,39L2122,40L2124,40L2124,41L2165,41L2165,42L2247,42L2247,43L2274,43L2274,44L2276,44L2276,45L2290,45L2290,46L2306,46L2306,47L2307,47L2307,48L2324,48L2324,49L2329,49L2329,50L2333,50L2333,51L2400,51L2400,52L2410,52L2410,53L2433,53L2433,54L2438,54L2438,55L2456,55L2456,56L2504,56L2504,57L2505,57L2505,58L2532,58L2532,59L2541,59L2541,60L2571,60L2571,62L2579,62L2579,63L2581,63L2581,64L2592,64L2592,65L2598,65L2598,67L2600,67L2600,68L2602,68L2602,69L2609,69L2609,70L2611,70L2611,71L2621,71L2621,72L2625,72L2625,75L2626,75L2626,76L2630,76L2630,77L2640,77L2640,78L2648,78L2648,79L2657,79L2657,80L2660,80L2660,81L2663,81" tabindex="0">
						<title>8w9l6k3j</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,15L1574,15L1574,10L1601,10L1601,11L1643,11L1643,12L1661,12L1661,13L1731,13L1731,14L1849,14L1849,15L1911,15L1911,16L1918,16L1918,17L1969,17L1969,18L2122,18L2122,19L2124,19L2124,20L2247,20L2247,21L2274,21L2274,22L2307,22L2307,23L2333,23L2333,24L2400,24L2400,25L2433,25L2433,26L2438,26L2438,27L2456,27L2456,28L2504,28L2504,29L2505,29L2505,30L2571,30L2571,31L2582,31L2582,32L2598,32L2598,33L2600,33L2600,34L2602,34L2602,35L2609,35L2609,36L2612,36L2612,37L2625,37L2625,38L2630,38L2630,39L2640,39L2640,40L2657,40L2657,41L2660,41L2660,42L2663,42" tabindex="0">
						<title>j4vv6g5j</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,16L1601,16L1601,0L1602,0L1602,1L1911,1L1911,2L2656,2L2656,3L2663,3" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,17L1643,17L1643,7L1702,7L1702,4L1705,4L1705,3L1911,3L1911,4L2567,4L2567,5L2598,5L2598,6L2625,6L2625,7L2640,7L2640,8L2661,8L2661,9L2663,9" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,18L1661,18L1661,9L1849,9L1849,10L1911,10L1911,11L1969,11L1969,12L2124,12L2124,13L2247,13L2247,14L2333,14L2333,15L2400,15L2400,16L2433,16L2433,17L2456,17L2456,18L2504,18L2504,19L2505,19L2505,20L2598,20L2598,21L2609,21L2609,22L2625,22L2625,23L2640,23L2640,24L2657,24L2657,25L2661,25L2661,26L2663,26" tabindex="0">
						<title>x72652r8</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,19L1663,19L1663,18L1667,18L1667,19L1669,19L1669,20L1731,20L1731,21L1778,21L1778,22L1785,22L1785,23L1797,23L1797,24L1849,24L1849,25L1861,25L1861,26L1902,26L1902,27L1908,27L1908,28L1911,28L1911,29L1918,29L1918,30L1927,30L1927,31L1940,31L1940,32L1969,32L1969,33L1981,33L1981,34L2050,34L2050,35L2083,35L2083,36L2106,36L2106,33L2119,33L2119,34L2122,34L2122,35L2124,35L2124,36L2165,36L2165,37L2247,37L2247,38L2274,38L2274,39L2276,39L2276,40L2290,40L2290,41L2307,41L2307,42L2324,42L2324,43L2333,43L2333,44L2400,44L2400,45L2410,45L2410,46L2433,46L2433,47L2438,47L2438,48L2456,48L2456,49L2504,49L2504,50L2505,50L2505,51L2541,51L2541,52L2571,52L2571,54L2579,54L2579,55L2582,55L2582,56L2598,56L2598,58L2600,58L2600,59L2602,59L2602,60L2609,60L2609,61L2611,61L2611,62L2621,62L2621,63L2625,63L2625,66L2626,66L2626,67L2630,67L2630,68L2640,68L2640,69L2648,69L2648,70L2657,70L2657,71L2660,71L2660,72L2663,72" tabindex="0">
						<title>jm3nrmo8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,20L1667,20L1667,17L1669,17L1669,18L1731,18L1731,19L1778,19L1778,20L1785,20L1785,21L1797,21L1797,22L1849,22L1849,23L1902,23L1902,24L1908,24L1908,25L1911,25L1911,26L1918,26L1918,27L1927,27L1927,28L1940,28L1940,29L1969,29L1969,30L1981,30L1981,31L2050,31L2050,32L2119,32L2119,33L2122,33L2122,34L2124,34L2124,35L2165,35L2165,36L2247,36L2247,37L2274,37L2274,38L2276,38L2276,39L2290,39L2290,40L2307,40L2307,41L2324,41L2324,42L2333,42L2333,43L2400,43L2400,44L2410,44L2410,45L2433,45L2433,46L2438,46L2438,47L2456,47L2456,48L2504,48L2504,49L2505,49L2505,50L2541,50L2541,51L2571,51L2571,53L2579,53L2579,54L2582,54L2582,55L2598,55L2598,57L2600,57L2600,58L2602,58L2602,59L2609,59L2609,60L2611,60L2611,61L2621,61L2621,62L2625,62L2625,65L2626,65L2626,66L2630,66L2630,67L2640,67L2640,68L2648,68L2648,69L2657,69L2657,70L2660,70L2660,71L2663,71" tabindex="0">
						<title>8dgdoo58</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,21L1669,21L1669,16L1731,16L1731,17L1778,17L1778,18L1797,18L1797,19L1849,19L1849,20L1902,20L1902,21L1908,21L1908,22L1911,22L1911,23L1918,23L1918,24L1940,24L1940,25L1969,25L1969,26L2122,26L2122,27L2124,27L2124,28L2165,28L2165,29L2247,29L2247,30L2274,30L2274,31L2307,31L2307,32L2324,32L2324,33L2333,33L2333,34L2400,34L2400,35L2410,35L2410,36L2433,36L2433,37L2438,37L2438,38L2456,38L2456,39L2504,39L2504,40L2505,40L2505,41L2571,41L2571,42L2579,42L2579,43L2582,43L2582,44L2598,44L2598,46L2600,46L2600,47L2602,47L2602,48L2609,48L2609,49L2612,49L2612,50L2625,50L2625,53L2626,53L2626,54L2630,54L2630,55L2640,55L2640,56L2657,56L2657,57L2660,57L2660,58L2663,58" tabindex="0">
						<title>8qom42wj</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,22L1701,22L1701,21L1731,21L1731,22L1778,22L1778,23L1785,23L1785,24L1797,24L1797,25L1849,25L1849,26L1861,26L1861,27L1902,27L1902,28L1908,28L1908,29L1911,29L1911,30L1918,30L1918,31L1927,31L1927,32L1940,32L1940,33L1969,33L1969,34L1981,34L1981,35L2050,35L2050,36L2083,36L2083,37L2119,37L2119,38L2122,38L2122,39L2124,39L2124,40L2165,40L2165,41L2247,41L2247,42L2274,42L2274,43L2276,43L2276,44L2290,44L2290,45L2306,45L2306,46L2307,46L2307,47L2324,47L2324,48L2329,48L2329,49L2333,49L2333,50L2400,50L2400,51L2410,51L2410,52L2433,52L2433,53L2438,53L2438,54L2456,54L2456,55L2504,55L2504,56L2505,56L2505,57L2532,57L2532,58L2541,58L2541,59L2571,59L2571,61L2579,61L2579,62L2581,62L2581,63L2598,63L2598,65L2600,65L2600,66L2601,66L2601,67L2602,67L2602,68L2609,68L2609,69L2611,69L2611,70L2621,70L2621,71L2625,71L2625,74L2626,74L2626,75L2630,75L2630,76L2640,76L2640,77L2648,77L2648,78L2657,78L2657,79L2660,79L2660,80L2663,80" tabindex="0">
						<title>810kqzlx</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,23L1731,23L1731,11L1849,11L1849,12L1911,12L1911,13L1918,13L1918,14L1969,14L1969,15L2122,15L2122,16L2124,16L2124,17L2247,17L2247,18L2307,18L2307,19L2333,19L2333,20L2400,20L2400,21L2433,21L2433,22L2456,22L2456,23L2504,23L2504,24L2505,24L2505,25L2582,25L2582,26L2598,26L2598,27L2602,27L2602,28L2609,28L2609,29L2613,29L2613,30L2625,30L2625,31L2630,31L2630,32L2640,32L2640,33L2657,33L2657,34L2660,34L2660,35L2663,35" tabindex="0">
						<title>jon1own8</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,24L1778,24L1778,15L1849,15L1849,16L1911,16L1911,17L1918,17L1918,18L1969,18L1969,19L2122,19L2122,20L2124,20L2124,21L2247,21L2247,22L2274,22L2274,23L2307,23L2307,24L2333,24L2333,25L2400,25L2400,26L2433,26L2433,27L2438,27L2438,28L2456,28L2456,29L2504,29L2504,30L2505,30L2505,31L2571,31L2571,32L2582,32L2582,33L2598,33L2598,34L2600,34L2600,35L2602,35L2602,36L2609,36L2609,37L2612,37L2612,38L2625,38L2625,39L2630,39L2630,40L2640,40L2640,41L2657,41L2657,42L2660,42L2660,43L2663,43" tabindex="0">
						<title>xk1oze6j</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,25L1785,25L1785,19L1797,19L1797,20L1849,20L1849,21L1902,21L1902,22L1908,22L1908,23L1911,23L1911,24L1918,24L1918,25L1940,25L1940,26L1969,26L1969,27L2050,27L2050,28L2119,28L2119,29L2122,29L2122,30L2124,30L2124,31L2165,31L2165,32L2247,32L2247,33L2274,33L2274,34L2307,34L2307,35L2324,35L2324,36L2333,36L2333,37L2400,37L2400,38L2410,38L2410,39L2433,39L2433,40L2438,40L2438,41L2456,41L2456,42L2504,42L2504,43L2505,43L2505,44L2541,44L2541,45L2571,45L2571,46L2579,46L2579,47L2582,47L2582,48L2598,48L2598,50L2600,50L2600,51L2602,51L2602,52L2609,52L2609,53L2611,53L2611,54L2625,54L2625,57L2626,57L2626,58L2630,58L2630,59L2640,59L2640,60L2657,60L2657,61L2660,61L2660,62L2663,62" tabindex="0">
						<title>jmzrkdyx</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,26L1797,26L1797,18L1849,18L1849,19L1902,19L1902,20L1908,20L1908,21L1911,21L1911,22L1918,22L1918,23L1940,23L1940,24L1969,24L1969,25L2122,25L2122,26L2124,26L2124,27L2165,27L2165,28L2247,28L2247,29L2274,29L2274,30L2307,30L2307,31L2324,31L2324,32L2333,32L2333,33L2400,33L2400,34L2410,34L2410,35L2433,35L2433,36L2438,36L2438,37L2456,37L2456,38L2504,38L2504,39L2505,39L2505,40L2571,40L2571,41L2579,41L2579,42L2582,42L2582,43L2598,43L2598,45L2600,45L2600,46L2602,46L2602,47L2609,47L2609,48L2612,48L2612,49L2625,49L2625,52L2630,52L2630,53L2640,53L2640,54L2657,54L2657,55L2660,55L2660,56L2663,56" tabindex="0">
						<title>8g0ezgyx</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,27L1849,27L1849,5L1911,5L1911,6L1969,6L1969,7L2247,7L2247,8L2400,8L2400,9L2433,9L2433,10L2456,10L2456,11L2567,11L2567,12L2598,12L2598,13L2609,13L2609,14L2625,14L2625,15L2640,15L2640,16L2657,16L2657,17L2661,17L2661,18L2663,18" tabindex="0">
						<title>8e9kl5dj</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,28L1861,28L1861,24L1902,24L1902,25L1908,25L1908,26L1911,26L1911,27L1918,27L1918,28L1927,28L1927,29L1940,29L1940,30L1969,30L1969,31L1981,31L1981,32L2050,32L2050,33L2106,33L2106,34L2119,34L2119,35L2122,35L2122,36L2124,36L2124,37L2165,37L2165,38L2247,38L2247,39L2274,39L2274,40L2276,40L2276,41L2290,41L2290,42L2307,42L2307,43L2324,43L2324,44L2329,44L2329,45L2333,45L2333,46L2400,46L2400,47L2410,47L2410,48L2433,48L2433,49L2438,49L2438,50L2456,50L2456,51L2504,51L2504,52L2505,52L2505,53L2532,53L2532,54L2541,54L2541,55L2571,55L2571,57L2579,57L2579,58L2581,58L2581,59L2598,59L2598,61L2600,61L2600,62L2602,62L2602,63L2609,63L2609,64L2611,64L2611,65L2621,65L2621,66L2625,66L2625,69L2626,69L2626,70L2630,70L2630,71L2640,71L2640,72L2648,72L2648,73L2657,73L2657,74L2660,74L2660,75L2663,75" tabindex="0">
						<title>jnplgpd8</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,29L1902,29L1902,18L1911,18L1911,19L1918,19L1918,20L1940,20L1940,21L1969,21L1969,22L2122,22L2122,23L2124,23L2124,24L2165,24L2165,25L2247,25L2247,26L2274,26L2274,27L2307,27L2307,28L2333,28L2333,29L2400,29L2400,30L2433,30L2433,31L2438,31L2438,32L2456,32L2456,33L2504,33L2504,34L2505,34L2505,35L2571,35L2571,36L2579,36L2579,37L2582,37L2582,38L2598,38L2598,39L2600,39L2600,40L2602,40L2602,41L2609,41L2609,42L2612,42L2612,43L2625,43L2625,44L2630,44L2630,45L2640,45L2640,46L2657,46L2657,47L2660,47L2660,48L2663,48" tabindex="0">
						<title>864zov3j</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,30L1908,30L1908,20L1911,20L1911,21L1918,21L1918,22L1940,22L1940,23L1969,23L1969,24L2122,24L2122,25L2124,25L2124,26L2165,26L2165,27L2247,27L2247,28L2274,28L2274,29L2307,29L2307,30L2324,30L2324,31L2333,31L2333,32L2400,32L2400,33L2433,33L2433,34L2438,34L2438,35L2456,35L2456,36L2504,36L2504,37L2505,37L2505,38L2571,38L2571,39L2579,39L2579,40L2582,40L2582,41L2598,41L2598,43L2600,43L2600,44L2602,44L2602,45L2609,45L2609,46L2612,46L2612,47L2625,47L2625,50L2630,50L2630,51L2640,51L2640,52L2657,52L2657,53L2660,53L2660,54L2663,54" tabindex="0">
						<title>j20zyvpx</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,31L1911,31L1911,0L1914,0L1914,0L2663,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,32L1918,32L1918,12L1969,12L1969,13L2124,13L2124,14L2247,14L2247,15L2333,15L2333,16L2400,16L2400,17L2433,17L2433,18L2456,18L2456,19L2504,19L2504,20L2505,20L2505,21L2598,21L2598,22L2609,22L2609,23L2625,23L2625,24L2639,24L2639,25L2640,25L2640,26L2657,26L2657,27L2661,27L2661,28L2663,28" tabindex="0">
						<title>8g072p2x</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,33L1927,33L1927,26L1940,26L1940,27L1969,27L1969,28L1981,28L1981,29L2050,29L2050,30L2119,30L2119,31L2122,31L2122,32L2124,32L2124,33L2165,33L2165,34L2247,34L2247,35L2274,35L2274,36L2290,36L2290,37L2307,37L2307,38L2324,38L2324,39L2333,39L2333,40L2400,40L2400,41L2410,41L2410,42L2433,42L2433,43L2438,43L2438,44L2456,44L2456,45L2504,45L2504,46L2505,46L2505,47L2541,47L2541,48L2571,48L2571,50L2579,50L2579,51L2582,51L2582,52L2598,52L2598,54L2600,54L2600,55L2602,55L2602,56L2609,56L2609,57L2611,57L2611,58L2621,58L2621,59L2625,59L2625,62L2626,62L2626,63L2630,63L2630,64L2640,64L2640,65L2648,65L2648,66L2657,66L2657,67L2660,67L2660,68L2663,68" tabindex="0">
						<title>jooe13ej</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,34L1940,34L1940,20L1969,20L1969,21L2122,21L2122,22L2124,22L2124,23L2247,23L2247,24L2274,24L2274,25L2307,25L2307,26L2333,26L2333,27L2400,27L2400,28L2433,28L2433,29L2438,29L2438,30L2456,30L2456,31L2504,31L2504,32L2505,32L2505,33L2571,33L2571,34L2579,34L2579,35L2582,35L2582,36L2598,36L2598,37L2600,37L2600,38L2602,38L2602,39L2609,39L2609,40L2612,40L2612,41L2625,41L2625,42L2630,42L2630,43L2640,43L2640,44L2657,44L2657,45L2660,45L2660,46L2663,46" tabindex="0">
						<title>8ew394p8</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,35L1969,35L1969,6L2400,6L2400,7L2443,7L2443,8L2456,8L2456,9L2567,9L2567,10L2572,10L2572,11L2598,11L2598,12L2625,12L2625,13L2640,13L2640,14L2657,14L2657,15L2661,15L2661,16L2663,16" tabindex="0">
						<title>jon0gdl8</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,36L1981,36L1981,28L2050,28L2050,29L2119,29L2119,30L2122,30L2122,31L2124,31L2124,32L2165,32L2165,33L2247,33L2247,34L2274,34L2274,35L2307,35L2307,36L2324,36L2324,37L2333,37L2333,38L2400,38L2400,39L2410,39L2410,40L2433,40L2433,41L2438,41L2438,42L2456,42L2456,43L2504,43L2504,44L2505,44L2505,45L2541,45L2541,46L2571,46L2571,47L2579,47L2579,48L2582,48L2582,49L2598,49L2598,51L2600,51L2600,52L2602,52L2602,53L2609,53L2609,54L2611,54L2611,55L2625,55L2625,58L2626,58L2626,59L2630,59L2630,60L2640,60L2640,61L2657,61L2657,62L2660,62L2660,63L2663,63" tabindex="0">
						<title>8v21onej</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,37L2050,37L2050,27L2119,27L2119,28L2122,28L2122,29L2124,29L2124,30L2165,30L2165,31L2247,31L2247,32L2274,32L2274,33L2307,33L2307,34L2324,34L2324,35L2333,35L2333,36L2400,36L2400,37L2410,37L2410,38L2433,38L2433,39L2438,39L2438,40L2456,40L2456,41L2504,41L2504,42L2505,42L2505,43L2541,43L2541,44L2571,44L2571,45L2579,45L2579,46L2582,46L2582,47L2598,47L2598,49L2600,49L2600,50L2602,50L2602,51L2609,51L2609,52L2611,52L2611,53L2625,53L2625,56L2626,56L2626,57L2630,57L2630,58L2640,58L2640,59L2657,59L2657,60L2660,60L2660,61L2663,61" tabindex="0">
						<title>jng9el48</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,38L2074,38L2074,38L2083,38L2083,39L2119,39L2119,40L2122,40L2122,41L2124,41L2124,42L2165,42L2165,43L2247,43L2247,44L2274,44L2274,45L2276,45L2276,46L2290,46L2290,47L2306,47L2306,48L2307,48L2307,49L2324,49L2324,50L2329,50L2329,51L2333,51L2333,52L2381,52L2381,53L2400,53L2400,54L2410,54L2410,55L2433,55L2433,56L2438,56L2438,57L2456,57L2456,58L2504,58L2504,59L2505,59L2505,60L2541,60L2541,61L2571,61L2571,63L2579,63L2579,64L2581,64L2581,65L2592,65L2592,66L2598,66L2598,68L2600,68L2600,69L2602,69L2602,70L2609,70L2609,71L2611,71L2611,72L2621,72L2621,73L2625,73L2625,76L2626,76L2626,77L2630,77L2630,78L2640,78L2640,79L2648,79L2648,80L2657,80L2657,81L2660,81L2660,82L2663,82" tabindex="0">
						<title>8v029nex</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,39L2083,39L2083,35L2106,35L2106,36L2119,36L2119,37L2122,37L2122,38L2124,38L2124,39L2165,39L2165,40L2247,40L2247,41L2274,41L2274,42L2276,42L2276,43L2290,43L2290,44L2307,44L2307,45L2324,45L2324,46L2329,46L2329,47L2333,47L2333,48L2400,48L2400,49L2410,49L2410,50L2433,50L2433,51L2438,51L2438,52L2456,52L2456,53L2504,53L2504,54L2505,54L2505,55L2532,55L2532,56L2541,56L2541,57L2571,57L2571,59L2579,59L2579,60L2581,60L2581,61L2598,61L2598,63L2600,63L2600,64L2601,64L2601,65L2602,65L2602,66L2609,66L2609,67L2611,67L2611,68L2621,68L2621,69L2625,69L2625,72L2626,72L2626,73L2630,73L2630,74L2640,74L2640,75L2648,75L2648,76L2657,76L2657,77L2660,77L2660,78L2663,78" tabindex="0">
						<title>86rrv2p8</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,40L2119,40L2119,27L2122,27L2122,28L2124,28L2124,29L2165,29L2165,30L2247,30L2247,31L2274,31L2274,32L2307,32L2307,33L2324,33L2324,34L2333,34L2333,35L2400,35L2400,36L2410,36L2410,37L2433,37L2433,38L2438,38L2438,39L2456,39L2456,40L2504,40L2504,41L2505,41L2505,42L2541,42L2541,43L2571,43L2571,44L2579,44L2579,45L2582,45L2582,46L2598,46L2598,48L2600,48L2600,49L2602,49L2602,50L2609,50L2609,51L2611,51L2611,52L2625,52L2625,55L2626,55L2626,56L2630,56L2630,57L2640,57L2640,58L2657,58L2657,59L2660,59L2660,60L2663,60" tabindex="0">
						<title>jp6yqok8</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,41L2122,41L2122,15L2124,15L2124,16L2247,16L2247,17L2333,17L2333,18L2400,18L2400,19L2433,19L2433,20L2456,20L2456,21L2504,21L2504,22L2505,22L2505,23L2598,23L2598,24L2609,24L2609,25L2625,25L2625,26L2639,26L2639,27L2640,27L2640,28L2657,28L2657,29L2661,29L2661,30L2663,30" tabindex="0">
						<title>86rpw3p8</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,42L2124,42L2124,12L2247,12L2247,13L2333,13L2333,14L2400,14L2400,15L2433,15L2433,16L2456,16L2456,17L2504,17L2504,18L2505,18L2505,19L2598,19L2598,20L2609,20L2609,21L2625,21L2625,22L2640,22L2640,23L2657,23L2657,24L2661,24L2661,25L2663,25" tabindex="0">
						<title>xkpzggmj</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,43L2165,43L2165,24L2247,24L2247,25L2274,25L2274,26L2307,26L2307,27L2333,27L2333,28L2400,28L2400,29L2433,29L2433,30L2438,30L2438,31L2456,31L2456,32L2504,32L2504,33L2505,33L2505,34L2571,34L2571,35L2579,35L2579,36L2582,36L2582,37L2598,37L2598,38L2600,38L2600,39L2602,39L2602,40L2609,40L2609,41L2612,41L2612,42L2625,42L2625,43L2630,43L2630,44L2640,44L2640,45L2657,45L2657,46L2660,46L2660,47L2663,47" tabindex="0">
						<title>j46e9mm8</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,44L2247,44L2247,7L2400,7L2400,8L2443,8L2443,9L2456,9L2456,10L2567,10L2567,11L2572,11L2572,7L2598,7L2598,8L2625,8L2625,9L2640,9L2640,10L2661,10L2661,11L2663,11L2663,10L2663,10" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,45L2274,45L2274,21L2307,21L2307,22L2333,22L2333,23L2400,23L2400,24L2433,24L2433,25L2438,25L2438,26L2456,26L2456,27L2504,27L2504,28L2505,28L2505,29L2571,29L2571,30L2582,30L2582,31L2598,31L2598,32L2600,32L2600,33L2602,33L2602,34L2609,34L2609,35L2612,35L2612,36L2625,36L2625,37L2630,37L2630,38L2640,38L2640,39L2657,39L2657,40L2660,40L2660,41L2663,41" tabindex="0">
						<title>xkp5qmmj</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,46L2276,46L2276,37L2290,37L2290,38L2307,38L2307,39L2324,39L2324,40L2333,40L2333,41L2400,41L2400,42L2410,42L2410,43L2433,43L2433,44L2438,44L2438,45L2456,45L2456,46L2504,46L2504,47L2505,47L2505,48L2541,48L2541,49L2571,49L2571,51L2579,51L2579,52L2582,52L2582,53L2598,53L2598,55L2600,55L2600,56L2602,56L2602,57L2609,57L2609,58L2611,58L2611,59L2621,59L2621,60L2625,60L2625,63L2626,63L2626,64L2630,64L2630,65L2640,65L2640,66L2648,66L2648,67L2657,67L2657,68L2660,68L2660,69L2663,69" tabindex="0">
						<title>8w3vrkvj</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,47L2290,47L2290,36L2307,36L2307,37L2324,37L2324,38L2333,38L2333,39L2400,39L2400,40L2410,40L2410,41L2433,41L2433,42L2438,42L2438,43L2456,43L2456,44L2504,44L2504,45L2505,45L2505,46L2541,46L2541,47L2571,47L2571,49L2579,49L2579,50L2582,50L2582,51L2598,51L2598,53L2600,53L2600,54L2602,54L2602,55L2609,55L2609,56L2611,56L2611,57L2621,57L2621,58L2625,58L2625,61L2626,61L2626,62L2630,62L2630,63L2640,63L2640,64L2648,64L2648,65L2657,65L2657,66L2660,66L2660,67L2663,67" tabindex="0">
						<title>j46k93w8</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,48L2306,48L2306,45L2307,45L2307,46L2324,46L2324,47L2329,47L2329,48L2333,48L2333,49L2400,49L2400,50L2410,50L2410,51L2433,51L2433,52L2438,52L2438,53L2456,53L2456,54L2504,54L2504,55L2505,55L2505,56L2532,56L2532,57L2541,57L2541,58L2571,58L2571,60L2579,60L2579,61L2581,61L2581,62L2598,62L2598,64L2600,64L2600,65L2601,65L2601,66L2602,66L2602,67L2609,67L2609,68L2611,68L2611,69L2621,69L2621,70L2625,70L2625,73L2626,73L2626,74L2630,74L2630,75L2640,75L2640,76L2648,76L2648,77L2657,77L2657,78L2660,78L2660,79L2663,79" tabindex="0">
						<title>j465mqd8</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,49L2307,49L2307,18L2333,18L2333,19L2400,19L2400,20L2433,20L2433,21L2456,21L2456,22L2504,22L2504,23L2505,23L2505,24L2582,24L2582,25L2598,25L2598,26L2609,26L2609,27L2613,27L2613,28L2625,28L2625,29L2630,29L2630,30L2640,30L2640,31L2657,31L2657,32L2660,32L2660,33L2661,33L2661,34L2663,34" tabindex="0">
						<title>81mg2lp8</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,50L2324,50L2324,29L2333,29L2333,30L2400,30L2400,31L2433,31L2433,32L2438,32L2438,33L2456,33L2456,34L2504,34L2504,35L2505,35L2505,36L2571,36L2571,37L2579,37L2579,38L2582,38L2582,39L2598,39L2598,40L2600,40L2600,41L2602,41L2602,42L2609,42L2609,43L2612,43L2612,44L2625,44L2625,47L2630,47L2630,48L2640,48L2640,49L2657,49L2657,50L2660,50L2660,51L2663,51" tabindex="0">
						<title>j9kem9o8</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,51L2329,51L2329,44L2333,44L2333,45L2400,45L2400,46L2410,46L2410,47L2433,47L2433,48L2438,48L2438,49L2456,49L2456,50L2504,50L2504,51L2505,51L2505,52L2541,52L2541,53L2571,53L2571,55L2579,55L2579,56L2582,56L2582,57L2598,57L2598,59L2600,59L2600,60L2602,60L2602,61L2609,61L2609,62L2611,62L2611,63L2621,63L2621,64L2625,64L2625,67L2626,67L2626,68L2630,68L2630,69L2640,69L2640,70L2648,70L2648,71L2657,71L2657,72L2660,72L2660,73L2663,73" tabindex="0">
						<title>8dp6py58</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path d="M0,52L2333,52L2333,9L2400,9L2400,10L2433,10L2433,11L2456,11L2456,12L2567,12L2567,13L2598,13L2598,14L2609,14L2609,15L2625,15L2625,16L2640,16L2640,17L2657,17L2657,18L2661,18L2661,19L2663,19" tabindex="0">
						<title>81mr7kp8</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,53L2381,53L2381,52L2400,52L2400,53L2410,53L2410,54L2433,54L2433,55L2438,55L2438,56L2456,56L2456,57L2504,57L2504,58L2505,58L2505,59L2532,59L2532,53L2541,53L2541,54L2571,54L2571,56L2579,56L2579,57L2581,57L2581,58L2598,58L2598,60L2600,60L2600,61L2602,61L2602,62L2609,62L2609,63L2611,63L2611,64L2621,64L2621,65L2625,65L2625,68L2626,68L2626,69L2630,69L2630,70L2640,70L2640,71L2648,71L2648,72L2657,72L2657,73L2660,73L2660,74L2663,74" tabindex="0">
						<title>j5p193z8</title>
					</path>
				</g>
				<g style="--index: 54;">
					<path d="M0,54L2400,54L2400,6L2401,6L2401,6L2456,6L2456,7L2567,7L2567,8L2572,8L2572,9L2598,9L2598,10L2625,10L2625,11L2640,11L2640,12L2661,12L2661,13L2663,13" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 55;">
					<path d="M0,55L2410,55L2410,34L2433,34L2433,35L2438,35L2438,36L2456,36L2456,37L2504,37L2504,38L2505,38L2505,39L2571,39L2571,40L2579,40L2579,41L2582,41L2582,42L2598,42L2598,44L2600,44L2600,45L2602,45L2602,46L2609,46L2609,47L2612,47L2612,48L2625,48L2625,51L2630,51L2630,52L2640,52L2640,53L2657,53L2657,54L2660,54L2660,55L2663,55" tabindex="0">
						<title>x7zwrnq8</title>
					</path>
				</g>
				<g style="--index: 56;">
					<path d="M0,56L2433,56L2433,9L2443,9L2443,7L2456,7L2456,8L2567,8L2567,9L2572,9L2572,10L2598,10L2598,11L2625,11L2625,12L2640,12L2640,13L2661,13L2661,14L2663,14" tabindex="0">
						<title>j0e6yw48</title>
					</path>
				</g>
				<g style="--index: 57;">
					<path d="M0,57L2438,57L2438,23L2456,23L2456,24L2504,24L2504,25L2505,25L2505,26L2571,26L2571,27L2582,27L2582,28L2598,28L2598,29L2602,29L2602,30L2609,30L2609,31L2613,31L2613,32L2625,32L2625,33L2630,33L2630,34L2640,34L2640,35L2657,35L2657,36L2663,36" tabindex="0">
						<title>j0ewnqw8</title>
					</path>
				</g>
				<g style="--index: 58;">
					<path d="M0,58L2456,58L2456,6L2567,6L2567,7L2572,7L2572,8L2598,8L2598,9L2625,9L2625,10L2640,10L2640,11L2661,11L2661,12L2663,12" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 59;">
					<path d="M0,59L2504,59L2504,13L2567,13L2567,14L2598,14L2598,15L2609,15L2609,16L2625,16L2625,17L2640,17L2640,18L2657,18L2657,19L2661,19L2661,20L2663,20" tabindex="0">
						<title>j9vz7vrx</title>
					</path>
				</g>
				<g style="--index: 60;">
					<path d="M0,60L2505,60L2505,14L2567,14L2567,4L2598,4L2598,5L2640,5L2640,6L2643,6L2643,7L2661,7L2661,8L2663,8" tabindex="0">
						<title>8rl97mw8</title>
					</path>
				</g>
				<g style="--index: 61;">
					<path d="M0,61L2541,61L2541,42L2571,42L2571,43L2579,43L2579,44L2582,44L2582,45L2598,45L2598,47L2600,47L2600,48L2602,48L2602,49L2609,49L2609,50L2612,50L2612,51L2625,51L2625,54L2626,54L2626,55L2630,55L2630,56L2640,56L2640,57L2657,57L2657,58L2660,58L2660,59L2663,59" tabindex="0">
						<title>j0wm7v98</title>
					</path>
				</g>
				<g style="--index: 62;">
					<path d="M0,62L2571,62L2571,48L2579,48L2579,49L2582,49L2582,50L2598,50L2598,52L2600,52L2600,53L2602,53L2602,54L2609,54L2609,55L2611,55L2611,56L2625,56L2625,59L2626,59L2626,60L2630,60L2630,61L2640,61L2640,62L2648,62L2648,63L2657,63L2657,64L2660,64L2660,65L2663,65" tabindex="0">
						<title>j2pz59o8</title>
					</path>
				</g>
				<g style="--index: 63;">
					<path d="M0,63L2571,63L2571,26L2582,26L2582,27L2598,27L2598,28L2602,28L2602,29L2609,29L2609,30L2613,30L2613,31L2625,31L2625,32L2630,32L2630,33L2640,33L2640,34L2657,34L2657,35L2660,35L2660,32L2661,32L2661,33L2663,33" tabindex="0">
						<title>j0erlm98</title>
					</path>
				</g>
				<g style="--index: 64;">
					<path d="M0,64L2579,64L2579,33L2582,33L2582,34L2598,34L2598,35L2600,35L2600,36L2602,36L2602,37L2609,37L2609,38L2612,38L2612,39L2625,39L2625,40L2630,40L2630,41L2640,41L2640,42L2657,42L2657,43L2660,43L2660,44L2663,44" tabindex="0">
						<title>jpzlo6yx</title>
					</path>
				</g>
				<g style="--index: 65;">
					<path d="M0,65L2581,65L2581,57L2582,57L2582,24L2598,24L2598,25L2609,25L2609,26L2613,26L2613,27L2625,27L2625,28L2639,28L2639,29L2640,29L2640,30L2657,30L2657,31L2661,31L2661,32L2663,32" tabindex="0">
						<title>j2p712o8</title>
					</path>
				</g>
				<g style="--index: 66;">
					<path d="M0,66L2592,66L2592,64L2598,64L2598,66L2600,66L2600,67L2601,67L2601,63L2602,63L2602,64L2609,64L2609,65L2611,65L2611,66L2621,66L2621,67L2625,67L2625,70L2626,70L2626,71L2630,71L2630,72L2640,72L2640,73L2648,73L2648,74L2657,74L2657,75L2660,75L2660,76L2663,76" tabindex="0">
						<title>8vrwmn2x</title>
					</path>
				</g>
				<g style="--index: 67;">
					<path d="M0,67L2598,67L2598,41L2600,41L2600,42L2602,42L2602,43L2609,43L2609,44L2612,44L2612,45L2625,45L2625,48L2630,48L2630,49L2640,49L2640,50L2657,50L2657,51L2660,51L2660,52L2663,52" tabindex="0">
						<title>jn633ywx</title>
					</path>
				</g>
				<g style="--index: 68;">
					<path d="M0,68L2598,68L2598,3L2640,3L2640,4L2643,4L2643,5L2663,5" tabindex="0">
						<title>jo19m63x</title>
					</path>
				</g>
				<g style="--index: 69;">
					<path d="M0,69L2600,69L2600,32L2602,32L2602,33L2609,33L2609,34L2613,34L2613,35L2625,35L2625,36L2630,36L2630,37L2640,37L2640,38L2657,38L2657,39L2660,39L2660,40L2663,40" tabindex="0">
						<title>j9ve5wox</title>
					</path>
				</g>
				<g style="--index: 70;">
					<path d="M0,70L2602,70L2602,27L2609,27L2609,28L2613,28L2613,29L2625,29L2625,30L2630,30L2630,31L2640,31L2640,32L2657,32L2657,33L2660,33L2660,34L2661,34L2661,7L2663,7" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 71;">
					<path d="M0,71L2609,71L2609,13L2625,13L2625,14L2640,14L2640,15L2657,15L2657,16L2661,16L2661,17L2663,17" tabindex="0">
						<title>8eor5y7j</title>
					</path>
				</g>
				<g style="--index: 72;">
					<path d="M0,72L2611,72L2611,51L2612,51L2612,35L2613,35L2613,26L2625,26L2625,27L2639,27L2639,28L2640,28L2640,29L2657,29L2657,30L2661,30L2661,31L2663,31" tabindex="0">
						<title>j59o9wqx</title>
					</path>
				</g>
				<g style="--index: 73;">
					<path d="M0,73L2621,73L2621,57L2625,57L2625,60L2626,60L2626,61L2630,61L2630,62L2640,62L2640,63L2648,63L2648,64L2657,64L2657,65L2660,65L2660,66L2663,66" tabindex="0">
						<title>8l6m0v28</title>
					</path>
				</g>
				<g style="--index: 74;">
					<path d="M0,74L2625,74L2625,45L2630,45L2630,46L2640,46L2640,47L2657,47L2657,48L2660,48L2660,49L2663,49" tabindex="0">
						<title>xzy3z20j</title>
					</path>
				</g>
				<g style="--index: 75;">
					<path d="M0,75L2625,75L2625,46L2630,46L2630,47L2640,47L2640,48L2657,48L2657,49L2660,49L2660,50L2663,50" tabindex="0">
						<title>j0eynkm8</title>
					</path>
				</g>
				<g style="--index: 76;">
					<path d="M0,76L2625,76L2625,6L2640,6L2640,7L2643,7L2643,3L2656,3L2656,2L2663,2" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 77;">
					<path d="M0,77L2626,77L2626,53L2630,53L2630,54L2640,54L2640,55L2657,55L2657,56L2660,56L2660,57L2663,57" tabindex="0">
						<title>joneez78</title>
					</path>
				</g>
				<g style="--index: 78;">
					<path d="M0,78L2630,78L2630,29L2639,29L2639,24L2640,24L2640,25L2657,25L2657,26L2661,26L2661,27L2663,27" tabindex="0">
						<title>jo16w17x</title>
					</path>
				</g>
				<g style="--index: 79;">
					<path d="M0,79L2640,79L2640,3L2643,3L2643,4L2663,4" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 80;">
					<path d="M0,80L2648,80L2648,62L2657,62L2657,63L2660,63L2660,64L2663,64" tabindex="0">
						<title>867vroqj</title>
					</path>
				</g>
				<g style="--index: 81;">
					<path d="M0,81L2657,81L2657,14L2661,14L2661,15L2663,15" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 82;">
					<path d="M0,82L2660,82L2660,39L2663,39" tabindex="0">
						<title>8r6739q8</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
