<svg xmlns="http://www.w3.org/2000/svg" lang="en" style="color-scheme: dark light;">
	<title>Time by player for leaderboard l_r9gn1qpd-xd144xwd</title>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject &gt; div {
			position: absolute;
			inset: 0 auto auto 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg {
			width: calc(100% - 40px);
			height: calc(100% - 40px);
			margin: 20px;
			padding: 10px;
			border: 1px dashed var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			async function importDataScript(dataScriptUrl) {
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl);
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleError(event) {
						delete window[name];
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			document.addEventListener("DOMContentLoaded", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				const {players, leaderboards} = await (async () =&gt; {
					try {
						const cachedPlayers = sessionStorage.getItem(playersKey);
						const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
						if (cachedPlayers == null || cachedLeaderboards == null) {
							throw new Error();
						}
						const players = JSON.parse(cachedPlayers);
						const leaderboards = JSON.parse(cachedLeaderboards);
						return {players, leaderboards};
					} catch {}
					try {
						const players = Object.create(null);
						const leaderboards = Object.create(null);
						const games = ["9d3rrxyd", "w6jl2ned"];
						for (const gameId of games) {
							const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`);
							const versions = data.variables.data.find((variable) =&gt; {
								return variable.name === "Version";
							});
							const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
								return [level.id, level];
							}));
							const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
								return [category.id, category];
							}));
							const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
								return [variable.id, variable];
							}));
							console.log(`Got game`);
							await new Promise((resolve) =&gt; {
								setTimeout(resolve, 800);
							});
							const slice = 200;
							for (let offset = 0;; offset += slice) {
								const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`);
								const {size} = pagination;
								if (size === 0) {
									break;
								}
								for (const run of data) {
									const status = run.status.status;
									if (status == null || status === "new") {
										continue;
									}
									const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
									const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
									players[player] ??= playerName;
									const level = run.level;
									const category = run.category;
									const values = Object.entries(run.values).filter(([variable]) =&gt; {
										return variables[variable]?.["is-subcategory"] ?? false;
									}).map(([variable, value]) =&gt; {
										return `-${variable}.${value}`;
									});
									const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
									const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
									const categoryName = categories[run.category]?.name ?? null;
									const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
										return variables[variable]?.["is-subcategory"] ?? false;
									}).map(([variable, value]) =&gt; {
										return variables[variable]?.values.values[value]?.label ?? null;
									}).filter((valueName) =&gt; {
										return valueName != null;
									});
									const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
									leaderboards[leaderboard] ??= leaderboardName;
								}
								console.log(`Got runs ${offset}-${offset + size - 1}`);
								await new Promise((resolve) =&gt; {
									setTimeout(resolve, 800);
								});
							}
						}
						try {
							const cachedPlayers = JSON.stringify(players);
							const cachedLeaderboards = JSON.stringify(leaderboards);
							sessionStorage.setItem(playersKey, cachedPlayers);
							sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
						} catch {}
						return {players, leaderboards};
					} catch {}
					const players = null;
					const leaderboards = null;
					return {players, leaderboards};
				})();
				if (players == null || leaderboards == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%">
		<svg viewBox="0 0 1855 58976" preserveAspectRatio="none" overflow="visible">
			<g transform="scale(1 -1)" transform-origin="center center" style="--count: 12;">
				<g style="--index: 0;">
					<path d="M0,40285L1,40285L1,39898" tabindex="0">
						<title>qj2pq1p8</title>
					</path>
					<rect x="0" y="39898" width="1" height="387"/>
					<path d="M0,40285L0,40285" tabindex="0">
						<title>06:42.85 on 2019-02-28</title>
					</path>
					<line x1="0" y1="40285" x2="1855" y2="40285"/>
					<line x1="0" y1="0" x2="0" y2="58976"/>
					<path d="M1,39898L1,39898" tabindex="0">
						<title>06:38.98 on 2019-03-01</title>
					</path>
					<line x1="0" y1="39898" x2="1855" y2="39898"/>
					<line x1="1" y1="0" x2="1" y2="58976"/>
				</g>
				<g style="--index: 1;">
					<path d="M479,26260" tabindex="0">
						<title>qjo6dp0j</title>
					</path>
					<rect x="479" y="26260" width="0" height="0"/>
					<path d="M479,26260L479,26260" tabindex="0">
						<title>04:22.60 on 2020-06-21</title>
					</path>
					<line x1="0" y1="26260" x2="1855" y2="26260"/>
					<line x1="479" y1="0" x2="479" y2="58976"/>
				</g>
				<g style="--index: 2;">
					<path d="M638,25152" tabindex="0">
						<title>0jmw6wex</title>
					</path>
					<rect x="638" y="25152" width="0" height="0"/>
					<path d="M638,25152L638,25152" tabindex="0">
						<title>04:11.52 on 2020-11-27</title>
					</path>
					<line x1="0" y1="25152" x2="1855" y2="25152"/>
					<line x1="638" y1="0" x2="638" y2="58976"/>
				</g>
				<g style="--index: 3;">
					<path d="M674,36491" tabindex="0">
						<title>j0np7or8</title>
					</path>
					<rect x="674" y="36491" width="0" height="0"/>
					<path d="M674,36491L674,36491" tabindex="0">
						<title>06:04.91 on 2021-01-02</title>
					</path>
					<line x1="0" y1="36491" x2="1855" y2="36491"/>
					<line x1="674" y1="0" x2="674" y2="58976"/>
				</g>
				<g style="--index: 4;">
					<path d="M690,23046" tabindex="0">
						<title>814zn7l8</title>
					</path>
					<rect x="690" y="23046" width="0" height="0"/>
					<path d="M690,23046L690,23046" tabindex="0">
						<title>03:50.46 on 2021-01-18</title>
					</path>
					<line x1="0" y1="23046" x2="1855" y2="23046"/>
					<line x1="690" y1="0" x2="690" y2="58976"/>
				</g>
				<g style="--index: 5;">
					<path d="M700,22778L1564,22778L1564,20095" tabindex="0">
						<title>xkon93k8</title>
					</path>
					<rect x="700" y="20095" width="864" height="2683"/>
					<path d="M700,22778L700,22778" tabindex="0">
						<title>03:47.78 on 2021-01-28</title>
					</path>
					<line x1="0" y1="22778" x2="1855" y2="22778"/>
					<line x1="700" y1="0" x2="700" y2="58976"/>
					<path d="M1564,20095L1564,20095" tabindex="0">
						<title>03:20.95 on 2023-06-11</title>
					</path>
					<line x1="0" y1="20095" x2="1855" y2="20095"/>
					<line x1="1564" y1="0" x2="1564" y2="58976"/>
				</g>
				<g style="--index: 6;">
					<path d="M774,21984" tabindex="0">
						<title>x356nrej</title>
					</path>
					<rect x="774" y="21984" width="0" height="0"/>
					<path d="M774,21984L774,21984" tabindex="0">
						<title>03:39.84 on 2021-04-12</title>
					</path>
					<line x1="0" y1="21984" x2="1855" y2="21984"/>
					<line x1="774" y1="0" x2="774" y2="58976"/>
				</g>
				<g style="--index: 7;">
					<path d="M1515,58976" tabindex="0">
						<title>j5qyodzj</title>
					</path>
					<rect x="1515" y="58976" width="0" height="0"/>
					<path d="M1515,58976L1515,58976" tabindex="0">
						<title>09:49.76 on 2023-04-23</title>
					</path>
					<line x1="0" y1="58976" x2="1855" y2="58976"/>
					<line x1="1515" y1="0" x2="1515" y2="58976"/>
				</g>
				<g style="--index: 8;">
					<path d="M1656,58455" tabindex="0">
						<title>joknry08</title>
					</path>
					<rect x="1656" y="58455" width="0" height="0"/>
					<path d="M1656,58455L1656,58455" tabindex="0">
						<title>09:44.55 on 2023-09-11</title>
					</path>
					<line x1="0" y1="58455" x2="1855" y2="58455"/>
					<line x1="1656" y1="0" x2="1656" y2="58976"/>
				</g>
				<g style="--index: 9;">
					<path d="M1701,37175" tabindex="0">
						<title>8g2z637j</title>
					</path>
					<rect x="1701" y="37175" width="0" height="0"/>
					<path d="M1701,37175L1701,37175" tabindex="0">
						<title>06:11.75 on 2023-10-26</title>
					</path>
					<line x1="0" y1="37175" x2="1855" y2="37175"/>
					<line x1="1701" y1="0" x2="1701" y2="58976"/>
				</g>
				<g style="--index: 10;">
					<path d="M1747,24482L1808,24482L1808,24289L1845,24289L1845,22965" tabindex="0">
						<title>8w3l21qj</title>
					</path>
					<rect x="1747" y="22965" width="98" height="1517"/>
					<path d="M1747,24482L1747,24482" tabindex="0">
						<title>04:04.82 on 2023-12-11</title>
					</path>
					<line x1="0" y1="24482" x2="1855" y2="24482"/>
					<line x1="1747" y1="0" x2="1747" y2="58976"/>
					<path d="M1808,24289L1808,24289" tabindex="0">
						<title>04:02.89 on 2024-02-10</title>
					</path>
					<line x1="0" y1="24289" x2="1855" y2="24289"/>
					<line x1="1808" y1="0" x2="1808" y2="58976"/>
					<path d="M1845,22965L1845,22965" tabindex="0">
						<title>03:49.65 on 2024-03-18</title>
					</path>
					<line x1="0" y1="22965" x2="1855" y2="22965"/>
					<line x1="1845" y1="0" x2="1845" y2="58976"/>
				</g>
				<g style="--index: 11;">
					<path d="M1855,45119" tabindex="0">
						<title>j5959zwx</title>
					</path>
					<rect x="1855" y="45119" width="0" height="0"/>
					<path d="M1855,45119L1855,45119" tabindex="0">
						<title>07:31.19 on 2024-03-28</title>
					</path>
					<line x1="0" y1="45119" x2="1855" y2="45119"/>
					<line x1="1855" y1="0" x2="1855" y2="58976"/>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
