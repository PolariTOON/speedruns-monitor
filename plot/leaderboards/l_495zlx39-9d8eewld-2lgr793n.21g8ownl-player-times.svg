<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Time by player for leaderboard l_495zlx39-9d8eewld-2lgr793n.21g8ownl</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 80;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-04-10</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2024-08-16</text>
		</svg>
		<svg viewBox="0 0 80 20">
			<text x="40" y="10" dx="0" dy="2" textLength="80" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">00:00.00</text>
		</svg>
		<svg viewBox="0 0 80 20">
			<text x="40" y="10" dx="0" dy="2" textLength="80" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">01:10.98</text>
		</svg>
		<svg viewBox="0 0 2320 7098" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 7098) scale(1 -1)" style="--count: 28;">
				<g style="--index: 0;">
					<path d="M0,4943" tabindex="0">
						<title>18qg9ndx</title>
					</path>
					<rect x="0" y="4943" width="0" height="0"/>
					<path d="M0,4943L0,4943" tabindex="0">
						<title>00:49.43 on 2018-04-10</title>
					</path>
					<line x1="0" y1="4943" x2="2320" y2="4943"/>
					<line x1="0" y1="0" x2="0" y2="7098"/>
				</g>
				<g style="--index: 1;">
					<path d="M86,3721" tabindex="0">
						<title>qj2pq1p8</title>
					</path>
					<rect x="86" y="3721" width="0" height="0"/>
					<path d="M86,3721L86,3721" tabindex="0">
						<title>00:37.21 on 2018-07-05</title>
					</path>
					<line x1="0" y1="3721" x2="2320" y2="3721"/>
					<line x1="86" y1="0" x2="86" y2="7098"/>
				</g>
				<g style="--index: 2;">
					<path d="M91,3550" tabindex="0">
						<title>y8dgoe98</title>
					</path>
					<rect x="91" y="3550" width="0" height="0"/>
					<path d="M91,3550L91,3550" tabindex="0">
						<title>00:35.50 on 2018-07-10</title>
					</path>
					<line x1="0" y1="3550" x2="2320" y2="3550"/>
					<line x1="91" y1="0" x2="91" y2="7098"/>
				</g>
				<g style="--index: 3;">
					<path d="M761,3201L882,3201L882,3148" tabindex="0">
						<title>x356nrej</title>
					</path>
					<rect x="761" y="3148" width="121" height="53"/>
					<path d="M761,3201L761,3201" tabindex="0">
						<title>00:32.01 on 2020-05-10</title>
					</path>
					<line x1="0" y1="3201" x2="2320" y2="3201"/>
					<line x1="761" y1="0" x2="761" y2="7098"/>
					<path d="M882,3148L882,3148" tabindex="0">
						<title>00:31.48 on 2020-09-08</title>
					</path>
					<line x1="0" y1="3148" x2="2320" y2="3148"/>
					<line x1="882" y1="0" x2="882" y2="7098"/>
				</g>
				<g style="--index: 4;">
					<path d="M819,3415" tabindex="0">
						<title>j92ldvv8</title>
					</path>
					<rect x="819" y="3415" width="0" height="0"/>
					<path d="M819,3415L819,3415" tabindex="0">
						<title>00:34.15 on 2020-07-07</title>
					</path>
					<line x1="0" y1="3415" x2="2320" y2="3415"/>
					<line x1="819" y1="0" x2="819" y2="7098"/>
				</g>
				<g style="--index: 5;">
					<path d="M873,3520" tabindex="0">
						<title>8dwnyqoj</title>
					</path>
					<rect x="873" y="3520" width="0" height="0"/>
					<path d="M873,3520L873,3520" tabindex="0">
						<title>00:35.20 on 2020-08-30</title>
					</path>
					<line x1="0" y1="3520" x2="2320" y2="3520"/>
					<line x1="873" y1="0" x2="873" y2="7098"/>
				</g>
				<g style="--index: 6;">
					<path d="M931,3107L964,3107L964,2902L971,2902L971,2885L979,2885L979,2875L991,2875L991,2804L1195,2804L1195,2612" tabindex="0">
						<title>xkon93k8</title>
					</path>
					<rect x="931" y="2612" width="264" height="495"/>
					<path d="M931,3107L931,3107" tabindex="0">
						<title>00:31.07 on 2020-10-27</title>
					</path>
					<line x1="0" y1="3107" x2="2320" y2="3107"/>
					<line x1="931" y1="0" x2="931" y2="7098"/>
					<path d="M964,2902L964,2902" tabindex="0">
						<title>00:29.02 on 2020-11-29</title>
					</path>
					<line x1="0" y1="2902" x2="2320" y2="2902"/>
					<line x1="964" y1="0" x2="964" y2="7098"/>
					<path d="M971,2885L971,2885" tabindex="0">
						<title>00:28.85 on 2020-12-06</title>
					</path>
					<line x1="0" y1="2885" x2="2320" y2="2885"/>
					<line x1="971" y1="0" x2="971" y2="7098"/>
					<path d="M979,2875L979,2875" tabindex="0">
						<title>00:28.75 on 2020-12-14</title>
					</path>
					<line x1="0" y1="2875" x2="2320" y2="2875"/>
					<line x1="979" y1="0" x2="979" y2="7098"/>
					<path d="M991,2804L991,2804" tabindex="0">
						<title>00:28.04 on 2020-12-26</title>
					</path>
					<line x1="0" y1="2804" x2="2320" y2="2804"/>
					<line x1="991" y1="0" x2="991" y2="7098"/>
					<path d="M1195,2612L1195,2612" tabindex="0">
						<title>00:26.12 on 2021-07-18</title>
					</path>
					<line x1="0" y1="2612" x2="2320" y2="2612"/>
					<line x1="1195" y1="0" x2="1195" y2="7098"/>
				</g>
				<g style="--index: 7;">
					<path d="M956,3447L988,3447L988,2905" tabindex="0">
						<title>x7q00668</title>
					</path>
					<rect x="956" y="2905" width="32" height="542"/>
					<path d="M956,3447L956,3447" tabindex="0">
						<title>00:34.47 on 2020-11-21</title>
					</path>
					<line x1="0" y1="3447" x2="2320" y2="3447"/>
					<line x1="956" y1="0" x2="956" y2="7098"/>
					<path d="M988,2905L988,2905" tabindex="0">
						<title>00:29.05 on 2020-12-23</title>
					</path>
					<line x1="0" y1="2905" x2="2320" y2="2905"/>
					<line x1="988" y1="0" x2="988" y2="7098"/>
				</g>
				<g style="--index: 8;">
					<path d="M958,3183L973,3183L973,2918L978,2918L978,2880L1194,2880L1194,2665L1551,2665L1551,2619" tabindex="0">
						<title>j0np7or8</title>
					</path>
					<rect x="958" y="2619" width="593" height="564"/>
					<path d="M958,3183L958,3183" tabindex="0">
						<title>00:31.83 on 2020-11-23</title>
					</path>
					<line x1="0" y1="3183" x2="2320" y2="3183"/>
					<line x1="958" y1="0" x2="958" y2="7098"/>
					<path d="M973,2918L973,2918" tabindex="0">
						<title>00:29.18 on 2020-12-08</title>
					</path>
					<line x1="0" y1="2918" x2="2320" y2="2918"/>
					<line x1="973" y1="0" x2="973" y2="7098"/>
					<path d="M978,2880L978,2880" tabindex="0">
						<title>00:28.80 on 2020-12-13</title>
					</path>
					<line x1="0" y1="2880" x2="2320" y2="2880"/>
					<line x1="978" y1="0" x2="978" y2="7098"/>
					<path d="M1194,2665L1194,2665" tabindex="0">
						<title>00:26.65 on 2021-07-17</title>
					</path>
					<line x1="0" y1="2665" x2="2320" y2="2665"/>
					<line x1="1194" y1="0" x2="1194" y2="7098"/>
					<path d="M1551,2619L1551,2619" tabindex="0">
						<title>00:26.19 on 2022-07-09</title>
					</path>
					<line x1="0" y1="2619" x2="2320" y2="2619"/>
					<line x1="1551" y1="0" x2="1551" y2="7098"/>
				</g>
				<g style="--index: 9;">
					<path d="M962,3361L963,3361L963,2983L1320,2983L1320,2589L1420,2589L1420,2586L1500,2586L1500,2529L1502,2529L1502,2520L1507,2520L1507,2498L1510,2498L1510,2489L1755,2489L1755,2454" tabindex="0">
						<title>8e9kl5dj</title>
					</path>
					<rect x="962" y="2454" width="793" height="907"/>
					<path d="M962,3361L962,3361" tabindex="0">
						<title>00:33.61 on 2020-11-27</title>
					</path>
					<line x1="0" y1="3361" x2="2320" y2="3361"/>
					<line x1="962" y1="0" x2="962" y2="7098"/>
					<path d="M963,2983L963,2983" tabindex="0">
						<title>00:29.83 on 2020-11-28</title>
					</path>
					<line x1="0" y1="2983" x2="2320" y2="2983"/>
					<line x1="963" y1="0" x2="963" y2="7098"/>
					<path d="M1320,2589L1320,2589" tabindex="0">
						<title>00:25.89 on 2021-11-20</title>
					</path>
					<line x1="0" y1="2589" x2="2320" y2="2589"/>
					<line x1="1320" y1="0" x2="1320" y2="7098"/>
					<path d="M1420,2586L1420,2586" tabindex="0">
						<title>00:25.86 on 2022-02-28</title>
					</path>
					<line x1="0" y1="2586" x2="2320" y2="2586"/>
					<line x1="1420" y1="0" x2="1420" y2="7098"/>
					<path d="M1500,2529L1500,2529" tabindex="0">
						<title>00:25.29 on 2022-05-19</title>
					</path>
					<line x1="0" y1="2529" x2="2320" y2="2529"/>
					<line x1="1500" y1="0" x2="1500" y2="7098"/>
					<path d="M1502,2520L1502,2520" tabindex="0">
						<title>00:25.20 on 2022-05-21</title>
					</path>
					<line x1="0" y1="2520" x2="2320" y2="2520"/>
					<line x1="1502" y1="0" x2="1502" y2="7098"/>
					<path d="M1507,2498L1507,2498" tabindex="0">
						<title>00:24.98 on 2022-05-26</title>
					</path>
					<line x1="0" y1="2498" x2="2320" y2="2498"/>
					<line x1="1507" y1="0" x2="1507" y2="7098"/>
					<path d="M1510,2489L1510,2489" tabindex="0">
						<title>00:24.89 on 2022-05-29</title>
					</path>
					<line x1="0" y1="2489" x2="2320" y2="2489"/>
					<line x1="1510" y1="0" x2="1510" y2="7098"/>
					<path d="M1755,2454L1755,2454" tabindex="0">
						<title>00:24.54 on 2023-01-29</title>
					</path>
					<line x1="0" y1="2454" x2="2320" y2="2454"/>
					<line x1="1755" y1="0" x2="1755" y2="7098"/>
				</g>
				<g style="--index: 10;">
					<path d="M963,3031L1059,3031L1059,2791L1423,2791L1423,2525L1508,2525L1508,2491L1536,2491L1536,2443" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
					<rect x="963" y="2443" width="573" height="588"/>
					<path d="M963,3031L963,3031" tabindex="0">
						<title>00:30.31 on 2020-11-28</title>
					</path>
					<line x1="0" y1="3031" x2="2320" y2="3031"/>
					<line x1="963" y1="0" x2="963" y2="7098"/>
					<path d="M1059,2791L1059,2791" tabindex="0">
						<title>00:27.91 on 2021-03-04</title>
					</path>
					<line x1="0" y1="2791" x2="2320" y2="2791"/>
					<line x1="1059" y1="0" x2="1059" y2="7098"/>
					<path d="M1423,2525L1423,2525" tabindex="0">
						<title>00:25.25 on 2022-03-03</title>
					</path>
					<line x1="0" y1="2525" x2="2320" y2="2525"/>
					<line x1="1423" y1="0" x2="1423" y2="7098"/>
					<path d="M1508,2491L1508,2491" tabindex="0">
						<title>00:24.91 on 2022-05-27</title>
					</path>
					<line x1="0" y1="2491" x2="2320" y2="2491"/>
					<line x1="1508" y1="0" x2="1508" y2="7098"/>
					<path d="M1536,2443L1536,2443" tabindex="0">
						<title>00:24.43 on 2022-06-24</title>
					</path>
					<line x1="0" y1="2443" x2="2320" y2="2443"/>
					<line x1="1536" y1="0" x2="1536" y2="7098"/>
				</g>
				<g style="--index: 11;">
					<path d="M965,3270L966,3270L966,3133" tabindex="0">
						<title>x3507k7j</title>
					</path>
					<rect x="965" y="3133" width="1" height="137"/>
					<path d="M965,3270L965,3270" tabindex="0">
						<title>00:32.70 on 2020-11-30</title>
					</path>
					<line x1="0" y1="3270" x2="2320" y2="3270"/>
					<line x1="965" y1="0" x2="965" y2="7098"/>
					<path d="M966,3133L966,3133" tabindex="0">
						<title>00:31.33 on 2020-12-01</title>
					</path>
					<line x1="0" y1="3133" x2="2320" y2="3133"/>
					<line x1="966" y1="0" x2="966" y2="7098"/>
				</g>
				<g style="--index: 12;">
					<path d="M1045,3515" tabindex="0">
						<title>8en1p568</title>
					</path>
					<rect x="1045" y="3515" width="0" height="0"/>
					<path d="M1045,3515L1045,3515" tabindex="0">
						<title>00:35.15 on 2021-02-18</title>
					</path>
					<line x1="0" y1="3515" x2="2320" y2="3515"/>
					<line x1="1045" y1="0" x2="1045" y2="7098"/>
				</g>
				<g style="--index: 13;">
					<path d="M1107,7098" tabindex="0">
						<title>8l4g3z4j</title>
					</path>
					<rect x="1107" y="7098" width="0" height="0"/>
					<path d="M1107,7098L1107,7098" tabindex="0">
						<title>01:10.98 on 2021-04-21</title>
					</path>
					<line x1="0" y1="7098" x2="2320" y2="7098"/>
					<line x1="1107" y1="0" x2="1107" y2="7098"/>
				</g>
				<g style="--index: 14;">
					<path d="M1408,3679" tabindex="0">
						<title>81qn52qj</title>
					</path>
					<rect x="1408" y="3679" width="0" height="0"/>
					<path d="M1408,3679L1408,3679" tabindex="0">
						<title>00:36.79 on 2022-02-16</title>
					</path>
					<line x1="0" y1="3679" x2="2320" y2="3679"/>
					<line x1="1408" y1="0" x2="1408" y2="7098"/>
				</g>
				<g style="--index: 15;">
					<path d="M1436,5244" tabindex="0">
						<title>jpo31408</title>
					</path>
					<rect x="1436" y="5244" width="0" height="0"/>
					<path d="M1436,5244L1436,5244" tabindex="0">
						<title>00:52.44 on 2022-03-16</title>
					</path>
					<line x1="0" y1="5244" x2="2320" y2="5244"/>
					<line x1="1436" y1="0" x2="1436" y2="7098"/>
				</g>
				<g style="--index: 16;">
					<path d="M1446,3351" tabindex="0">
						<title>x72652r8</title>
					</path>
					<rect x="1446" y="3351" width="0" height="0"/>
					<path d="M1446,3351L1446,3351" tabindex="0">
						<title>00:33.51 on 2022-03-26</title>
					</path>
					<line x1="0" y1="3351" x2="2320" y2="3351"/>
					<line x1="1446" y1="0" x2="1446" y2="7098"/>
				</g>
				<g style="--index: 17;">
					<path d="M1449,3206" tabindex="0">
						<title>8dgwon98</title>
					</path>
					<rect x="1449" y="3206" width="0" height="0"/>
					<path d="M1449,3206L1449,3206" tabindex="0">
						<title>00:32.06 on 2022-03-29</title>
					</path>
					<line x1="0" y1="3206" x2="2320" y2="3206"/>
					<line x1="1449" y1="0" x2="1449" y2="7098"/>
				</g>
				<g style="--index: 18;">
					<path d="M1474,2946L1505,2946L1505,2563" tabindex="0">
						<title>xk3m6d68</title>
					</path>
					<rect x="1474" y="2563" width="31" height="383"/>
					<path d="M1474,2946L1474,2946" tabindex="0">
						<title>00:29.46 on 2022-04-23</title>
					</path>
					<line x1="0" y1="2946" x2="2320" y2="2946"/>
					<line x1="1474" y1="0" x2="1474" y2="7098"/>
					<path d="M1505,2563L1505,2563" tabindex="0">
						<title>00:25.63 on 2022-05-24</title>
					</path>
					<line x1="0" y1="2563" x2="2320" y2="2563"/>
					<line x1="1505" y1="0" x2="1505" y2="7098"/>
				</g>
				<g style="--index: 19;">
					<path d="M1520,2673" tabindex="0">
						<title>x3m3kle8</title>
					</path>
					<rect x="1520" y="2673" width="0" height="0"/>
					<path d="M1520,2673L1520,2673" tabindex="0">
						<title>00:26.73 on 2022-06-08</title>
					</path>
					<line x1="0" y1="2673" x2="2320" y2="2673"/>
					<line x1="1520" y1="0" x2="1520" y2="7098"/>
				</g>
				<g style="--index: 20;">
					<path d="M1555,2931" tabindex="0">
						<title>x33zmz7x</title>
					</path>
					<rect x="1555" y="2931" width="0" height="0"/>
					<path d="M1555,2931L1555,2931" tabindex="0">
						<title>00:29.31 on 2022-07-13</title>
					</path>
					<line x1="0" y1="2931" x2="2320" y2="2931"/>
					<line x1="1555" y1="0" x2="1555" y2="7098"/>
				</g>
				<g style="--index: 21;">
					<path d="M1693,3173" tabindex="0">
						<title>j06mpmwj</title>
					</path>
					<rect x="1693" y="3173" width="0" height="0"/>
					<path d="M1693,3173L1693,3173" tabindex="0">
						<title>00:31.73 on 2022-11-28</title>
					</path>
					<line x1="0" y1="3173" x2="2320" y2="3173"/>
					<line x1="1693" y1="0" x2="1693" y2="7098"/>
				</g>
				<g style="--index: 22;">
					<path d="M1706,3554" tabindex="0">
						<title>8lonqn28</title>
					</path>
					<rect x="1706" y="3554" width="0" height="0"/>
					<path d="M1706,3554L1706,3554" tabindex="0">
						<title>00:35.54 on 2022-12-11</title>
					</path>
					<line x1="0" y1="3554" x2="2320" y2="3554"/>
					<line x1="1706" y1="0" x2="1706" y2="7098"/>
				</g>
				<g style="--index: 23;">
					<path d="M1767,5367" tabindex="0">
						<title>jnplgpd8</title>
					</path>
					<rect x="1767" y="5367" width="0" height="0"/>
					<path d="M1767,5367L1767,5367" tabindex="0">
						<title>00:53.67 on 2023-02-10</title>
					</path>
					<line x1="0" y1="5367" x2="2320" y2="5367"/>
					<line x1="1767" y1="0" x2="1767" y2="7098"/>
				</g>
				<g style="--index: 24;">
					<path d="M1818,2927" tabindex="0">
						<title>j20zyvpx</title>
					</path>
					<rect x="1818" y="2927" width="0" height="0"/>
					<path d="M1818,2927L1818,2927" tabindex="0">
						<title>00:29.27 on 2023-04-02</title>
					</path>
					<line x1="0" y1="2927" x2="2320" y2="2927"/>
					<line x1="1818" y1="0" x2="1818" y2="7098"/>
				</g>
				<g style="--index: 25;">
					<path d="M1959,4430L2028,4430L2028,2766" tabindex="0">
						<title>8ew371p8</title>
					</path>
					<rect x="1959" y="2766" width="69" height="1664"/>
					<path d="M1959,4430L1959,4430" tabindex="0">
						<title>00:44.30 on 2023-08-21</title>
					</path>
					<line x1="0" y1="4430" x2="2320" y2="4430"/>
					<line x1="1959" y1="0" x2="1959" y2="7098"/>
					<path d="M2028,2766L2028,2766" tabindex="0">
						<title>00:27.66 on 2023-10-29</title>
					</path>
					<line x1="0" y1="2766" x2="2320" y2="2766"/>
					<line x1="2028" y1="0" x2="2028" y2="7098"/>
				</g>
				<g style="--index: 26;">
					<path d="M2026,2439" tabindex="0">
						<title>jn2m23wj</title>
					</path>
					<rect x="2026" y="2439" width="0" height="0"/>
					<path d="M2026,2439L2026,2439" tabindex="0">
						<title>00:24.39 on 2023-10-27</title>
					</path>
					<line x1="0" y1="2439" x2="2320" y2="2439"/>
					<line x1="2026" y1="0" x2="2026" y2="7098"/>
				</g>
				<g style="--index: 27;">
					<path d="M2320,2754" tabindex="0">
						<title>xykmp9w8</title>
					</path>
					<rect x="2320" y="2754" width="0" height="0"/>
					<path d="M2320,2754L2320,2754" tabindex="0">
						<title>00:27.54 on 2024-08-16</title>
					</path>
					<line x1="0" y1="2754" x2="2320" y2="2754"/>
					<line x1="2320" y1="0" x2="2320" y2="7098"/>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
