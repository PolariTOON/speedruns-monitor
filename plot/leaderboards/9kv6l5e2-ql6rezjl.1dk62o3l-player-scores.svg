<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by player for leaderboard 9kv6l5e2-ql6rezjl.1dk62o3l</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2023-07-05</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-02</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">63</text>
		</svg>
		<svg viewBox="0 0 790 63" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 63) scale(1 -1)" style="--count: 63;">
				<g>
					<rect x="0" y="0" width="790" height="63"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,1L11,1L11,1L12,1L12,1L13,1L13,1L18,1L18,1L20,1L20,1L25,1L25,1L27,1L27,1L35,1L35,1L37,1L37,1L38,1L38,1L43,1L43,1L51,1L51,1L87,1L87,1L92,1L92,1L94,1L94,1L148,1L148,1L278,1L278,1L309,1L309,1L357,1L357,1L361,1L361,1L392,1L392,1L395,1L395,1L402,1L402,1L456,1L456,1L491,1L491,1L496,1L496,2L503,2L503,2L527,2L527,2L545,2L545,2L567,2L567,2L568,2L568,2L574,2L574,2L599,2L599,2L602,2L602,2L605,2L605,2L608,2L608,2L613,2L613,2L620,2L620,2L628,2L628,2L668,2L668,2L677,2L677,2L695,2L695,2L703,2L703,2L714,2L714,2L718,2L718,2L724,2L724,2L732,2L732,2L739,2L739,2L746,2L746,2L748,2L748,2L753,2L753,2L755,2L755,2L757,2L757,2L762,2L762,2L770,2L770,2L777,2L777,2L780,2L780,2L787,2L787,2L790,2L790,2L790,2" tabindex="0">
						<title>xz1nv0ej</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L11,0L11,2L12,2L12,2L13,2L13,2L18,2L18,3L20,3L20,3L25,3L25,3L26,3L26,7L27,7L27,7L35,7L35,8L37,8L37,8L38,8L38,9L43,9L43,10L51,10L51,11L87,11L87,12L92,12L92,13L93,13L93,12L94,12L94,12L148,12L148,13L278,13L278,14L309,14L309,15L357,15L357,16L361,16L361,17L392,17L392,18L395,18L395,18L402,18L402,19L456,19L456,19L491,19L491,20L496,20L496,21L503,21L503,22L527,22L527,23L545,23L545,24L567,24L567,25L568,25L568,26L570,26L570,25L574,25L574,26L599,26L599,27L602,27L602,28L605,28L605,29L608,29L608,30L613,30L613,31L620,31L620,31L628,31L628,31L668,31L668,32L677,32L677,33L695,33L695,34L703,34L703,34L714,34L714,35L715,35L715,34L718,34L718,34L724,34L724,34L732,34L732,34L739,34L739,35L746,35L746,35L748,35L748,36L753,36L753,36L755,36L755,38L757,38L757,38L762,38L762,38L770,38L770,38L777,38L777,39L780,39L780,39L787,39L787,40L790,40L790,41L790,41" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L12,0L12,3L13,3L13,3L18,3L18,4L20,4L20,4L25,4L25,4L26,4L26,3L27,3L27,3L35,3L35,3L37,3L37,3L38,3L38,3L43,3L43,3L51,3L51,4L87,4L87,4L92,4L92,4L94,4L94,4L148,4L148,4L278,4L278,4L309,4L309,4L357,4L357,4L361,4L361,4L392,4L392,4L395,4L395,4L402,4L402,4L456,4L456,4L491,4L491,4L496,4L496,5L503,5L503,5L527,5L527,6L545,6L545,6L567,6L567,6L568,6L568,6L574,6L574,6L599,6L599,6L602,6L602,6L605,6L605,6L608,6L608,6L613,6L613,6L620,6L620,6L628,6L628,6L668,6L668,6L677,6L677,6L695,6L695,6L703,6L703,6L714,6L714,6L718,6L718,6L724,6L724,6L732,6L732,6L739,6L739,6L746,6L746,6L748,6L748,6L753,6L753,6L755,6L755,6L757,6L757,6L762,6L762,6L770,6L770,6L777,6L777,6L780,6L780,6L787,6L787,6L790,6L790,6L790,6" tabindex="0">
						<title>j9k252w8</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L13,0L13,4L18,4L18,5L20,5L20,6L21,6L21,6L25,6L25,7L26,7L26,6L27,6L27,6L35,6L35,7L37,7L37,7L38,7L38,8L43,8L43,9L51,9L51,10L87,10L87,11L92,11L92,12L93,12L93,11L94,11L94,11L148,11L148,12L278,12L278,13L309,13L309,14L357,14L357,15L361,15L361,16L392,16L392,17L395,17L395,17L402,17L402,18L456,18L456,18L491,18L491,19L496,19L496,20L503,20L503,21L527,21L527,22L545,22L545,23L567,23L567,24L568,24L568,25L570,25L570,24L574,24L574,25L599,25L599,26L602,26L602,27L605,27L605,28L608,28L608,29L613,29L613,30L620,30L620,30L628,30L628,30L668,30L668,31L677,31L677,32L695,32L695,33L703,33L703,33L714,33L714,34L715,34L715,33L718,33L718,33L724,33L724,33L732,33L732,33L739,33L739,34L746,34L746,34L748,34L748,35L753,35L753,35L755,35L755,37L757,37L757,37L762,37L762,37L770,37L770,37L777,37L777,38L780,38L780,38L787,38L787,39L790,39L790,40L790,40" tabindex="0">
						<title>8v23g7yj</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L18,0L18,2L20,2L20,2L25,2L25,2L27,2L27,2L35,2L35,2L37,2L37,2L38,2L38,2L43,2L43,2L51,2L51,3L87,3L87,3L92,3L92,3L94,3L94,3L148,3L148,3L278,3L278,3L309,3L309,3L357,3L357,3L361,3L361,3L392,3L392,3L395,3L395,3L402,3L402,3L456,3L456,3L491,3L491,3L496,3L496,4L503,4L503,4L527,4L527,4L545,4L545,4L567,4L567,4L568,4L568,4L574,4L574,4L599,4L599,4L602,4L602,4L605,4L605,4L608,4L608,4L613,4L613,4L620,4L620,4L628,4L628,4L668,4L668,4L677,4L677,4L695,4L695,4L703,4L703,4L714,4L714,4L718,4L718,4L724,4L724,4L732,4L732,4L739,4L739,4L746,4L746,4L748,4L748,4L753,4L753,4L755,4L755,4L757,4L757,4L762,4L762,4L770,4L770,4L777,4L777,4L780,4L780,4L787,4L787,4L790,4L790,4L790,4" tabindex="0">
						<title>xk136v6j</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L20,0L20,5L25,5L25,5L26,5L26,4L27,4L27,4L35,4L35,4L37,4L37,4L38,4L38,4L43,4L43,4L51,4L51,5L87,5L87,6L92,6L92,6L94,6L94,6L148,6L148,6L278,6L278,6L309,6L309,6L357,6L357,6L361,6L361,6L392,6L392,6L395,6L395,6L402,6L402,6L456,6L456,6L491,6L491,6L496,6L496,7L503,7L503,7L527,7L527,8L545,8L545,8L567,8L567,8L568,8L568,8L574,8L574,8L599,8L599,8L602,8L602,8L605,8L605,8L608,8L608,8L613,8L613,8L620,8L620,8L628,8L628,8L668,8L668,8L677,8L677,8L695,8L695,8L703,8L703,8L714,8L714,8L718,8L718,8L724,8L724,8L732,8L732,8L739,8L739,8L746,8L746,8L748,8L748,9L753,9L753,9L755,9L755,9L757,9L757,9L762,9L762,9L770,9L770,9L777,9L777,9L780,9L780,9L787,9L787,9L790,9L790,9L790,9" tabindex="0">
						<title>8rmpyp6j</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L25,0L25,6L26,6L26,5L27,5L27,5L35,5L35,6L37,6L37,6L38,6L38,6L43,6L43,6L51,6L51,7L87,7L87,8L92,8L92,8L94,8L94,8L148,8L148,8L278,8L278,8L309,8L309,8L357,8L357,9L361,9L361,9L392,9L392,9L395,9L395,9L402,9L402,9L456,9L456,9L491,9L491,9L496,9L496,10L503,10L503,10L527,10L527,11L545,11L545,11L567,11L567,11L568,11L568,11L574,11L574,11L599,11L599,11L602,11L602,11L605,11L605,11L608,11L608,11L613,11L613,11L620,11L620,11L628,11L628,11L668,11L668,11L677,11L677,11L695,11L695,11L703,11L703,11L714,11L714,11L718,11L718,11L724,11L724,11L732,11L732,11L739,11L739,11L746,11L746,11L748,11L748,12L753,12L753,12L755,12L755,12L757,12L757,12L762,12L762,12L770,12L770,12L777,12L777,12L780,12L780,12L787,12L787,12L790,12L790,12L790,12" tabindex="0">
						<title>j0w34198</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L27,0L27,8L35,8L35,9L37,9L37,10L38,10L38,11L43,11L43,12L51,12L51,13L87,13L87,14L92,14L92,15L94,15L94,15L148,15L148,16L173,16L173,17L176,17L176,16L278,16L278,17L309,17L309,18L357,18L357,19L361,19L361,20L392,20L392,21L395,21L395,22L402,22L402,23L436,23L436,24L455,24L455,23L456,23L456,23L491,23L491,24L496,24L496,25L503,25L503,26L527,26L527,27L545,27L545,28L567,28L567,29L568,29L568,30L574,30L574,31L599,31L599,32L602,32L602,33L605,33L605,34L608,34L608,35L613,35L613,36L620,36L620,37L628,37L628,38L668,38L668,39L677,39L677,40L695,40L695,41L703,41L703,41L714,41L714,43L718,43L718,44L724,44L724,45L732,45L732,46L733,46L733,44L739,44L739,45L746,45L746,46L748,46L748,47L753,47L753,48L754,48L754,47L755,47L755,49L757,49L757,49L762,49L762,50L766,50L766,49L770,49L770,50L777,50L777,51L780,51L780,52L787,52L787,53L790,53L790,54L790,54" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L35,0L35,5L37,5L37,5L38,5L38,5L43,5L43,5L51,5L51,6L87,6L87,7L92,7L92,7L94,7L94,7L148,7L148,7L278,7L278,7L309,7L309,7L357,7L357,7L361,7L361,7L392,7L392,7L395,7L395,7L402,7L402,7L456,7L456,7L491,7L491,7L496,7L496,8L503,8L503,8L527,8L527,9L545,9L545,9L567,9L567,9L568,9L568,9L574,9L574,9L599,9L599,9L602,9L602,9L605,9L605,9L608,9L608,9L613,9L613,9L620,9L620,9L628,9L628,9L668,9L668,9L677,9L677,9L695,9L695,9L703,9L703,9L714,9L714,9L718,9L718,9L724,9L724,9L732,9L732,9L739,9L739,9L746,9L746,9L748,9L748,10L753,10L753,10L755,10L755,10L757,10L757,10L762,10L762,10L770,10L770,10L777,10L777,10L780,10L780,10L787,10L787,10L790,10L790,10L790,10" tabindex="0">
						<title>8qr3vyqj</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L37,0L37,9L38,9L38,10L43,10L43,11L51,11L51,12L87,12L87,13L92,13L92,14L94,14L94,14L148,14L148,15L161,15L161,14L207,14L207,15L210,15L210,15L278,15L278,16L309,16L309,17L357,17L357,18L361,18L361,19L392,19L392,20L395,20L395,21L402,21L402,22L429,22L429,21L456,21L456,21L491,21L491,22L496,22L496,23L503,23L503,24L527,24L527,25L545,25L545,26L567,26L567,27L568,27L568,28L574,28L574,29L599,29L599,30L602,30L602,31L605,31L605,32L608,32L608,33L613,33L613,34L620,34L620,35L627,35L627,34L628,34L628,35L668,35L668,36L677,36L677,37L695,37L695,38L703,38L703,38L714,38L714,40L717,40L717,39L718,39L718,39L724,39L724,39L732,39L732,39L739,39L739,40L746,40L746,40L748,40L748,41L753,41L753,42L755,42L755,44L757,44L757,44L762,44L762,44L770,44L770,45L777,45L777,46L780,46L780,46L787,46L787,47L790,47L790,48L790,48" tabindex="0">
						<title>jpol4d58</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L38,0L38,7L43,7L43,8L45,8L45,7L51,7L51,8L87,8L87,9L92,9L92,9L94,9L94,9L148,9L148,9L278,9L278,10L309,10L309,11L357,11L357,12L361,12L361,13L365,13L365,12L392,12L392,12L395,12L395,12L402,12L402,13L456,13L456,13L491,13L491,14L496,14L496,15L503,15L503,15L527,15L527,16L545,16L545,16L567,16L567,16L568,16L568,16L574,16L574,17L599,17L599,17L602,17L602,18L605,18L605,19L608,19L608,20L613,20L613,21L620,21L620,21L628,21L628,21L668,21L668,22L677,22L677,22L695,22L695,23L703,23L703,23L714,23L714,23L718,23L718,23L724,23L724,23L732,23L732,23L739,23L739,24L746,24L746,24L748,24L748,25L753,25L753,25L755,25L755,25L757,25L757,25L762,25L762,25L770,25L770,25L777,25L777,25L780,25L780,25L787,25L787,26L790,26L790,26L790,26" tabindex="0">
						<title>86r3dyw8</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L43,0L43,7L45,7L45,8L51,8L51,9L87,9L87,10L92,10L92,11L93,11L93,13L94,13L94,13L148,13L148,14L158,14L158,14L161,14L161,15L207,15L207,14L278,14L278,15L309,15L309,16L357,16L357,17L361,17L361,18L392,18L392,19L395,19L395,19L402,19L402,20L456,20L456,20L477,20L477,20L491,20L491,21L496,21L496,22L503,22L503,23L527,23L527,24L545,24L545,25L567,25L567,26L568,26L568,27L570,27L570,26L574,26L574,27L599,27L599,28L602,28L602,29L605,29L605,30L608,30L608,31L613,31L613,32L620,32L620,32L628,32L628,32L668,32L668,33L677,33L677,34L695,34L695,35L703,35L703,35L714,35L714,36L715,36L715,35L718,35L718,35L724,35L724,35L732,35L732,35L739,35L739,36L746,36L746,36L748,36L748,37L753,37L753,38L755,38L755,40L757,40L757,40L762,40L762,40L770,40L770,40L777,40L777,41L780,41L780,41L787,41L787,42L790,42L790,43L790,43" tabindex="0">
						<title>8ew371p8</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L51,0L51,2L87,2L87,2L92,2L92,2L94,2L94,2L148,2L148,2L278,2L278,2L309,2L309,2L357,2L357,2L361,2L361,2L392,2L392,2L395,2L395,2L402,2L402,2L456,2L456,2L491,2L491,2L496,2L496,3L503,3L503,3L527,3L527,3L545,3L545,3L567,3L567,3L568,3L568,3L574,3L574,3L599,3L599,3L602,3L602,3L605,3L605,3L608,3L608,3L613,3L613,3L620,3L620,3L628,3L628,3L668,3L668,3L677,3L677,3L695,3L695,3L703,3L703,3L714,3L714,3L718,3L718,3L724,3L724,3L732,3L732,3L739,3L739,3L746,3L746,3L748,3L748,3L753,3L753,3L755,3L755,3L757,3L757,3L762,3L762,3L770,3L770,3L777,3L777,3L780,3L780,3L787,3L787,3L790,3L790,3L790,3" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L87,0L87,5L92,5L92,5L94,5L94,5L148,5L148,5L278,5L278,5L309,5L309,5L357,5L357,5L361,5L361,5L392,5L392,5L395,5L395,5L402,5L402,5L456,5L456,5L491,5L491,5L496,5L496,6L503,6L503,6L527,6L527,7L545,7L545,7L567,7L567,7L568,7L568,7L574,7L574,7L599,7L599,7L602,7L602,7L605,7L605,7L608,7L608,7L613,7L613,7L620,7L620,7L628,7L628,7L668,7L668,7L677,7L677,7L695,7L695,7L703,7L703,7L714,7L714,7L718,7L718,7L724,7L724,7L732,7L732,7L739,7L739,7L746,7L746,7L748,7L748,7L753,7L753,7L755,7L755,7L757,7L757,7L762,7L762,7L770,7L770,7L777,7L777,7L780,7L780,7L787,7L787,7L790,7L790,7L790,7" tabindex="0">
						<title>jokkvo38</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L92,0L92,10L94,10L94,10L148,10L148,11L278,11L278,12L309,12L309,13L357,13L357,14L361,14L361,15L392,15L392,16L395,16L395,16L402,16L402,17L456,17L456,17L491,17L491,18L496,18L496,19L503,19L503,20L527,20L527,21L545,21L545,22L567,22L567,22L568,22L568,22L574,22L574,23L599,23L599,23L602,23L602,24L605,24L605,25L608,25L608,26L613,26L613,27L620,27L620,27L628,27L628,27L668,27L668,28L677,28L677,29L695,29L695,30L703,30L703,30L714,30L714,30L718,30L718,30L724,30L724,30L732,30L732,30L739,30L739,31L746,31L746,31L748,31L748,32L753,32L753,32L755,32L755,34L757,34L757,34L759,34L759,33L762,33L762,33L770,33L770,33L777,33L777,34L780,34L780,34L787,34L787,35L790,35L790,36L790,36" tabindex="0">
						<title>8ee6nod8</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L94,0L94,16L148,16L148,17L173,17L173,16L176,16L176,17L278,17L278,18L309,18L309,19L357,19L357,20L361,20L361,21L392,21L392,22L395,22L395,23L402,23L402,24L436,24L436,23L455,23L455,24L456,24L456,25L457,25L457,24L491,24L491,25L496,25L496,26L503,26L503,27L527,27L527,28L545,28L545,29L567,29L567,30L568,30L568,31L574,31L574,32L599,32L599,33L602,33L602,34L605,34L605,35L608,35L608,36L613,36L613,37L620,37L620,38L628,38L628,39L668,39L668,40L677,40L677,41L695,41L695,42L703,42L703,42L714,42L714,44L718,44L718,45L724,45L724,46L732,46L732,47L733,47L733,46L739,46L739,47L746,47L746,48L748,48L748,49L753,49L753,50L754,50L754,49L755,49L755,51L757,51L757,51L759,51L759,50L762,50L762,51L766,51L766,50L770,50L770,51L773,51L773,59L777,59L777,60L780,60L780,61L787,61L787,62L790,62L790,63L790,63" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L148,0L148,10L278,10L278,11L309,11L309,12L357,12L357,13L361,13L361,14L392,14L392,14L395,14L395,14L402,14L402,15L456,15L456,15L491,15L491,16L496,16L496,17L503,17L503,18L527,18L527,19L545,19L545,20L567,20L567,20L568,20L568,20L574,20L574,21L599,21L599,21L602,21L602,22L605,22L605,23L608,23L608,24L613,24L613,25L620,25L620,25L628,25L628,25L668,25L668,26L677,26L677,26L695,26L695,27L703,27L703,27L714,27L714,27L718,27L718,27L724,27L724,27L732,27L732,27L739,27L739,28L746,28L746,28L748,28L748,29L753,29L753,29L755,29L755,31L757,31L757,31L759,31L759,30L762,30L762,30L770,30L770,30L777,30L777,30L780,30L780,30L787,30L787,31L790,31L790,32L790,32" tabindex="0">
						<title>8g29g91j</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L278,0L278,9L309,9L309,9L357,9L357,10L361,10L361,11L365,11L365,10L392,10L392,10L395,10L395,10L402,10L402,10L456,10L456,10L491,10L491,10L496,10L496,11L503,11L503,11L527,11L527,12L545,12L545,12L567,12L567,12L568,12L568,12L574,12L574,12L599,12L599,12L602,12L602,12L605,12L605,12L608,12L608,12L613,12L613,12L620,12L620,12L628,12L628,12L668,12L668,12L677,12L677,12L695,12L695,12L703,12L703,12L714,12L714,12L718,12L718,12L724,12L724,12L732,12L732,12L739,12L739,12L746,12L746,12L748,12L748,13L753,13L753,13L755,13L755,13L757,13L757,13L762,13L762,13L770,13L770,13L777,13L777,13L780,13L780,13L787,13L787,13L790,13L790,13L790,13" tabindex="0">
						<title>xkp59okj</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L309,0L309,10L357,10L357,11L361,11L361,12L365,12L365,11L392,11L392,11L395,11L395,11L402,11L402,12L456,12L456,12L491,12L491,13L496,13L496,14L503,14L503,14L527,14L527,15L545,15L545,15L567,15L567,15L568,15L568,15L574,15L574,16L599,16L599,16L602,16L602,17L605,17L605,17L608,17L608,17L613,17L613,18L620,18L620,18L628,18L628,18L668,18L668,19L677,19L677,19L695,19L695,20L703,20L703,20L714,20L714,20L718,20L718,20L724,20L724,20L732,20L732,20L739,20L739,20L746,20L746,20L748,20L748,21L753,21L753,21L755,21L755,21L757,21L757,21L762,21L762,21L770,21L770,21L777,21L777,21L780,21L780,21L787,21L787,22L790,22L790,22L790,22" tabindex="0">
						<title>81m16pq8</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L357,0L357,8L361,8L361,8L392,8L392,8L395,8L395,8L402,8L402,8L456,8L456,8L491,8L491,8L496,8L496,9L503,9L503,9L527,9L527,10L545,10L545,10L567,10L567,10L568,10L568,10L574,10L574,10L599,10L599,10L602,10L602,10L605,10L605,10L608,10L608,10L613,10L613,10L620,10L620,10L628,10L628,10L668,10L668,10L677,10L677,10L695,10L695,10L703,10L703,10L714,10L714,10L718,10L718,10L724,10L724,10L732,10L732,10L739,10L739,10L746,10L746,10L748,10L748,11L753,11L753,11L755,11L755,11L757,11L757,11L762,11L762,11L770,11L770,11L777,11L777,11L780,11L780,11L787,11L787,11L790,11L790,11L790,11" tabindex="0">
						<title>8l65vnl8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L361,0L361,10L365,10L365,13L392,13L392,13L395,13L395,13L402,13L402,14L456,14L456,14L491,14L491,15L496,15L496,16L503,16L503,16L527,16L527,17L545,17L545,17L567,17L567,17L568,17L568,17L574,17L574,18L599,18L599,18L602,18L602,19L605,19L605,20L608,20L608,21L613,21L613,22L620,22L620,22L628,22L628,22L668,22L668,23L677,23L677,23L695,23L695,24L703,24L703,24L714,24L714,24L718,24L718,24L724,24L724,24L732,24L732,24L739,24L739,25L746,25L746,25L748,25L748,26L753,26L753,26L755,26L755,26L757,26L757,26L762,26L762,26L770,26L770,26L777,26L777,26L780,26L780,26L787,26L787,27L790,27L790,27L790,27" tabindex="0">
						<title>8go6p41x</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L392,0L392,15L395,15L395,15L402,15L402,16L456,16L456,16L491,16L491,17L496,17L496,18L503,18L503,19L527,19L527,20L545,20L545,21L567,21L567,21L568,21L568,21L574,21L574,22L599,22L599,22L602,22L602,23L605,23L605,24L608,24L608,25L613,25L613,26L620,26L620,26L628,26L628,26L668,26L668,27L677,27L677,27L695,27L695,28L703,28L703,28L714,28L714,28L718,28L718,28L724,28L724,28L732,28L732,28L739,28L739,29L746,29L746,29L748,29L748,30L753,30L753,30L755,30L755,32L757,32L757,32L759,32L759,31L762,31L762,31L770,31L770,31L777,31L777,32L780,32L780,32L787,32L787,33L790,33L790,34L790,34" tabindex="0">
						<title>x7zmddv8</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L395,0L395,20L402,20L402,21L429,21L429,22L456,22L456,22L491,22L491,23L496,23L496,24L503,24L503,25L527,25L527,26L545,26L545,27L567,27L567,28L568,28L568,29L574,29L574,30L599,30L599,31L602,31L602,32L605,32L605,33L608,33L608,34L613,34L613,35L620,35L620,36L628,36L628,37L641,37L641,36L668,36L668,37L677,37L677,38L695,38L695,39L703,39L703,39L714,39L714,41L718,41L718,41L724,41L724,41L732,41L732,41L735,41L735,40L739,40L739,41L746,41L746,42L748,42L748,43L753,43L753,44L755,44L755,46L757,46L757,46L762,46L762,46L770,46L770,47L777,47L777,48L780,48L780,48L787,48L787,49L790,49L790,50L790,50" tabindex="0">
						<title>810g2npx</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L402,0L402,11L456,11L456,11L491,11L491,11L496,11L496,12L503,12L503,12L527,12L527,13L545,13L545,13L567,13L567,13L568,13L568,13L574,13L574,13L599,13L599,13L602,13L602,13L605,13L605,13L608,13L608,13L613,13L613,13L620,13L620,13L628,13L628,13L668,13L668,13L677,13L677,13L695,13L695,14L703,14L703,14L714,14L714,14L718,14L718,14L724,14L724,14L732,14L732,14L739,14L739,14L746,14L746,14L748,14L748,15L753,15L753,15L755,15L755,15L757,15L757,15L762,15L762,15L770,15L770,15L777,15L777,15L780,15L780,15L787,15L787,15L790,15L790,15L790,15" tabindex="0">
						<title>x36lg97x</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L456,0L456,24L457,24L457,25L491,25L491,26L496,26L496,27L503,27L503,28L527,28L527,29L545,29L545,30L567,30L567,31L568,31L568,32L574,32L574,33L599,33L599,34L602,34L602,35L605,35L605,36L608,36L608,37L613,37L613,38L620,38L620,39L628,39L628,40L668,40L668,41L677,41L677,42L695,42L695,43L703,43L703,43L714,43L714,45L718,45L718,46L724,46L724,47L732,47L732,48L733,48L733,47L739,47L739,48L746,48L746,49L748,49L748,50L753,50L753,52L755,52L755,54L757,54L757,54L759,54L759,53L762,53L762,54L769,54L769,53L770,53L770,54L773,54L773,52L777,52L777,53L780,53L780,54L787,54L787,55L790,55L790,56L790,56" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L491,0L491,12L496,12L496,13L503,13L503,13L527,13L527,14L545,14L545,14L567,14L567,14L568,14L568,14L574,14L574,14L599,14L599,14L602,14L602,15L605,15L605,15L608,15L608,15L613,15L613,16L620,16L620,16L628,16L628,16L668,16L668,17L677,17L677,17L695,17L695,18L703,18L703,18L714,18L714,18L718,18L718,18L724,18L724,18L732,18L732,18L739,18L739,18L746,18L746,18L748,18L748,19L753,19L753,19L755,19L755,19L757,19L757,19L762,19L762,19L770,19L770,19L777,19L777,19L780,19L780,19L787,19L787,19L790,19L790,19L790,19" tabindex="0">
						<title>jm6m09n8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L496,0L496,1L503,1L503,1L527,1L527,1L545,1L545,1L567,1L567,1L568,1L568,1L574,1L574,1L599,1L599,1L602,1L602,1L605,1L605,1L608,1L608,1L613,1L613,1L620,1L620,1L628,1L628,1L668,1L668,1L677,1L677,1L695,1L695,1L703,1L703,1L714,1L714,1L718,1L718,1L724,1L724,1L732,1L732,1L739,1L739,1L746,1L746,1L748,1L748,1L753,1L753,1L755,1L755,1L757,1L757,1L762,1L762,1L770,1L770,1L777,1L777,1L780,1L780,1L787,1L787,1L790,1L790,1L790,1" tabindex="0">
						<title>xko2g798</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L503,0L503,17L527,17L527,18L545,18L545,18L567,18L567,18L568,18L568,18L574,18L574,19L599,19L599,19L602,19L602,20L605,20L605,21L608,21L608,22L613,22L613,23L620,23L620,23L628,23L628,23L668,23L668,24L677,24L677,24L695,24L695,25L703,25L703,25L714,25L714,25L718,25L718,25L724,25L724,25L732,25L732,25L739,25L739,26L746,26L746,26L748,26L748,27L753,27L753,27L755,27L755,27L757,27L757,27L762,27L762,27L770,27L770,27L777,27L777,27L780,27L780,27L787,27L787,28L790,28L790,28L790,28" tabindex="0">
						<title>8gonz31x</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L527,0L527,5L545,5L545,5L567,5L567,5L568,5L568,5L574,5L574,5L599,5L599,5L602,5L602,5L605,5L605,5L608,5L608,5L613,5L613,5L620,5L620,5L628,5L628,5L668,5L668,5L677,5L677,5L695,5L695,5L703,5L703,5L714,5L714,5L718,5L718,5L724,5L724,5L732,5L732,5L739,5L739,5L746,5L746,5L748,5L748,5L753,5L753,5L755,5L755,5L757,5L757,5L762,5L762,5L770,5L770,5L777,5L777,5L780,5L780,5L787,5L787,5L790,5L790,5L790,5" tabindex="0">
						<title>jpz2ge4x</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L545,0L545,19L567,19L567,19L568,19L568,19L574,19L574,20L599,20L599,20L602,20L602,21L605,21L605,22L608,22L608,23L613,23L613,24L620,24L620,24L628,24L628,24L668,24L668,25L677,25L677,25L695,25L695,26L703,26L703,26L714,26L714,26L718,26L718,26L724,26L724,26L732,26L732,26L739,26L739,27L746,27L746,27L748,27L748,28L753,28L753,28L755,28L755,29L757,29L757,29L759,29L759,28L762,28L762,28L770,28L770,28L777,28L777,28L780,28L780,28L787,28L787,29L790,29L790,29L790,29" tabindex="0">
						<title>8de53m5j</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L567,0L567,23L568,23L568,24L570,24L570,23L574,23L574,24L599,24L599,25L602,25L602,26L605,26L605,27L608,27L608,28L613,28L613,29L620,29L620,29L628,29L628,29L668,29L668,30L677,30L677,31L695,31L695,32L703,32L703,32L714,32L714,32L718,32L718,32L724,32L724,32L732,32L732,32L739,32L739,33L746,33L746,33L748,33L748,34L753,34L753,34L755,34L755,36L757,36L757,36L762,36L762,36L770,36L770,36L777,36L777,37L780,37L780,37L787,37L787,38L790,38L790,39L790,39" tabindex="0">
						<title>8rl97mw8</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L568,0L568,23L570,23L570,27L574,27L574,28L599,28L599,29L602,29L602,30L605,30L605,31L608,31L608,32L613,32L613,33L620,33L620,34L627,34L627,33L628,33L628,34L668,34L668,35L677,35L677,36L695,36L695,37L703,37L703,37L714,37L714,39L715,39L715,38L717,38L717,37L718,37L718,37L724,37L724,37L732,37L732,37L739,37L739,38L746,38L746,38L748,38L748,39L753,39L753,40L755,40L755,42L757,42L757,42L762,42L762,42L770,42L770,43L777,43L777,44L780,44L780,44L787,44L787,45L790,45L790,46L790,46" tabindex="0">
						<title>x7z9ygy8</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L574,0L574,15L599,15L599,15L602,15L602,16L605,16L605,16L608,16L608,16L613,16L613,17L620,17L620,17L628,17L628,17L668,17L668,18L677,18L677,18L695,18L695,19L703,19L703,19L714,19L714,19L718,19L718,19L724,19L724,19L732,19L732,19L739,19L739,19L746,19L746,19L748,19L748,20L753,20L753,20L755,20L755,20L757,20L757,20L762,20L762,20L770,20L770,20L777,20L777,20L780,20L780,20L787,20L787,21L790,21L790,21L790,21" tabindex="0">
						<title>8eod1g2j</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L599,0L599,24L602,24L602,25L605,25L605,26L608,26L608,27L613,27L613,28L620,28L620,28L628,28L628,28L668,28L668,29L677,29L677,30L695,30L695,31L703,31L703,31L714,31L714,31L718,31L718,31L724,31L724,31L732,31L732,31L739,31L739,32L746,32L746,32L748,32L748,33L753,33L753,33L755,33L755,35L757,35L757,35L759,35L759,34L762,34L762,34L770,34L770,34L777,34L777,35L780,35L780,35L787,35L787,36L790,36L790,37L790,37" tabindex="0">
						<title>jm6nql48</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L602,0L602,14L605,14L605,14L608,14L608,14L613,14L613,14L620,14L620,14L628,14L628,14L668,14L668,14L677,14L677,14L695,14L695,15L703,15L703,15L714,15L714,15L718,15L718,15L724,15L724,15L732,15L732,15L739,15L739,15L746,15L746,15L748,15L748,16L753,16L753,16L755,16L755,16L757,16L757,16L762,16L762,16L770,16L770,16L777,16L777,16L780,16L780,16L787,16L787,16L790,16L790,16L790,16" tabindex="0">
						<title>jo10e4lx</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L605,0L605,18L608,18L608,18L613,18L613,19L620,19L620,19L628,19L628,19L668,19L668,20L677,20L677,20L695,20L695,21L703,21L703,21L714,21L714,21L718,21L718,21L724,21L724,21L732,21L732,21L739,21L739,21L746,21L746,21L748,21L748,22L753,22L753,22L755,22L755,22L757,22L757,22L762,22L762,22L770,22L770,22L777,22L777,22L780,22L780,22L787,22L787,23L790,23L790,23L790,23" tabindex="0">
						<title>jn6k401x</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L608,0L608,19L613,19L613,20L620,20L620,20L628,20L628,20L668,20L668,21L677,21L677,21L695,21L695,22L703,22L703,22L714,22L714,22L718,22L718,22L724,22L724,22L732,22L732,22L739,22L739,22L746,22L746,22L748,22L748,23L753,23L753,23L755,23L755,23L757,23L757,23L762,23L762,23L770,23L770,23L777,23L777,23L780,23L780,23L787,23L787,24L790,24L790,24L790,24" tabindex="0">
						<title>x7mnw5qx</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L613,0L613,15L620,15L620,15L628,15L628,15L668,15L668,16L677,16L677,16L695,16L695,17L703,17L703,17L714,17L714,17L718,17L718,17L724,17L724,17L732,17L732,17L739,17L739,17L746,17L746,17L748,17L748,18L753,18L753,18L755,18L755,18L757,18L757,18L762,18L762,18L770,18L770,18L777,18L777,18L780,18L780,18L787,18L787,18L790,18L790,18L790,18" tabindex="0">
						<title>j4p1myvj</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L620,0L620,33L627,33L627,35L628,35L628,36L641,36L641,37L649,37L649,37L668,37L668,38L677,38L677,39L695,39L695,40L703,40L703,40L714,40L714,42L718,42L718,42L724,42L724,43L732,43L732,43L733,43L733,42L739,42L739,43L746,43L746,44L748,44L748,45L753,45L753,46L755,46L755,48L757,48L757,48L762,48L762,48L766,48L766,51L767,51L767,53L769,53L769,55L770,55L770,56L773,56L773,55L777,55L777,56L780,56L780,57L787,57L787,58L790,58L790,59L790,59" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L628,0L628,33L668,33L668,34L677,34L677,35L695,35L695,36L703,36L703,36L714,36L714,38L715,38L715,37L717,37L717,36L718,36L718,36L724,36L724,36L732,36L732,36L739,36L739,37L746,37L746,37L748,37L748,38L753,38L753,39L755,39L755,41L757,41L757,41L762,41L762,41L770,41L770,42L777,42L777,43L780,43L780,43L787,43L787,44L790,44L790,45L790,45" tabindex="0">
						<title>xz0dg1e8</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L668,0L668,15L677,15L677,15L695,15L695,16L703,16L703,16L714,16L714,16L718,16L718,16L724,16L724,16L732,16L732,16L739,16L739,16L746,16L746,16L748,16L748,17L753,17L753,17L755,17L755,17L757,17L757,17L762,17L762,17L770,17L770,17L777,17L777,17L780,17L780,17L787,17L787,17L790,17L790,17L790,17" tabindex="0">
						<title>xyylq0mx</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L677,0L677,28L695,28L695,29L703,29L703,29L714,29L714,29L718,29L718,29L724,29L724,29L732,29L732,29L739,29L739,30L746,30L746,30L748,30L748,31L753,31L753,31L755,31L755,33L757,33L757,33L759,33L759,32L762,32L762,32L770,32L770,32L777,32L777,33L780,33L780,33L787,33L787,34L790,34L790,35L790,35" tabindex="0">
						<title>8r62z0q8</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L695,0L695,13L703,13L703,13L714,13L714,13L718,13L718,13L724,13L724,13L732,13L732,13L739,13L739,13L746,13L746,13L748,13L748,14L753,14L753,14L755,14L755,14L757,14L757,14L762,14L762,14L770,14L770,14L777,14L777,14L780,14L780,14L787,14L787,14L790,14L790,14L790,14" tabindex="0">
						<title>xz505d9x</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L703,0L703,44L714,44L714,46L718,46L718,47L724,47L724,48L732,48L732,49L733,49L733,48L739,48L739,49L746,49L746,50L748,50L748,51L753,51L753,53L755,53L755,55L757,55L757,55L759,55L759,54L762,54L762,55L769,55L769,54L770,54L770,55L773,55L773,53L777,53L777,54L780,54L780,55L787,55L787,56L790,56L790,57L790,57" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,0L714,0L714,37L715,37L715,36L717,36L717,40L718,40L718,40L724,40L724,40L732,40L732,40L735,40L735,41L739,41L739,42L746,42L746,43L748,43L748,44L753,44L753,45L755,45L755,47L757,47L757,47L762,47L762,47L770,47L770,48L777,48L777,49L780,49L780,49L787,49L787,50L790,50L790,51L790,51" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,0L714,0L714,33L715,33L715,39L717,39L717,38L718,38L718,38L724,38L724,38L732,38L732,38L739,38L739,39L746,39L746,39L748,39L748,40L753,40L753,41L755,41L755,43L757,43L757,43L762,43L762,43L770,43L770,44L777,44L777,45L780,45L780,45L787,45L787,46L790,46L790,47L790,47" tabindex="0">
						<title>xkpw7g6j</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,0L718,0L718,43L724,43L724,44L732,44L732,44L733,44L733,49L739,49L739,50L744,50L744,50L746,50L746,51L748,51L748,52L749,52L749,52L753,52L753,54L755,54L755,56L757,56L757,56L759,56L759,55L762,55L762,56L770,56L770,57L773,57L773,56L777,56L777,57L780,57L780,58L787,58L787,59L790,59L790,60L790,60" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,0L724,0L724,42L732,42L732,42L733,42L733,45L739,45L739,46L746,46L746,47L748,47L748,48L753,48L753,51L755,51L755,53L757,53L757,52L759,52L759,51L762,51L762,52L767,52L767,51L770,51L770,52L773,52L773,54L776,54L776,54L777,54L777,55L780,55L780,56L787,56L787,57L790,57L790,58L790,58" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,0L732,0L732,45L733,45L733,43L739,43L739,44L746,44L746,45L748,45L748,46L753,46L753,47L754,47L754,50L755,50L755,52L757,52L757,53L759,53L759,52L762,52L762,53L767,53L767,52L770,52L770,53L773,53L773,51L777,51L777,52L780,52L780,53L787,53L787,54L790,54L790,55L790,55" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,0L739,0L739,23L746,23L746,23L748,23L748,24L753,24L753,24L755,24L755,24L757,24L757,24L762,24L762,24L770,24L770,24L777,24L777,24L780,24L780,24L787,24L787,25L790,25L790,25L790,25" tabindex="0">
						<title>8gzzpoyj</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,0L746,0L746,41L748,41L748,42L753,42L753,43L755,43L755,45L757,45L757,45L762,45L762,45L770,45L770,46L777,46L777,47L780,47L780,47L787,47L787,48L790,48L790,49L790,49" tabindex="0">
						<title>x3pk7pk8</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,0L748,0L748,8L753,8L753,8L755,8L755,8L757,8L757,8L762,8L762,8L770,8L770,8L777,8L777,8L780,8L780,8L787,8L787,8L790,8L790,8L790,8" tabindex="0">
						<title>8qodlgdj</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path d="M0,0L753,0L753,49L754,49L754,48L755,48L755,50L757,50L757,50L759,50L759,57L760,57L760,57L762,57L762,58L770,58L770,59L773,59L773,58L777,58L777,59L780,59L780,60L783,60L783,60L787,60L787,61L790,61L790,62L790,62" tabindex="0">
						<title>86pek6wj</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,0L753,0L753,37L755,37L755,39L757,39L757,39L762,39L762,39L770,39L770,39L777,39L777,40L780,40L780,40L787,40L787,41L790,41L790,42L790,42" tabindex="0">
						<title>x7gz6krx</title>
					</path>
				</g>
				<g style="--index: 54;">
					<path d="M0,0L755,0L755,28L757,28L757,28L759,28L759,35L762,35L762,35L770,35L770,35L777,35L777,36L780,36L780,36L787,36L787,37L790,37L790,38L790,38" tabindex="0">
						<title>j4w2lemx</title>
					</path>
				</g>
				<g style="--index: 55;">
					<path d="M0,0L755,0L755,30L757,30L757,30L759,30L759,29L762,29L762,29L770,29L770,29L777,29L777,29L780,29L780,29L787,29L787,30L790,30L790,30L790,30" tabindex="0">
						<title>xyykzywx</title>
					</path>
				</g>
				<g style="--index: 56;">
					<path d="M0,0L757,0L757,57L758,57L758,57L759,57L759,56L762,56L762,57L770,57L770,58L773,58L773,57L777,57L777,58L780,58L780,59L787,59L787,60L790,60L790,61L790,61" tabindex="0">
						<title>8ek6z678</title>
					</path>
				</g>
				<g style="--index: 57;">
					<path d="M0,0L762,0L762,49L766,49L766,48L770,48L770,49L777,49L777,50L780,50L780,50L787,50L787,51L790,51L790,52L790,52" tabindex="0">
						<title>8lzk362x</title>
					</path>
				</g>
				<g style="--index: 58;">
					<path d="M0,0L770,0L770,41L777,41L777,42L780,42L780,42L787,42L787,43L790,43L790,44L790,44" tabindex="0">
						<title>8gzloyyj</title>
					</path>
				</g>
				<g style="--index: 59;">
					<path d="M0,0L777,0L777,31L780,31L780,31L787,31L787,32L790,32L790,33L790,33" tabindex="0">
						<title>j95nmdo8</title>
					</path>
				</g>
				<g style="--index: 60;">
					<path d="M0,0L780,0L780,51L787,51L787,52L790,52L790,53L790,53" tabindex="0">
						<title>xyklwnm8</title>
					</path>
				</g>
				<g style="--index: 61;">
					<path d="M0,0L787,0L787,20L790,20L790,20L790,20" tabindex="0">
						<title>8gzn56rj</title>
					</path>
				</g>
				<g style="--index: 62;">
					<path d="M0,0L790,0L790,31L790,31" tabindex="0">
						<title>8v7p6328</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
