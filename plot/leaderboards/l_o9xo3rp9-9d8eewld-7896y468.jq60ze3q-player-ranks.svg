<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Rank by player for leaderboard l_o9xo3rp9-9d8eewld-7896y468.jq60ze3q</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-01-09</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-02-24</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">50</text>
		</svg>
		<svg viewBox="0 0 2603 50" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 50) scale(1 -1)" style="--count: 51;">
				<g>
					<rect x="0" y="0" width="2603" height="50"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,0L4,0L4,1L30,1L30,0L102,0L102,1L839,1L839,2L841,2L841,3L845,3L845,4L859,4L859,5L950,5L950,6L976,6L976,7L1026,7L1026,8L1044,8L1044,9L1046,9L1046,10L1051,10L1051,11L1053,11L1053,12L1102,12L1102,13L1149,13L1149,14L1393,14L1393,15L1451,15L1451,16L1636,16L1636,17L1642,17L1642,18L1662,18L1662,19L1692,19L1692,20L1714,20L1714,21L1716,21L1716,22L1730,22L1730,23L1796,23L1796,24L1827,24L1827,25L1829,25L1829,26L1913,26L1913,27L1938,27L1938,28L2058,28L2058,29L2075,29L2075,30L2118,30L2118,31L2172,31L2172,32L2246,32L2246,33L2315,33L2315,34L2346,34L2346,35L2399,35L2399,36L2400,36L2400,37L2409,37L2409,38L2455,38L2455,39L2468,39L2468,40L2531,40L2531,41L2580,41L2580,42L2593,42L2593,43L2596,43L2596,45L2603,45L2603,46L2603,46" tabindex="0">
						<title>qj2pq1p8</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,1L4,1L4,0L30,0L30,1L102,1L102,2L839,2L839,3L841,3L841,4L845,4L845,5L859,5L859,6L950,6L950,7L976,7L976,8L1026,8L1026,9L1044,9L1044,10L1046,10L1046,11L1051,11L1051,12L1053,12L1053,13L1102,13L1102,14L1149,14L1149,15L1393,15L1393,16L1451,16L1451,17L1636,17L1636,18L1642,18L1642,19L1662,19L1662,20L1692,20L1692,21L1714,21L1714,22L1716,22L1716,23L1730,23L1730,24L1796,24L1796,25L1827,25L1827,26L1829,26L1829,27L1913,27L1913,28L1938,28L1938,29L2058,29L2058,30L2075,30L2075,31L2118,31L2118,32L2172,32L2172,33L2246,33L2246,34L2315,34L2315,35L2346,35L2346,36L2399,36L2399,37L2400,37L2400,38L2409,38L2409,39L2455,39L2455,40L2468,40L2468,41L2531,41L2531,42L2580,42L2580,43L2593,43L2593,44L2596,44L2596,46L2603,46L2603,47L2603,47" tabindex="0">
						<title>5j5gggn8</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,2L72,2L72,2L102,2L102,3L839,3L839,4L841,4L841,5L845,5L845,6L859,6L859,7L950,7L950,8L976,8L976,9L1026,9L1026,10L1044,10L1044,11L1046,11L1046,12L1051,12L1051,13L1053,13L1053,14L1102,14L1102,15L1149,15L1149,16L1393,16L1393,17L1451,17L1451,18L1636,18L1636,19L1642,19L1642,20L1662,20L1662,21L1692,21L1692,22L1714,22L1714,23L1716,23L1716,24L1730,24L1730,25L1796,25L1796,26L1827,26L1827,27L1829,27L1829,28L1913,28L1913,29L1938,29L1938,30L2058,30L2058,31L2075,31L2075,32L2118,32L2118,33L2172,33L2172,34L2246,34L2246,35L2315,35L2315,36L2346,36L2346,37L2399,37L2399,38L2400,38L2400,39L2409,39L2409,40L2455,40L2455,41L2468,41L2468,42L2531,42L2531,43L2580,43L2580,44L2593,44L2593,45L2596,45L2596,47L2603,47L2603,48L2603,48" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L102,3L102,0L839,0L839,1L841,1L841,2L845,2L845,3L859,3L859,4L950,4L950,5L964,5L964,0L1026,0L1026,1L1046,1L1046,2L1071,2L1071,3L1102,3L1102,4L1827,4L1827,5L2400,5L2400,6L2596,6L2596,7L2603,7" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,4L594,4L594,4L839,4L839,5L841,5L841,6L845,6L845,7L859,7L859,8L950,8L950,9L976,9L976,10L1026,10L1026,11L1044,11L1044,12L1046,12L1046,13L1051,13L1051,14L1053,14L1053,15L1102,15L1102,16L1149,16L1149,17L1393,17L1393,18L1451,18L1451,19L1636,19L1636,20L1642,20L1642,21L1662,21L1662,22L1692,22L1692,23L1714,23L1714,24L1716,24L1716,25L1730,25L1730,26L1796,26L1796,27L1827,27L1827,28L1829,28L1829,29L1913,29L1913,30L1938,30L1938,31L2058,31L2058,32L2075,32L2075,33L2118,33L2118,34L2172,34L2172,35L2246,35L2246,36L2306,36L2306,37L2315,37L2315,38L2346,38L2346,39L2399,39L2399,40L2400,40L2400,41L2409,41L2409,42L2455,42L2455,43L2468,43L2468,44L2531,44L2531,45L2580,45L2580,46L2593,46L2593,47L2596,47L2596,49L2603,49L2603,50L2603,50" tabindex="0">
						<title>j9rlkzoj</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,5L839,5L839,0L869,0L869,0L964,0L964,1L976,1L976,2L1026,2L1026,3L1046,3L1046,4L1071,4L1071,5L1102,5L1102,6L1827,6L1827,7L2172,7L2172,8L2400,8L2400,9L2455,9L2455,10L2543,10L2543,11L2596,11L2596,12L2603,12L2603,13L2603,13" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,6L841,6L841,1L845,1L845,2L846,2L846,1L859,1L859,2L964,2L964,3L976,3L976,4L1026,4L1026,5L1044,5L1044,6L1046,6L1046,7L1051,7L1051,8L1053,8L1053,9L1102,9L1102,10L1393,10L1393,11L1642,11L1642,12L1692,12L1692,13L1716,13L1716,14L1730,14L1730,15L1796,15L1796,16L1827,16L1827,17L1913,17L1913,18L2058,18L2058,19L2172,19L2172,20L2315,20L2315,21L2346,21L2346,22L2400,22L2400,23L2409,23L2409,24L2455,24L2455,25L2468,25L2468,26L2531,26L2531,27L2543,27L2543,28L2596,28L2596,30L2603,30L2603,31L2603,31" tabindex="0">
						<title>8146r4r8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,7L845,7L845,1L846,1L846,2L859,2L859,3L950,3L950,4L964,4L964,5L976,5L976,6L1026,6L1026,7L1044,7L1044,8L1046,8L1046,9L1051,9L1051,10L1053,10L1053,11L1102,11L1102,12L1393,12L1393,13L1451,13L1451,14L1636,14L1636,15L1642,15L1642,16L1662,16L1662,17L1692,17L1692,18L1716,18L1716,19L1730,19L1730,20L1796,20L1796,21L1827,21L1827,22L1829,22L1829,23L1913,23L1913,24L1938,24L1938,25L2058,25L2058,26L2172,26L2172,27L2315,27L2315,28L2346,28L2346,29L2399,29L2399,30L2400,30L2400,31L2409,31L2409,32L2455,32L2455,33L2468,33L2468,34L2531,34L2531,35L2543,35L2543,36L2580,36L2580,37L2596,37L2596,39L2603,39L2603,40L2603,40" tabindex="0">
						<title>xy5q62n8</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,8L859,8L859,1L964,1L964,2L976,2L976,3L1026,3L1026,4L1046,4L1046,5L1051,5L1051,6L1071,6L1071,7L1102,7L1102,8L1420,8L1420,9L1642,9L1642,10L1716,10L1716,11L1730,11L1730,12L1796,12L1796,13L1827,13L1827,14L1913,14L1913,15L2172,15L2172,16L2315,16L2315,17L2346,17L2346,18L2400,18L2400,19L2455,19L2455,20L2468,20L2468,21L2543,21L2543,22L2596,22L2596,23L2603,23L2603,24L2603,24" tabindex="0">
						<title>xz9y0z08</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,9L950,9L950,3L964,3L964,4L976,4L976,5L1026,5L1026,6L1044,6L1044,7L1046,7L1046,8L1051,8L1051,9L1053,9L1053,10L1102,10L1102,11L1393,11L1393,12L1451,12L1451,13L1636,13L1636,14L1642,14L1642,15L1692,15L1692,16L1716,16L1716,17L1730,17L1730,18L1796,18L1796,19L1827,19L1827,20L1829,20L1829,21L1913,21L1913,22L1938,22L1938,23L2058,23L2058,24L2172,24L2172,25L2315,25L2315,26L2346,26L2346,27L2399,27L2399,28L2400,28L2400,29L2409,29L2409,30L2455,30L2455,31L2468,31L2468,32L2531,32L2531,33L2543,33L2543,34L2580,34L2580,35L2596,35L2596,37L2603,37L2603,38L2603,38" tabindex="0">
						<title>86vm1mqj</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,10L976,10L976,1L1026,1L1026,2L1046,2L1046,3L1071,3L1071,4L1102,4L1102,5L1827,5L1827,6L2172,6L2172,7L2400,7L2400,8L2455,8L2455,9L2543,9L2543,10L2596,10L2596,11L2603,11" tabindex="0">
						<title>jmo50gy8</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,11L1026,11L1026,0L1046,0L1046,1L1070,1L1070,0L1102,0L1102,1L1111,1L1111,0L1181,0L1181,1L1827,1L1827,2L2603,2" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,12L1044,12L1044,5L1046,5L1046,6L1051,6L1051,7L1053,7L1053,8L1102,8L1102,9L1393,9L1393,10L1642,10L1642,11L1716,11L1716,12L1730,12L1730,13L1796,13L1796,14L1827,14L1827,15L1913,15L1913,16L2172,16L2172,17L2315,17L2315,18L2346,18L2346,19L2400,19L2400,20L2455,20L2455,21L2468,21L2468,22L2543,22L2543,23L2596,23L2596,24L2603,24L2603,25L2603,25" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,13L1046,13L1046,0L1070,0L1070,1L1102,1L1102,2L1181,2L1181,0L1827,0L1827,1L2603,1" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,14L1051,14L1051,5L1071,5L1071,6L1102,6L1102,7L1642,7L1642,8L1716,8L1716,9L1730,9L1730,10L1796,10L1796,11L1827,11L1827,12L1913,12L1913,13L2172,13L2172,14L2346,14L2346,15L2400,15L2400,16L2455,16L2455,17L2468,17L2468,18L2543,18L2543,19L2596,19L2596,20L2603,20L2603,21L2603,21" tabindex="0">
						<title>jn3kw0wx</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,15L1053,15L1053,7L1071,7L1071,2L1102,2L1102,3L1273,3L1273,3L1827,3L1827,4L2603,4" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,16L1102,16L1102,0L1111,0L1111,1L1181,1L1181,2L1827,2L1827,3L2603,3" tabindex="0">
						<title>814zn7l8</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,17L1149,17L1149,13L1393,13L1393,14L1451,14L1451,15L1636,15L1636,16L1642,16L1642,17L1662,17L1662,18L1692,18L1692,19L1716,19L1716,20L1730,20L1730,21L1796,21L1796,22L1827,22L1827,23L1829,23L1829,24L1913,24L1913,25L1938,25L1938,26L2058,26L2058,27L2075,27L2075,28L2118,28L2118,29L2172,29L2172,30L2246,30L2246,31L2315,31L2315,32L2346,32L2346,33L2399,33L2399,34L2400,34L2400,35L2409,35L2409,36L2455,36L2455,37L2468,37L2468,38L2531,38L2531,39L2580,39L2580,40L2593,40L2593,41L2596,41L2596,43L2603,43L2603,44L2603,44" tabindex="0">
						<title>8grypo7x</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,18L1393,18L1393,9L1420,9L1420,8L1642,8L1642,9L1716,9L1716,10L1730,10L1730,11L1796,11L1796,12L1827,12L1827,13L1913,13L1913,14L2172,14L2172,15L2315,15L2315,16L2346,16L2346,17L2400,17L2400,18L2455,18L2455,19L2468,19L2468,20L2543,20L2543,21L2596,21L2596,22L2603,22L2603,23L2603,23" tabindex="0">
						<title>j5vg1ez8</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,19L1451,19L1451,12L1636,12L1636,13L1642,13L1642,14L1692,14L1692,15L1716,15L1716,16L1730,16L1730,17L1796,17L1796,18L1827,18L1827,19L1829,19L1829,20L1913,20L1913,21L1938,21L1938,22L2058,22L2058,23L2172,23L2172,24L2315,24L2315,25L2346,25L2346,26L2399,26L2399,27L2400,27L2400,28L2409,28L2409,29L2455,29L2455,30L2468,30L2468,31L2531,31L2531,32L2543,32L2543,33L2580,33L2580,34L2596,34L2596,36L2603,36L2603,37L2603,37" tabindex="0">
						<title>jpm0rokj</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,20L1636,20L1636,12L1642,12L1642,13L1692,13L1692,14L1716,14L1716,15L1730,15L1730,16L1796,16L1796,17L1827,17L1827,18L1829,18L1829,19L1913,19L1913,20L1938,20L1938,21L2058,21L2058,22L2172,22L2172,23L2315,23L2315,24L2346,24L2346,25L2399,25L2399,26L2400,26L2400,27L2409,27L2409,28L2455,28L2455,29L2468,29L2468,30L2531,30L2531,31L2543,31L2543,32L2580,32L2580,33L2596,33L2596,35L2603,35L2603,36L2603,36" tabindex="0">
						<title>joovynnj</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,21L1642,21L1642,7L1716,7L1716,8L1827,8L1827,9L1913,9L1913,10L2172,10L2172,11L2346,11L2346,12L2400,12L2400,13L2455,13L2455,14L2543,14L2543,15L2596,15L2596,16L2603,16L2603,17L2603,17" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,22L1662,22L1662,16L1692,16L1692,17L1716,17L1716,18L1730,18L1730,19L1796,19L1796,20L1827,20L1827,21L1829,21L1829,22L1913,22L1913,23L1938,23L1938,24L2058,24L2058,25L2172,25L2172,26L2315,26L2315,27L2346,27L2346,28L2399,28L2399,29L2400,29L2400,30L2409,30L2409,31L2455,31L2455,32L2468,32L2468,33L2531,33L2531,34L2543,34L2543,35L2580,35L2580,36L2596,36L2596,38L2603,38L2603,39L2603,39" tabindex="0">
						<title>jm3nrmo8</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,23L1692,23L1692,12L1716,12L1716,13L1730,13L1730,14L1796,14L1796,15L1827,15L1827,16L1913,16L1913,17L2058,17L2058,18L2172,18L2172,19L2315,19L2315,20L2346,20L2346,21L2400,21L2400,22L2409,22L2409,23L2455,23L2455,24L2468,24L2468,25L2543,25L2543,26L2596,26L2596,28L2603,28L2603,29L2603,29" tabindex="0">
						<title>8rl7w568</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,24L1714,24L1714,20L1716,20L1716,21L1730,21L1730,22L1796,22L1796,23L1827,23L1827,24L1829,24L1829,25L1913,25L1913,26L1938,26L1938,27L2058,27L2058,28L2075,28L2075,29L2118,29L2118,30L2172,30L2172,31L2246,31L2246,32L2315,32L2315,33L2346,33L2346,34L2399,34L2399,35L2400,35L2400,36L2409,36L2409,37L2455,37L2455,38L2468,38L2468,39L2531,39L2531,40L2580,40L2580,41L2593,41L2593,42L2596,42L2596,44L2603,44L2603,45L2603,45" tabindex="0">
						<title>8w00vw4j</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,25L1716,25L1716,7L1827,7L1827,8L2172,8L2172,9L2346,9L2346,10L2400,10L2400,11L2455,11L2455,12L2543,12L2543,13L2596,13L2596,14L2603,14L2603,15L2603,15" tabindex="0">
						<title>xz00rqe8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,26L1730,26L1730,9L1796,9L1796,10L1827,10L1827,11L1913,11L1913,12L2172,12L2172,13L2346,13L2346,14L2400,14L2400,15L2455,15L2455,16L2468,16L2468,17L2543,17L2543,18L2596,18L2596,19L2603,19L2603,20L2603,20" tabindex="0">
						<title>xk1oze6j</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,27L1796,27L1796,9L1827,9L1827,10L1913,10L1913,11L2172,11L2172,12L2346,12L2346,13L2400,13L2400,14L2455,14L2455,15L2468,15L2468,16L2543,16L2543,17L2596,17L2596,18L2603,18L2603,19L2603,19" tabindex="0">
						<title>8g0ezgyx</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,28L1827,28L1827,0L1877,0L1877,0L1981,0L1981,0L2603,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,29L1829,29L1829,18L1913,18L1913,19L1938,19L1938,20L2058,20L2058,21L2172,21L2172,22L2315,22L2315,23L2346,23L2346,24L2400,24L2400,25L2409,25L2409,26L2455,26L2455,27L2468,27L2468,28L2531,28L2531,29L2543,29L2543,30L2596,30L2596,32L2603,32L2603,33L2603,33" tabindex="0">
						<title>810yp1px</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,30L1913,30L1913,9L2172,9L2172,10L2346,10L2346,11L2400,11L2400,12L2455,12L2455,13L2543,13L2543,14L2596,14L2596,15L2603,15L2603,16L2603,16" tabindex="0">
						<title>j9pkl7vx</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,31L1938,31L1938,19L2058,19L2058,20L2172,20L2172,21L2315,21L2315,22L2346,22L2346,23L2400,23L2400,24L2409,24L2409,25L2455,25L2455,26L2468,26L2468,27L2531,27L2531,28L2543,28L2543,29L2596,29L2596,31L2603,31L2603,32L2603,32" tabindex="0">
						<title>8ew394p8</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,32L2058,32L2058,17L2172,17L2172,18L2315,18L2315,19L2346,19L2346,20L2400,20L2400,21L2409,21L2409,22L2455,22L2455,23L2468,23L2468,24L2543,24L2543,25L2596,25L2596,27L2603,27L2603,28L2603,28" tabindex="0">
						<title>8eek2l78</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,33L2075,33L2075,27L2172,27L2172,28L2315,28L2315,29L2346,29L2346,30L2399,30L2399,31L2400,31L2400,32L2409,32L2409,33L2455,33L2455,34L2468,34L2468,35L2531,35L2531,36L2543,36L2543,37L2580,37L2580,38L2596,38L2596,40L2603,40L2603,41L2603,41" tabindex="0">
						<title>xkp1dv9j</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,34L2118,34L2118,28L2172,28L2172,29L2315,29L2315,30L2346,30L2346,31L2399,31L2399,32L2400,32L2400,33L2409,33L2409,34L2455,34L2455,35L2468,35L2468,36L2531,36L2531,37L2543,37L2543,38L2580,38L2580,39L2596,39L2596,41L2603,41L2603,42L2603,42" tabindex="0">
						<title>jp6yqok8</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,35L2172,35L2172,6L2400,6L2400,7L2455,7L2455,8L2543,8L2543,9L2596,9L2596,10L2603,10" tabindex="0">
						<title>j06ll3wj</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,36L2246,36L2246,30L2315,30L2315,31L2346,31L2346,32L2399,32L2399,33L2400,33L2400,34L2409,34L2409,35L2455,35L2455,36L2468,36L2468,37L2531,37L2531,38L2543,38L2543,8L2596,8L2596,9L2603,9" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,37L2306,37L2306,36L2315,36L2315,37L2346,37L2346,38L2399,38L2399,39L2400,39L2400,40L2409,40L2409,41L2455,41L2455,42L2468,42L2468,43L2531,43L2531,44L2580,44L2580,45L2593,45L2593,46L2596,46L2596,48L2603,48L2603,49L2603,49" tabindex="0">
						<title>j465mqd8</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,38L2315,38L2315,15L2346,15L2346,16L2400,16L2400,17L2455,17L2455,18L2468,18L2468,19L2543,19L2543,20L2596,20L2596,21L2603,21L2603,22L2603,22" tabindex="0">
						<title>8dpdey58</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,39L2346,39L2346,9L2400,9L2400,10L2455,10L2455,11L2543,11L2543,12L2596,12L2596,13L2603,13L2603,14L2603,14" tabindex="0">
						<title>86rpw3p8</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,40L2399,40L2399,25L2400,25L2400,26L2409,26L2409,27L2455,27L2455,28L2468,28L2468,29L2531,29L2531,30L2543,30L2543,31L2596,31L2596,33L2603,33L2603,34L2603,34" tabindex="0">
						<title>8gor462x</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,41L2400,41L2400,5L2603,5" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,42L2409,42L2409,21L2455,21L2455,22L2468,22L2468,23L2543,23L2543,24L2596,24L2596,26L2603,26L2603,27L2603,27" tabindex="0">
						<title>joneez78</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,43L2455,43L2455,7L2596,7L2596,8L2603,8" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,44L2468,44L2468,15L2543,15L2543,16L2596,16L2596,17L2603,17L2603,18L2603,18" tabindex="0">
						<title>8w3439qj</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,45L2531,45L2531,26L2543,26L2543,27L2596,27L2596,29L2603,29L2603,30L2603,30" tabindex="0">
						<title>jm6vm048</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,46L2580,46L2580,32L2596,32L2596,34L2603,34L2603,35L2603,35" tabindex="0">
						<title>j2p712o8</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,47L2593,47L2593,40L2596,40L2596,42L2603,42L2603,43L2603,43" tabindex="0">
						<title>8deok9lj</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,48L2596,48L2596,25L2603,25L2603,26L2603,26" tabindex="0">
						<title>jo1w5e0x</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,49L2596,49L2596,6L2603,6" tabindex="0">
						<title>x333znex</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,50L2603,50L2603,12L2603,12" tabindex="0">
						<title>j9v39qwx</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
