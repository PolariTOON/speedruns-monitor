<svg xmlns="http://www.w3.org/2000/svg" lang="en" style="color-scheme: dark light;">
	<title>Time by player for leaderboard l_o9xo3rp9-9d8eewld-7896y468.5lmkgmjq</title>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject &gt; div {
			position: absolute;
			inset: 0 auto auto 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg {
			width: calc(100% - 40px);
			height: calc(100% - 40px);
			margin: 20px;
			padding: 10px;
			border: 1px dashed var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			async function importDataScript(dataScriptUrl) {
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl);
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleError(event) {
						delete window[name];
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			document.addEventListener("DOMContentLoaded", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				const {players, leaderboards} = await (async () =&gt; {
					try {
						const cachedPlayers = sessionStorage.getItem(playersKey);
						const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
						if (cachedPlayers == null || cachedLeaderboards == null) {
							throw new Error();
						}
						const players = JSON.parse(cachedPlayers);
						const leaderboards = JSON.parse(cachedLeaderboards);
						return {players, leaderboards};
					} catch {}
					try {
						const players = Object.create(null);
						const leaderboards = Object.create(null);
						const games = ["9d3rrxyd", "w6jl2ned"];
						for (const gameId of games) {
							const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`);
							const versions = data.variables.data.find((variable) =&gt; {
								return variable.name === "Version";
							});
							const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
								return [level.id, level];
							}));
							const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
								return [category.id, category];
							}));
							const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
								return [variable.id, variable];
							}));
							console.log(`Got game`);
							await new Promise((resolve) =&gt; {
								setTimeout(resolve, 800);
							});
							const slice = 200;
							for (let offset = 0;; offset += slice) {
								const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`);
								const {size} = pagination;
								if (size === 0) {
									break;
								}
								for (const run of data) {
									const status = run.status.status;
									if (status == null || status === "new") {
										continue;
									}
									const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
									const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
									players[player] ??= playerName;
									const level = run.level;
									const category = run.category;
									const values = Object.entries(run.values).filter(([variable]) =&gt; {
										return variables[variable]?.["is-subcategory"] ?? false;
									}).map(([variable, value]) =&gt; {
										return `-${variable}.${value}`;
									});
									const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
									const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
									const categoryName = categories[run.category]?.name ?? null;
									const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
										return variables[variable]?.["is-subcategory"] ?? false;
									}).map(([variable, value]) =&gt; {
										return variables[variable]?.values.values[value]?.label ?? null;
									}).filter((valueName) =&gt; {
										return valueName != null;
									});
									const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
									leaderboards[leaderboard] ??= leaderboardName;
								}
								console.log(`Got runs ${offset}-${offset + size - 1}`);
								await new Promise((resolve) =&gt; {
									setTimeout(resolve, 800);
								});
							}
						}
						try {
							const cachedPlayers = JSON.stringify(players);
							const cachedLeaderboards = JSON.stringify(leaderboards);
							sessionStorage.setItem(playersKey, cachedPlayers);
							sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
						} catch {}
						return {players, leaderboards};
					} catch {}
					const players = null;
					const leaderboards = null;
					return {players, leaderboards};
				})();
				if (players == null || leaderboards == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%">
		<svg viewBox="0 0 2060 35527" preserveAspectRatio="none" overflow="visible">
			<g transform="scale(1 -1)" transform-origin="center center" style="--count: 12;">
				<g style="--index: 0;">
					<path d="M0,35527L67,35527L67,28483" tabindex="0">
						<title>y8dgoe98</title>
					</path>
					<rect x="0" y="28483" width="67" height="7044"/>
					<path d="M0,35527L0,35527" tabindex="0">
						<title>05:55.27 on 2018-07-13</title>
					</path>
					<line x1="0" y1="35527" x2="2060" y2="35527"/>
					<line x1="0" y1="0" x2="0" y2="35527"/>
					<path d="M67,28483L67,28483" tabindex="0">
						<title>04:44.83 on 2018-09-18</title>
					</path>
					<line x1="0" y1="28483" x2="2060" y2="28483"/>
					<line x1="67" y1="0" x2="67" y2="35527"/>
				</g>
				<g style="--index: 1;">
					<path d="M689,20393" tabindex="0">
						<title>x356nrej</title>
					</path>
					<rect x="689" y="20393" width="0" height="0"/>
					<path d="M689,20393L689,20393" tabindex="0">
						<title>03:23.93 on 2020-06-01</title>
					</path>
					<line x1="0" y1="20393" x2="2060" y2="20393"/>
					<line x1="689" y1="0" x2="689" y2="35527"/>
				</g>
				<g style="--index: 2;">
					<path d="M777,25342" tabindex="0">
						<title>8dwnyqoj</title>
					</path>
					<rect x="777" y="25342" width="0" height="0"/>
					<path d="M777,25342L777,25342" tabindex="0">
						<title>04:13.42 on 2020-08-28</title>
					</path>
					<line x1="0" y1="25342" x2="2060" y2="25342"/>
					<line x1="777" y1="0" x2="777" y2="35527"/>
				</g>
				<g style="--index: 3;">
					<path d="M842,17055L911,17055L911,14465L926,14465L926,14065" tabindex="0">
						<title>xkon93k8</title>
					</path>
					<rect x="842" y="14065" width="84" height="2990"/>
					<path d="M842,17055L842,17055" tabindex="0">
						<title>02:50.55 on 2020-11-01</title>
					</path>
					<line x1="0" y1="17055" x2="2060" y2="17055"/>
					<line x1="842" y1="0" x2="842" y2="35527"/>
					<path d="M911,14465L911,14465" tabindex="0">
						<title>02:24.65 on 2021-01-09</title>
					</path>
					<line x1="0" y1="14465" x2="2060" y2="14465"/>
					<line x1="911" y1="0" x2="911" y2="35527"/>
					<path d="M926,14065L926,14065" tabindex="0">
						<title>02:20.65 on 2021-01-24</title>
					</path>
					<line x1="0" y1="14065" x2="2060" y2="14065"/>
					<line x1="926" y1="0" x2="926" y2="35527"/>
				</g>
				<g style="--index: 4;">
					<path d="M868,19891L909,19891L909,16075" tabindex="0">
						<title>x7q00668</title>
					</path>
					<rect x="868" y="16075" width="41" height="3816"/>
					<path d="M868,19891L868,19891" tabindex="0">
						<title>03:18.91 on 2020-11-27</title>
					</path>
					<line x1="0" y1="19891" x2="2060" y2="19891"/>
					<line x1="868" y1="0" x2="868" y2="35527"/>
					<path d="M909,16075L909,16075" tabindex="0">
						<title>02:40.75 on 2021-01-07</title>
					</path>
					<line x1="0" y1="16075" x2="2060" y2="16075"/>
					<line x1="909" y1="0" x2="909" y2="35527"/>
				</g>
				<g style="--index: 5;">
					<path d="M897,18751L919,18751L919,14128" tabindex="0">
						<title>814zn7l8</title>
					</path>
					<rect x="897" y="14128" width="22" height="4623"/>
					<path d="M897,18751L897,18751" tabindex="0">
						<title>03:07.51 on 2020-12-26</title>
					</path>
					<line x1="0" y1="18751" x2="2060" y2="18751"/>
					<line x1="897" y1="0" x2="897" y2="35527"/>
					<path d="M919,14128L919,14128" tabindex="0">
						<title>02:21.28 on 2021-01-17</title>
					</path>
					<line x1="0" y1="14128" x2="2060" y2="14128"/>
					<line x1="919" y1="0" x2="919" y2="35527"/>
				</g>
				<g style="--index: 6;">
					<path d="M905,20865" tabindex="0">
						<title>j0np7or8</title>
					</path>
					<rect x="905" y="20865" width="0" height="0"/>
					<path d="M905,20865L905,20865" tabindex="0">
						<title>03:28.65 on 2021-01-03</title>
					</path>
					<line x1="0" y1="20865" x2="2060" y2="20865"/>
					<line x1="905" y1="0" x2="905" y2="35527"/>
				</g>
				<g style="--index: 7;">
					<path d="M970,13241" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
					<rect x="970" y="13241" width="0" height="0"/>
					<path d="M970,13241L970,13241" tabindex="0">
						<title>02:12.41 on 2021-03-09</title>
					</path>
					<line x1="0" y1="13241" x2="2060" y2="13241"/>
					<line x1="970" y1="0" x2="970" y2="35527"/>
				</g>
				<g style="--index: 8;">
					<path d="M1454,12969" tabindex="0">
						<title>xk3m6d68</title>
					</path>
					<rect x="1454" y="12969" width="0" height="0"/>
					<path d="M1454,12969L1454,12969" tabindex="0">
						<title>02:09.69 on 2022-07-06</title>
					</path>
					<line x1="0" y1="12969" x2="2060" y2="12969"/>
					<line x1="1454" y1="0" x2="1454" y2="35527"/>
				</g>
				<g style="--index: 9;">
					<path d="M1457,16611L1823,16611L1823,12798" tabindex="0">
						<title>j4235d5x</title>
					</path>
					<rect x="1457" y="12798" width="366" height="3813"/>
					<path d="M1457,16611L1457,16611" tabindex="0">
						<title>02:46.11 on 2022-07-09</title>
					</path>
					<line x1="0" y1="16611" x2="2060" y2="16611"/>
					<line x1="1457" y1="0" x2="1457" y2="35527"/>
					<path d="M1823,12798L1823,12798" tabindex="0">
						<title>02:07.98 on 2023-07-10</title>
					</path>
					<line x1="0" y1="12798" x2="2060" y2="12798"/>
					<line x1="1823" y1="0" x2="1823" y2="35527"/>
				</g>
				<g style="--index: 10;">
					<path d="M1992,11965" tabindex="0">
						<title>jn2m23wj</title>
					</path>
					<rect x="1992" y="11965" width="0" height="0"/>
					<path d="M1992,11965L1992,11965" tabindex="0">
						<title>01:59.65 on 2023-12-26</title>
					</path>
					<line x1="0" y1="11965" x2="2060" y2="11965"/>
					<line x1="1992" y1="0" x2="1992" y2="35527"/>
				</g>
				<g style="--index: 11;">
					<path d="M2060,15403" tabindex="0">
						<title>8w3l21qj</title>
					</path>
					<rect x="2060" y="15403" width="0" height="0"/>
					<path d="M2060,15403L2060,15403" tabindex="0">
						<title>02:34.03 on 2024-03-03</title>
					</path>
					<line x1="0" y1="15403" x2="2060" y2="15403"/>
					<line x1="2060" y1="0" x2="2060" y2="35527"/>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
