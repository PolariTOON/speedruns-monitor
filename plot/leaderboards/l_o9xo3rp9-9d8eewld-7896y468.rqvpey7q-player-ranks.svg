<svg xmlns="http://www.w3.org/2000/svg" lang="en" style="color-scheme: dark light;">
	<title>Rank by player for leaderboard l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject &gt; div {
			position: absolute;
			left: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg {
			width: calc(100% - 40px);
			height: calc(100% - 40px);
			margin: 20px;
			padding: 10px;
			border: 1px dashed var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: var(--tier, #0000);
			stroke: none;
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%">
		<svg viewBox="0 0 2431 34" preserveAspectRatio="none" overflow="visible">
			<g transform="scale(1 -1)" transform-origin="center center" style="--count: 35;">
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,0L99,0L99,1L860,1L860,2L1033,2L1033,3L1047,3L1047,5L1080,5L1080,6L1138,6L1138,7L1141,7L1141,8L1478,8L1478,9L1532,9L1532,10L1600,10L1600,11L1636,11L1636,12L1637,12L1637,13L1694,13L1694,14L1767,14L1767,15L1773,15L1773,16L1880,16L1880,17L1932,17L1932,18L2007,18L2007,19L2201,19L2201,20L2240,20L2240,21L2297,21L2297,22L2336,22L2336,23L2404,23L2404,24L2408,24L2408,25L2431,25L2431,26L2431,26" tabindex="0">
						<title>5j5gggn8</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,1L2,1L2,1L99,1L99,2L860,2L860,3L1033,3L1033,4L1047,4L1047,6L1080,6L1080,7L1138,7L1138,8L1141,8L1141,9L1478,9L1478,10L1532,10L1532,11L1600,11L1600,12L1618,12L1618,13L1636,13L1636,14L1637,14L1637,15L1658,15L1658,16L1694,16L1694,17L1767,17L1767,18L1773,18L1773,19L1880,19L1880,20L1932,20L1932,21L2007,21L2007,22L2201,22L2201,23L2240,23L2240,24L2297,24L2297,25L2336,25L2336,26L2404,26L2404,27L2408,27L2408,28L2431,28L2431,29L2431,29" tabindex="0">
						<title>qj2pq1p8</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,2L66,2L66,2L99,2L99,3L734,3L734,4L860,4L860,5L1033,5L1033,6L1047,6L1047,8L1080,8L1080,9L1138,9L1138,10L1141,10L1141,11L1478,11L1478,12L1532,12L1532,13L1600,13L1600,14L1618,14L1618,15L1636,15L1636,16L1637,16L1637,17L1658,17L1658,18L1664,18L1664,19L1694,19L1694,20L1699,20L1699,21L1767,21L1767,22L1773,22L1773,23L1880,23L1880,24L1932,24L1932,25L2007,25L2007,26L2201,26L2201,27L2240,27L2240,28L2297,28L2297,29L2300,29L2300,30L2336,30L2336,31L2404,31L2404,32L2408,32L2408,33L2431,33L2431,34L2431,34" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L99,3L99,0L1006,0L1006,1L1047,1L1047,2L1080,2L1080,3L1082,3L1082,4L1138,4L1138,5L1473,5L1473,6L1532,6L1532,7L1694,7L1694,8L1773,8L1773,9L2007,9L2007,10L2201,10L2201,11L2336,11L2336,12L2404,12L2404,13L2409,13L2409,14L2431,14L2431,15L2431,15" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,4L734,4L734,3L860,3L860,4L1033,4L1033,5L1047,5L1047,7L1080,7L1080,8L1138,8L1138,9L1141,9L1141,10L1478,10L1478,11L1532,11L1532,12L1600,12L1600,13L1618,13L1618,14L1636,14L1636,15L1637,15L1637,16L1658,16L1658,17L1694,17L1694,18L1699,18L1699,19L1767,19L1767,20L1773,20L1773,21L1880,21L1880,22L1932,22L1932,23L2007,23L2007,24L2201,24L2201,25L2240,25L2240,26L2297,26L2297,27L2336,27L2336,28L2404,28L2404,29L2408,29L2408,30L2431,30L2431,31L2431,31" tabindex="0">
						<title>j9rlkzoj</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,5L860,5L860,1L862,1L862,1L1006,1L1006,0L1047,0L1047,1L1082,1L1082,2L1138,2L1138,3L1473,3L1473,4L1533,4L1533,5L1694,5L1694,6L1773,6L1773,7L2007,7L2007,8L2306,8L2306,9L2336,9L2336,10L2404,10L2404,11L2409,11L2409,12L2431,12L2431,13L2431,13" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,6L1033,6L1033,2L1047,2L1047,3L1080,3L1080,4L1082,4L1082,5L1138,5L1138,6L1148,6L1148,6L1473,6L1473,7L1478,7L1478,8L1532,8L1532,9L1636,9L1636,10L1694,10L1694,11L1767,11L1767,12L1773,12L1773,13L1880,13L1880,14L2007,14L2007,15L2201,15L2201,16L2336,16L2336,17L2404,17L2404,18L2408,18L2408,19L2431,19L2431,20L2431,20" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,7L1047,7L1047,0L1080,0L1080,0L1138,0L1138,1L1166,1L1166,1L1167,1L1167,0L1593,0L1593,1L1694,1L1694,2L2404,2L2404,3L2430,3L2430,4L2431,4" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,8L1047,8L1047,4L1080,4L1080,5L1082,5L1082,1L1138,1L1138,2L1476,2L1476,3L1536,3L1536,4L1694,4L1694,5L2007,5L2007,6L2306,6L2306,7L2336,7L2336,8L2404,8L2404,9L2409,9L2409,10L2431,10" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,9L1080,9L1080,2L1082,2L1082,3L1138,3L1138,4L1473,4L1473,5L1532,5L1532,6L1694,6L1694,7L1773,7L1773,8L2007,8L2007,9L2201,9L2201,10L2336,10L2336,11L2404,11L2404,12L2409,12L2409,13L2431,13L2431,14L2431,14" tabindex="0">
						<title>86ngl5wx</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,10L1138,10L1138,0L1166,0L1166,0L1167,0L1167,1L1593,1L1593,0L2047,0L2047,1L2404,1L2404,2L2431,2" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,11L1141,11L1141,7L1473,7L1473,3L1476,3L1476,2L1694,2L1694,3L2007,3L2007,4L2306,4L2306,5L2336,5L2336,6L2404,6L2404,7L2409,7L2409,8L2431,8" tabindex="0">
						<title>8grypo7x</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,12L1478,12L1478,7L1532,7L1532,8L1636,8L1636,9L1694,9L1694,10L1767,10L1767,11L1773,11L1773,12L2007,12L2007,13L2201,13L2201,14L2336,14L2336,15L2404,15L2404,16L2408,16L2408,17L2431,17L2431,18L2431,18" tabindex="0">
						<title>8g5g6g1j</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,13L1532,13L1532,5L1533,5L1533,4L1536,4L1536,3L1694,3L1694,4L2007,4L2007,5L2306,5L2306,6L2336,6L2336,7L2404,7L2404,8L2409,8L2409,9L2431,9" tabindex="0">
						<title>8w1d07qx</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,14L1600,14L1600,10L1636,10L1636,11L1637,11L1637,12L1694,12L1694,13L1767,13L1767,14L1773,14L1773,15L1880,15L1880,16L2007,16L2007,17L2201,17L2201,18L2240,18L2240,19L2297,19L2297,20L2336,20L2336,21L2404,21L2404,22L2408,22L2408,23L2431,23L2431,24L2431,24" tabindex="0">
						<title>8r36oog8</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,15L1618,15L1618,12L1636,12L1636,13L1637,13L1637,14L1658,14L1658,15L1694,15L1694,16L1767,16L1767,17L1773,17L1773,18L1880,18L1880,19L1932,19L1932,20L2007,20L2007,21L2201,21L2201,22L2240,22L2240,23L2297,23L2297,24L2336,24L2336,25L2404,25L2404,26L2408,26L2408,27L2431,27L2431,28L2431,28" tabindex="0">
						<title>8gmn55y8</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,16L1636,16L1636,8L1694,8L1694,9L1773,9L1773,10L2007,10L2007,11L2201,11L2201,12L2336,12L2336,13L2404,13L2404,14L2409,14L2409,15L2431,15L2431,16L2431,16" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,17L1637,17L1637,11L1694,11L1694,12L1767,12L1767,13L1773,13L1773,14L1880,14L1880,15L2007,15L2007,16L2201,16L2201,17L2336,17L2336,18L2404,18L2404,19L2408,19L2408,20L2431,20L2431,21L2431,21" tabindex="0">
						<title>xk3knqk8</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,18L1658,18L1658,14L1694,14L1694,15L1767,15L1767,16L1773,16L1773,17L1880,17L1880,18L1932,18L1932,19L2007,19L2007,20L2201,20L2201,21L2240,21L2240,22L2297,22L2297,23L2336,23L2336,24L2404,24L2404,25L2408,25L2408,26L2431,26L2431,27L2431,27" tabindex="0">
						<title>8dgdoo58</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,19L1664,19L1664,18L1694,18L1694,19L1699,19L1699,20L1767,20L1767,21L1773,21L1773,22L1880,22L1880,23L1932,23L1932,24L2007,24L2007,25L2201,25L2201,26L2240,26L2240,27L2297,27L2297,28L2336,28L2336,29L2404,29L2404,30L2408,30L2408,31L2431,31L2431,32L2431,32" tabindex="0">
						<title>x7wpmr68</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,20L1694,20L1694,1L2047,1L2047,0L2404,0L2404,0L2405,0L2405,1L2406,1L2406,1L2410,1L2410,0L2431,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,21L1699,21L1699,18L1767,18L1767,19L1773,19L1773,20L1880,20L1880,21L1932,21L1932,22L2007,22L2007,23L2201,23L2201,24L2240,24L2240,25L2297,25L2297,26L2336,26L2336,27L2404,27L2404,28L2408,28L2408,29L2431,29L2431,30L2431,30" tabindex="0">
						<title>8rl3eog8</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,22L1767,22L1767,10L1773,10L1773,11L2007,11L2007,12L2201,12L2201,13L2336,13L2336,14L2404,14L2404,15L2408,15L2408,16L2431,16L2431,17L2431,17" tabindex="0">
						<title>8ewg6np8</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,23L1773,23L1773,6L2007,6L2007,7L2306,7L2306,8L2336,8L2336,9L2404,9L2404,10L2409,10L2409,11L2431,11" tabindex="0">
						<title>xk1oze6j</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,24L1880,24L1880,13L2007,13L2007,14L2201,14L2201,15L2336,15L2336,16L2404,16L2404,17L2408,17L2408,18L2431,18L2431,19L2431,19" tabindex="0">
						<title>x3wz4ykj</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,25L1932,25L1932,17L2007,17L2007,18L2201,18L2201,19L2240,19L2240,20L2297,20L2297,21L2336,21L2336,22L2404,22L2404,23L2408,23L2408,24L2431,24L2431,25L2431,25" tabindex="0">
						<title>8ew394p8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,26L2007,26L2007,3L2404,3L2404,4L2430,4L2430,5L2431,5" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,27L2201,27L2201,9L2306,9L2306,4L2336,4L2336,5L2404,5L2404,6L2409,6L2409,7L2431,7" tabindex="0">
						<title>8dpl6o58</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,28L2240,28L2240,18L2336,18L2336,19L2404,19L2404,20L2408,20L2408,21L2431,21L2431,22L2431,22" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,29L2297,29L2297,19L2336,19L2336,20L2404,20L2404,21L2408,21L2408,22L2431,22L2431,23L2431,23" tabindex="0">
						<title>j46k93w8</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,30L2300,30L2300,29L2336,29L2336,30L2404,30L2404,31L2408,31L2408,32L2431,32L2431,33L2431,33" tabindex="0">
						<title>j465mqd8</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,31L2336,31L2336,4L2404,4L2404,5L2409,5L2409,6L2431,6" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,32L2404,32L2404,1L2405,1L2405,0L2406,0L2406,0L2407,0L2407,0L2410,0L2410,1L2431,1" tabindex="0">
						<title>86rpw3p8</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,33L2408,33L2408,15L2409,15L2409,5L2410,5L2410,5L2430,5L2430,3L2431,3" tabindex="0">
						<title>j467y458</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,34L2431,34L2431,12L2431,12" tabindex="0">
						<title>j0ewnqw8</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
