<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Time by player for leaderboard l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 80;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-01-09</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-06-29</text>
		</svg>
		<svg viewBox="0 0 80 20">
			<text x="40" y="10" dx="0" dy="2" textLength="80" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">00:00.00</text>
		</svg>
		<svg viewBox="0 0 80 20">
			<text x="40" y="10" dx="0" dy="2" textLength="80" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">00:30.36</text>
		</svg>
		<svg viewBox="0 0 2728 3036" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 3036) scale(1 -1)" style="--count: 48;">
				<g>
					<rect x="0" y="0" width="2728" height="1700" tabindex="0" data-tier="diamond">
						<title>00:17.00 for diamond</title>
					</rect>
					<rect x="0" y="1700" width="2728" height="1336" tabindex="0" data-tier="gold">
						<title>00:35.00 for gold</title>
					</rect>
					<rect x="0" y="3036" width="2728" height="0" tabindex="0" data-tier="silver">
						<title>00:47.00 for silver</title>
					</rect>
					<rect x="0" y="3036" width="2728" height="0" tabindex="0" data-tier="bronze">
						<title>01:10.00 for bronze</title>
					</rect>
				</g>
				<g style="--index: 0;">
					<path d="M0,1905" tabindex="0">
						<title>7j47r25j</title>
					</path>
					<rect x="0" y="1905" width="0" height="0"/>
					<path d="M0,1905L0,1905" tabindex="0">
						<title>00:19.05 on 2018-01-09</title>
					</path>
					<line x1="0" y1="1905" x2="2728" y2="1905"/>
					<line x1="0" y1="0" x2="0" y2="3036"/>
				</g>
				<g style="--index: 1;">
					<path d="M94,3036" tabindex="0">
						<title>18qg9ndx</title>
					</path>
					<rect x="94" y="3036" width="0" height="0"/>
					<path d="M94,3036L94,3036" tabindex="0">
						<title>00:30.36 on 2018-04-13</title>
					</path>
					<line x1="0" y1="3036" x2="2728" y2="3036"/>
					<line x1="94" y1="0" x2="94" y2="3036"/>
				</g>
				<g style="--index: 2;">
					<path d="M105,1802L962,1802L962,1398" tabindex="0">
						<title>y8dgoe98</title>
					</path>
					<rect x="105" y="1398" width="857" height="404"/>
					<path d="M105,1802L105,1802" tabindex="0">
						<title>00:18.02 on 2018-04-24</title>
					</path>
					<line x1="0" y1="1802" x2="2728" y2="1802"/>
					<line x1="105" y1="0" x2="105" y2="3036"/>
					<path d="M962,1398L962,1398" tabindex="0">
						<title>00:13.98 on 2020-08-28</title>
					</path>
					<line x1="0" y1="1398" x2="2728" y2="1398"/>
					<line x1="962" y1="0" x2="962" y2="3036"/>
				</g>
				<g style="--index: 3;">
					<path d="M864,1848L922,1848L922,1659L958,1659L958,1556L1102,1556L1102,1437L2721,1437L2721,1370" tabindex="0">
						<title>x356nrej</title>
					</path>
					<rect x="864" y="1370" width="1857" height="478"/>
					<path d="M864,1848L864,1848" tabindex="0">
						<title>00:18.48 on 2020-05-22</title>
					</path>
					<line x1="0" y1="1848" x2="2728" y2="1848"/>
					<line x1="864" y1="0" x2="864" y2="3036"/>
					<path d="M922,1659L922,1659" tabindex="0">
						<title>00:16.59 on 2020-07-19</title>
					</path>
					<line x1="0" y1="1659" x2="2728" y2="1659"/>
					<line x1="922" y1="0" x2="922" y2="3036"/>
					<path d="M958,1556L958,1556" tabindex="0">
						<title>00:15.56 on 2020-08-24</title>
					</path>
					<line x1="0" y1="1556" x2="2728" y2="1556"/>
					<line x1="958" y1="0" x2="958" y2="3036"/>
					<path d="M1102,1437L1102,1437" tabindex="0">
						<title>00:14.37 on 2021-01-15</title>
					</path>
					<line x1="0" y1="1437" x2="2728" y2="1437"/>
					<line x1="1102" y1="0" x2="1102" y2="3036"/>
					<path d="M2721,1370L2721,1370" tabindex="0">
						<title>00:13.70 on 2025-06-22</title>
					</path>
					<line x1="0" y1="1370" x2="2728" y2="1370"/>
					<line x1="2721" y1="0" x2="2721" y2="3036"/>
				</g>
				<g style="--index: 4;">
					<path d="M922,1766L924,1766L924,1463" tabindex="0">
						<title>18vm2258</title>
					</path>
					<rect x="922" y="1463" width="2" height="303"/>
					<path d="M922,1766L922,1766" tabindex="0">
						<title>00:17.66 on 2020-07-19</title>
					</path>
					<line x1="0" y1="1766" x2="2728" y2="1766"/>
					<line x1="922" y1="0" x2="922" y2="3036"/>
					<path d="M924,1463L924,1463" tabindex="0">
						<title>00:14.63 on 2020-07-21</title>
					</path>
					<line x1="0" y1="1463" x2="2728" y2="1463"/>
					<line x1="924" y1="0" x2="924" y2="3036"/>
				</g>
				<g style="--index: 5;">
					<path d="M1039,1823L1181,1823L1181,1655" tabindex="0">
						<title>j0np7or8</title>
					</path>
					<rect x="1039" y="1655" width="142" height="168"/>
					<path d="M1039,1823L1039,1823" tabindex="0">
						<title>00:18.23 on 2020-11-13</title>
					</path>
					<line x1="0" y1="1823" x2="2728" y2="1823"/>
					<line x1="1039" y1="0" x2="1039" y2="3036"/>
					<path d="M1181,1655L1181,1655" tabindex="0">
						<title>00:16.55 on 2021-04-04</title>
					</path>
					<line x1="0" y1="1655" x2="2728" y2="1655"/>
					<line x1="1181" y1="0" x2="1181" y2="3036"/>
				</g>
				<g style="--index: 6;">
					<path d="M1046,1338L1173,1338L1173,1266L1633,1266L1633,1085L1640,1085L1640,1051" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
					<rect x="1046" y="1051" width="594" height="287"/>
					<path d="M1046,1338L1046,1338" tabindex="0">
						<title>00:13.38 on 2020-11-20</title>
					</path>
					<line x1="0" y1="1338" x2="2728" y2="1338"/>
					<line x1="1046" y1="0" x2="1046" y2="3036"/>
					<path d="M1173,1266L1173,1266" tabindex="0">
						<title>00:12.66 on 2021-03-27</title>
					</path>
					<line x1="0" y1="1266" x2="2728" y2="1266"/>
					<line x1="1173" y1="0" x2="1173" y2="3036"/>
					<path d="M1633,1085L1633,1085" tabindex="0">
						<title>00:10.85 on 2022-06-30</title>
					</path>
					<line x1="0" y1="1085" x2="2728" y2="1085"/>
					<line x1="1633" y1="0" x2="1633" y2="3036"/>
					<path d="M1640,1051L1640,1051" tabindex="0">
						<title>00:10.51 on 2022-07-07</title>
					</path>
					<line x1="0" y1="1051" x2="2728" y2="1051"/>
					<line x1="1640" y1="0" x2="1640" y2="3036"/>
				</g>
				<g style="--index: 7;">
					<path d="M1049,1576L1097,1576L1097,1387" tabindex="0">
						<title>x7q00668</title>
					</path>
					<rect x="1049" y="1387" width="48" height="189"/>
					<path d="M1049,1576L1049,1576" tabindex="0">
						<title>00:15.76 on 2020-11-23</title>
					</path>
					<line x1="0" y1="1576" x2="2728" y2="1576"/>
					<line x1="1049" y1="0" x2="1049" y2="3036"/>
					<path d="M1097,1387L1097,1387" tabindex="0">
						<title>00:13.87 on 2021-01-10</title>
					</path>
					<line x1="0" y1="1387" x2="2728" y2="1387"/>
					<line x1="1097" y1="0" x2="1097" y2="3036"/>
				</g>
				<g style="--index: 8;">
					<path d="M1071,1703" tabindex="0">
						<title>86ngl5wx</title>
					</path>
					<rect x="1071" y="1703" width="0" height="0"/>
					<path d="M1071,1703L1071,1703" tabindex="0">
						<title>00:17.03 on 2020-12-15</title>
					</path>
					<line x1="0" y1="1703" x2="2728" y2="1703"/>
					<line x1="1071" y1="0" x2="1071" y2="3036"/>
				</g>
				<g style="--index: 9;">
					<path d="M1075,1329" tabindex="0">
						<title>xkon93k8</title>
					</path>
					<rect x="1075" y="1329" width="0" height="0"/>
					<path d="M1075,1329L1075,1329" tabindex="0">
						<title>00:13.29 on 2020-12-19</title>
					</path>
					<line x1="0" y1="1329" x2="2728" y2="1329"/>
					<line x1="1075" y1="0" x2="1075" y2="3036"/>
				</g>
				<g style="--index: 10;">
					<path d="M1148,2410" tabindex="0">
						<title>8grypo7x</title>
					</path>
					<rect x="1148" y="2410" width="0" height="0"/>
					<path d="M1148,2410L1148,2410" tabindex="0">
						<title>00:24.10 on 2021-03-02</title>
					</path>
					<line x1="0" y1="2410" x2="2728" y2="2410"/>
					<line x1="1148" y1="0" x2="1148" y2="3036"/>
				</g>
				<g style="--index: 11;">
					<path d="M1259,2898" tabindex="0">
						<title>x7mk3z6x</title>
					</path>
					<rect x="1259" y="2898" width="0" height="0"/>
					<path d="M1259,2898L1259,2898" tabindex="0">
						<title>00:28.98 on 2021-06-21</title>
					</path>
					<line x1="0" y1="2898" x2="2728" y2="2898"/>
					<line x1="1259" y1="0" x2="1259" y2="3036"/>
				</g>
				<g style="--index: 12;">
					<path d="M1541,1635" tabindex="0">
						<title>x33q437x</title>
					</path>
					<rect x="1541" y="1635" width="0" height="0"/>
					<path d="M1541,1635L1541,1635" tabindex="0">
						<title>00:16.35 on 2022-03-30</title>
					</path>
					<line x1="0" y1="1635" x2="2728" y2="1635"/>
					<line x1="1541" y1="0" x2="1541" y2="3036"/>
				</g>
				<g style="--index: 13;">
					<path d="M1605,1697L1607,1697L1607,1375" tabindex="0">
						<title>866k6d38</title>
					</path>
					<rect x="1605" y="1375" width="2" height="322"/>
					<path d="M1605,1697L1605,1697" tabindex="0">
						<title>00:16.97 on 2022-06-02</title>
					</path>
					<line x1="0" y1="1697" x2="2728" y2="1697"/>
					<line x1="1605" y1="0" x2="1605" y2="3036"/>
					<path d="M1607,1375L1607,1375" tabindex="0">
						<title>00:13.75 on 2022-06-04</title>
					</path>
					<line x1="0" y1="1375" x2="2728" y2="1375"/>
					<line x1="1607" y1="0" x2="1607" y2="3036"/>
				</g>
				<g style="--index: 14;">
					<path d="M1606,2041" tabindex="0">
						<title>8r36oog8</title>
					</path>
					<rect x="1606" y="2041" width="0" height="0"/>
					<path d="M1606,2041L1606,2041" tabindex="0">
						<title>00:20.41 on 2022-06-03</title>
					</path>
					<line x1="0" y1="2041" x2="2728" y2="2041"/>
					<line x1="1606" y1="0" x2="1606" y2="3036"/>
				</g>
				<g style="--index: 15;">
					<path d="M1633,1259L1635,1259L1635,1073" tabindex="0">
						<title>xk3m6d68</title>
					</path>
					<rect x="1633" y="1073" width="2" height="186"/>
					<path d="M1633,1259L1633,1259" tabindex="0">
						<title>00:12.59 on 2022-06-30</title>
					</path>
					<line x1="0" y1="1259" x2="2728" y2="1259"/>
					<line x1="1633" y1="0" x2="1633" y2="3036"/>
					<path d="M1635,1073L1635,1073" tabindex="0">
						<title>00:10.73 on 2022-07-02</title>
					</path>
					<line x1="0" y1="1073" x2="2728" y2="1073"/>
					<line x1="1635" y1="0" x2="1635" y2="3036"/>
				</g>
				<g style="--index: 16;">
					<path d="M1633,1265" tabindex="0">
						<title>jpog5w58</title>
					</path>
					<rect x="1633" y="1265" width="0" height="0"/>
					<path d="M1633,1265L1633,1265" tabindex="0">
						<title>00:12.65 on 2022-06-30</title>
					</path>
					<line x1="0" y1="1265" x2="2728" y2="1265"/>
					<line x1="1633" y1="0" x2="1633" y2="3036"/>
				</g>
				<g style="--index: 17;">
					<path d="M1642,1528" tabindex="0">
						<title>j4235d5x</title>
					</path>
					<rect x="1642" y="1528" width="0" height="0"/>
					<path d="M1642,1528L1642,1528" tabindex="0">
						<title>00:15.28 on 2022-07-09</title>
					</path>
					<line x1="0" y1="1528" x2="2728" y2="1528"/>
					<line x1="1642" y1="0" x2="1642" y2="3036"/>
				</g>
				<g style="--index: 18;">
					<path d="M1647,2292" tabindex="0">
						<title>jooe13ej</title>
					</path>
					<rect x="1647" y="2292" width="0" height="0"/>
					<path d="M1647,2292L1647,2292" tabindex="0">
						<title>00:22.92 on 2022-07-14</title>
					</path>
					<line x1="0" y1="2292" x2="2728" y2="2292"/>
					<line x1="1647" y1="0" x2="1647" y2="3036"/>
				</g>
				<g style="--index: 19;">
					<path d="M1738,1684" tabindex="0">
						<title>xk1oze6j</title>
					</path>
					<rect x="1738" y="1684" width="0" height="0"/>
					<path d="M1738,1684L1738,1684" tabindex="0">
						<title>00:16.84 on 2022-10-13</title>
					</path>
					<line x1="0" y1="1684" x2="2728" y2="1684"/>
					<line x1="1738" y1="0" x2="1738" y2="3036"/>
				</g>
				<g style="--index: 20;">
					<path d="M1743,1639" tabindex="0">
						<title>8v27295j</title>
					</path>
					<rect x="1743" y="1639" width="0" height="0"/>
					<path d="M1743,1639L1743,1639" tabindex="0">
						<title>00:16.39 on 2022-10-18</title>
					</path>
					<line x1="0" y1="1639" x2="2728" y2="1639"/>
					<line x1="1743" y1="0" x2="1743" y2="3036"/>
				</g>
				<g style="--index: 21;">
					<path d="M1797,1854" tabindex="0">
						<title>j9p7powx</title>
					</path>
					<rect x="1797" y="1854" width="0" height="0"/>
					<path d="M1797,1854L1797,1854" tabindex="0">
						<title>00:18.54 on 2022-12-11</title>
					</path>
					<line x1="0" y1="1854" x2="2728" y2="1854"/>
					<line x1="1797" y1="0" x2="1797" y2="3036"/>
				</g>
				<g style="--index: 22;">
					<path d="M1799,1757" tabindex="0">
						<title>8g0kl3yx</title>
					</path>
					<rect x="1799" y="1757" width="0" height="0"/>
					<path d="M1799,1757L1799,1757" tabindex="0">
						<title>00:17.57 on 2022-12-13</title>
					</path>
					<line x1="0" y1="1757" x2="2728" y2="1757"/>
					<line x1="1799" y1="0" x2="1799" y2="3036"/>
				</g>
				<g style="--index: 23;">
					<path d="M1804,2014" tabindex="0">
						<title>8qoz5eoj</title>
					</path>
					<rect x="1804" y="2014" width="0" height="0"/>
					<path d="M1804,2014L1804,2014" tabindex="0">
						<title>00:20.14 on 2022-12-18</title>
					</path>
					<line x1="0" y1="2014" x2="2728" y2="2014"/>
					<line x1="1804" y1="0" x2="1804" y2="3036"/>
				</g>
				<g style="--index: 24;">
					<path d="M1912,1047L2717,1047L2717,1032" tabindex="0">
						<title>jn2m23wj</title>
					</path>
					<rect x="1912" y="1032" width="805" height="15"/>
					<path d="M1912,1047L1912,1047" tabindex="0">
						<title>00:10.47 on 2023-04-05</title>
					</path>
					<line x1="0" y1="1047" x2="2728" y2="1047"/>
					<line x1="1912" y1="0" x2="1912" y2="3036"/>
					<path d="M2717,1032L2717,1032" tabindex="0">
						<title>00:10.32 on 2025-06-18</title>
					</path>
					<line x1="0" y1="1032" x2="2728" y2="1032"/>
					<line x1="2717" y1="0" x2="2717" y2="3036"/>
				</g>
				<g style="--index: 25;">
					<path d="M1938,2590" tabindex="0">
						<title>8ew394p8</title>
					</path>
					<rect x="1938" y="2590" width="0" height="0"/>
					<path d="M1938,2590L1938,2590" tabindex="0">
						<title>00:25.90 on 2023-05-01</title>
					</path>
					<line x1="0" y1="2590" x2="2728" y2="2590"/>
					<line x1="1938" y1="0" x2="1938" y2="3036"/>
				</g>
				<g style="--index: 26;">
					<path d="M1943,2056" tabindex="0">
						<title>jmzwyzex</title>
					</path>
					<rect x="1943" y="2056" width="0" height="0"/>
					<path d="M1943,2056L1943,2056" tabindex="0">
						<title>00:20.56 on 2023-05-06</title>
					</path>
					<line x1="0" y1="2056" x2="2728" y2="2056"/>
					<line x1="1943" y1="0" x2="1943" y2="3036"/>
				</g>
				<g style="--index: 27;">
					<path d="M1975,1442" tabindex="0">
						<title>8w045k3j</title>
					</path>
					<rect x="1975" y="1442" width="0" height="0"/>
					<path d="M1975,1442L1975,1442" tabindex="0">
						<title>00:14.42 on 2023-06-07</title>
					</path>
					<line x1="0" y1="1442" x2="2728" y2="1442"/>
					<line x1="1975" y1="0" x2="1975" y2="3036"/>
				</g>
				<g style="--index: 28;">
					<path d="M2112,1614" tabindex="0">
						<title>86r6og08</title>
					</path>
					<rect x="2112" y="1614" width="0" height="0"/>
					<path d="M2112,1614L2112,1614" tabindex="0">
						<title>00:16.14 on 2023-10-22</title>
					</path>
					<line x1="0" y1="1614" x2="2728" y2="1614"/>
					<line x1="2112" y1="0" x2="2112" y2="3036"/>
				</g>
				<g style="--index: 29;">
					<path d="M2133,2368" tabindex="0">
						<title>8w3gpdvj</title>
					</path>
					<rect x="2133" y="2368" width="0" height="0"/>
					<path d="M2133,2368L2133,2368" tabindex="0">
						<title>00:23.68 on 2023-11-12</title>
					</path>
					<line x1="0" y1="2368" x2="2728" y2="2368"/>
					<line x1="2133" y1="0" x2="2133" y2="3036"/>
				</g>
				<g style="--index: 30;">
					<path d="M2184,2439L2194,2439L2194,1889" tabindex="0">
						<title>8dpl6o58</title>
					</path>
					<rect x="2184" y="1889" width="10" height="550"/>
					<path d="M2184,2439L2184,2439" tabindex="0">
						<title>00:24.39 on 2024-01-02</title>
					</path>
					<line x1="0" y1="2439" x2="2728" y2="2439"/>
					<line x1="2184" y1="0" x2="2184" y2="3036"/>
					<path d="M2194,1889L2194,1889" tabindex="0">
						<title>00:18.89 on 2024-01-12</title>
					</path>
					<line x1="0" y1="1889" x2="2728" y2="1889"/>
					<line x1="2194" y1="0" x2="2194" y2="3036"/>
				</g>
				<g style="--index: 31;">
					<path d="M2246,2111L2543,2111L2543,1325L2662,1325L2662,1283" tabindex="0">
						<title>8w3l21qj</title>
					</path>
					<rect x="2246" y="1283" width="416" height="828"/>
					<path d="M2246,2111L2246,2111" tabindex="0">
						<title>00:21.11 on 2024-03-04</title>
					</path>
					<line x1="0" y1="2111" x2="2728" y2="2111"/>
					<line x1="2246" y1="0" x2="2246" y2="3036"/>
					<path d="M2543,1325L2543,1325" tabindex="0">
						<title>00:13.25 on 2024-12-26</title>
					</path>
					<line x1="0" y1="1325" x2="2728" y2="1325"/>
					<line x1="2543" y1="0" x2="2543" y2="3036"/>
					<path d="M2662,1283L2662,1283" tabindex="0">
						<title>00:12.83 on 2025-04-24</title>
					</path>
					<line x1="0" y1="1283" x2="2728" y2="1283"/>
					<line x1="2662" y1="0" x2="2662" y2="3036"/>
				</g>
				<g style="--index: 32;">
					<path d="M2334,1489L2410,1489L2410,1284" tabindex="0">
						<title>8v0mryvx</title>
					</path>
					<rect x="2334" y="1284" width="76" height="205"/>
					<path d="M2334,1489L2334,1489" tabindex="0">
						<title>00:14.89 on 2024-05-31</title>
					</path>
					<line x1="0" y1="1489" x2="2728" y2="1489"/>
					<line x1="2334" y1="0" x2="2334" y2="3036"/>
					<path d="M2410,1284L2410,1284" tabindex="0">
						<title>00:12.84 on 2024-08-15</title>
					</path>
					<line x1="0" y1="1284" x2="2728" y2="1284"/>
					<line x1="2410" y1="0" x2="2410" y2="3036"/>
				</g>
				<g style="--index: 33;">
					<path d="M2386,1430" tabindex="0">
						<title>86rpw3p8</title>
					</path>
					<rect x="2386" y="1430" width="0" height="0"/>
					<path d="M2386,1430L2386,1430" tabindex="0">
						<title>00:14.30 on 2024-07-22</title>
					</path>
					<line x1="0" y1="1430" x2="2728" y2="1430"/>
					<line x1="2386" y1="0" x2="2386" y2="3036"/>
				</g>
				<g style="--index: 34;">
					<path d="M2405,1205" tabindex="0">
						<title>jn6zlzqx</title>
					</path>
					<rect x="2405" y="1205" width="0" height="0"/>
					<path d="M2405,1205L2405,1205" tabindex="0">
						<title>00:12.05 on 2024-08-10</title>
					</path>
					<line x1="0" y1="1205" x2="2728" y2="1205"/>
					<line x1="2405" y1="0" x2="2405" y2="3036"/>
				</g>
				<g style="--index: 35;">
					<path d="M2419,2228" tabindex="0">
						<title>xyko1pn8</title>
					</path>
					<rect x="2419" y="2228" width="0" height="0"/>
					<path d="M2419,2228L2419,2228" tabindex="0">
						<title>00:22.28 on 2024-08-24</title>
					</path>
					<line x1="0" y1="2228" x2="2728" y2="2228"/>
					<line x1="2419" y1="0" x2="2419" y2="3036"/>
				</g>
				<g style="--index: 36;">
					<path d="M2437,1314" tabindex="0">
						<title>j0ewnqw8</title>
					</path>
					<rect x="2437" y="1314" width="0" height="0"/>
					<path d="M2437,1314L2437,1314" tabindex="0">
						<title>00:13.14 on 2024-09-11</title>
					</path>
					<line x1="0" y1="1314" x2="2728" y2="1314"/>
					<line x1="2437" y1="0" x2="2437" y2="3036"/>
				</g>
				<g style="--index: 37;">
					<path d="M2455,1429" tabindex="0">
						<title>0jmw6wex</title>
					</path>
					<rect x="2455" y="1429" width="0" height="0"/>
					<path d="M2455,1429L2455,1429" tabindex="0">
						<title>00:14.29 on 2024-09-29</title>
					</path>
					<line x1="0" y1="1429" x2="2728" y2="1429"/>
					<line x1="2455" y1="0" x2="2455" y2="3036"/>
				</g>
				<g style="--index: 38;">
					<path d="M2547,2729" tabindex="0">
						<title>86p16o0j</title>
					</path>
					<rect x="2547" y="2729" width="0" height="0"/>
					<path d="M2547,2729L2547,2729" tabindex="0">
						<title>00:27.29 on 2024-12-30</title>
					</path>
					<line x1="0" y1="2729" x2="2728" y2="2729"/>
					<line x1="2547" y1="0" x2="2547" y2="3036"/>
				</g>
				<g style="--index: 39;">
					<path d="M2547,1333" tabindex="0">
						<title>81p5l538</title>
					</path>
					<rect x="2547" y="1333" width="0" height="0"/>
					<path d="M2547,1333L2547,1333" tabindex="0">
						<title>00:13.33 on 2024-12-30</title>
					</path>
					<line x1="0" y1="1333" x2="2728" y2="1333"/>
					<line x1="2547" y1="0" x2="2547" y2="3036"/>
				</g>
				<g style="--index: 40;">
					<path d="M2549,1641" tabindex="0">
						<title>j5p0g068</title>
					</path>
					<rect x="2549" y="1641" width="0" height="0"/>
					<path d="M2549,1641L2549,1641" tabindex="0">
						<title>00:16.41 on 2025-01-01</title>
					</path>
					<line x1="0" y1="1641" x2="2728" y2="1641"/>
					<line x1="2549" y1="0" x2="2549" y2="3036"/>
				</g>
				<g style="--index: 41;">
					<path d="M2583,1639L2625,1639L2625,1268" tabindex="0">
						<title>8lrmkz78</title>
					</path>
					<rect x="2583" y="1268" width="42" height="371"/>
					<path d="M2583,1639L2583,1639" tabindex="0">
						<title>00:16.39 on 2025-02-04</title>
					</path>
					<line x1="0" y1="1639" x2="2728" y2="1639"/>
					<line x1="2583" y1="0" x2="2583" y2="3036"/>
					<path d="M2625,1268L2625,1268" tabindex="0">
						<title>00:12.68 on 2025-03-18</title>
					</path>
					<line x1="0" y1="1268" x2="2728" y2="1268"/>
					<line x1="2625" y1="0" x2="2625" y2="3036"/>
				</g>
				<g style="--index: 42;">
					<path d="M2611,1230L2629,1230L2629,1152L2711,1152L2711,1043L2717,1043L2717,1041" tabindex="0">
						<title>81pdyqq8</title>
					</path>
					<rect x="2611" y="1041" width="106" height="189"/>
					<path d="M2611,1230L2611,1230" tabindex="0">
						<title>00:12.30 on 2025-03-04</title>
					</path>
					<line x1="0" y1="1230" x2="2728" y2="1230"/>
					<line x1="2611" y1="0" x2="2611" y2="3036"/>
					<path d="M2629,1152L2629,1152" tabindex="0">
						<title>00:11.52 on 2025-03-22</title>
					</path>
					<line x1="0" y1="1152" x2="2728" y2="1152"/>
					<line x1="2629" y1="0" x2="2629" y2="3036"/>
					<path d="M2711,1043L2711,1043" tabindex="0">
						<title>00:10.43 on 2025-06-12</title>
					</path>
					<line x1="0" y1="1043" x2="2728" y2="1043"/>
					<line x1="2711" y1="0" x2="2711" y2="3036"/>
					<path d="M2717,1041L2717,1041" tabindex="0">
						<title>00:10.41 on 2025-06-18</title>
					</path>
					<line x1="0" y1="1041" x2="2728" y2="1041"/>
					<line x1="2717" y1="0" x2="2717" y2="3036"/>
				</g>
				<g style="--index: 43;">
					<path d="M2649,1284L2652,1284L2652,1256" tabindex="0">
						<title>j2pzvvp8</title>
					</path>
					<rect x="2649" y="1256" width="3" height="28"/>
					<path d="M2649,1284L2649,1284" tabindex="0">
						<title>00:12.84 on 2025-04-11</title>
					</path>
					<line x1="0" y1="1284" x2="2728" y2="1284"/>
					<line x1="2649" y1="0" x2="2649" y2="3036"/>
					<path d="M2652,1256L2652,1256" tabindex="0">
						<title>00:12.56 on 2025-04-14</title>
					</path>
					<line x1="0" y1="1256" x2="2728" y2="1256"/>
					<line x1="2652" y1="0" x2="2652" y2="3036"/>
				</g>
				<g style="--index: 44;">
					<path d="M2650,1264L2653,1264L2653,1137" tabindex="0">
						<title>8gop7k2x</title>
					</path>
					<rect x="2650" y="1137" width="3" height="127"/>
					<path d="M2650,1264L2650,1264" tabindex="0">
						<title>00:12.64 on 2025-04-12</title>
					</path>
					<line x1="0" y1="1264" x2="2728" y2="1264"/>
					<line x1="2650" y1="0" x2="2650" y2="3036"/>
					<path d="M2653,1137L2653,1137" tabindex="0">
						<title>00:11.37 on 2025-04-15</title>
					</path>
					<line x1="0" y1="1137" x2="2728" y2="1137"/>
					<line x1="2653" y1="0" x2="2653" y2="3036"/>
				</g>
				<g style="--index: 45;">
					<path d="M2659,1461" tabindex="0">
						<title>8r6739q8</title>
					</path>
					<rect x="2659" y="1461" width="0" height="0"/>
					<path d="M2659,1461L2659,1461" tabindex="0">
						<title>00:14.61 on 2025-04-21</title>
					</path>
					<line x1="0" y1="1461" x2="2728" y2="1461"/>
					<line x1="2659" y1="0" x2="2659" y2="3036"/>
				</g>
				<g style="--index: 46;">
					<path d="M2661,1285" tabindex="0">
						<title>xz59wp0x</title>
					</path>
					<rect x="2661" y="1285" width="0" height="0"/>
					<path d="M2661,1285L2661,1285" tabindex="0">
						<title>00:12.85 on 2025-04-23</title>
					</path>
					<line x1="0" y1="1285" x2="2728" y2="1285"/>
					<line x1="2661" y1="0" x2="2661" y2="3036"/>
				</g>
				<g style="--index: 47;">
					<path d="M2728,1068" tabindex="0">
						<title>j2p4pel8</title>
					</path>
					<rect x="2728" y="1068" width="0" height="0"/>
					<path d="M2728,1068L2728,1068" tabindex="0">
						<title>00:10.68 on 2025-06-29</title>
					</path>
					<line x1="0" y1="1068" x2="2728" y2="1068"/>
					<line x1="2728" y1="0" x2="2728" y2="3036"/>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
