<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Rank by player for leaderboard 9kv6l5e2-ql6rezjl.1dk62o3l</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2023-07-05</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-06-28</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">47</text>
		</svg>
		<svg viewBox="0 0 724 47" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 47) scale(1 -1)" style="--count: 48;">
				<g>
					<rect x="0" y="0" width="724" height="47"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,0L11,0L11,1L12,1L12,2L13,2L13,3L18,3L18,4L20,4L20,5L25,5L25,6L27,6L27,7L35,7L35,8L37,8L37,9L38,9L38,10L43,10L43,11L51,11L51,12L87,12L87,13L92,13L92,14L94,14L94,15L148,15L148,16L278,16L278,17L309,17L309,18L357,18L357,19L361,19L361,20L392,20L392,21L395,21L395,22L402,22L402,23L456,23L456,24L491,24L491,25L503,25L503,26L527,26L527,27L545,27L545,28L567,28L567,29L568,29L568,30L574,30L574,31L599,31L599,32L602,32L602,33L605,33L605,34L608,34L608,35L613,35L613,36L620,36L620,37L628,37L628,38L668,38L668,39L677,39L677,40L695,40L695,41L703,41L703,42L714,42L714,44L718,44L718,45L724,45L724,46L724,46" tabindex="0">
						<title>xz1nv0ej</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,1L11,1L11,0L12,0L12,1L13,1L13,2L20,2L20,3L25,3L25,4L26,4L26,0L27,0L27,1L37,1L37,2L93,2L93,3L94,3L94,4L395,4L395,5L456,5L456,6L570,6L570,7L620,7L620,8L628,8L628,9L703,9L703,10L714,10L714,11L715,11L715,12L718,12L718,13L724,13L724,14L724,14" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,2L12,2L12,0L13,0L13,1L20,1L20,2L25,2L25,3L26,3L26,4L27,4L27,5L35,5L35,6L37,6L37,7L38,7L38,8L43,8L43,9L87,9L87,10L92,10L92,11L94,11L94,12L148,12L148,13L278,13L278,14L309,14L309,15L357,15L357,16L361,16L361,17L392,17L392,18L395,18L395,19L402,19L402,20L456,20L456,21L491,21L491,22L503,22L503,23L545,23L545,24L567,24L567,25L568,25L568,26L574,26L574,27L599,27L599,28L602,28L602,29L605,29L605,30L608,30L608,31L613,31L613,32L620,32L620,33L628,33L628,34L668,34L668,35L677,35L677,36L695,36L695,37L703,37L703,38L714,38L714,40L718,40L718,41L724,41L724,42L724,42" tabindex="0">
						<title>j9k252w8</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L13,3L13,0L21,0L21,0L26,0L26,1L27,1L27,2L37,2L37,3L93,3L93,4L94,4L94,5L395,5L395,6L456,6L456,7L570,7L570,8L620,8L620,9L628,9L628,10L703,10L703,11L714,11L714,12L715,12L715,13L718,13L718,14L724,14L724,15L724,15" tabindex="0">
						<title>8v23g7yj</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,4L18,4L18,3L20,3L20,4L25,4L25,5L27,5L27,6L35,6L35,7L37,7L37,8L38,8L38,9L43,9L43,10L87,10L87,11L92,11L92,12L94,12L94,13L148,13L148,14L278,14L278,15L309,15L309,16L357,16L357,17L361,17L361,18L392,18L392,19L395,19L395,20L402,20L402,21L456,21L456,22L491,22L491,23L503,23L503,24L527,24L527,25L545,25L545,26L567,26L567,27L568,27L568,28L574,28L574,29L599,29L599,30L602,30L602,31L605,31L605,32L608,32L608,33L613,33L613,34L620,34L620,35L628,35L628,36L668,36L668,37L677,37L677,38L695,38L695,39L703,39L703,40L714,40L714,42L718,42L718,43L724,43L724,44L724,44" tabindex="0">
						<title>xk136v6j</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,5L20,5L20,1L25,1L25,2L26,2L26,3L27,3L27,4L35,4L35,5L37,5L37,6L38,6L38,7L43,7L43,8L92,8L92,9L94,9L94,10L148,10L148,11L278,11L278,12L309,12L309,13L357,13L357,14L361,14L361,15L392,15L392,16L395,16L395,17L402,17L402,18L456,18L456,19L491,19L491,20L503,20L503,21L545,21L545,22L567,22L567,23L568,23L568,24L574,24L574,25L599,25L599,26L602,26L602,27L605,27L605,28L608,28L608,29L613,29L613,30L620,30L620,31L628,31L628,32L668,32L668,33L677,33L677,34L695,34L695,35L703,35L703,36L714,36L714,38L718,38L718,39L724,39L724,40L724,40" tabindex="0">
						<title>8rmpyp6j</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,6L25,6L25,1L26,1L26,2L27,2L27,3L37,3L37,4L38,4L38,5L43,5L43,6L92,6L92,7L94,7L94,8L148,8L148,9L278,9L278,10L309,10L309,11L361,11L361,12L392,12L392,13L395,13L395,14L402,14L402,15L456,15L456,16L491,16L491,17L503,17L503,18L545,18L545,19L567,19L567,20L568,20L568,21L574,21L574,22L599,22L599,23L602,23L602,24L605,24L605,25L608,25L608,26L613,26L613,27L620,27L620,28L628,28L628,29L668,29L668,30L677,30L677,31L695,31L695,32L703,32L703,33L714,33L714,35L718,35L718,36L724,36L724,37L724,37" tabindex="0">
						<title>j0w34198</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,7L27,7L27,0L94,0L94,1L173,1L173,0L176,0L176,1L436,1L436,0L455,0L455,1L456,1L456,2L703,2L703,3L724,3" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,8L35,8L35,4L37,4L37,5L38,5L38,6L43,6L43,7L92,7L92,8L94,8L94,9L148,9L148,10L278,10L278,11L309,11L309,12L357,12L357,13L361,13L361,14L392,14L392,15L395,15L395,16L402,16L402,17L456,17L456,18L491,18L491,19L503,19L503,20L545,20L545,21L567,21L567,22L568,22L568,23L574,23L574,24L599,24L599,25L602,25L602,26L605,26L605,27L608,27L608,28L613,28L613,29L620,29L620,30L628,30L628,31L668,31L668,32L677,32L677,33L695,33L695,34L703,34L703,35L714,35L714,37L718,37L718,38L724,38L724,39L724,39" tabindex="0">
						<title>8qr3vyqj</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,9L37,9L37,1L94,1L94,2L161,2L161,3L207,3L207,2L210,2L210,2L429,2L429,3L456,3L456,4L627,4L627,5L703,5L703,6L717,6L717,7L718,7L718,8L724,8L724,9L724,9" tabindex="0">
						<title>jpol4d58</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,10L38,10L38,4L45,4L45,5L92,5L92,6L94,6L94,7L148,7L148,8L365,8L365,9L392,9L392,10L395,10L395,11L456,11L456,12L503,12L503,13L545,13L545,14L567,14L567,15L568,15L568,16L599,16L599,17L620,17L620,18L628,18L628,19L677,19L677,20L703,20L703,21L714,21L714,23L718,23L718,24L724,24L724,25L724,25" tabindex="0">
						<title>86r3dyw8</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,11L43,11L43,5L45,5L45,4L93,4L93,2L94,2L94,3L158,3L158,3L161,3L161,2L207,2L207,3L395,3L395,4L456,4L456,5L477,5L477,5L570,5L570,6L620,6L620,7L628,7L628,8L703,8L703,9L714,9L714,10L715,10L715,11L718,11L718,12L724,12L724,13L724,13" tabindex="0">
						<title>8ew371p8</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,12L51,12L51,11L87,11L87,12L92,12L92,13L94,13L94,14L148,14L148,15L278,15L278,16L309,16L309,17L357,17L357,18L361,18L361,19L392,19L392,20L395,20L395,21L402,21L402,22L456,22L456,23L491,23L491,24L503,24L503,25L527,25L527,26L545,26L545,27L567,27L567,28L568,28L568,29L574,29L574,30L599,30L599,31L602,31L602,32L605,32L605,33L608,33L608,34L613,34L613,35L620,35L620,36L628,36L628,37L668,37L668,38L677,38L677,39L695,39L695,40L703,40L703,41L714,41L714,43L718,43L718,44L724,44L724,45L724,45" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,13L87,13L87,9L92,9L92,10L94,10L94,11L148,11L148,12L278,12L278,13L309,13L309,14L357,14L357,15L361,15L361,16L392,16L392,17L395,17L395,18L402,18L402,19L456,19L456,20L491,20L491,21L503,21L503,22L545,22L545,23L567,23L567,24L568,24L568,25L574,25L574,26L599,26L599,27L602,27L602,28L605,28L605,29L608,29L608,30L613,30L613,31L620,31L620,32L628,32L628,33L668,33L668,34L677,34L677,35L695,35L695,36L703,36L703,37L714,37L714,39L718,39L718,40L724,40L724,41L724,41" tabindex="0">
						<title>jokkvo38</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,14L92,14L92,5L94,5L94,6L395,6L395,7L456,7L456,8L567,8L567,9L568,9L568,10L599,10L599,11L620,11L620,12L628,12L628,13L703,13L703,14L714,14L714,16L718,16L718,17L724,17L724,18L724,18" tabindex="0">
						<title>8ee6nod8</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,15L94,15L94,0L173,0L173,1L176,1L176,0L436,0L436,1L455,1L455,0L457,0L457,1L703,1L703,2L724,2" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,16L148,16L148,7L392,7L392,8L395,8L395,9L456,9L456,10L567,10L567,11L568,11L568,12L599,12L599,13L620,13L620,14L628,14L628,15L677,15L677,16L703,16L703,17L714,17L714,19L718,19L718,20L724,20L724,21L724,21" tabindex="0">
						<title>8g29g91j</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,17L278,17L278,9L309,9L309,10L365,10L365,11L392,11L392,12L395,12L395,13L402,13L402,14L456,14L456,15L491,15L491,16L503,16L503,17L545,17L545,18L567,18L567,19L568,19L568,20L574,20L574,21L599,21L599,22L602,22L602,23L605,23L605,24L608,24L608,25L613,25L613,26L620,26L620,27L628,27L628,28L668,28L668,29L677,29L677,30L695,30L695,31L703,31L703,32L714,32L714,34L718,34L718,35L724,35L724,36L724,36" tabindex="0">
						<title>xkp59okj</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,18L309,18L309,9L365,9L365,10L392,10L392,11L395,11L395,12L456,12L456,13L503,13L503,14L545,14L545,15L567,15L567,16L568,16L568,17L599,17L599,18L605,18L605,19L608,19L608,20L620,20L620,21L628,21L628,22L677,22L677,23L703,23L703,24L714,24L714,26L718,26L718,27L724,27L724,28L724,28" tabindex="0">
						<title>81m16pq8</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,19L357,19L357,12L361,12L361,13L392,13L392,14L395,14L395,15L402,15L402,16L456,16L456,17L491,17L491,18L503,18L503,19L545,19L545,20L567,20L567,21L568,21L568,22L574,22L574,23L599,23L599,24L602,24L602,25L605,25L605,26L608,26L608,27L613,27L613,28L620,28L620,29L628,29L628,30L668,30L668,31L677,31L677,32L695,32L695,33L703,33L703,34L714,34L714,36L718,36L718,37L724,37L724,38L724,38" tabindex="0">
						<title>8l65vnl8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,20L361,20L361,11L365,11L365,8L392,8L392,9L395,9L395,10L456,10L456,11L503,11L503,12L545,12L545,13L567,13L567,14L568,14L568,15L599,15L599,16L620,16L620,17L628,17L628,18L677,18L677,19L703,19L703,20L714,20L714,22L718,22L718,23L724,23L724,24L724,24" tabindex="0">
						<title>8go6p41x</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,21L392,21L392,7L395,7L395,8L456,8L456,9L567,9L567,10L568,10L568,11L599,11L599,12L620,12L620,13L628,13L628,14L677,14L677,15L703,15L703,16L714,16L714,18L718,18L718,19L724,19L724,20L724,20" tabindex="0">
						<title>x7zmddv8</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,22L395,22L395,3L429,3L429,2L456,2L456,3L641,3L641,4L703,4L703,5L718,5L718,6L724,6L724,7L724,7" tabindex="0">
						<title>810g2npx</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,23L402,23L402,13L456,13L456,14L491,14L491,15L503,15L503,16L545,16L545,17L567,17L567,18L568,18L568,19L574,19L574,20L599,20L599,21L602,21L602,22L605,22L605,23L608,23L608,24L613,24L613,25L620,25L620,26L628,26L628,27L668,27L668,28L677,28L677,29L703,29L703,30L714,30L714,32L718,32L718,33L724,33L724,34L724,34" tabindex="0">
						<title>x36lg97x</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,24L456,24L456,1L457,1L457,0L703,0L703,1L724,1" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,25L491,25L491,14L503,14L503,15L545,15L545,16L567,16L567,17L568,17L568,18L574,18L574,19L599,19L599,20L605,20L605,21L608,21L608,22L620,22L620,23L628,23L628,24L677,24L677,25L703,25L703,26L714,26L714,28L718,28L718,29L724,29L724,30L724,30" tabindex="0">
						<title>jm6m09n8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,26L496,26L496,26L503,26L503,27L527,27L527,28L545,28L545,29L567,29L567,30L568,30L568,31L574,31L574,32L599,32L599,33L602,33L602,34L605,34L605,35L608,35L608,36L613,36L613,37L620,37L620,38L628,38L628,39L668,39L668,40L677,40L677,41L695,41L695,42L703,42L703,43L714,43L714,45L718,45L718,46L724,46L724,47L724,47" tabindex="0">
						<title>xko2g798</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,27L503,27L503,11L545,11L545,12L567,12L567,13L568,13L568,14L599,14L599,15L620,15L620,16L628,16L628,17L677,17L677,18L703,18L703,19L714,19L714,21L718,21L718,22L724,22L724,23L724,23" tabindex="0">
						<title>8gonz31x</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,28L527,28L527,24L545,24L545,25L567,25L567,26L568,26L568,27L574,27L574,28L599,28L599,29L602,29L602,30L605,30L605,31L608,31L608,32L613,32L613,33L620,33L620,34L628,34L628,35L668,35L668,36L677,36L677,37L695,37L695,38L703,38L703,39L714,39L714,41L718,41L718,42L724,42L724,43L724,43" tabindex="0">
						<title>jpz2ge4x</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,29L545,29L545,11L567,11L567,12L568,12L568,13L599,13L599,14L620,14L620,15L628,15L628,16L677,16L677,17L703,17L703,18L714,18L714,20L718,20L718,21L724,21L724,22L724,22" tabindex="0">
						<title>8de53m5j</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,30L567,30L567,8L570,8L570,9L620,9L620,10L628,10L628,11L703,11L703,12L714,12L714,14L718,14L718,15L724,15L724,16L724,16" tabindex="0">
						<title>8rl97mw8</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,31L568,31L568,9L570,9L570,5L627,5L627,6L703,6L703,7L715,7L715,8L717,8L717,9L718,9L718,10L724,10L724,11L724,11" tabindex="0">
						<title>x7z9ygy8</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,32L574,32L574,18L599,18L599,19L605,19L605,20L608,20L608,21L620,21L620,22L628,22L628,23L677,23L677,24L703,24L703,25L714,25L714,27L718,27L718,28L724,28L724,29L724,29" tabindex="0">
						<title>8eod1g2j</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,33L599,33L599,10L620,10L620,11L628,11L628,12L703,12L703,13L714,13L714,15L718,15L718,16L724,16L724,17L724,17" tabindex="0">
						<title>jm6nql48</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,34L602,34L602,21L605,21L605,22L608,22L608,23L613,23L613,24L620,24L620,25L628,25L628,26L668,26L668,27L677,27L677,28L703,28L703,29L714,29L714,31L718,31L718,32L724,32L724,33L724,33" tabindex="0">
						<title>jo10e4lx</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,35L605,35L605,18L608,18L608,19L620,19L620,20L628,20L628,21L677,21L677,22L703,22L703,23L714,23L714,25L718,25L718,26L724,26L724,27L724,27" tabindex="0">
						<title>jn6k401x</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,36L608,36L608,18L620,18L620,19L628,19L628,20L677,20L677,21L703,21L703,22L714,22L714,24L718,24L718,25L724,25L724,26L724,26" tabindex="0">
						<title>x7mnw5qx</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,37L613,37L613,23L620,23L620,24L628,24L628,25L677,25L677,26L703,26L703,27L714,27L714,29L718,29L718,30L724,30L724,31L724,31" tabindex="0">
						<title>j4p1myvj</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,38L620,38L620,6L627,6L627,4L641,4L641,3L649,3L649,3L703,3L703,4L718,4L718,5L724,5" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,39L628,39L628,7L703,7L703,8L715,8L715,9L717,9L717,10L718,10L718,11L724,11L724,12L724,12" tabindex="0">
						<title>xz0dg1e8</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,40L668,40L668,26L677,26L677,27L703,27L703,28L714,28L714,30L718,30L718,31L724,31L724,32L724,32" tabindex="0">
						<title>xyylq0mx</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,41L677,41L677,14L703,14L703,15L714,15L714,17L718,17L718,18L724,18L724,19L724,19" tabindex="0">
						<title>8r62z0q8</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,42L695,42L695,30L703,30L703,31L714,31L714,33L718,33L718,34L724,34L724,35L724,35" tabindex="0">
						<title>xz505d9x</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,43L703,43L703,0L724,0" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,44L714,44L714,9L715,9L715,10L717,10L717,6L718,6L718,7L724,7L724,8L724,8" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,45L714,45L714,13L715,13L715,7L717,7L717,8L718,8L718,9L724,9L724,10L724,10" tabindex="0">
						<title>xkpw7g6j</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,46L718,46L718,4L724,4" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,47L724,47L724,6L724,6" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
