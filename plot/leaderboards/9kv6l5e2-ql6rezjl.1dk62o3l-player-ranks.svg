<svg xmlns="http://www.w3.org/2000/svg" lang="en" style="color-scheme: dark light;">
	<title>Rank by player for leaderboard 9kv6l5e2-ql6rezjl.1dk62o3l</title>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject &gt; div {
			position: absolute;
			left: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg {
			width: calc(100% - 40px);
			height: calc(100% - 40px);
			margin: 20px;
			padding: 10px;
			border: 1px dashed var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: var(--tier, #0000);
			stroke: none;
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%">
		<svg viewBox="0 0 545 29" preserveAspectRatio="none" overflow="visible">
			<g transform="scale(1 -1)" transform-origin="center center" style="--count: 30;">
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,0L11,0L11,1L12,1L12,2L13,2L13,3L18,3L18,4L20,4L20,5L25,5L25,6L27,6L27,7L35,7L35,8L37,8L37,9L38,9L38,10L43,10L43,11L51,11L51,12L87,12L87,13L92,13L92,14L94,14L94,15L148,15L148,16L278,16L278,17L309,17L309,18L357,18L357,19L361,19L361,20L392,20L392,21L395,21L395,22L402,22L402,23L456,23L456,24L491,24L491,25L503,25L503,26L527,26L527,27L545,27L545,28L545,28" tabindex="0">
						<title>xz1nv0ej</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,1L11,1L11,0L12,0L12,1L13,1L13,2L20,2L20,3L25,3L25,4L26,4L26,0L27,0L27,1L37,1L37,2L93,2L93,3L94,3L94,4L395,4L395,5L456,5L456,6L545,6" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,2L12,2L12,0L13,0L13,1L20,1L20,2L25,2L25,3L26,3L26,4L27,4L27,5L35,5L35,6L37,6L37,7L38,7L38,8L43,8L43,9L87,9L87,10L92,10L92,11L94,11L94,12L148,12L148,13L278,13L278,14L309,14L309,15L357,15L357,16L361,16L361,17L392,17L392,18L395,18L395,19L402,19L402,20L456,20L456,21L491,21L491,22L503,22L503,23L545,23L545,24L545,24" tabindex="0">
						<title>j9k252w8</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L13,3L13,0L21,0L21,0L26,0L26,1L27,1L27,2L37,2L37,3L93,3L93,4L94,4L94,5L395,5L395,6L456,6L456,7L545,7" tabindex="0">
						<title>8v23g7yj</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,4L18,4L18,3L20,3L20,4L25,4L25,5L27,5L27,6L35,6L35,7L37,7L37,8L38,8L38,9L43,9L43,10L87,10L87,11L92,11L92,12L94,12L94,13L148,13L148,14L278,14L278,15L309,15L309,16L357,16L357,17L361,17L361,18L392,18L392,19L395,19L395,20L402,20L402,21L456,21L456,22L491,22L491,23L503,23L503,24L527,24L527,25L545,25L545,26L545,26" tabindex="0">
						<title>xk136v6j</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,5L20,5L20,1L25,1L25,2L26,2L26,3L27,3L27,4L35,4L35,5L37,5L37,6L38,6L38,7L43,7L43,8L92,8L92,9L94,9L94,10L148,10L148,11L278,11L278,12L309,12L309,13L357,13L357,14L361,14L361,15L392,15L392,16L395,16L395,17L402,17L402,18L456,18L456,19L491,19L491,20L503,20L503,21L545,21L545,22L545,22" tabindex="0">
						<title>8rmpyp6j</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,6L25,6L25,1L26,1L26,2L27,2L27,3L37,3L37,4L38,4L38,5L43,5L43,6L92,6L92,7L94,7L94,8L148,8L148,9L278,9L278,10L309,10L309,11L361,11L361,12L392,12L392,13L395,13L395,14L402,14L402,15L456,15L456,16L491,16L491,17L503,17L503,18L545,18L545,19L545,19" tabindex="0">
						<title>j0w34198</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,7L27,7L27,0L94,0L94,1L173,1L173,0L176,0L176,1L436,1L436,0L455,0L455,1L456,1L456,2L545,2" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,8L35,8L35,4L37,4L37,5L38,5L38,6L43,6L43,7L92,7L92,8L94,8L94,9L148,9L148,10L278,10L278,11L309,11L309,12L357,12L357,13L361,13L361,14L392,14L392,15L395,15L395,16L402,16L402,17L456,17L456,18L491,18L491,19L503,19L503,20L545,20L545,21L545,21" tabindex="0">
						<title>8qr3vyqj</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,9L37,9L37,1L94,1L94,2L161,2L161,3L207,3L207,2L210,2L210,2L429,2L429,3L456,3L456,4L545,4" tabindex="0">
						<title>jpol4d58</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,10L38,10L38,4L45,4L45,5L92,5L92,6L94,6L94,7L148,7L148,8L365,8L365,9L392,9L392,10L395,10L395,11L456,11L456,12L503,12L503,13L545,13L545,14L545,14" tabindex="0">
						<title>86r3dyw8</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,11L43,11L43,5L45,5L45,4L93,4L93,2L94,2L94,3L158,3L158,3L161,3L161,2L207,2L207,3L395,3L395,4L456,4L456,5L477,5L477,5L545,5" tabindex="0">
						<title>8ew371p8</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,12L51,12L51,11L87,11L87,12L92,12L92,13L94,13L94,14L148,14L148,15L278,15L278,16L309,16L309,17L357,17L357,18L361,18L361,19L392,19L392,20L395,20L395,21L402,21L402,22L456,22L456,23L491,23L491,24L503,24L503,25L527,25L527,26L545,26L545,27L545,27" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,13L87,13L87,9L92,9L92,10L94,10L94,11L148,11L148,12L278,12L278,13L309,13L309,14L357,14L357,15L361,15L361,16L392,16L392,17L395,17L395,18L402,18L402,19L456,19L456,20L491,20L491,21L503,21L503,22L545,22L545,23L545,23" tabindex="0">
						<title>jokkvo38</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,14L92,14L92,5L94,5L94,6L395,6L395,7L456,7L456,8L545,8" tabindex="0">
						<title>8ee6nod8</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,15L94,15L94,0L173,0L173,1L176,1L176,0L436,0L436,1L455,1L455,0L457,0L457,1L545,1" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,16L148,16L148,7L392,7L392,8L395,8L395,9L456,9L456,10L545,10" tabindex="0">
						<title>8g29g91j</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,17L278,17L278,9L309,9L309,10L365,10L365,11L392,11L392,12L395,12L395,13L402,13L402,14L456,14L456,15L491,15L491,16L503,16L503,17L545,17L545,18L545,18" tabindex="0">
						<title>xkp59okj</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,18L309,18L309,9L365,9L365,10L392,10L392,11L395,11L395,12L456,12L456,13L503,13L503,14L545,14L545,15L545,15" tabindex="0">
						<title>81m16pq8</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,19L357,19L357,12L361,12L361,13L392,13L392,14L395,14L395,15L402,15L402,16L456,16L456,17L491,17L491,18L503,18L503,19L545,19L545,20L545,20" tabindex="0">
						<title>8l65vnl8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,20L361,20L361,11L365,11L365,8L392,8L392,9L395,9L395,10L456,10L456,11L503,11L503,12L545,12L545,13L545,13" tabindex="0">
						<title>8go6p41x</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,21L392,21L392,7L395,7L395,8L456,8L456,9L545,9" tabindex="0">
						<title>x7zmddv8</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,22L395,22L395,3L429,3L429,2L456,2L456,3L545,3" tabindex="0">
						<title>810g2npx</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,23L402,23L402,13L456,13L456,14L491,14L491,15L503,15L503,16L545,16L545,17L545,17" tabindex="0">
						<title>x36lg97x</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,24L456,24L456,1L457,1L457,0L545,0" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,25L491,25L491,14L503,14L503,15L545,15L545,16L545,16" tabindex="0">
						<title>jm6m09n8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,26L496,26L496,26L503,26L503,27L527,27L527,28L545,28L545,29L545,29" tabindex="0">
						<title>xko2g798</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,27L503,27L503,11L545,11L545,12L545,12" tabindex="0">
						<title>8gonz31x</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,28L527,28L527,24L545,24L545,25L545,25" tabindex="0">
						<title>jpz2ge4x</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,29L545,29L545,11L545,11" tabindex="0">
						<title>8de53m5j</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
