<svg xmlns="http://www.w3.org/2000/svg" lang="en" style="color-scheme: dark light;">
	<title>Rank by player for leaderboard l_495zlx39-9d8eewld-2lgr793n.814y7w01</title>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-04-11</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2024-12-23</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">29</text>
		</svg>
		<svg viewBox="0 0 2448 29" preserveAspectRatio="none" overflow="visible">
			<g transform="scale(1 -1)" transform-origin="center center" style="--count: 30;">
				<g>
					<rect x="0" y="0" width="2448" height="29"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,0L8,0L8,1L88,1L88,2L764,2L764,3L772,3L772,4L955,4L955,6L958,6L958,7L959,7L959,8L961,8L961,9L980,9L980,10L1163,10L1163,11L1526,11L1526,12L1609,12L1609,13L1704,13L1704,14L1705,14L1705,15L1820,15L1820,16L2121,16L2121,17L2212,17L2212,18L2213,18L2213,19L2222,19L2222,20L2260,20L2260,21L2271,21L2271,22L2317,22L2317,23L2327,23L2327,24L2371,24L2371,25L2447,25L2447,26L2448,26L2448,27L2448,27" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,1L8,1L8,0L88,0L88,1L89,1L89,0L764,0L764,1L772,1L772,2L870,2L870,0L955,0L955,1L959,1L959,2L961,2L961,4L966,4L966,0L985,0L985,1L1061,1L1061,2L1526,2L1526,3L1609,3L1609,4L2327,4L2327,5L2448,5" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,2L88,2L88,0L89,0L89,1L764,1L764,2L772,2L772,3L955,3L955,5L958,5L958,6L959,6L959,7L961,7L961,8L980,8L980,9L1526,9L1526,10L1609,10L1609,11L1704,11L1704,12L1705,12L1705,13L1820,13L1820,14L2121,14L2121,15L2212,15L2212,16L2222,16L2222,17L2260,17L2260,18L2271,18L2271,19L2317,19L2317,20L2327,20L2327,21L2371,21L2371,22L2447,22L2447,23L2448,23L2448,24L2448,24" tabindex="0">
						<title>qj2pq1p8</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L764,3L764,0L772,0L772,1L870,1L870,2L955,2L955,3L959,3L959,4L961,4L961,0L966,0L966,1L980,1L980,2L986,2L986,3L1061,3L1061,4L1526,4L1526,5L1609,5L1609,6L2309,6L2309,7L2327,7L2327,8L2448,8" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,4L772,4L772,0L870,0L870,1L955,1L955,2L959,2L959,3L961,3L961,5L980,5L980,6L986,6L986,7L1526,7L1526,8L1609,8L1609,9L2309,9L2309,10L2327,10L2327,11L2448,11" tabindex="0">
						<title>8rp1o2qj</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,5L955,5L955,4L959,4L959,5L961,5L961,6L980,6L980,7L986,7L986,2L1061,2L1061,3L1526,3L1526,4L1609,4L1609,5L2309,5L2309,6L2327,6L2327,7L2448,7" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,6L955,6L955,0L961,0L961,2L966,2L966,3L980,3L980,4L986,4L986,5L1061,5L1061,0L1526,0L1526,1L1527,1L1527,0L1800,0L1800,1L2448,1" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,7L958,7L958,5L959,5L959,6L961,6L961,7L980,7L980,8L1526,8L1526,9L1609,9L1609,10L2222,10L2222,11L2260,11L2260,12L2271,12L2271,13L2327,13L2327,14L2371,14L2371,15L2448,15L2448,16L2448,16" tabindex="0">
						<title>jn3kw0wx</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,8L959,8L959,1L961,1L961,3L966,3L966,4L980,4L980,5L986,5L986,6L1526,6L1526,7L1609,7L1609,8L2309,8L2309,9L2327,9L2327,10L2448,10" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,9L961,9L961,1L966,1L966,2L980,2L980,3L986,3L986,4L1061,4L1061,5L1526,5L1526,6L1609,6L1609,7L2309,7L2309,8L2327,8L2327,9L2448,9" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,10L980,10L980,1L985,1L985,0L1061,0L1061,1L1526,1L1526,2L1609,2L1609,3L2448,3" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,11L1163,11L1163,10L1526,10L1526,11L1609,11L1609,12L1704,12L1704,13L1705,13L1705,14L1820,14L1820,15L2121,15L2121,16L2212,16L2212,17L2213,17L2213,18L2222,18L2222,19L2260,19L2260,20L2271,20L2271,21L2317,21L2317,22L2327,22L2327,23L2371,23L2371,24L2447,24L2447,25L2448,25L2448,26L2448,26" tabindex="0">
						<title>x7mk3z6x</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,12L1434,12L1434,12L1526,12L1526,13L1609,13L1609,14L1704,14L1704,15L1705,15L1705,16L1749,16L1749,17L1820,17L1820,18L2121,18L2121,19L2212,19L2212,20L2213,20L2213,21L2222,21L2222,22L2260,22L2260,23L2271,23L2271,24L2317,24L2317,25L2327,25L2327,26L2371,26L2371,27L2447,27L2447,28L2448,28L2448,29L2448,29" tabindex="0">
						<title>jpo3e9y8</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,13L1526,13L1526,0L1527,0L1527,1L1537,1L1537,1L1800,1L1800,2L2448,2" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,14L1609,14L1609,2L1800,2L1800,0L1809,0L1809,0L2448,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,15L1704,15L1704,11L1705,11L1705,12L1820,12L1820,13L2121,13L2121,14L2212,14L2212,15L2222,15L2222,16L2260,16L2260,17L2271,17L2271,18L2327,18L2327,19L2371,19L2371,20L2448,20L2448,21L2448,21" tabindex="0">
						<title>8g0ezgyx</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,16L1705,16L1705,11L1820,11L1820,12L2121,12L2121,13L2212,13L2212,14L2222,14L2222,15L2260,15L2260,16L2271,16L2271,17L2327,17L2327,18L2371,18L2371,19L2448,19L2448,20L2448,20" tabindex="0">
						<title>8lonqn28</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,17L1749,17L1749,16L1820,16L1820,17L2121,17L2121,18L2212,18L2212,19L2213,19L2213,20L2222,20L2222,21L2260,21L2260,22L2271,22L2271,23L2317,23L2317,24L2327,24L2327,25L2371,25L2371,26L2447,26L2447,27L2448,27L2448,28L2448,28" tabindex="0">
						<title>8ewm6dd8</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,18L1820,18L1820,11L2222,11L2222,12L2260,12L2260,13L2271,13L2271,14L2327,14L2327,15L2371,15L2371,16L2448,16L2448,17L2448,17" tabindex="0">
						<title>j20zyvpx</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,19L2121,19L2121,12L2222,12L2222,13L2260,13L2260,14L2271,14L2271,15L2327,15L2327,16L2371,16L2371,17L2448,17L2448,18L2448,18" tabindex="0">
						<title>jokvnml8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,20L2212,20L2212,13L2222,13L2222,14L2260,14L2260,15L2271,15L2271,16L2327,16L2327,17L2371,17L2371,18L2448,18L2448,19L2448,19" tabindex="0">
						<title>j46k93w8</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,21L2213,21L2213,17L2222,17L2222,18L2260,18L2260,19L2271,19L2271,20L2317,20L2317,21L2327,21L2327,22L2371,22L2371,23L2447,23L2447,24L2448,24L2448,25L2448,25" tabindex="0">
						<title>j465mqd8</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,22L2222,22L2222,10L2260,10L2260,11L2327,11L2327,12L2371,12L2371,13L2448,13L2448,14L2448,14" tabindex="0">
						<title>8dpl6o58</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,23L2260,23L2260,10L2309,10L2309,5L2327,5L2327,6L2448,6" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,24L2271,24L2271,12L2327,12L2327,13L2371,13L2371,14L2448,14L2448,15L2448,15" tabindex="0">
						<title>j0gyekmx</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,25L2317,25L2317,19L2327,19L2327,20L2371,20L2371,21L2447,21L2447,22L2448,22L2448,23L2448,23" tabindex="0">
						<title>x7zwrnq8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,26L2327,26L2327,4L2448,4" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,27L2371,27L2371,12L2448,12L2448,13L2448,13" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,28L2447,28L2447,21L2448,21L2448,22L2448,22" tabindex="0">
						<title>j0wm7v98</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,29L2448,29L2448,12L2448,12" tabindex="0">
						<title>8gok6dpx</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
