<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Rank by player for leaderboard l_o9xo3rp9-9d8eewld-7896y468.81wp50oq</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-01-09</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-27</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">59</text>
		</svg>
		<svg viewBox="0 0 2787 59" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 59) scale(1 -1)" style="--count: 60;">
				<g>
					<rect x="0" y="0" width="2787" height="59"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,0L105,0L105,1L864,1L864,2L922,2L922,3L1039,3L1039,4L1046,4L1046,5L1049,5L1049,6L1071,6L1071,7L1075,7L1075,8L1541,8L1541,9L1605,9L1605,10L1633,10L1633,12L1642,12L1642,13L1738,13L1738,14L1743,14L1743,15L1797,15L1797,16L1799,16L1799,17L1912,17L1912,18L1975,18L1975,19L2112,19L2112,20L2194,20L2194,21L2334,21L2334,22L2386,22L2386,23L2405,23L2405,24L2437,24L2437,25L2455,25L2455,26L2543,26L2543,27L2547,27L2547,28L2549,28L2549,29L2583,29L2583,30L2611,30L2611,31L2649,31L2649,32L2650,32L2650,33L2659,33L2659,34L2661,34L2661,35L2728,35L2728,36L2736,36L2736,37L2738,37L2738,38L2749,38L2749,39L2751,39L2751,40L2753,40L2753,41L2754,41L2754,42L2756,42L2756,43L2763,43L2763,44L2766,44L2766,45L2774,45L2774,46L2781,46L2781,47L2784,47L2784,48L2787,48" tabindex="0">
						<title>7j47r25j</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,1L94,1L94,1L105,1L105,2L864,2L864,3L922,3L922,4L1039,4L1039,5L1046,5L1046,6L1049,6L1049,7L1071,7L1071,8L1075,8L1075,9L1148,9L1148,10L1259,10L1259,11L1541,11L1541,12L1605,12L1605,13L1606,13L1606,14L1633,14L1633,16L1642,16L1642,17L1647,17L1647,18L1738,18L1738,19L1743,19L1743,20L1797,20L1797,21L1799,21L1799,22L1804,22L1804,23L1912,23L1912,24L1938,24L1938,25L1943,25L1943,26L1975,26L1975,27L2112,27L2112,28L2133,28L2133,29L2184,29L2184,30L2246,30L2246,31L2334,31L2334,32L2386,32L2386,33L2405,33L2405,34L2419,34L2419,35L2437,35L2437,36L2455,36L2455,37L2547,37L2547,39L2549,39L2549,40L2583,40L2583,41L2611,41L2611,42L2649,42L2649,43L2650,43L2650,44L2659,44L2659,45L2661,45L2661,46L2728,46L2728,47L2736,47L2736,48L2738,48L2738,49L2748,49L2748,50L2751,50L2751,51L2753,51L2753,52L2754,52L2754,53L2756,53L2756,54L2763,54L2763,55L2766,55L2766,56L2774,56L2774,57L2781,57L2781,58L2784,58L2784,59L2787,59" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,2L105,2L105,0L922,0L922,2L962,2L962,0L1046,0L1046,1L1075,1L1075,2L1097,2L1097,3L1607,3L1607,4L1633,4L1633,6L1912,6L1912,7L2405,7L2405,8L2410,8L2410,9L2437,9L2437,10L2543,10L2543,11L2547,11L2547,12L2611,12L2611,13L2625,13L2625,14L2649,14L2649,15L2650,15L2650,16L2661,16L2661,17L2721,17L2721,18L2728,18L2728,19L2736,19L2736,20L2738,20L2738,21L2751,21L2751,22L2754,22L2754,23L2756,23L2756,24L2763,24L2763,25L2766,25L2766,27L2774,27L2774,28L2781,28L2781,29L2784,29L2784,30L2787,30" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L864,3L864,1L922,1L922,0L924,0L924,1L958,1L958,1L962,1L962,2L1046,2L1046,3L1075,3L1075,4L1097,4L1097,5L1102,5L1102,4L1607,4L1607,5L1633,5L1633,7L1912,7L1912,8L2386,8L2386,9L2405,9L2405,10L2410,10L2410,11L2437,11L2437,12L2455,12L2455,13L2543,13L2543,14L2547,14L2547,15L2611,15L2611,16L2625,16L2625,17L2649,17L2649,18L2650,18L2650,19L2661,19L2661,20L2721,20L2721,15L2728,15L2728,16L2736,16L2736,17L2738,17L2738,18L2751,18L2751,19L2754,19L2754,20L2756,20L2756,21L2763,21L2763,22L2766,22L2766,24L2774,24L2774,25L2781,25L2781,26L2784,26L2784,27L2787,27" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,4L922,4L922,1L924,1L924,0L962,0L962,1L1046,1L1046,2L1075,2L1075,3L1097,3L1097,4L1102,4L1102,5L1607,5L1607,6L1633,6L1633,8L1912,8L1912,9L1975,9L1975,10L2386,10L2386,11L2405,11L2405,12L2410,12L2410,13L2437,13L2437,14L2455,14L2455,15L2543,15L2543,16L2547,16L2547,17L2611,17L2611,18L2625,18L2625,19L2649,19L2649,20L2650,20L2650,21L2659,21L2659,22L2661,22L2661,23L2728,23L2728,24L2736,24L2736,25L2738,25L2738,26L2751,26L2751,27L2753,27L2753,28L2754,28L2754,29L2756,29L2756,30L2763,30L2763,31L2766,31L2766,32L2774,32L2774,33L2781,33L2781,34L2784,34L2784,35L2787,35" tabindex="0">
						<title>18vm2258</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,5L1039,5L1039,3L1046,3L1046,4L1049,4L1049,5L1071,5L1071,6L1075,6L1075,7L1181,7L1181,6L1541,6L1541,7L1607,7L1607,8L1633,8L1633,10L1642,10L1642,11L1743,11L1743,12L1912,12L1912,13L1975,13L1975,14L2112,14L2112,15L2334,15L2334,16L2386,16L2386,17L2405,17L2405,18L2437,18L2437,19L2455,19L2455,20L2543,20L2543,21L2547,21L2547,22L2549,22L2549,23L2583,23L2583,24L2611,24L2611,25L2649,25L2649,26L2650,26L2650,27L2659,27L2659,28L2661,28L2661,29L2728,29L2728,30L2736,30L2736,31L2738,31L2738,32L2751,32L2751,33L2753,33L2753,34L2754,34L2754,35L2756,35L2756,36L2763,36L2763,37L2766,37L2766,38L2774,38L2774,39L2781,39L2781,40L2784,40L2784,41L2787,41" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,6L1046,6L1046,0L1075,0L1075,1L1173,1L1173,0L1633,0L1633,0L1635,0L1635,1L1640,1L1640,0L1912,0L1912,1L2711,1L2711,2L2762,2L2762,4L2763,4L2763,5L2764,5L2764,6L2768,6L2768,7L2787,7" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,7L1049,7L1049,4L1075,4L1075,5L1097,5L1097,2L1607,2L1607,3L1633,3L1633,5L1912,5L1912,6L2405,6L2405,7L2410,7L2410,8L2437,8L2437,9L2543,9L2543,10L2547,10L2547,11L2611,11L2611,12L2625,12L2625,13L2649,13L2649,14L2650,14L2650,15L2661,15L2661,16L2721,16L2721,17L2728,17L2728,18L2736,18L2736,19L2738,19L2738,20L2751,20L2751,21L2754,21L2754,22L2756,22L2756,23L2763,23L2763,24L2766,24L2766,26L2774,26L2774,27L2781,27L2781,28L2784,28L2784,29L2787,29" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,8L1071,8L1071,5L1075,5L1075,6L1181,6L1181,7L1541,7L1541,8L1605,8L1605,9L1633,9L1633,11L1642,11L1642,12L1738,12L1738,13L1743,13L1743,14L1912,14L1912,15L1975,15L1975,16L2112,16L2112,17L2334,17L2334,18L2386,18L2386,19L2405,19L2405,20L2437,20L2437,21L2455,21L2455,22L2543,22L2543,23L2547,23L2547,24L2549,24L2549,25L2583,25L2583,26L2611,26L2611,27L2649,27L2649,28L2650,28L2650,29L2659,29L2659,30L2661,30L2661,31L2728,31L2728,32L2736,32L2736,33L2738,33L2738,34L2751,34L2751,35L2753,35L2753,36L2754,36L2754,37L2756,37L2756,38L2763,38L2763,39L2766,39L2766,40L2774,40L2774,41L2781,41L2781,42L2784,42L2784,43L2787,43" tabindex="0">
						<title>86ngl5wx</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,9L1075,9L1075,0L1173,0L1173,1L1633,1L1633,3L1912,3L1912,4L2405,4L2405,5L2410,5L2410,6L2437,6L2437,7L2543,7L2543,8L2611,8L2611,9L2625,9L2625,10L2649,10L2649,11L2650,11L2650,12L2661,12L2661,13L2728,13L2728,14L2736,14L2736,15L2738,15L2738,16L2751,16L2751,17L2754,17L2754,18L2756,18L2756,19L2763,19L2763,20L2766,20L2766,22L2774,22L2774,23L2781,23L2781,24L2784,24L2784,25L2787,25" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,10L1148,10L1148,9L1541,9L1541,10L1605,10L1605,11L1606,11L1606,12L1633,12L1633,14L1642,14L1642,15L1647,15L1647,16L1738,16L1738,17L1743,17L1743,18L1797,18L1797,19L1799,19L1799,20L1804,20L1804,21L1912,21L1912,22L1943,22L1943,23L1975,23L1975,24L2112,24L2112,25L2133,25L2133,26L2194,26L2194,27L2246,27L2246,28L2334,28L2334,29L2386,29L2386,30L2405,30L2405,31L2419,31L2419,32L2437,32L2437,33L2455,33L2455,34L2547,34L2547,35L2549,35L2549,36L2583,36L2583,37L2611,37L2611,38L2649,38L2649,39L2650,39L2650,40L2659,40L2659,41L2661,41L2661,42L2728,42L2728,43L2736,43L2736,44L2738,44L2738,45L2749,45L2749,46L2751,46L2751,47L2753,47L2753,48L2754,48L2754,49L2756,49L2756,50L2763,50L2763,51L2766,51L2766,52L2774,52L2774,53L2781,53L2781,54L2784,54L2784,55L2787,55" tabindex="0">
						<title>8grypo7x</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,11L1259,11L1259,10L1541,10L1541,11L1605,11L1605,12L1606,12L1606,13L1633,13L1633,15L1642,15L1642,16L1647,16L1647,17L1738,17L1738,18L1743,18L1743,19L1797,19L1797,20L1799,20L1799,21L1804,21L1804,22L1912,22L1912,23L1938,23L1938,24L1943,24L1943,25L1975,25L1975,26L2112,26L2112,27L2133,27L2133,28L2184,28L2184,29L2246,29L2246,30L2334,30L2334,31L2386,31L2386,32L2405,32L2405,33L2419,33L2419,34L2437,34L2437,35L2455,35L2455,36L2547,36L2547,38L2549,38L2549,39L2583,39L2583,40L2611,40L2611,41L2649,41L2649,42L2650,42L2650,43L2659,43L2659,44L2661,44L2661,45L2728,45L2728,46L2736,46L2736,47L2738,47L2738,48L2748,48L2748,49L2751,49L2751,50L2753,50L2753,51L2754,51L2754,52L2756,52L2756,53L2763,53L2763,54L2766,54L2766,55L2774,55L2774,56L2781,56L2781,57L2784,57L2784,58L2787,58" tabindex="0">
						<title>x7mk3z6x</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,12L1541,12L1541,6L1607,6L1607,7L1633,7L1633,9L1642,9L1642,10L1912,10L1912,11L1975,11L1975,12L2112,12L2112,13L2334,13L2334,14L2386,14L2386,15L2405,15L2405,16L2437,16L2437,17L2455,17L2455,18L2543,18L2543,19L2547,19L2547,20L2611,20L2611,21L2625,21L2625,22L2649,22L2649,23L2650,23L2650,24L2659,24L2659,25L2661,25L2661,26L2728,26L2728,27L2736,27L2736,28L2738,28L2738,29L2751,29L2751,30L2753,30L2753,31L2754,31L2754,32L2756,32L2756,33L2763,33L2763,34L2766,34L2766,35L2774,35L2774,36L2781,36L2781,37L2784,37L2784,38L2787,38" tabindex="0">
						<title>x33q437x</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,13L1605,13L1605,8L1607,8L1607,2L1633,2L1633,4L1912,4L1912,5L2405,5L2405,6L2410,6L2410,7L2437,7L2437,8L2543,8L2543,9L2547,9L2547,10L2611,10L2611,11L2625,11L2625,12L2649,12L2649,13L2650,13L2650,14L2661,14L2661,15L2721,15L2721,16L2728,16L2728,17L2736,17L2736,18L2738,18L2738,19L2751,19L2751,20L2754,20L2754,21L2756,21L2756,22L2763,22L2763,23L2766,23L2766,25L2774,25L2774,26L2781,26L2781,27L2784,27L2784,28L2787,28" tabindex="0">
						<title>866k6d38</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,14L1606,14L1606,11L1633,11L1633,13L1642,13L1642,14L1738,14L1738,15L1743,15L1743,16L1797,16L1797,17L1799,17L1799,18L1804,18L1804,19L1912,19L1912,20L1975,20L1975,21L2112,21L2112,22L2194,22L2194,23L2334,23L2334,24L2386,24L2386,25L2405,25L2405,26L2437,26L2437,27L2455,27L2455,28L2543,28L2543,29L2547,29L2547,30L2549,30L2549,31L2583,31L2583,32L2611,32L2611,33L2649,33L2649,34L2650,34L2650,35L2659,35L2659,36L2661,36L2661,37L2728,37L2728,38L2736,38L2736,39L2738,39L2738,40L2749,40L2749,41L2751,41L2751,42L2753,42L2753,43L2754,43L2754,44L2756,44L2756,45L2763,45L2763,46L2766,46L2766,47L2774,47L2774,48L2781,48L2781,49L2784,49L2784,50L2787,50" tabindex="0">
						<title>8r36oog8</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,15L1633,15L1633,1L1635,1L1635,0L1640,0L1640,1L1912,1L1912,2L2711,2L2711,3L2728,3L2728,4L2762,4L2762,5L2763,5L2763,6L2764,6L2764,8L2787,8" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,16L1633,16L1633,2L1912,2L1912,3L2405,3L2405,4L2611,4L2611,5L2650,5L2650,6L2652,6L2652,7L2728,7L2728,8L2736,8L2736,9L2738,9L2738,10L2754,10L2754,11L2756,11L2756,12L2763,12L2763,13L2766,13L2766,15L2774,15L2774,16L2781,16L2781,17L2784,17L2784,18L2787,18L2787,19L2787,19" tabindex="0">
						<title>jpog5w58</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,17L1642,17L1642,9L1912,9L1912,10L1975,10L1975,11L2334,11L2334,12L2386,12L2386,13L2405,13L2405,14L2437,14L2437,15L2455,15L2455,16L2543,16L2543,17L2547,17L2547,18L2611,18L2611,19L2625,19L2625,20L2649,20L2649,21L2650,21L2650,22L2659,22L2659,23L2661,23L2661,24L2728,24L2728,25L2736,25L2736,26L2738,26L2738,27L2751,27L2751,28L2753,28L2753,29L2754,29L2754,30L2756,30L2756,31L2763,31L2763,32L2766,32L2766,33L2774,33L2774,34L2781,34L2781,35L2784,35L2784,36L2787,36" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,18L1647,18L1647,15L1738,15L1738,16L1743,16L1743,17L1797,17L1797,18L1799,18L1799,19L1804,19L1804,20L1912,20L1912,21L1943,21L1943,22L1975,22L1975,23L2112,23L2112,24L2194,24L2194,25L2246,25L2246,26L2334,26L2334,27L2386,27L2386,28L2405,28L2405,29L2419,29L2419,30L2437,30L2437,31L2455,31L2455,32L2547,32L2547,33L2549,33L2549,34L2583,34L2583,35L2611,35L2611,36L2649,36L2649,37L2650,37L2650,38L2659,38L2659,39L2661,39L2661,40L2728,40L2728,41L2736,41L2736,42L2738,42L2738,43L2749,43L2749,44L2751,44L2751,45L2753,45L2753,46L2754,46L2754,47L2756,47L2756,48L2763,48L2763,49L2766,49L2766,50L2774,50L2774,51L2781,51L2781,52L2784,52L2784,53L2787,53" tabindex="0">
						<title>jooe13ej</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,19L1738,19L1738,12L1743,12L1743,13L1912,13L1912,14L1975,14L1975,15L2112,15L2112,16L2334,16L2334,17L2386,17L2386,18L2405,18L2405,19L2437,19L2437,20L2455,20L2455,21L2543,21L2543,22L2547,22L2547,23L2549,23L2549,24L2583,24L2583,25L2611,25L2611,26L2649,26L2649,27L2650,27L2650,28L2659,28L2659,29L2661,29L2661,30L2728,30L2728,31L2736,31L2736,32L2738,32L2738,33L2751,33L2751,34L2753,34L2753,35L2754,35L2754,36L2756,36L2756,37L2763,37L2763,38L2766,38L2766,39L2774,39L2774,40L2781,40L2781,41L2784,41L2784,42L2787,42" tabindex="0">
						<title>xk1oze6j</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,20L1743,20L1743,11L1912,11L1912,12L1975,12L1975,13L2112,13L2112,14L2334,14L2334,15L2386,15L2386,16L2405,16L2405,17L2437,17L2437,18L2455,18L2455,19L2543,19L2543,20L2547,20L2547,21L2611,21L2611,22L2625,22L2625,23L2649,23L2649,24L2650,24L2650,25L2659,25L2659,26L2661,26L2661,27L2728,27L2728,28L2736,28L2736,29L2738,29L2738,30L2751,30L2751,31L2753,31L2753,32L2754,32L2754,33L2756,33L2756,34L2763,34L2763,35L2766,35L2766,36L2774,36L2774,37L2781,37L2781,38L2784,38L2784,39L2787,39" tabindex="0">
						<title>8v27295j</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,21L1797,21L1797,15L1799,15L1799,16L1912,16L1912,17L1975,17L1975,18L2112,18L2112,19L2334,19L2334,20L2386,20L2386,21L2405,21L2405,22L2437,22L2437,23L2455,23L2455,24L2543,24L2543,25L2547,25L2547,26L2549,26L2549,27L2583,27L2583,28L2611,28L2611,29L2649,29L2649,30L2650,30L2650,31L2659,31L2659,32L2661,32L2661,33L2728,33L2728,34L2736,34L2736,35L2738,35L2738,36L2751,36L2751,37L2753,37L2753,38L2754,38L2754,39L2756,39L2756,40L2763,40L2763,41L2766,41L2766,42L2774,42L2774,43L2781,43L2781,44L2784,44L2784,45L2787,45" tabindex="0">
						<title>j9p7powx</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,22L1799,22L1799,15L1912,15L1912,16L1975,16L1975,17L2112,17L2112,18L2334,18L2334,19L2386,19L2386,20L2405,20L2405,21L2437,21L2437,22L2455,22L2455,23L2543,23L2543,24L2547,24L2547,25L2549,25L2549,26L2583,26L2583,27L2611,27L2611,28L2649,28L2649,29L2650,29L2650,30L2659,30L2659,31L2661,31L2661,32L2728,32L2728,33L2736,33L2736,34L2738,34L2738,35L2751,35L2751,36L2753,36L2753,37L2754,37L2754,38L2756,38L2756,39L2763,39L2763,40L2766,40L2766,41L2774,41L2774,42L2781,42L2781,43L2784,43L2784,44L2787,44" tabindex="0">
						<title>8g0kl3yx</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,23L1804,23L1804,18L1912,18L1912,19L1975,19L1975,20L2112,20L2112,21L2194,21L2194,22L2334,22L2334,23L2386,23L2386,24L2405,24L2405,25L2437,25L2437,26L2455,26L2455,27L2543,27L2543,28L2547,28L2547,29L2549,29L2549,30L2583,30L2583,31L2611,31L2611,32L2649,32L2649,33L2650,33L2650,34L2659,34L2659,35L2661,35L2661,36L2728,36L2728,37L2736,37L2736,38L2738,38L2738,39L2749,39L2749,40L2751,40L2751,41L2753,41L2753,42L2754,42L2754,43L2756,43L2756,44L2763,44L2763,45L2766,45L2766,46L2774,46L2774,47L2781,47L2781,48L2784,48L2784,49L2787,49" tabindex="0">
						<title>8qoz5eoj</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,24L1912,24L1912,0L2711,0L2711,1L2717,1L2717,0L2762,0L2762,1L2763,1L2763,3L2768,3L2768,5L2772,5L2772,0L2777,0L2777,1L2778,1L2778,0L2779,0L2779,1L2781,1L2781,0L2787,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,25L1938,25L1938,23L1943,23L1943,24L1975,24L1975,25L2112,25L2112,26L2133,26L2133,27L2184,27L2184,28L2246,28L2246,29L2334,29L2334,30L2386,30L2386,31L2405,31L2405,32L2419,32L2419,33L2437,33L2437,34L2455,34L2455,35L2547,35L2547,36L2549,36L2549,37L2583,37L2583,38L2611,38L2611,39L2649,39L2649,40L2650,40L2650,41L2659,41L2659,42L2661,42L2661,43L2728,43L2728,44L2736,44L2736,45L2738,45L2738,46L2749,46L2749,47L2751,47L2751,48L2753,48L2753,49L2754,49L2754,50L2756,50L2756,51L2763,51L2763,52L2766,52L2766,53L2774,53L2774,54L2781,54L2781,55L2784,55L2784,56L2787,56" tabindex="0">
						<title>8ew394p8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,26L1943,26L1943,21L1975,21L1975,22L2112,22L2112,23L2194,23L2194,24L2334,24L2334,25L2386,25L2386,26L2405,26L2405,27L2437,27L2437,28L2455,28L2455,29L2543,29L2543,30L2547,30L2547,31L2549,31L2549,32L2583,32L2583,33L2611,33L2611,34L2649,34L2649,35L2650,35L2650,36L2659,36L2659,37L2661,37L2661,38L2728,38L2728,39L2736,39L2736,40L2738,40L2738,41L2749,41L2749,42L2751,42L2751,43L2753,43L2753,44L2754,44L2754,45L2756,45L2756,46L2763,46L2763,47L2766,47L2766,48L2774,48L2774,49L2781,49L2781,50L2784,50L2784,51L2787,51" tabindex="0">
						<title>jmzwyzex</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,27L1975,27L1975,9L2386,9L2386,10L2405,10L2405,11L2410,11L2410,12L2437,12L2437,13L2455,13L2455,14L2543,14L2543,15L2547,15L2547,16L2611,16L2611,17L2625,17L2625,18L2649,18L2649,19L2650,19L2650,20L2661,20L2661,21L2728,21L2728,22L2736,22L2736,23L2738,23L2738,24L2751,24L2751,25L2753,25L2753,26L2754,26L2754,27L2756,27L2756,28L2763,28L2763,29L2766,29L2766,30L2774,30L2774,31L2781,31L2781,32L2784,32L2784,33L2787,33" tabindex="0">
						<title>8w045k3j</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,28L2112,28L2112,12L2334,12L2334,13L2386,13L2386,14L2405,14L2405,15L2437,15L2437,16L2455,16L2455,17L2543,17L2543,18L2547,18L2547,19L2611,19L2611,20L2625,20L2625,21L2649,21L2649,22L2650,22L2650,23L2659,23L2659,24L2661,24L2661,25L2728,25L2728,26L2736,26L2736,27L2738,27L2738,28L2751,28L2751,29L2753,29L2753,30L2754,30L2754,31L2756,31L2756,32L2763,32L2763,33L2766,33L2766,34L2774,34L2774,35L2781,35L2781,36L2784,36L2784,37L2787,37" tabindex="0">
						<title>86r6og08</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,29L2133,29L2133,25L2194,25L2194,26L2246,26L2246,27L2334,27L2334,28L2386,28L2386,29L2405,29L2405,30L2419,30L2419,31L2437,31L2437,32L2455,32L2455,33L2547,33L2547,34L2549,34L2549,35L2583,35L2583,36L2611,36L2611,37L2649,37L2649,38L2650,38L2650,39L2659,39L2659,40L2661,40L2661,41L2728,41L2728,42L2736,42L2736,43L2738,43L2738,44L2749,44L2749,45L2751,45L2751,46L2753,46L2753,47L2754,47L2754,48L2756,48L2756,49L2763,49L2763,50L2766,50L2766,51L2774,51L2774,52L2781,52L2781,53L2784,53L2784,54L2787,54" tabindex="0">
						<title>8w3gpdvj</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,30L2184,30L2184,27L2194,27L2194,20L2334,20L2334,21L2386,21L2386,22L2405,22L2405,23L2437,23L2437,24L2455,24L2455,25L2543,25L2543,26L2547,26L2547,27L2549,27L2549,28L2583,28L2583,29L2611,29L2611,30L2649,30L2649,31L2650,31L2650,32L2659,32L2659,33L2661,33L2661,34L2728,34L2728,35L2736,35L2736,36L2738,36L2738,37L2749,37L2749,38L2751,38L2751,39L2753,39L2753,40L2754,40L2754,41L2756,41L2756,42L2763,42L2763,43L2766,43L2766,44L2774,44L2774,45L2781,45L2781,46L2784,46L2784,47L2787,47" tabindex="0">
						<title>8dpl6o58</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,31L2246,31L2246,25L2334,25L2334,26L2386,26L2386,27L2405,27L2405,28L2437,28L2437,29L2455,29L2455,30L2543,30L2543,7L2611,7L2611,8L2625,8L2625,9L2649,9L2649,10L2650,10L2650,11L2661,11L2661,12L2662,12L2662,9L2728,9L2728,10L2736,10L2736,11L2738,11L2738,12L2754,12L2754,13L2756,13L2756,14L2763,14L2763,15L2766,15L2766,17L2774,17L2774,18L2781,18L2781,19L2784,19L2784,20L2787,20L2787,15L2787,15" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,32L2334,32L2334,11L2386,11L2386,12L2405,12L2405,13L2410,13L2410,5L2611,5L2611,6L2625,6L2625,7L2650,7L2650,8L2652,8L2652,9L2662,9L2662,10L2728,10L2728,11L2736,11L2736,12L2738,12L2738,13L2754,13L2754,14L2756,14L2756,15L2763,15L2763,16L2766,16L2766,18L2774,18L2774,19L2781,19L2781,20L2784,20L2784,21L2787,21" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,33L2386,33L2386,8L2405,8L2405,9L2410,9L2410,10L2437,10L2437,11L2455,11L2455,12L2543,12L2543,13L2547,13L2547,14L2611,14L2611,15L2625,15L2625,16L2649,16L2649,17L2650,17L2650,18L2661,18L2661,19L2721,19L2721,20L2728,20L2728,21L2736,21L2736,22L2738,22L2738,23L2751,23L2751,24L2753,24L2753,25L2754,25L2754,26L2756,26L2756,27L2763,27L2763,28L2766,28L2766,29L2774,29L2774,30L2781,30L2781,31L2784,31L2784,32L2787,32" tabindex="0">
						<title>86rpw3p8</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,34L2405,34L2405,3L2629,3L2629,4L2653,4L2653,5L2728,5L2728,6L2736,6L2736,7L2738,7L2738,8L2754,8L2754,9L2756,9L2756,10L2763,10L2763,11L2766,11L2766,13L2781,13L2781,14L2784,14L2784,15L2787,15L2787,16L2787,16" tabindex="0">
						<title>jn6zlzqx</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,35L2419,35L2419,29L2437,29L2437,30L2455,30L2455,31L2547,31L2547,32L2549,32L2549,33L2583,33L2583,34L2611,34L2611,35L2649,35L2649,36L2650,36L2650,37L2659,37L2659,38L2661,38L2661,39L2728,39L2728,40L2736,40L2736,41L2738,41L2738,42L2749,42L2749,43L2751,43L2751,44L2753,44L2753,45L2754,45L2754,46L2756,46L2756,47L2763,47L2763,48L2766,48L2766,49L2774,49L2774,50L2781,50L2781,51L2784,51L2784,52L2787,52" tabindex="0">
						<title>xyko1pn8</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,36L2437,36L2437,6L2611,6L2611,7L2625,7L2625,8L2649,8L2649,9L2650,9L2650,10L2661,10L2661,11L2662,11L2662,12L2728,12L2728,13L2736,13L2736,14L2738,14L2738,15L2754,15L2754,16L2756,16L2756,17L2763,17L2763,18L2766,18L2766,20L2774,20L2774,21L2781,21L2781,22L2784,22L2784,23L2787,23" tabindex="0">
						<title>j0ewnqw8</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,37L2455,37L2455,11L2543,11L2543,12L2547,12L2547,13L2611,13L2611,14L2625,14L2625,15L2649,15L2649,16L2650,16L2650,17L2661,17L2661,18L2721,18L2721,19L2728,19L2728,20L2736,20L2736,21L2738,21L2738,22L2751,22L2751,23L2753,23L2753,24L2754,24L2754,25L2756,25L2756,26L2763,26L2763,27L2766,27L2766,28L2774,28L2774,29L2781,29L2781,30L2784,30L2784,31L2787,31" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,38L2547,38L2547,37L2549,37L2549,38L2583,38L2583,39L2611,39L2611,40L2649,40L2649,41L2650,41L2650,42L2659,42L2659,43L2661,43L2661,44L2728,44L2728,45L2736,45L2736,46L2738,46L2738,47L2748,47L2748,48L2751,48L2751,49L2753,49L2753,50L2754,50L2754,51L2756,51L2756,52L2763,52L2763,53L2766,53L2766,54L2774,54L2774,55L2781,55L2781,56L2784,56L2784,57L2787,57" tabindex="0">
						<title>86p16o0j</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,39L2547,39L2547,9L2611,9L2611,10L2625,10L2625,11L2649,11L2649,12L2650,12L2650,13L2661,13L2661,14L2728,14L2728,15L2736,15L2736,16L2738,16L2738,17L2751,17L2751,18L2754,18L2754,19L2756,19L2756,20L2763,20L2763,21L2766,21L2766,23L2774,23L2774,24L2781,24L2781,25L2784,25L2784,26L2787,26" tabindex="0">
						<title>81p5l538</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,40L2549,40L2549,22L2583,22L2583,23L2611,23L2611,24L2649,24L2649,25L2650,25L2650,26L2659,26L2659,27L2661,27L2661,28L2728,28L2728,29L2736,29L2736,30L2738,30L2738,31L2751,31L2751,32L2753,32L2753,33L2754,33L2754,34L2756,34L2756,35L2763,35L2763,36L2766,36L2766,37L2774,37L2774,38L2781,38L2781,39L2784,39L2784,40L2787,40" tabindex="0">
						<title>j5p0g068</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,41L2583,41L2583,22L2611,22L2611,23L2625,23L2625,6L2650,6L2650,7L2652,7L2652,8L2728,8L2728,9L2736,9L2736,10L2738,10L2738,11L2754,11L2754,12L2756,12L2756,13L2763,13L2763,14L2766,14L2766,16L2774,16L2774,17L2781,17L2781,18L2784,18L2784,19L2787,19L2787,20L2787,20" tabindex="0">
						<title>8lrmkz78</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,42L2611,42L2611,4L2629,4L2629,3L2653,3L2653,4L2711,4L2711,0L2717,0L2717,1L2762,1L2762,2L2763,2L2763,4L2764,4L2764,5L2768,5L2768,2L2772,2L2772,3L2787,3" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,43L2649,43L2649,8L2650,8L2650,9L2652,9L2652,5L2653,5L2653,6L2728,6L2728,7L2736,7L2736,8L2738,8L2738,9L2754,9L2754,10L2756,10L2756,11L2763,11L2763,12L2766,12L2766,14L2774,14L2774,15L2781,15L2781,16L2784,16L2784,17L2787,17L2787,18L2787,18" tabindex="0">
						<title>j2pzvvp8</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,44L2650,44L2650,5L2652,5L2652,6L2653,6L2653,3L2711,3L2711,4L2728,4L2728,5L2738,5L2738,6L2756,6L2756,8L2764,8L2764,7L2768,7L2768,4L2772,4L2772,5L2787,5" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,45L2659,45L2659,21L2661,21L2661,22L2728,22L2728,23L2736,23L2736,24L2738,24L2738,25L2751,25L2751,26L2753,26L2753,27L2754,27L2754,28L2756,28L2756,29L2763,29L2763,30L2766,30L2766,31L2774,31L2774,32L2781,32L2781,33L2784,33L2784,34L2787,34" tabindex="0">
						<title>8r6739q8</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,46L2661,46L2661,10L2662,10L2662,11L2728,11L2728,12L2736,12L2736,13L2738,13L2738,14L2754,14L2754,15L2756,15L2756,16L2763,16L2763,17L2766,17L2766,19L2774,19L2774,20L2781,20L2781,21L2784,21L2784,22L2787,22" tabindex="0">
						<title>xz59wp0x</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,47L2728,47L2728,3L2762,3L2762,3L2763,3L2763,2L2764,2L2764,0L2772,0L2772,1L2777,1L2777,0L2778,0L2778,1L2779,1L2779,0L2781,0L2781,1L2787,1" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,48L2736,48L2736,6L2738,6L2738,7L2754,7L2754,8L2756,8L2756,7L2763,7L2763,0L2764,0L2764,2L2768,2L2768,3L2772,3L2772,4L2787,4" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,49L2738,49L2738,5L2762,5L2762,6L2763,6L2763,7L2764,7L2764,4L2768,4L2768,6L2787,6" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,50L2748,50L2748,47L2749,47L2749,37L2751,37L2751,38L2753,38L2753,39L2754,39L2754,40L2756,40L2756,41L2763,41L2763,42L2766,42L2766,43L2774,43L2774,44L2781,44L2781,45L2784,45L2784,46L2787,46" tabindex="0">
						<title>8d9y77ox</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,51L2751,51L2751,16L2754,16L2754,17L2756,17L2756,18L2763,18L2763,19L2766,19L2766,21L2774,21L2774,22L2781,22L2781,23L2784,23L2784,24L2787,24" tabindex="0">
						<title>j4w7mevx</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path d="M0,52L2753,52L2753,23L2754,23L2754,24L2756,24L2756,25L2763,25L2763,26L2766,26L2766,11L2784,11L2784,12L2787,12" tabindex="0">
						<title>j2pmdqp8</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,53L2754,53L2754,7L2756,7L2756,9L2763,9L2763,10L2766,10L2766,12L2781,12L2781,13L2784,13L2784,14L2787,14" tabindex="0">
						<title>8gz9pzyj</title>
					</path>
				</g>
				<g style="--index: 54;">
					<path d="M0,54L2756,54L2756,6L2762,6L2762,0L2763,0L2763,1L2764,1L2764,1L2772,1L2772,2L2787,2" tabindex="0">
						<title>86pek6wj</title>
					</path>
				</g>
				<g style="--index: 55;">
					<path d="M0,55L2763,55L2763,9L2764,9L2764,9L2787,9" tabindex="0">
						<title>jozk4o78</title>
					</path>
				</g>
				<g style="--index: 56;">
					<path d="M0,56L2766,56L2766,10L2787,10" tabindex="0">
						<title>jm0rn9z8</title>
					</path>
				</g>
				<g style="--index: 57;">
					<path d="M0,57L2774,57L2774,14L2781,14L2781,15L2784,15L2784,16L2787,16L2787,17L2787,17" tabindex="0">
						<title>8q0gd60j</title>
					</path>
				</g>
				<g style="--index: 58;">
					<path d="M0,58L2781,58L2781,12L2784,12L2784,13L2787,13" tabindex="0">
						<title>jm0q7qe8</title>
					</path>
				</g>
				<g style="--index: 59;">
					<path d="M0,59L2784,59L2784,11L2787,11" tabindex="0">
						<title>jppqrz4j</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
