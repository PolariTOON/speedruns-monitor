<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by player for leaderboard xd17x94d-9l71pv4l.zqo20y2l</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2020-01-20</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-07-28</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">34</text>
		</svg>
		<svg viewBox="0 0 2016 34" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 34) scale(1 -1)" style="--count: 34;">
				<g>
					<rect x="0" y="0" width="2016" height="34"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,1L97,1L97,1L101,1L101,2L135,2L135,2L146,2L146,2L148,2L148,2L151,2L151,1L221,1L221,1L222,1L222,1L255,1L255,4L282,4L282,4L283,4L283,5L310,5L310,4L311,4L311,5L324,5L324,6L328,6L328,7L336,7L336,8L342,8L342,9L345,9L345,10L349,10L349,11L359,11L359,12L361,12L361,12L362,12L362,13L371,13L371,14L399,14L399,13L400,13L400,14L401,14L401,13L405,13L405,14L434,14L434,15L438,15L438,14L482,14L482,15L516,15L516,16L518,16L518,17L534,17L534,18L625,18L625,19L706,19L706,21L735,21L735,22L738,22L738,23L800,23L800,24L837,24L837,25L869,25L869,26L893,26L893,27L905,27L905,28L912,28L912,29L922,29L922,30L945,30L945,31L951,31L951,32L953,32L953,33L1180,33L1180,32L2016,32L2016,33L2016,33" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L101,0L101,1L146,1L146,1L148,1L148,3L152,3L152,2L221,2L221,2L222,2L222,4L224,4L224,3L255,3L255,2L283,2L283,2L286,2L286,3L316,3L316,2L318,2L318,2L324,2L324,3L328,3L328,4L336,4L336,5L342,5L342,6L345,6L345,6L349,6L349,7L354,7L354,6L359,6L359,7L362,7L362,8L367,8L367,7L371,7L371,8L405,8L405,9L482,9L482,10L516,10L516,11L518,11L518,12L528,12L528,15L530,15L530,15L625,15L625,16L706,16L706,18L735,18L735,19L738,19L738,20L800,20L800,21L837,21L837,22L869,22L869,23L893,23L893,24L905,24L905,25L912,25L912,26L922,26L922,27L945,27L945,28L951,28L951,29L953,29L953,30L1001,30L1001,29L1014,29L1014,28L2016,28L2016,28L2016,28" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L148,0L148,1L151,1L151,2L152,2L152,3L155,3L155,3L164,3L164,3L221,3L221,3L222,3L222,2L255,2L255,1L283,1L283,1L324,1L324,2L328,2L328,3L336,3L336,4L342,4L342,4L345,4L345,4L349,4L349,5L359,5L359,6L362,6L362,7L367,7L367,9L371,9L371,10L405,10L405,11L482,11L482,12L516,12L516,13L518,13L518,14L528,14L528,13L625,13L625,14L706,14L706,16L735,16L735,17L738,17L738,18L800,18L800,19L837,19L837,20L869,20L869,21L893,21L893,21L905,21L905,22L912,22L912,23L922,23L922,24L945,24L945,25L951,25L951,26L953,26L953,27L960,27L960,26L974,26L974,25L2016,25L2016,25L2016,25" tabindex="0">
						<title>8146r4r8</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L221,0L221,4L222,4L222,3L224,3L224,4L255,4L255,3L283,3L283,3L286,3L286,2L316,2L316,4L324,4L324,5L328,5L328,6L336,6L336,7L342,7L342,8L345,8L345,9L349,9L349,10L359,10L359,11L362,11L362,12L371,12L371,13L399,13L399,12L405,12L405,13L482,13L482,14L516,14L516,15L518,15L518,16L625,16L625,17L706,17L706,19L735,19L735,20L738,20L738,21L800,21L800,22L837,22L837,23L869,23L869,24L893,24L893,25L905,25L905,26L912,26L912,27L922,27L922,28L945,28L945,29L951,29L951,30L953,30L953,31L1001,31L1001,30L1014,30L1014,29L2016,29L2016,29L2016,29" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L283,0L283,4L286,4L286,4L310,4L310,5L311,5L311,4L316,4L316,3L324,3L324,4L328,4L328,5L336,5L336,6L342,6L342,7L345,7L345,8L349,8L349,9L359,9L359,10L362,10L362,11L371,11L371,12L399,12L399,14L400,14L400,13L401,13L401,14L405,14L405,15L434,15L434,14L438,14L438,15L441,15L441,15L482,15L482,16L516,16L516,17L518,17L518,18L534,18L534,17L625,17L625,18L706,18L706,20L735,20L735,21L738,21L738,22L800,22L800,23L837,23L837,24L869,24L869,25L893,25L893,26L905,26L905,27L912,27L912,28L922,28L922,29L945,29L945,30L951,30L951,31L953,31L953,32L1180,32L1180,31L2016,31L2016,32L2016,32" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L324,0L324,1L328,1L328,2L336,2L336,2L342,2L342,2L345,2L345,2L349,2L349,2L359,2L359,2L362,2L362,2L371,2L371,3L405,3L405,4L482,4L482,4L516,4L516,4L518,4L518,4L625,4L625,5L706,5L706,5L735,5L735,5L738,5L738,5L800,5L800,5L837,5L837,5L869,5L869,5L893,5L893,5L905,5L905,5L912,5L912,5L922,5L922,5L945,5L945,5L951,5L951,6L953,6L953,7L2016,7L2016,7L2016,7" tabindex="0">
						<title>8l099l78</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L328,0L328,1L336,1L336,1L342,1L342,1L345,1L345,1L349,1L349,1L359,1L359,1L362,1L362,1L371,1L371,1L405,1L405,1L482,1L482,1L516,1L516,1L518,1L518,1L625,1L625,1L706,1L706,1L735,1L735,1L738,1L738,1L800,1L800,1L837,1L837,1L869,1L869,1L893,1L893,1L905,1L905,1L912,1L912,1L922,1L922,1L945,1L945,1L951,1L951,1L953,1L953,1L2016,1L2016,1L2016,1" tabindex="0">
						<title>j511dgw8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L336,0L336,3L342,3L342,3L345,3L345,3L349,3L349,3L359,3L359,4L362,4L362,4L371,4L371,5L405,5L405,6L482,6L482,6L516,6L516,6L518,6L518,7L625,7L625,8L706,8L706,10L708,10L708,9L735,9L735,10L738,10L738,11L800,11L800,11L837,11L837,12L869,12L869,12L893,12L893,12L905,12L905,13L912,13L912,14L922,14L922,14L945,14L945,14L951,14L951,15L953,15L953,16L2016,16L2016,16L2016,16" tabindex="0">
						<title>j5w0pqzj</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L342,0L342,5L345,5L345,5L349,5L349,6L354,6L354,8L359,8L359,9L362,9L362,10L371,10L371,11L405,11L405,12L482,12L482,13L516,13L516,14L518,14L518,15L528,15L528,14L625,14L625,15L706,15L706,17L735,17L735,18L738,18L738,19L800,19L800,20L837,20L837,21L869,21L869,22L893,22L893,22L905,22L905,23L912,23L912,24L922,24L922,25L945,25L945,26L951,26L951,27L953,27L953,28L1001,28L1001,26L2016,26L2016,26L2016,26" tabindex="0">
						<title>814zn7l8</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L345,0L345,7L349,7L349,8L354,8L354,7L359,7L359,8L362,8L362,9L367,9L367,8L371,8L371,9L405,9L405,10L482,10L482,11L516,11L516,12L518,12L518,13L528,13L528,12L625,12L625,13L706,13L706,15L735,15L735,16L738,16L738,17L800,17L800,18L837,18L837,19L869,19L869,20L893,20L893,20L905,20L905,21L912,21L912,22L922,22L922,23L945,23L945,24L951,24L951,25L953,25L953,26L960,26L960,25L974,25L974,24L2016,24L2016,24L2016,24" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L349,0L349,4L359,4L359,5L362,5L362,5L371,5L371,6L405,6L405,7L451,7L451,8L482,8L482,9L516,9L516,10L518,10L518,10L535,10L535,11L549,11L549,10L625,10L625,11L706,11L706,13L735,13L735,14L738,14L738,15L800,15L800,16L837,16L837,17L869,17L869,18L893,18L893,18L905,18L905,19L912,19L912,20L922,20L922,21L945,21L945,22L951,22L951,23L953,23L953,24L960,24L960,23L974,23L974,22L2016,22L2016,22L2016,22" tabindex="0">
						<title>8qr3e7dj</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L359,0L359,3L362,3L362,3L371,3L371,4L405,4L405,5L482,5L482,5L516,5L516,5L518,5L518,6L625,6L625,7L706,7L706,8L735,8L735,9L738,9L738,10L800,10L800,10L837,10L837,11L869,11L869,11L893,11L893,11L905,11L905,12L912,12L912,13L922,13L922,13L945,13L945,13L951,13L951,14L953,14L953,15L2016,15L2016,15L2016,15" tabindex="0">
						<title>8gr0en1x</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L362,0L362,6L371,6L371,7L405,7L405,8L451,8L451,7L482,7L482,8L516,8L516,9L517,9L517,8L518,8L518,9L625,9L625,10L706,10L706,12L708,12L708,11L735,11L735,12L738,12L738,13L800,13L800,14L837,14L837,15L869,15L869,15L893,15L893,15L896,15L896,14L905,14L905,15L912,15L912,16L922,16L922,17L931,17L931,16L945,16L945,17L949,17L949,16L951,16L951,17L953,17L953,18L2016,18L2016,18L2016,18" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L371,0L371,2L405,2L405,3L415,3L415,2L482,2L482,2L516,2L516,2L518,2L518,2L625,2L625,2L706,2L706,2L735,2L735,2L738,2L738,2L800,2L800,2L837,2L837,2L869,2L869,2L893,2L893,2L905,2L905,2L912,2L912,2L922,2L922,2L945,2L945,2L951,2L951,3L953,3L953,3L2016,3L2016,3L2016,3" tabindex="0">
						<title>j4rp9rv8</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L405,0L405,2L415,2L415,3L482,3L482,3L516,3L516,3L518,3L518,3L625,3L625,3L706,3L706,3L735,3L735,3L738,3L738,3L800,3L800,3L837,3L837,3L869,3L869,3L893,3L893,3L905,3L905,3L912,3L912,3L922,3L922,3L945,3L945,3L951,3L951,4L953,4L953,4L2016,4L2016,4L2016,4" tabindex="0">
						<title>8wl24d4j</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L482,0L482,7L516,7L516,7L518,7L518,8L625,8L625,9L706,9L706,11L708,11L708,10L735,10L735,11L738,11L738,12L800,12L800,13L837,13L837,14L869,14L869,14L893,14L893,14L896,14L896,17L905,17L905,18L912,18L912,19L922,19L922,20L945,20L945,21L951,21L951,22L953,22L953,23L960,23L960,27L974,27L974,26L995,26L995,27L1001,27L1001,28L1014,28L1014,31L1024,31L1024,30L2016,30L2016,30L2016,30" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L516,0L516,8L517,8L517,9L518,9L518,11L535,11L535,10L549,10L549,11L625,11L625,12L706,12L706,14L735,14L735,15L738,15L738,16L800,16L800,17L837,17L837,18L869,18L869,19L893,19L893,19L905,19L905,20L912,20L912,21L922,21L922,22L945,22L945,23L951,23L951,24L953,24L953,25L960,25L960,24L974,24L974,23L2016,23L2016,23L2016,23" tabindex="0">
						<title>jnzen32j</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L518,0L518,5L625,5L625,6L706,6L706,7L735,7L735,8L738,8L738,9L800,9L800,9L837,9L837,10L869,10L869,10L893,10L893,10L905,10L905,11L912,11L912,12L922,12L922,12L945,12L945,12L951,12L951,13L953,13L953,14L2016,14L2016,14L2016,14" tabindex="0">
						<title>8vo5rv5x</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L625,0L625,4L706,4L706,4L735,4L735,4L738,4L738,4L800,4L800,4L837,4L837,4L869,4L869,4L893,4L893,4L905,4L905,4L912,4L912,4L922,4L922,4L945,4L945,4L951,4L951,5L953,5L953,5L2016,5L2016,5L2016,5" tabindex="0">
						<title>x3mv1m78</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L706,0L706,9L708,9L708,12L735,12L735,13L738,13L738,14L800,14L800,15L837,15L837,16L869,16L869,17L893,17L893,17L896,17L896,16L905,16L905,17L912,17L912,18L922,18L922,19L931,19L931,18L945,18L945,19L949,19L949,18L951,18L951,19L953,19L953,20L2016,20L2016,20L2016,20" tabindex="0">
						<title>j5v07yg8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L706,0L706,6L735,6L735,6L738,6L738,6L800,6L800,6L837,6L837,6L869,6L869,6L893,6L893,6L905,6L905,6L912,6L912,6L922,6L922,6L945,6L945,6L951,6L951,7L953,7L953,8L2016,8L2016,8L2016,8" tabindex="0">
						<title>8e642kdj</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L735,0L735,7L738,7L738,8L800,8L800,8L837,8L837,9L869,9L869,9L893,9L893,9L905,9L905,10L912,10L912,11L922,11L922,11L945,11L945,11L951,11L951,12L953,12L953,13L2016,13L2016,13L2016,13" tabindex="0">
						<title>xkmw53mj</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L738,0L738,7L800,7L800,7L837,7L837,7L869,7L869,7L893,7L893,7L905,7L905,7L912,7L912,8L922,8L922,8L945,8L945,8L951,8L951,9L953,9L953,10L2016,10L2016,10L2016,10" tabindex="0">
						<title>81q1433j</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L800,0L800,12L837,12L837,13L869,13L869,13L893,13L893,13L905,13L905,14L912,14L912,15L922,15L922,15L945,15L945,15L951,15L951,16L953,16L953,17L2016,17L2016,17L2016,17" tabindex="0">
						<title>x72652r8</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L837,0L837,8L869,8L869,8L893,8L893,8L905,8L905,9L912,9L912,10L922,10L922,10L945,10L945,10L951,10L951,11L953,11L953,12L2016,12L2016,12L2016,12" tabindex="0">
						<title>8lpmq72j</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L869,0L869,16L893,16L893,16L896,16L896,15L905,15L905,16L912,16L912,17L922,17L922,18L931,18L931,17L945,17L945,18L949,18L949,17L951,17L951,18L953,18L953,19L2016,19L2016,19L2016,19" tabindex="0">
						<title>j9rwqy7j</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L893,0L893,23L905,23L905,24L912,24L912,25L922,25L922,26L945,26L945,27L951,27L951,28L953,28L953,29L1001,29L1001,27L2016,27L2016,27L2016,27" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L905,0L905,8L912,8L912,9L922,9L922,9L945,9L945,9L951,9L951,10L953,10L953,11L2016,11L2016,11L2016,11" tabindex="0">
						<title>8l3yvor8</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L912,0L912,7L922,7L922,7L945,7L945,7L951,7L951,8L953,8L953,9L2016,9L2016,9L2016,9" tabindex="0">
						<title>j0grn39x</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L922,0L922,16L931,16L931,19L945,19L945,20L951,20L951,21L953,21L953,22L974,22L974,27L995,27L995,26L1001,26L1001,31L1014,31L1014,30L1024,30L1024,31L1180,31L1180,33L2016,33L2016,34L2016,34" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L945,0L945,16L949,16L949,19L951,19L951,20L953,20L953,21L2016,21L2016,21L2016,21" tabindex="0">
						<title>8w0knvqj</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L951,0L951,2L953,2L953,2L2016,2L2016,2L2016,2" tabindex="0">
						<title>jmzpn34x</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L953,0L953,6L2016,6L2016,6L2016,6" tabindex="0">
						<title>jnpzmz18</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L2016,0L2016,31L2016,31" tabindex="0">
						<title>81v0nq38</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
