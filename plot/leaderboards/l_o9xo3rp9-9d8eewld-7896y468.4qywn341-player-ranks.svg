<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Rank by player for leaderboard l_o9xo3rp9-9d8eewld-7896y468.4qywn341</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2021-10-15</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-03-21</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">59</text>
		</svg>
		<svg viewBox="0 0 1253 59" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 59) scale(1 -1)" style="--count: 60;">
				<g>
					<rect x="0" y="0" width="1253" height="59"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,0L145,0L145,1L261,1L261,2L501,2L501,4L502,4L502,5L528,5L528,6L538,6L538,7L539,7L539,8L597,8L597,9L604,9L604,10L611,10L611,11L612,11L612,12L870,12L870,13L977,13L977,14L1012,14L1012,15L1049,15L1049,16L1050,16L1050,17L1080,17L1080,18L1181,18L1181,19L1200,19L1200,20L1228,20L1228,21L1229,21L1229,22L1246,22L1246,23L1250,23L1250,24L1253,24" tabindex="0">
						<title>8w16l2zx</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,1L15,1L15,1L145,1L145,2L207,2L207,3L261,3L261,4L305,4L305,5L340,5L340,6L395,6L395,7L493,7L493,8L499,8L499,9L500,9L500,10L502,10L502,11L528,11L528,12L538,12L538,13L539,13L539,14L563,14L563,15L597,15L597,16L598,16L598,17L604,17L604,18L611,18L611,19L673,19L673,20L718,20L718,21L870,21L870,22L915,22L915,23L965,23L965,24L968,24L968,25L977,25L977,26L1012,26L1012,27L1049,27L1049,28L1050,28L1050,29L1080,29L1080,30L1155,30L1155,31L1181,31L1181,32L1199,32L1199,33L1200,33L1200,34L1226,34L1226,35L1228,35L1228,36L1229,36L1229,37L1246,37L1246,38L1247,38L1247,39L1250,39L1250,40L1253,40" tabindex="0">
						<title>81qdl4lj</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,2L145,2L145,0L261,0L261,1L502,1L502,2L528,2L528,3L584,3L584,4L604,4L604,5L611,5L611,6L977,6L977,7L1012,7L1012,8L1049,8L1049,9L1080,9L1080,10L1228,10L1228,11L1229,11L1229,12L1239,12L1239,13L1246,13L1246,14L1250,14L1250,15L1253,15" tabindex="0">
						<title>866gn938</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L147,3L147,3L207,3L207,4L261,4L261,5L305,5L305,6L340,6L340,7L395,7L395,8L493,8L493,9L499,9L499,10L500,10L500,11L502,11L502,12L528,12L528,13L538,13L538,14L539,14L539,15L563,15L563,16L597,16L597,17L598,17L598,18L604,18L604,19L611,19L611,20L639,20L639,21L673,21L673,22L718,22L718,23L870,23L870,24L883,24L883,25L915,25L915,26L965,26L965,27L968,27L968,28L977,28L977,29L1012,29L1012,30L1049,30L1049,31L1050,31L1050,32L1080,32L1080,33L1155,33L1155,34L1181,34L1181,35L1199,35L1199,36L1200,36L1200,37L1226,37L1226,38L1228,38L1228,39L1229,39L1229,40L1245,40L1245,41L1246,41L1246,43L1247,43L1247,44L1250,44L1250,45L1253,45" tabindex="0">
						<title>8ek1yoo8</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,4L207,4L207,2L261,2L261,3L305,3L305,4L500,4L500,5L501,5L501,6L502,6L502,7L528,7L528,8L538,8L538,9L539,9L539,10L597,10L597,11L598,11L598,12L604,12L604,13L611,13L611,14L718,14L718,15L870,15L870,16L915,16L915,17L965,17L965,18L977,18L977,19L1012,19L1012,20L1049,20L1049,21L1050,21L1050,22L1080,22L1080,23L1155,23L1155,24L1181,24L1181,25L1199,25L1199,26L1200,26L1200,27L1226,27L1226,28L1228,28L1228,29L1229,29L1229,30L1246,30L1246,31L1250,31L1250,32L1253,32" tabindex="0">
						<title>8gm02d18</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,5L261,5L261,0L1047,0L1047,1L1072,1L1072,2L1253,2L1253,3L1253,3" tabindex="0">
						<title>joovynnj</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,6L305,6L305,3L500,3L500,4L501,4L501,5L502,5L502,6L528,6L528,7L538,7L538,8L539,8L539,9L597,9L597,10L604,10L604,11L611,11L611,12L612,12L612,13L718,13L718,14L870,14L870,15L915,15L915,16L965,16L965,17L977,17L977,18L1012,18L1012,19L1049,19L1049,20L1050,20L1050,21L1080,21L1080,22L1155,22L1155,23L1181,23L1181,24L1200,24L1200,25L1226,25L1226,26L1228,26L1228,27L1229,27L1229,28L1246,28L1246,29L1250,29L1250,30L1253,30" tabindex="0">
						<title>j9p1q7ox</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,7L340,7L340,5L395,5L395,6L493,6L493,7L499,7L499,8L500,8L500,9L502,9L502,10L528,10L528,11L538,11L538,12L539,12L539,13L597,13L597,14L598,14L598,15L604,15L604,16L611,16L611,17L673,17L673,18L718,18L718,19L870,19L870,20L915,20L915,21L965,21L965,22L968,22L968,23L977,23L977,24L1012,24L1012,25L1049,25L1049,26L1050,26L1050,27L1080,27L1080,28L1155,28L1155,29L1181,29L1181,30L1199,30L1199,31L1200,31L1200,32L1226,32L1226,33L1228,33L1228,34L1229,34L1229,35L1246,35L1246,36L1247,36L1247,37L1250,37L1250,38L1253,38" tabindex="0">
						<title>xk115v9j</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,8L395,8L395,5L500,5L500,6L501,6L501,7L502,7L502,8L528,8L528,9L538,9L538,10L539,10L539,11L597,11L597,12L598,12L598,13L604,13L604,14L611,14L611,15L718,15L718,16L870,16L870,17L915,17L915,18L965,18L965,19L977,19L977,20L1012,20L1012,21L1049,21L1049,22L1050,22L1050,23L1080,23L1080,24L1155,24L1155,25L1181,25L1181,26L1199,26L1199,27L1200,27L1200,28L1226,28L1226,29L1228,29L1228,30L1229,30L1229,31L1246,31L1246,32L1250,32L1250,33L1253,33" tabindex="0">
						<title>8rlrzvd8</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,9L431,9L431,9L493,9L493,10L499,10L499,11L500,11L500,12L502,12L502,13L528,13L528,14L538,14L538,15L539,15L539,16L563,16L563,17L597,17L597,18L598,18L598,19L604,19L604,20L611,20L611,21L639,21L639,22L673,22L673,23L718,23L718,24L870,24L870,25L883,25L883,26L915,26L915,27L965,27L965,28L968,28L968,29L977,29L977,30L1012,30L1012,31L1049,31L1049,32L1050,32L1050,33L1080,33L1080,34L1155,34L1155,35L1181,35L1181,36L1199,36L1199,37L1200,37L1200,38L1226,38L1226,39L1228,39L1228,40L1229,40L1229,41L1245,41L1245,42L1246,42L1246,44L1247,44L1247,45L1250,45L1250,46L1253,46" tabindex="0">
						<title>8qoz5eoj</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,10L438,10L438,10L493,10L493,11L498,11L498,12L499,12L499,13L500,13L500,14L502,14L502,15L522,15L522,16L528,16L528,17L538,17L538,18L539,18L539,19L563,19L563,20L564,20L564,21L588,21L588,22L597,22L597,23L604,23L604,24L611,24L611,25L639,25L639,26L673,26L673,27L718,27L718,28L870,28L870,29L883,29L883,30L915,30L915,31L965,31L965,32L968,32L968,33L977,33L977,34L1012,34L1012,35L1023,35L1023,36L1049,36L1049,37L1050,37L1050,39L1080,39L1080,40L1116,40L1116,41L1152,41L1152,42L1155,42L1155,43L1181,43L1181,44L1197,44L1197,45L1199,45L1199,46L1200,46L1200,47L1224,47L1224,48L1226,48L1226,49L1227,49L1227,50L1228,50L1228,51L1229,51L1229,52L1245,52L1245,53L1246,53L1246,54L1247,54L1247,55L1250,55L1250,56L1253,56" tabindex="0">
						<title>xz0v5kn8</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,11L493,11L493,6L500,6L500,7L501,7L501,2L502,2L502,3L528,3L528,4L538,4L538,5L539,5L539,6L584,6L584,3L588,3L588,1L604,1L604,2L611,2L611,3L1012,3L1012,4L1049,4L1049,6L1072,6L1072,7L1229,7L1229,8L1253,8L1253,9L1253,9" tabindex="0">
						<title>8640og3j</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,12L498,12L498,11L499,11L499,12L500,12L500,13L502,13L502,14L528,14L528,15L538,15L538,16L539,16L539,17L563,17L563,18L564,18L564,19L588,19L588,20L597,20L597,21L604,21L604,22L611,22L611,23L639,23L639,24L673,24L673,25L718,25L718,26L870,26L870,27L883,27L883,28L915,28L915,29L965,29L965,30L968,30L968,31L977,31L977,32L1012,32L1012,33L1023,33L1023,34L1049,34L1049,35L1050,35L1050,36L1080,36L1080,37L1152,37L1152,38L1155,38L1155,39L1181,39L1181,40L1197,40L1197,41L1199,41L1199,42L1200,42L1200,43L1224,43L1224,44L1226,44L1226,45L1227,45L1227,46L1228,46L1228,47L1229,47L1229,48L1245,48L1245,49L1246,49L1246,50L1247,50L1247,51L1250,51L1250,52L1253,52" tabindex="0">
						<title>j9p7powx</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,13L499,13L499,7L500,7L500,8L502,8L502,9L528,9L528,10L538,10L538,11L539,11L539,12L597,12L597,13L598,13L598,14L604,14L604,15L611,15L611,16L673,16L673,17L718,17L718,18L870,18L870,19L915,19L915,20L965,20L965,21L968,21L968,22L977,22L977,23L1012,23L1012,24L1049,24L1049,25L1050,25L1050,26L1080,26L1080,27L1155,27L1155,28L1181,28L1181,29L1199,29L1199,30L1200,30L1200,31L1226,31L1226,32L1228,32L1228,33L1229,33L1229,34L1246,34L1246,35L1247,35L1247,36L1250,36L1250,37L1253,37" tabindex="0">
						<title>xk349668</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,14L500,14L500,3L501,3L501,3L502,3L502,4L528,4L528,5L538,5L538,6L539,6L539,7L597,7L597,8L604,8L604,9L611,9L611,10L612,10L612,11L870,11L870,12L977,12L977,13L1012,13L1012,14L1049,14L1049,15L1050,15L1050,16L1080,16L1080,17L1181,17L1181,18L1228,18L1228,19L1229,19L1229,20L1246,20L1246,21L1250,21L1250,22L1253,22" tabindex="0">
						<title>j9p3ykox</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,15L502,15L502,1L528,1L528,2L588,2L588,3L604,3L604,4L611,4L611,5L977,5L977,6L1012,6L1012,7L1049,7L1049,8L1228,8L1228,9L1229,9L1229,10L1239,10L1239,11L1246,11L1246,12L1250,12L1250,13L1253,13" tabindex="0">
						<title>8q6k30oj</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,16L522,16L522,15L528,15L528,16L538,16L538,17L539,17L539,18L563,18L563,19L564,19L564,20L588,20L588,21L597,21L597,22L604,22L604,23L611,23L611,24L639,24L639,25L673,25L673,26L718,26L718,27L870,27L870,28L883,28L883,29L915,29L915,30L965,30L965,31L968,31L968,32L977,32L977,33L1012,33L1012,34L1023,34L1023,35L1049,35L1049,36L1050,36L1050,37L1080,37L1080,38L1116,38L1116,39L1152,39L1152,40L1155,40L1155,41L1181,41L1181,42L1197,42L1197,43L1199,43L1199,44L1200,44L1200,45L1224,45L1224,46L1226,46L1226,47L1227,47L1227,48L1228,48L1228,49L1229,49L1229,50L1245,50L1245,51L1246,51L1246,52L1247,52L1247,53L1250,53L1250,54L1253,54" tabindex="0">
						<title>joneez78</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,17L528,17L528,1L588,1L588,2L604,2L604,3L611,3L611,4L1012,4L1012,5L1049,5L1049,7L1072,7L1072,0L1091,0L1091,1L1253,1" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,18L538,18L538,4L584,4L584,5L604,5L604,6L611,6L611,7L977,7L977,8L1012,8L1012,9L1049,9L1049,10L1080,10L1080,11L1181,11L1181,12L1228,12L1228,13L1229,13L1229,14L1239,14L1239,15L1246,15L1246,16L1250,16L1250,17L1253,17" tabindex="0">
						<title>j9pkl7vx</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,19L539,19L539,5L584,5L584,6L604,6L604,7L611,7L611,8L612,8L612,9L977,9L977,10L1012,10L1012,11L1049,11L1049,12L1080,12L1080,13L1181,13L1181,14L1228,14L1228,15L1229,15L1229,16L1239,16L1239,17L1246,17L1246,18L1250,18L1250,19L1253,19" tabindex="0">
						<title>8g072p2x</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,20L563,20L563,14L597,14L597,15L598,15L598,16L604,16L604,17L611,17L611,18L673,18L673,19L718,19L718,20L870,20L870,21L915,21L915,22L965,22L965,23L968,23L968,24L977,24L977,25L1012,25L1012,26L1049,26L1049,27L1050,27L1050,28L1080,28L1080,29L1155,29L1155,30L1181,30L1181,31L1199,31L1199,32L1200,32L1200,33L1226,33L1226,34L1228,34L1228,35L1229,35L1229,36L1246,36L1246,37L1247,37L1247,38L1250,38L1250,39L1253,39" tabindex="0">
						<title>8g0qr57x</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,21L564,21L564,18L597,18L597,19L598,19L598,20L604,20L604,21L611,21L611,22L639,22L639,23L673,23L673,24L718,24L718,25L870,25L870,26L883,26L883,27L915,27L915,28L965,28L965,29L968,29L968,30L977,30L977,31L1012,31L1012,32L1049,32L1049,33L1050,33L1050,34L1080,34L1080,35L1155,35L1155,36L1166,36L1166,37L1181,37L1181,38L1199,38L1199,39L1200,39L1200,40L1224,40L1224,41L1226,41L1226,42L1227,42L1227,43L1228,43L1228,44L1229,44L1229,45L1245,45L1245,46L1246,46L1246,47L1247,47L1247,48L1250,48L1250,49L1253,49" tabindex="0">
						<title>8ew394p8</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,22L588,22L588,19L597,19L597,20L598,20L598,11L604,11L604,12L611,12L611,13L612,13L612,8L977,8L977,9L1012,9L1012,10L1049,10L1049,11L1080,11L1080,12L1181,12L1181,13L1228,13L1228,14L1229,14L1229,15L1239,15L1239,16L1246,16L1246,17L1250,17L1250,18L1253,18" tabindex="0">
						<title>xyodgvzj</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,23L597,23L597,7L604,7L604,8L611,8L611,9L612,9L612,10L870,10L870,11L977,11L977,12L1012,12L1012,13L1049,13L1049,14L1050,14L1050,15L1080,15L1080,16L1181,16L1181,17L1228,17L1228,18L1229,18L1229,19L1246,19L1246,20L1250,20L1250,21L1253,21" tabindex="0">
						<title>8w049n3j</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,24L604,24L604,1L611,1L611,2L1012,2L1012,3L1049,3L1049,5L1072,5L1072,6L1229,6L1229,7L1253,7L1253,8L1253,8" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,25L611,25L611,1L1047,1L1047,0L1072,0L1072,1L1091,1L1091,0L1253,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,26L639,26L639,20L673,20L673,21L718,21L718,22L870,22L870,23L883,23L883,24L915,24L915,25L965,25L965,26L968,26L968,27L977,27L977,28L1012,28L1012,29L1049,29L1049,30L1050,30L1050,31L1080,31L1080,32L1155,32L1155,33L1181,33L1181,34L1199,34L1199,35L1200,35L1200,36L1226,36L1226,37L1228,37L1228,38L1229,38L1229,39L1246,39L1246,41L1247,41L1247,42L1250,42L1250,43L1253,43" tabindex="0">
						<title>8v05z9yx</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,27L673,27L673,16L718,16L718,17L870,17L870,18L915,18L915,19L965,19L965,20L977,20L977,21L1012,21L1012,22L1049,22L1049,23L1050,23L1050,24L1080,24L1080,25L1155,25L1155,26L1181,26L1181,27L1199,27L1199,28L1200,28L1200,29L1226,29L1226,30L1228,30L1228,31L1229,31L1229,32L1246,32L1246,33L1250,33L1250,34L1253,34" tabindex="0">
						<title>jon0m6l8</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,28L718,28L718,13L870,13L870,14L965,14L965,15L977,15L977,16L1012,16L1012,17L1049,17L1049,18L1050,18L1050,19L1080,19L1080,20L1155,20L1155,21L1181,21L1181,22L1200,22L1200,23L1228,23L1228,24L1229,24L1229,25L1246,25L1246,26L1250,26L1250,27L1253,27" tabindex="0">
						<title>8v02q3nx</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,29L786,29L786,29L870,29L870,30L883,30L883,31L915,31L915,32L965,32L965,33L966,33L966,34L968,34L968,35L977,35L977,36L1012,36L1012,37L1023,37L1023,38L1049,38L1049,39L1050,39L1050,41L1080,41L1080,42L1116,42L1116,43L1152,43L1152,44L1155,44L1155,45L1181,45L1181,46L1197,46L1197,47L1199,47L1199,48L1200,48L1200,49L1224,49L1224,50L1226,50L1226,51L1227,51L1227,52L1228,52L1228,53L1229,53L1229,54L1245,54L1245,55L1246,55L1246,56L1247,56L1247,57L1250,57L1250,58L1253,58" tabindex="0">
						<title>x77ee56x</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,30L870,30L870,10L977,10L977,11L1012,11L1012,12L1049,12L1049,13L1050,13L1050,14L1080,14L1080,15L1181,15L1181,16L1228,16L1228,17L1229,17L1229,18L1239,18L1239,9L1250,9L1250,10L1253,10L1253,11L1253,11" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,31L883,31L883,23L915,23L915,24L965,24L965,25L968,25L968,26L977,26L977,27L1012,27L1012,28L1049,28L1049,29L1050,29L1050,30L1080,30L1080,31L1155,31L1155,32L1181,32L1181,33L1199,33L1199,34L1200,34L1200,35L1226,35L1226,36L1228,36L1228,37L1229,37L1229,38L1246,38L1246,39L1247,39L1247,40L1250,40L1250,41L1253,41" tabindex="0">
						<title>xz22lw4x</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,32L915,32L915,15L965,15L965,16L977,16L977,17L1012,17L1012,18L1049,18L1049,19L1050,19L1050,20L1080,20L1080,21L1155,21L1155,22L1181,22L1181,23L1200,23L1200,24L1226,24L1226,25L1228,25L1228,26L1229,26L1229,27L1246,27L1246,28L1250,28L1250,29L1253,29" tabindex="0">
						<title>j46k93w8</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,33L965,33L965,14L977,14L977,15L1012,15L1012,16L1049,16L1049,17L1050,17L1050,18L1080,18L1080,19L1181,19L1181,20L1200,20L1200,21L1228,21L1228,22L1229,22L1229,23L1246,23L1246,24L1250,24L1250,25L1253,25" tabindex="0">
						<title>8eep62p8</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,34L966,34L966,33L968,33L968,34L977,34L977,35L1012,35L1012,36L1023,36L1023,37L1049,37L1049,38L1050,38L1050,40L1080,40L1080,41L1116,41L1116,42L1152,42L1152,43L1155,43L1155,44L1181,44L1181,45L1197,45L1197,46L1199,46L1199,47L1200,47L1200,48L1224,48L1224,49L1226,49L1226,50L1227,50L1227,51L1228,51L1228,52L1229,52L1229,53L1245,53L1245,54L1246,54L1246,55L1247,55L1247,56L1250,56L1250,57L1253,57" tabindex="0">
						<title>8g2w027j</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,35L968,35L968,21L977,21L977,22L1012,22L1012,23L1049,23L1049,24L1050,24L1050,25L1080,25L1080,26L1155,26L1155,27L1181,27L1181,28L1199,28L1199,29L1200,29L1200,30L1226,30L1226,31L1228,31L1228,32L1229,32L1229,33L1246,33L1246,34L1250,34L1250,35L1253,35" tabindex="0">
						<title>86rq7yw8</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,36L977,36L977,5L1012,5L1012,6L1049,6L1049,3L1072,3L1072,4L1229,4L1229,5L1253,5L1253,6L1253,6" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,37L1012,37L1012,2L1072,2L1072,3L1229,3L1229,4L1253,4L1253,5L1253,5" tabindex="0">
						<title>86rpw3p8</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,38L1023,38L1023,33L1049,33L1049,34L1050,34L1050,35L1080,35L1080,36L1152,36L1152,37L1155,37L1155,38L1181,38L1181,39L1199,39L1199,40L1200,40L1200,41L1224,41L1224,42L1226,42L1226,43L1227,43L1227,44L1228,44L1228,45L1229,45L1229,46L1245,46L1245,47L1246,47L1246,48L1247,48L1247,49L1250,49L1250,50L1253,50" tabindex="0">
						<title>xzyl2k9j</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,39L1049,39L1049,4L1072,4L1072,5L1229,5L1229,6L1253,6L1253,7L1253,7" tabindex="0">
						<title>x7z6ly08</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,40L1050,40L1050,13L1080,13L1080,14L1181,14L1181,15L1228,15L1228,16L1229,16L1229,17L1239,17L1239,18L1246,18L1246,19L1250,19L1250,20L1253,20" tabindex="0">
						<title>86p4245j</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,41L1050,41L1050,38L1080,38L1080,39L1116,39L1116,40L1152,40L1152,41L1155,41L1155,42L1181,42L1181,43L1197,43L1197,44L1199,44L1199,45L1200,45L1200,46L1224,46L1224,47L1226,47L1226,48L1227,48L1227,49L1228,49L1228,50L1229,50L1229,51L1245,51L1245,52L1246,52L1246,53L1247,53L1247,54L1250,54L1250,55L1253,55" tabindex="0">
						<title>xk6pydk8</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,42L1080,42L1080,9L1228,9L1228,10L1229,10L1229,11L1239,11L1239,12L1246,12L1246,13L1250,13L1250,14L1253,14" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,43L1103,43L1103,43L1116,43L1116,44L1152,44L1152,45L1155,45L1155,46L1181,46L1181,47L1197,47L1197,48L1199,48L1199,49L1200,49L1200,50L1224,50L1224,51L1226,51L1226,52L1227,52L1227,53L1228,53L1228,54L1229,54L1229,55L1245,55L1245,56L1246,56L1246,57L1247,57L1247,58L1250,58L1250,59L1253,59" tabindex="0">
						<title>xykykon8</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,44L1116,44L1116,38L1152,38L1152,39L1155,39L1155,40L1181,40L1181,41L1197,41L1197,42L1199,42L1199,43L1200,43L1200,44L1224,44L1224,45L1226,45L1226,46L1227,46L1227,47L1228,47L1228,48L1229,48L1229,49L1245,49L1245,50L1246,50L1246,51L1247,51L1247,52L1250,52L1250,53L1253,53" tabindex="0">
						<title>8l6n3m48</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,45L1152,45L1152,36L1155,36L1155,37L1166,37L1166,36L1181,36L1181,37L1199,37L1199,38L1200,38L1200,39L1226,39L1226,40L1228,40L1228,41L1229,41L1229,42L1245,42L1245,43L1246,43L1246,45L1247,45L1247,46L1250,46L1250,47L1253,47" tabindex="0">
						<title>jm6vm048</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,46L1155,46L1155,20L1181,20L1181,21L1200,21L1200,22L1228,22L1228,23L1229,23L1229,24L1246,24L1246,25L1250,25L1250,26L1253,26" tabindex="0">
						<title>8lrpdkl8</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,47L1181,47L1181,11L1228,11L1228,12L1229,12L1229,13L1239,13L1239,14L1246,14L1246,15L1250,15L1250,16L1253,16" tabindex="0">
						<title>j4pz2evj</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,48L1197,48L1197,40L1199,40L1199,41L1200,41L1200,42L1224,42L1224,43L1226,43L1226,44L1227,44L1227,45L1228,45L1228,46L1229,46L1229,47L1245,47L1245,48L1246,48L1246,49L1247,49L1247,50L1250,50L1250,51L1253,51" tabindex="0">
						<title>8eovz07j</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,49L1199,49L1199,25L1200,25L1200,26L1226,26L1226,27L1228,27L1228,28L1229,28L1229,29L1246,29L1246,30L1250,30L1250,31L1253,31" tabindex="0">
						<title>j2pgg2n8</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,50L1200,50L1200,19L1228,19L1228,20L1229,20L1229,21L1246,21L1246,22L1250,22L1250,23L1253,23" tabindex="0">
						<title>x7z9n168</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,51L1224,51L1224,40L1226,40L1226,41L1228,41L1228,42L1229,42L1229,43L1245,43L1245,44L1246,44L1246,40L1247,40L1247,41L1250,41L1250,42L1253,42" tabindex="0">
						<title>j9ve5wox</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path d="M0,52L1226,52L1226,24L1228,24L1228,25L1229,25L1229,26L1246,26L1246,27L1250,27L1250,28L1253,28" tabindex="0">
						<title>8gor462x</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,53L1227,53L1227,42L1228,42L1228,43L1229,43L1229,44L1245,44L1245,45L1246,45L1246,46L1247,46L1247,47L1250,47L1250,48L1253,48" tabindex="0">
						<title>j5p6o068</title>
					</path>
				</g>
				<g style="--index: 54;">
					<path d="M0,54L1228,54L1228,8L1229,8L1229,9L1239,9L1239,10L1246,10L1246,11L1250,11L1250,12L1253,12" tabindex="0">
						<title>xk6gnm98</title>
					</path>
				</g>
				<g style="--index: 55;">
					<path d="M0,55L1229,55L1229,3L1253,3L1253,4L1253,4" tabindex="0">
						<title>8grypo7x</title>
					</path>
				</g>
				<g style="--index: 56;">
					<path d="M0,56L1245,56L1245,40L1246,40L1246,42L1247,42L1247,43L1250,43L1250,44L1253,44" tabindex="0">
						<title>j4p14gmj</title>
					</path>
				</g>
				<g style="--index: 57;">
					<path d="M0,57L1246,57L1246,10L1250,10L1250,11L1253,11L1253,2L1253,2" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 58;">
					<path d="M0,58L1247,58L1247,35L1250,35L1250,36L1253,36" tabindex="0">
						<title>8l6m01r8</title>
					</path>
				</g>
				<g style="--index: 59;">
					<path d="M0,59L1250,59L1250,9L1253,9L1253,10L1253,10" tabindex="0">
						<title>jpzvon0x</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
