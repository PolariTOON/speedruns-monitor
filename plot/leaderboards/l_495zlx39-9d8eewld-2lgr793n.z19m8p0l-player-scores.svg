<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by player for leaderboard l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-04-09</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-22</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">57</text>
		</svg>
		<svg viewBox="0 0 2723 57" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 57) scale(1 -1)" style="--count: 57;">
				<g>
					<rect x="0" y="0" width="2723" height="57"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,1L92,1L92,1L773,1L773,1L956,1L956,1L959,1L959,1L979,1L979,1L983,1L983,1L988,1L988,1L1436,1L1436,1L1507,1L1507,1L1516,1L1516,1L1581,1L1581,1L1706,1L1706,1L1707,1L1707,1L1710,1L1710,1L1714,1L1714,1L1801,1L1801,1L1808,1L1808,1L1954,1L1954,1L2071,1L2071,1L2216,1L2216,1L2221,1L2221,1L2223,1L2223,1L2244,1L2244,1L2339,1L2339,1L2347,1L2347,1L2365,1L2365,1L2373,1L2373,1L2412,1L2412,1L2414,1L2414,1L2433,1L2433,1L2438,1L2438,1L2528,1L2528,1L2532,1L2532,1L2540,1L2540,1L2542,1L2542,1L2581,1L2581,1L2626,1L2626,1L2642,1L2642,1L2648,1L2648,1L2651,1L2651,1L2662,1L2662,1L2664,1L2664,1L2665,1L2665,1L2672,1L2672,1L2681,1L2681,1L2686,1L2686,1L2687,1L2687,1L2694,1L2694,1L2698,1L2698,1L2700,1L2700,1L2716,1L2716,1L2722,1L2722,1L2723,1L2723,1L2723,1" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L92,0L92,2L773,2L773,3L928,3L928,2L956,2L956,2L959,2L959,3L979,3L979,4L983,4L983,5L987,5L987,4L988,4L988,3L1436,3L1436,4L1507,4L1507,4L1516,4L1516,5L1517,5L1517,4L1581,4L1581,5L1706,5L1706,6L1707,6L1707,7L1710,7L1710,8L1714,8L1714,9L1801,9L1801,10L1808,10L1808,10L1954,10L1954,11L2071,11L2071,12L2216,12L2216,13L2221,13L2221,13L2223,13L2223,14L2244,14L2244,14L2339,14L2339,14L2347,14L2347,15L2365,15L2365,15L2373,15L2373,16L2412,16L2412,17L2414,17L2414,17L2433,17L2433,18L2438,18L2438,19L2528,19L2528,19L2532,19L2532,20L2540,20L2540,21L2542,21L2542,22L2557,22L2557,21L2581,21L2581,21L2626,21L2626,21L2642,21L2642,22L2648,22L2648,22L2651,22L2651,22L2662,22L2662,22L2664,22L2664,23L2665,23L2665,23L2672,23L2672,23L2681,23L2681,23L2686,23L2686,23L2687,23L2687,24L2694,24L2694,26L2698,26L2698,26L2700,26L2700,27L2716,27L2716,27L2722,27L2722,27L2723,27L2723,28L2723,28" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L773,0L773,2L858,2L858,2L928,2L928,3L956,3L956,3L959,3L959,4L979,4L979,5L983,5L983,6L987,6L987,5L988,5L988,4L1436,4L1436,5L1507,5L1507,5L1516,5L1516,6L1581,6L1581,7L1706,7L1706,8L1707,8L1707,9L1710,9L1710,10L1714,10L1714,11L1801,11L1801,12L1808,12L1808,12L1954,12L1954,13L2071,13L2071,14L2216,14L2216,15L2221,15L2221,15L2223,15L2223,16L2244,16L2244,17L2311,17L2311,16L2339,16L2339,16L2347,16L2347,17L2365,17L2365,17L2373,17L2373,18L2412,18L2412,19L2414,19L2414,19L2433,19L2433,20L2438,20L2438,21L2528,21L2528,21L2532,21L2532,22L2540,22L2540,23L2542,23L2542,24L2557,24L2557,23L2581,23L2581,23L2626,23L2626,23L2637,23L2637,31L2642,31L2642,32L2648,32L2648,33L2651,33L2651,33L2662,33L2662,34L2664,34L2664,35L2665,35L2665,35L2672,35L2672,36L2681,36L2681,37L2682,37L2682,36L2686,36L2686,38L2687,38L2687,39L2694,39L2694,41L2698,41L2698,41L2700,41L2700,43L2716,43L2716,44L2722,44L2722,45L2723,45L2723,45L2723,45" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L956,0L956,4L959,4L959,5L979,5L979,6L983,6L983,7L987,7L987,6L988,6L988,5L1425,5L1425,8L1436,8L1436,9L1507,9L1507,10L1508,10L1508,9L1509,9L1509,10L1516,10L1516,11L1538,11L1538,10L1540,10L1540,11L1581,11L1581,12L1706,12L1706,13L1707,13L1707,14L1710,14L1710,15L1714,15L1714,16L1801,16L1801,17L1808,17L1808,17L1954,17L1954,18L2071,18L2071,19L2216,19L2216,20L2221,20L2221,21L2223,21L2223,22L2244,22L2244,23L2339,23L2339,24L2347,24L2347,25L2365,25L2365,26L2373,26L2373,27L2412,27L2412,28L2414,28L2414,29L2433,29L2433,30L2438,30L2438,31L2528,31L2528,32L2532,32L2532,33L2540,33L2540,34L2542,34L2542,35L2581,35L2581,36L2626,36L2626,37L2642,37L2642,38L2648,38L2648,39L2649,39L2649,37L2651,37L2651,37L2662,37L2662,38L2664,38L2664,39L2665,39L2665,40L2672,40L2672,41L2678,41L2678,40L2681,40L2681,41L2686,41L2686,43L2687,43L2687,44L2694,44L2694,46L2698,46L2698,46L2700,46L2700,48L2712,48L2712,47L2716,47L2716,48L2722,48L2722,49L2723,49L2723,50L2723,50" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L959,0L959,2L979,2L979,2L983,2L983,2L987,2L987,7L988,7L988,7L1013,7L1013,6L1425,6L1425,5L1436,5L1436,6L1507,6L1507,6L1516,6L1516,7L1581,7L1581,8L1706,8L1706,9L1707,9L1707,10L1710,10L1710,11L1714,11L1714,12L1801,12L1801,13L1808,13L1808,13L1954,13L1954,14L2071,14L2071,15L2216,15L2216,16L2221,16L2221,17L2223,17L2223,18L2244,18L2244,19L2311,19L2311,18L2339,18L2339,18L2347,18L2347,19L2365,19L2365,19L2373,19L2373,20L2412,20L2412,21L2414,21L2414,22L2433,22L2433,23L2438,23L2438,24L2528,24L2528,25L2532,25L2532,26L2540,26L2540,27L2542,27L2542,28L2557,28L2557,27L2570,27L2570,26L2581,26L2581,26L2626,26L2626,26L2637,26L2637,25L2642,25L2642,26L2648,26L2648,26L2651,26L2651,26L2662,26L2662,27L2664,27L2664,28L2665,28L2665,29L2667,29L2667,28L2672,28L2672,29L2681,29L2681,29L2686,29L2686,30L2687,30L2687,31L2694,31L2694,33L2698,33L2698,33L2700,33L2700,34L2716,34L2716,35L2722,35L2722,35L2723,35L2723,36L2723,36" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L979,0L979,3L983,3L983,3L987,3L987,2L988,2L988,2L1016,2L1016,2L1436,2L1436,3L1507,3L1507,3L1516,3L1516,4L1517,4L1517,3L1581,3L1581,4L1706,4L1706,5L1707,5L1707,6L1710,6L1710,7L1714,7L1714,8L1801,8L1801,9L1808,9L1808,9L1954,9L1954,10L2071,10L2071,11L2216,11L2216,12L2221,12L2221,12L2223,12L2223,13L2244,13L2244,13L2339,13L2339,13L2347,13L2347,14L2365,14L2365,14L2373,14L2373,15L2412,15L2412,16L2414,16L2414,16L2433,16L2433,17L2438,17L2438,18L2528,18L2528,18L2532,18L2532,19L2540,19L2540,20L2542,20L2542,21L2557,21L2557,20L2581,20L2581,20L2626,20L2626,20L2642,20L2642,21L2648,21L2648,21L2651,21L2651,21L2662,21L2662,21L2664,21L2664,22L2665,22L2665,22L2672,22L2672,22L2681,22L2681,22L2686,22L2686,22L2687,22L2687,23L2694,23L2694,24L2698,24L2698,24L2700,24L2700,24L2716,24L2716,24L2722,24L2722,24L2723,24L2723,25L2723,25" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L983,0L983,4L987,4L987,3L988,3L988,6L1013,6L1013,8L1021,8L1021,7L1425,7L1425,6L1436,6L1436,7L1507,7L1507,7L1516,7L1516,8L1581,8L1581,9L1706,9L1706,10L1707,10L1707,11L1710,11L1710,12L1714,12L1714,13L1801,13L1801,14L1808,14L1808,14L1954,14L1954,15L2071,15L2071,16L2216,16L2216,17L2221,17L2221,18L2223,18L2223,19L2244,19L2244,20L2311,20L2311,19L2339,19L2339,20L2347,20L2347,21L2365,21L2365,22L2373,22L2373,23L2412,23L2412,24L2414,24L2414,25L2433,25L2433,26L2438,26L2438,27L2528,27L2528,28L2532,28L2532,29L2540,29L2540,30L2542,30L2542,31L2570,31L2570,30L2581,30L2581,30L2626,30L2626,30L2637,30L2637,29L2642,29L2642,30L2648,30L2648,30L2651,30L2651,30L2662,30L2662,31L2664,31L2664,32L2665,32L2665,33L2667,33L2667,31L2672,31L2672,32L2681,32L2681,32L2686,32L2686,34L2687,34L2687,35L2694,35L2694,37L2698,37L2698,37L2700,37L2700,38L2716,38L2716,39L2722,39L2722,39L2723,39L2723,40L2723,40" tabindex="0">
						<title>814zn7l8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L988,0L988,8L998,8L998,8L1013,8L1013,7L1021,7L1021,8L1425,8L1425,7L1436,7L1436,8L1507,8L1507,8L1516,8L1516,9L1581,9L1581,10L1706,10L1706,11L1707,11L1707,12L1710,12L1710,13L1714,13L1714,14L1801,14L1801,15L1808,15L1808,15L1954,15L1954,16L2071,16L2071,17L2216,17L2216,18L2221,18L2221,19L2223,19L2223,20L2244,20L2244,21L2339,21L2339,22L2347,22L2347,23L2365,23L2365,24L2373,24L2373,25L2405,25L2405,24L2412,24L2412,25L2414,25L2414,26L2433,26L2433,27L2438,27L2438,28L2528,28L2528,29L2532,29L2532,30L2540,30L2540,31L2542,31L2542,32L2570,32L2570,31L2581,31L2581,32L2626,32L2626,32L2634,32L2634,31L2637,31L2637,30L2642,30L2642,31L2648,31L2648,31L2651,31L2651,31L2662,31L2662,32L2664,32L2664,33L2665,33L2665,34L2672,34L2672,35L2681,35L2681,36L2682,36L2682,35L2686,35L2686,37L2687,37L2687,38L2694,38L2694,40L2698,40L2698,40L2700,40L2700,42L2716,42L2716,43L2722,43L2722,44L2723,44L2723,44L2723,44" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L1436,0L1436,2L1507,2L1507,2L1516,2L1516,2L1581,2L1581,3L1706,3L1706,3L1707,3L1707,3L1710,3L1710,3L1714,3L1714,3L1801,3L1801,3L1808,3L1808,3L1954,3L1954,3L2071,3L2071,4L2216,4L2216,5L2221,5L2221,5L2223,5L2223,5L2225,5L2225,4L2244,4L2244,4L2339,4L2339,4L2347,4L2347,4L2365,4L2365,4L2373,4L2373,4L2412,4L2412,4L2414,4L2414,4L2433,4L2433,4L2438,4L2438,4L2528,4L2528,4L2532,4L2532,4L2540,4L2540,4L2542,4L2542,4L2581,4L2581,4L2626,4L2626,4L2642,4L2642,4L2648,4L2648,4L2651,4L2651,4L2662,4L2662,4L2664,4L2664,4L2665,4L2665,4L2672,4L2672,4L2681,4L2681,4L2686,4L2686,4L2687,4L2687,4L2694,4L2694,4L2698,4L2698,4L2700,4L2700,4L2716,4L2716,4L2722,4L2722,4L2723,4L2723,4L2723,4" tabindex="0">
						<title>jpo31408</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L1507,0L1507,9L1508,9L1508,10L1509,10L1509,9L1516,9L1516,10L1538,10L1538,11L1540,11L1540,10L1581,10L1581,11L1706,11L1706,12L1707,12L1707,13L1710,13L1710,14L1714,14L1714,15L1801,15L1801,16L1808,16L1808,16L1954,16L1954,17L2071,17L2071,18L2216,18L2216,19L2221,19L2221,20L2223,20L2223,21L2244,21L2244,22L2339,22L2339,23L2347,23L2347,24L2365,24L2365,25L2373,25L2373,26L2412,26L2412,27L2414,27L2414,28L2433,28L2433,29L2438,29L2438,30L2528,30L2528,31L2532,31L2532,32L2540,32L2540,33L2542,33L2542,34L2581,34L2581,35L2626,35L2626,36L2642,36L2642,37L2648,37L2648,38L2649,38L2649,36L2651,36L2651,36L2662,36L2662,37L2664,37L2664,38L2665,38L2665,39L2672,39L2672,40L2678,40L2678,39L2681,39L2681,40L2686,40L2686,42L2687,42L2687,43L2694,43L2694,45L2698,45L2698,45L2700,45L2700,47L2712,47L2712,46L2716,46L2716,47L2722,47L2722,48L2723,48L2723,49L2723,49" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L1516,0L1516,3L1517,3L1517,5L1581,5L1581,6L1706,6L1706,7L1707,7L1707,8L1710,8L1710,9L1714,9L1714,10L1801,10L1801,11L1808,11L1808,11L1954,11L1954,12L2071,12L2071,13L2216,13L2216,14L2221,14L2221,14L2223,14L2223,15L2244,15L2244,15L2339,15L2339,15L2347,15L2347,16L2365,16L2365,16L2373,16L2373,17L2412,17L2412,18L2414,18L2414,18L2433,18L2433,19L2438,19L2438,20L2528,20L2528,20L2532,20L2532,21L2540,21L2540,22L2542,22L2542,23L2557,23L2557,22L2581,22L2581,22L2626,22L2626,22L2642,22L2642,23L2648,23L2648,23L2651,23L2651,23L2662,23L2662,23L2664,23L2664,24L2665,24L2665,24L2672,24L2672,24L2681,24L2681,24L2686,24L2686,24L2687,24L2687,25L2694,25L2694,27L2698,27L2698,27L2700,27L2700,28L2716,28L2716,28L2722,28L2722,28L2723,28L2723,29L2723,29" tabindex="0">
						<title>866k6d38</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L1581,0L1581,2L1706,2L1706,2L1707,2L1707,2L1710,2L1710,2L1714,2L1714,2L1801,2L1801,2L1808,2L1808,2L1954,2L1954,2L2071,2L2071,3L2216,3L2216,3L2221,3L2221,3L2223,3L2223,3L2225,3L2225,8L2244,8L2244,8L2274,8L2274,12L2339,12L2339,12L2347,12L2347,12L2365,12L2365,12L2373,12L2373,12L2412,12L2412,12L2414,12L2414,12L2433,12L2433,13L2438,13L2438,13L2528,13L2528,13L2532,13L2532,14L2540,14L2540,15L2542,15L2542,15L2581,15L2581,15L2626,15L2626,15L2642,15L2642,16L2648,16L2648,16L2651,16L2651,16L2662,16L2662,16L2664,16L2664,17L2665,17L2665,17L2672,17L2672,17L2681,17L2681,17L2686,17L2686,17L2687,17L2687,18L2694,18L2694,18L2698,18L2698,18L2700,18L2700,18L2716,18L2716,18L2722,18L2722,18L2723,18L2723,18L2723,18" tabindex="0">
						<title>j0gyekmx</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L1706,0L1706,4L1707,4L1707,4L1710,4L1710,4L1714,4L1714,4L1801,4L1801,4L1808,4L1808,4L1954,4L1954,5L2071,5L2071,6L2216,6L2216,7L2221,7L2221,7L2223,7L2223,7L2225,7L2225,6L2244,6L2244,6L2339,6L2339,6L2347,6L2347,6L2365,6L2365,6L2373,6L2373,6L2412,6L2412,6L2414,6L2414,6L2433,6L2433,6L2438,6L2438,6L2528,6L2528,6L2532,6L2532,6L2540,6L2540,6L2542,6L2542,6L2581,6L2581,6L2626,6L2626,6L2642,6L2642,6L2648,6L2648,6L2651,6L2651,6L2662,6L2662,6L2664,6L2664,6L2665,6L2665,6L2672,6L2672,6L2681,6L2681,6L2686,6L2686,6L2687,6L2687,6L2694,6L2694,6L2698,6L2698,6L2700,6L2700,6L2716,6L2716,6L2722,6L2722,6L2723,6L2723,6L2723,6" tabindex="0">
						<title>8g0ezgyx</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L1707,0L1707,5L1710,5L1710,5L1714,5L1714,5L1801,5L1801,5L1808,5L1808,5L1954,5L1954,6L2071,6L2071,7L2216,7L2216,8L2221,8L2221,8L2223,8L2223,8L2225,8L2225,7L2244,7L2244,7L2339,7L2339,7L2347,7L2347,7L2365,7L2365,7L2373,7L2373,7L2412,7L2412,7L2414,7L2414,7L2433,7L2433,7L2438,7L2438,7L2528,7L2528,7L2532,7L2532,7L2540,7L2540,7L2542,7L2542,7L2581,7L2581,7L2626,7L2626,7L2642,7L2642,7L2648,7L2648,7L2651,7L2651,7L2662,7L2662,7L2664,7L2664,7L2665,7L2665,7L2672,7L2672,7L2681,7L2681,7L2686,7L2686,7L2687,7L2687,7L2694,7L2694,7L2698,7L2698,7L2700,7L2700,7L2716,7L2716,7L2722,7L2722,7L2723,7L2723,7L2723,7" tabindex="0">
						<title>8lonqn28</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L1710,0L1710,6L1714,6L1714,6L1801,6L1801,7L1808,7L1808,7L1954,7L1954,8L2071,8L2071,9L2216,9L2216,10L2221,10L2221,10L2223,10L2223,11L2244,11L2244,11L2274,11L2274,10L2339,10L2339,10L2347,10L2347,10L2365,10L2365,10L2373,10L2373,10L2412,10L2412,10L2414,10L2414,10L2433,10L2433,10L2438,10L2438,10L2528,10L2528,10L2532,10L2532,10L2540,10L2540,10L2542,10L2542,10L2581,10L2581,10L2626,10L2626,10L2642,10L2642,10L2648,10L2648,10L2651,10L2651,10L2662,10L2662,10L2664,10L2664,10L2665,10L2665,10L2672,10L2672,10L2681,10L2681,10L2686,10L2686,10L2687,10L2687,10L2694,10L2694,10L2698,10L2698,10L2700,10L2700,10L2716,10L2716,10L2722,10L2722,10L2723,10L2723,10L2723,10" tabindex="0">
						<title>8qoz5eoj</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L1714,0L1714,7L1801,7L1801,8L1808,8L1808,8L1954,8L1954,9L2071,9L2071,10L2216,10L2216,11L2221,11L2221,11L2223,11L2223,12L2244,12L2244,12L2274,12L2274,11L2339,11L2339,11L2347,11L2347,11L2365,11L2365,11L2373,11L2373,11L2412,11L2412,11L2414,11L2414,11L2433,11L2433,12L2438,12L2438,12L2528,12L2528,12L2532,12L2532,13L2540,13L2540,14L2542,14L2542,14L2581,14L2581,14L2626,14L2626,14L2642,14L2642,15L2648,15L2648,15L2651,15L2651,15L2662,15L2662,15L2664,15L2664,15L2665,15L2665,15L2672,15L2672,15L2681,15L2681,15L2686,15L2686,15L2687,15L2687,16L2694,16L2694,16L2698,16L2698,16L2700,16L2700,16L2716,16L2716,16L2722,16L2722,16L2723,16L2723,16L2723,16" tabindex="0">
						<title>8w02wmvj</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L1801,0L1801,6L1808,6L1808,6L1954,6L1954,7L2071,7L2071,8L2216,8L2216,9L2221,9L2221,9L2223,9L2223,10L2244,10L2244,10L2274,10L2274,9L2339,9L2339,9L2347,9L2347,9L2365,9L2365,9L2373,9L2373,9L2412,9L2412,9L2414,9L2414,9L2433,9L2433,9L2438,9L2438,9L2528,9L2528,9L2532,9L2532,9L2540,9L2540,9L2542,9L2542,9L2581,9L2581,9L2626,9L2626,9L2642,9L2642,9L2648,9L2648,9L2651,9L2651,9L2662,9L2662,9L2664,9L2664,9L2665,9L2665,9L2672,9L2672,9L2681,9L2681,9L2686,9L2686,9L2687,9L2687,9L2694,9L2694,9L2698,9L2698,9L2700,9L2700,9L2716,9L2716,9L2722,9L2722,9L2723,9L2723,9L2723,9" tabindex="0">
						<title>8rle6yd8</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L1808,0L1808,18L1864,18L1864,18L1954,18L1954,19L2071,19L2071,20L2216,20L2216,21L2221,21L2221,22L2223,22L2223,23L2244,23L2244,24L2339,24L2339,25L2347,25L2347,26L2365,26L2365,27L2373,27L2373,28L2412,28L2412,29L2414,29L2414,30L2433,30L2433,31L2438,31L2438,32L2528,32L2528,33L2532,33L2532,34L2540,34L2540,35L2542,35L2542,36L2581,36L2581,37L2626,37L2626,38L2642,38L2642,39L2648,39L2648,40L2649,40L2649,39L2650,39L2650,38L2651,38L2651,38L2662,38L2662,39L2664,39L2664,40L2665,40L2665,41L2672,41L2672,42L2675,42L2675,45L2681,45L2681,46L2686,46L2686,48L2687,48L2687,49L2694,49L2694,51L2698,51L2698,52L2700,52L2700,54L2716,54L2716,55L2722,55L2722,56L2723,56L2723,57L2723,57" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L1954,0L1954,4L2071,4L2071,5L2216,5L2216,6L2221,6L2221,6L2223,6L2223,6L2225,6L2225,5L2244,5L2244,5L2339,5L2339,5L2347,5L2347,5L2365,5L2365,5L2373,5L2373,5L2412,5L2412,5L2414,5L2414,5L2433,5L2433,5L2438,5L2438,5L2528,5L2528,5L2532,5L2532,5L2540,5L2540,5L2542,5L2542,5L2581,5L2581,5L2626,5L2626,5L2642,5L2642,5L2648,5L2648,5L2651,5L2651,5L2662,5L2662,5L2664,5L2664,5L2665,5L2665,5L2672,5L2672,5L2681,5L2681,5L2686,5L2686,5L2687,5L2687,5L2694,5L2694,5L2698,5L2698,5L2700,5L2700,5L2716,5L2716,5L2722,5L2722,5L2723,5L2723,5L2723,5" tabindex="0">
						<title>jng9el48</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L2071,0L2071,2L2216,2L2216,2L2221,2L2221,2L2223,2L2223,2L2244,2L2244,2L2339,2L2339,2L2347,2L2347,2L2365,2L2365,2L2373,2L2373,2L2412,2L2412,2L2414,2L2414,2L2433,2L2433,2L2438,2L2438,2L2528,2L2528,2L2532,2L2532,2L2540,2L2540,2L2542,2L2542,2L2581,2L2581,2L2626,2L2626,2L2642,2L2642,2L2648,2L2648,2L2651,2L2651,2L2662,2L2662,2L2664,2L2664,2L2665,2L2665,2L2672,2L2672,2L2681,2L2681,2L2686,2L2686,2L2687,2L2687,2L2694,2L2694,2L2698,2L2698,2L2700,2L2700,2L2716,2L2716,2L2722,2L2722,2L2723,2L2723,2L2723,2" tabindex="0">
						<title>x77ee56x</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L2216,0L2216,4L2221,4L2221,4L2223,4L2223,4L2225,4L2225,3L2244,3L2244,3L2339,3L2339,3L2347,3L2347,3L2365,3L2365,3L2373,3L2373,3L2412,3L2412,3L2414,3L2414,3L2433,3L2433,3L2438,3L2438,3L2528,3L2528,3L2532,3L2532,3L2540,3L2540,3L2542,3L2542,3L2581,3L2581,3L2626,3L2626,3L2642,3L2642,3L2648,3L2648,3L2651,3L2651,3L2662,3L2662,3L2664,3L2664,3L2665,3L2665,3L2672,3L2672,3L2681,3L2681,3L2686,3L2686,3L2687,3L2687,3L2694,3L2694,3L2698,3L2698,3L2700,3L2700,3L2716,3L2716,3L2722,3L2722,3L2723,3L2723,3L2723,3" tabindex="0">
						<title>j465mqd8</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L2221,0L2221,16L2223,16L2223,17L2244,17L2244,18L2311,18L2311,17L2339,17L2339,17L2347,17L2347,18L2365,18L2365,18L2373,18L2373,19L2412,19L2412,20L2414,20L2414,21L2433,21L2433,22L2438,22L2438,23L2528,23L2528,24L2532,24L2532,25L2540,25L2540,26L2542,26L2542,27L2557,27L2557,26L2570,26L2570,25L2581,25L2581,25L2626,25L2626,25L2637,25L2637,24L2642,24L2642,25L2648,25L2648,25L2651,25L2651,25L2662,25L2662,26L2664,26L2664,27L2665,27L2665,28L2667,28L2667,27L2672,27L2672,27L2681,27L2681,27L2686,27L2686,27L2687,27L2687,28L2694,28L2694,30L2698,30L2698,30L2700,30L2700,31L2716,31L2716,32L2722,32L2722,32L2723,32L2723,33L2723,33" tabindex="0">
						<title>8dpl6o58</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L2223,0L2223,9L2244,9L2244,9L2274,9L2274,8L2339,8L2339,8L2347,8L2347,8L2365,8L2365,8L2373,8L2373,8L2412,8L2412,8L2414,8L2414,8L2433,8L2433,8L2438,8L2438,8L2528,8L2528,8L2532,8L2532,8L2540,8L2540,8L2542,8L2542,8L2581,8L2581,8L2626,8L2626,8L2642,8L2642,8L2648,8L2648,8L2651,8L2651,8L2662,8L2662,8L2664,8L2664,8L2665,8L2665,8L2672,8L2672,8L2681,8L2681,8L2686,8L2686,8L2687,8L2687,8L2694,8L2694,8L2698,8L2698,8L2700,8L2700,8L2716,8L2716,8L2722,8L2722,8L2723,8L2723,8L2723,8" tabindex="0">
						<title>x3w99yqj</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L2244,0L2244,16L2311,16L2311,20L2339,20L2339,21L2347,21L2347,22L2365,22L2365,23L2373,23L2373,24L2405,24L2405,25L2412,25L2412,26L2414,26L2414,27L2433,27L2433,28L2438,28L2438,29L2528,29L2528,30L2532,30L2532,31L2540,31L2540,32L2542,32L2542,33L2581,33L2581,34L2626,34L2626,34L2636,34L2636,33L2642,33L2642,34L2648,34L2648,35L2651,35L2651,35L2662,35L2662,36L2664,36L2664,37L2665,37L2665,37L2672,37L2672,38L2678,38L2678,37L2681,37L2681,38L2686,38L2686,40L2687,40L2687,41L2694,41L2694,43L2698,43L2698,43L2700,43L2700,45L2716,45L2716,46L2722,46L2722,47L2723,47L2723,48L2723,48" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L2339,0L2339,19L2347,19L2347,20L2365,20L2365,21L2373,21L2373,22L2412,22L2412,23L2414,23L2414,24L2433,24L2433,25L2438,25L2438,26L2528,26L2528,27L2532,27L2532,28L2540,28L2540,29L2542,29L2542,30L2570,30L2570,29L2581,29L2581,29L2626,29L2626,29L2637,29L2637,28L2642,28L2642,29L2648,29L2648,29L2651,29L2651,29L2662,29L2662,30L2664,30L2664,31L2665,31L2665,32L2667,32L2667,30L2672,30L2672,31L2681,31L2681,31L2686,31L2686,33L2687,33L2687,34L2694,34L2694,36L2698,36L2698,36L2700,36L2700,37L2716,37L2716,38L2722,38L2722,38L2723,38L2723,39L2723,39" tabindex="0">
						<title>jm62e748</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L2347,0L2347,13L2365,13L2365,13L2373,13L2373,13L2412,13L2412,13L2414,13L2414,13L2433,13L2433,14L2438,14L2438,15L2528,15L2528,15L2532,15L2532,16L2540,16L2540,17L2542,17L2542,17L2581,17L2581,17L2626,17L2626,17L2642,17L2642,18L2648,18L2648,18L2651,18L2651,18L2662,18L2662,18L2664,18L2664,19L2665,19L2665,19L2672,19L2672,19L2681,19L2681,19L2686,19L2686,19L2687,19L2687,20L2694,20L2694,20L2698,20L2698,20L2700,20L2700,20L2716,20L2716,20L2722,20L2722,20L2723,20L2723,20L2723,20" tabindex="0">
						<title>j0ewnqw8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L2365,0L2365,20L2373,20L2373,21L2412,21L2412,22L2414,22L2414,23L2433,23L2433,24L2438,24L2438,25L2528,25L2528,26L2532,26L2532,27L2540,27L2540,28L2542,28L2542,29L2570,29L2570,28L2581,28L2581,28L2626,28L2626,28L2637,28L2637,27L2642,27L2642,28L2648,28L2648,28L2651,28L2651,28L2662,28L2662,29L2664,29L2664,30L2665,30L2665,31L2667,31L2667,29L2672,29L2672,30L2681,30L2681,30L2686,30L2686,31L2687,31L2687,32L2694,32L2694,34L2698,34L2698,34L2700,34L2700,35L2716,35L2716,36L2722,36L2722,36L2723,36L2723,37L2723,37" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L2373,0L2373,14L2412,14L2412,15L2414,15L2414,15L2433,15L2433,16L2438,16L2438,17L2528,17L2528,17L2532,17L2532,18L2540,18L2540,19L2542,19L2542,20L2557,20L2557,28L2570,28L2570,27L2581,27L2581,27L2626,27L2626,27L2637,27L2637,26L2642,26L2642,27L2648,27L2648,27L2651,27L2651,27L2662,27L2662,28L2664,28L2664,29L2665,29L2665,30L2667,30L2667,33L2672,33L2672,34L2681,34L2681,34L2682,34L2682,33L2686,33L2686,35L2687,35L2687,36L2694,36L2694,38L2698,38L2698,38L2700,38L2700,40L2716,40L2716,41L2722,41L2722,42L2723,42L2723,42L2723,42" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L2412,0L2412,14L2414,14L2414,14L2433,14L2433,15L2438,15L2438,16L2528,16L2528,16L2532,16L2532,17L2540,17L2540,18L2542,18L2542,19L2581,19L2581,19L2626,19L2626,19L2642,19L2642,20L2648,20L2648,20L2651,20L2651,20L2662,20L2662,20L2664,20L2664,21L2665,21L2665,21L2672,21L2672,21L2681,21L2681,21L2686,21L2686,21L2687,21L2687,22L2694,22L2694,23L2698,23L2698,23L2700,23L2700,23L2716,23L2716,23L2722,23L2722,23L2723,23L2723,24L2723,24" tabindex="0">
						<title>j9vz7vrx</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L2414,0L2414,20L2433,20L2433,21L2438,21L2438,22L2528,22L2528,23L2532,23L2532,24L2540,24L2540,25L2542,25L2542,26L2557,26L2557,25L2570,25L2570,24L2581,24L2581,24L2626,24L2626,24L2637,24L2637,23L2642,23L2642,24L2648,24L2648,24L2651,24L2651,24L2662,24L2662,25L2664,25L2664,26L2665,26L2665,27L2667,27L2667,26L2672,26L2672,26L2681,26L2681,26L2686,26L2686,26L2687,26L2687,27L2694,27L2694,29L2698,29L2698,29L2700,29L2700,30L2716,30L2716,31L2722,31L2722,31L2723,31L2723,32L2723,32" tabindex="0">
						<title>8rl97mw8</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L2433,0L2433,11L2438,11L2438,11L2528,11L2528,11L2532,11L2532,12L2540,12L2540,13L2542,13L2542,13L2581,13L2581,13L2626,13L2626,13L2642,13L2642,14L2648,14L2648,14L2651,14L2651,14L2662,14L2662,14L2664,14L2664,14L2665,14L2665,14L2672,14L2672,14L2681,14L2681,14L2686,14L2686,14L2687,14L2687,15L2694,15L2694,15L2698,15L2698,15L2700,15L2700,15L2716,15L2716,15L2722,15L2722,15L2723,15L2723,15L2723,15" tabindex="0">
						<title>j2prvwp8</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L2438,0L2438,14L2528,14L2528,14L2532,14L2532,15L2540,15L2540,16L2542,16L2542,16L2581,16L2581,16L2626,16L2626,16L2642,16L2642,17L2648,17L2648,17L2651,17L2651,17L2662,17L2662,17L2664,17L2664,18L2665,18L2665,18L2672,18L2672,18L2681,18L2681,18L2686,18L2686,18L2687,18L2687,19L2694,19L2694,19L2698,19L2698,19L2700,19L2700,19L2716,19L2716,19L2722,19L2722,19L2723,19L2723,19L2723,19" tabindex="0">
						<title>8qpvqnwx</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L2528,0L2528,22L2532,22L2532,23L2540,23L2540,24L2542,24L2542,25L2557,25L2557,24L2570,24L2570,32L2581,32L2581,33L2626,33L2626,33L2634,33L2634,32L2642,32L2642,33L2648,33L2648,34L2651,34L2651,34L2662,34L2662,35L2664,35L2664,36L2665,36L2665,36L2672,36L2672,37L2678,37L2678,41L2681,41L2681,42L2686,42L2686,44L2687,44L2687,45L2694,45L2694,47L2698,47L2698,47L2700,47L2700,49L2716,49L2716,50L2722,50L2722,50L2723,50L2723,51L2723,51" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L2532,0L2532,11L2540,11L2540,11L2542,11L2542,11L2581,11L2581,11L2626,11L2626,11L2642,11L2642,11L2648,11L2648,11L2651,11L2651,11L2662,11L2662,11L2664,11L2664,11L2665,11L2665,11L2672,11L2672,11L2681,11L2681,11L2686,11L2686,11L2687,11L2687,11L2694,11L2694,11L2698,11L2698,11L2700,11L2700,11L2716,11L2716,11L2722,11L2722,11L2723,11L2723,11L2723,11" tabindex="0">
						<title>j9ve5wox</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L2540,0L2540,12L2542,12L2542,12L2581,12L2581,12L2626,12L2626,12L2642,12L2642,12L2648,12L2648,12L2651,12L2651,12L2662,12L2662,12L2664,12L2664,12L2665,12L2665,12L2672,12L2672,12L2681,12L2681,12L2686,12L2686,12L2687,12L2687,12L2694,12L2694,12L2698,12L2698,12L2700,12L2700,12L2716,12L2716,12L2722,12L2722,12L2723,12L2723,12L2723,12" tabindex="0">
						<title>j9vw0ewx</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L2542,0L2542,18L2581,18L2581,18L2626,18L2626,18L2642,18L2642,19L2648,19L2648,19L2651,19L2651,19L2662,19L2662,19L2664,19L2664,20L2665,20L2665,20L2672,20L2672,20L2681,20L2681,20L2686,20L2686,20L2687,20L2687,21L2694,21L2694,21L2698,21L2698,21L2700,21L2700,21L2716,21L2716,21L2722,21L2722,21L2723,21L2723,21L2723,21" tabindex="0">
						<title>8w7p6k4x</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L2581,0L2581,31L2626,31L2626,31L2634,31L2634,33L2636,33L2636,35L2642,35L2642,36L2648,36L2648,37L2649,37L2649,38L2650,38L2650,39L2651,39L2651,41L2662,41L2662,42L2664,42L2664,43L2665,43L2665,44L2672,44L2672,45L2675,45L2675,44L2681,44L2681,45L2686,45L2686,47L2687,47L2687,48L2694,48L2694,50L2698,50L2698,51L2700,51L2700,53L2716,53L2716,54L2722,54L2722,55L2723,55L2723,56L2723,56" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L2626,0L2626,35L2636,35L2636,34L2642,34L2642,35L2648,35L2648,36L2649,36L2649,40L2651,40L2651,40L2662,40L2662,41L2664,41L2664,42L2665,42L2665,43L2672,43L2672,44L2675,44L2675,43L2681,43L2681,44L2686,44L2686,46L2687,46L2687,47L2694,47L2694,49L2698,49L2698,50L2700,50L2700,52L2716,52L2716,53L2722,53L2722,54L2723,54L2723,55L2723,55" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L2642,0L2642,13L2648,13L2648,13L2651,13L2651,13L2662,13L2662,13L2664,13L2664,13L2665,13L2665,13L2672,13L2672,13L2681,13L2681,13L2686,13L2686,13L2687,13L2687,14L2694,14L2694,14L2698,14L2698,14L2700,14L2700,14L2716,14L2716,14L2722,14L2722,14L2723,14L2723,14L2723,14" tabindex="0">
						<title>8r667zw8</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L2648,0L2648,32L2651,32L2651,32L2662,32L2662,33L2664,33L2664,34L2665,34L2665,38L2672,38L2672,39L2678,39L2678,38L2681,38L2681,39L2686,39L2686,41L2687,41L2687,42L2694,42L2694,44L2698,44L2698,44L2700,44L2700,46L2712,46L2712,48L2716,48L2716,49L2722,49L2722,52L2723,52L2723,53L2723,53" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L2651,0L2651,39L2662,39L2662,40L2664,40L2664,41L2665,41L2665,42L2672,42L2672,43L2675,43L2675,42L2681,42L2681,43L2686,43L2686,45L2687,45L2687,46L2694,46L2694,48L2698,48L2698,48L2700,48L2700,50L2716,50L2716,51L2722,51L2722,51L2723,51L2723,52L2723,52" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L2662,0L2662,24L2664,24L2664,25L2665,25L2665,25L2667,25L2667,32L2672,32L2672,33L2681,33L2681,33L2682,33L2682,37L2686,37L2686,39L2687,39L2687,40L2694,40L2694,42L2698,42L2698,42L2700,42L2700,44L2716,44L2716,45L2722,45L2722,46L2723,46L2723,46L2723,46" tabindex="0">
						<title>j2pmdqp8</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L2664,0L2664,16L2665,16L2665,16L2672,16L2672,16L2681,16L2681,16L2686,16L2686,16L2687,16L2687,17L2694,17L2694,17L2698,17L2698,17L2700,17L2700,17L2716,17L2716,17L2722,17L2722,17L2723,17L2723,17L2723,17" tabindex="0">
						<title>jn15mm18</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L2665,0L2665,26L2667,26L2667,25L2672,25L2672,25L2681,25L2681,25L2686,25L2686,25L2687,25L2687,26L2694,26L2694,28L2698,28L2698,28L2700,28L2700,29L2716,29L2716,29L2722,29L2722,29L2723,29L2723,30L2723,30" tabindex="0">
						<title>j0164l3x</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,0L2672,0L2672,28L2681,28L2681,28L2686,28L2686,29L2687,29L2687,30L2694,30L2694,32L2698,32L2698,32L2700,32L2700,33L2716,33L2716,34L2722,34L2722,34L2723,34L2723,35L2723,35" tabindex="0">
						<title>j01wv4rx</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,0L2681,0L2681,35L2682,35L2682,34L2686,34L2686,36L2687,36L2687,37L2694,37L2694,39L2698,39L2698,39L2700,39L2700,41L2716,41L2716,42L2722,42L2722,43L2723,43L2723,43L2723,43" tabindex="0">
						<title>jm0r7048</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,0L2686,0L2686,32L2687,32L2687,33L2694,33L2694,35L2698,35L2698,35L2700,35L2700,36L2716,36L2716,37L2722,37L2722,37L2723,37L2723,38L2723,38" tabindex="0">
						<title>8gzloyyj</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,0L2686,0L2686,28L2687,28L2687,29L2694,29L2694,31L2698,31L2698,31L2700,31L2700,32L2716,32L2716,33L2722,33L2722,33L2723,33L2723,34L2723,34" tabindex="0">
						<title>81v3d938</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,0L2687,0L2687,13L2694,13L2694,13L2698,13L2698,13L2700,13L2700,13L2716,13L2716,13L2722,13L2722,13L2723,13L2723,13L2723,13" tabindex="0">
						<title>8gzkpr2j</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,0L2694,0L2694,25L2698,25L2698,25L2700,25L2700,25L2716,25L2716,25L2722,25L2722,25L2723,25L2723,26L2723,26" tabindex="0">
						<title>8gzn56rj</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,0L2694,0L2694,22L2698,22L2698,22L2700,22L2700,22L2716,22L2716,22L2722,22L2722,22L2723,22L2723,23L2723,23" tabindex="0">
						<title>8v7p0yv8</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,0L2698,0L2698,49L2700,49L2700,51L2716,51L2716,52L2722,52L2722,53L2723,53L2723,54L2723,54" tabindex="0">
						<title>86pek6wj</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path d="M0,0L2700,0L2700,26L2716,26L2716,26L2722,26L2722,26L2723,26L2723,27L2723,27" tabindex="0">
						<title>xkzy0d7x</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,0L2700,0L2700,39L2716,39L2716,40L2722,40L2722,40L2723,40L2723,41L2723,41" tabindex="0">
						<title>8d951qgx</title>
					</path>
				</g>
				<g style="--index: 54;">
					<path d="M0,0L2716,0L2716,30L2722,30L2722,30L2723,30L2723,31L2723,31" tabindex="0">
						<title>jppk5gkj</title>
					</path>
				</g>
				<g style="--index: 55;">
					<path d="M0,0L2722,0L2722,41L2723,41L2723,47L2723,47" tabindex="0">
						<title>x7g52m6x</title>
					</path>
				</g>
				<g style="--index: 56;">
					<path d="M0,0L2723,0L2723,22L2723,22" tabindex="0">
						<title>j9y9geox</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
