<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by player for leaderboard l_rdqo542w-9d8eewld-wl30kw9l.jqzpyrgl</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2020-02-05</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-15</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">35</text>
		</svg>
		<svg viewBox="0 0 2049 35" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 35) scale(1 -1)" style="--count: 35;">
				<g>
					<rect x="0" y="0" width="2049" height="35"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,1L97,1L97,1L279,1L279,1L292,1L292,1L339,1L339,1L428,1L428,1L497,1L497,1L884,1L884,1L921,1L921,1L1055,1L1055,1L1103,1L1103,1L1111,1L1111,1L1119,1L1119,1L1149,1L1149,1L1399,1L1399,1L1556,1L1556,1L1663,1L1663,1L1698,1L1698,1L1805,1L1805,1L1846,1L1846,1L1874,1L1874,2L1883,2L1883,2L1969,2L1969,2L1971,2L1971,2L1980,2L1980,2L1982,2L1982,2L1986,2L1986,2L1994,2L1994,2L2001,2L2001,2L2003,2L2003,2L2016,2L2016,2L2034,2L2034,2L2049,2L2049,2L2049,2" tabindex="0">
						<title>8146r4r8</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L97,0L97,2L279,2L279,2L292,2L292,2L339,2L339,2L428,2L428,2L497,2L497,3L884,3L884,4L921,4L921,5L1055,5L1055,6L1103,6L1103,7L1111,7L1111,8L1119,8L1119,9L1149,9L1149,10L1150,10L1150,9L1399,9L1399,9L1556,9L1556,10L1663,10L1663,11L1698,11L1698,11L1805,11L1805,13L1846,13L1846,14L1874,14L1874,15L1883,15L1883,15L1969,15L1969,15L1971,15L1971,18L1980,18L1980,18L1982,18L1982,18L1986,18L1986,18L1994,18L1994,18L1995,18L1995,17L2001,17L2001,17L2003,17L2003,17L2007,17L2007,16L2015,16L2015,15L2016,15L2016,15L2034,15L2034,15L2049,15L2049,15L2049,15" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L279,0L279,3L292,3L292,4L324,4L324,4L339,4L339,5L428,5L428,5L497,5L497,6L884,6L884,7L921,7L921,8L1055,8L1055,9L1103,9L1103,10L1111,10L1111,11L1119,11L1119,12L1149,12L1149,13L1399,13L1399,14L1418,14L1418,13L1556,13L1556,14L1663,14L1663,15L1698,15L1698,16L1805,16L1805,18L1846,18L1846,19L1874,19L1874,20L1883,20L1883,21L1969,21L1969,22L1971,22L1971,23L1975,23L1975,22L1980,22L1980,22L1981,22L1981,21L1982,21L1982,21L1986,21L1986,21L1994,21L1994,21L1995,21L1995,20L2001,20L2001,20L2003,20L2003,20L2007,20L2007,19L2015,19L2015,18L2016,18L2016,18L2034,18L2034,18L2049,18L2049,19L2049,19" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L292,0L292,3L339,3L339,4L428,4L428,4L497,4L497,5L884,5L884,6L921,6L921,7L1055,7L1055,8L1103,8L1103,9L1111,9L1111,10L1119,10L1119,11L1149,11L1149,12L1399,12L1399,12L1556,12L1556,13L1663,13L1663,14L1698,14L1698,15L1805,15L1805,17L1846,17L1846,18L1874,18L1874,19L1883,19L1883,20L1969,20L1969,20L1971,20L1971,20L1980,20L1980,20L1982,20L1982,20L1986,20L1986,20L1994,20L1994,20L1995,20L1995,19L2001,19L2001,19L2003,19L2003,19L2007,19L2007,18L2015,18L2015,17L2016,17L2016,17L2034,17L2034,17L2049,17L2049,18L2049,18" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L339,0L339,3L428,3L428,3L497,3L497,4L884,4L884,5L921,5L921,6L1055,6L1055,7L1103,7L1103,8L1111,8L1111,9L1119,9L1119,10L1149,10L1149,11L1150,11L1150,10L1399,10L1399,10L1556,10L1556,11L1663,11L1663,12L1698,12L1698,13L1805,13L1805,15L1846,15L1846,16L1874,16L1874,17L1883,17L1883,18L1969,18L1969,18L1971,18L1971,17L1980,17L1980,17L1982,17L1982,17L1986,17L1986,17L1994,17L1994,17L1995,17L1995,16L2001,16L2001,16L2003,16L2003,16L2007,16L2007,15L2015,15L2015,14L2016,14L2016,14L2034,14L2034,14L2049,14L2049,14L2049,14" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L428,0L428,6L497,6L497,7L884,7L884,8L921,8L921,9L1055,9L1055,10L1103,10L1103,11L1111,11L1111,12L1119,12L1119,13L1149,13L1149,14L1399,14L1399,15L1418,15L1418,14L1556,14L1556,15L1663,15L1663,16L1698,16L1698,17L1805,17L1805,19L1846,19L1846,20L1874,20L1874,21L1883,21L1883,22L1969,22L1969,23L1971,23L1971,24L1975,24L1975,23L1980,23L1980,23L1981,23L1981,22L1982,22L1982,22L1986,22L1986,22L1994,22L1994,22L1995,22L1995,21L2001,21L2001,21L2003,21L2003,22L2005,22L2005,21L2007,21L2007,20L2015,20L2015,19L2016,19L2016,19L2034,19L2034,19L2049,19L2049,20L2049,20" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L497,0L497,2L884,2L884,2L921,2L921,2L1055,2L1055,3L1103,3L1103,3L1111,3L1111,4L1112,4L1112,3L1119,3L1119,3L1149,3L1149,3L1399,3L1399,3L1556,3L1556,3L1663,3L1663,3L1698,3L1698,3L1805,3L1805,3L1846,3L1846,3L1874,3L1874,4L1883,4L1883,4L1969,4L1969,4L1971,4L1971,4L1980,4L1980,4L1982,4L1982,4L1986,4L1986,4L1994,4L1994,4L2001,4L2001,4L2003,4L2003,4L2016,4L2016,4L2034,4L2034,4L2049,4L2049,4L2049,4" tabindex="0">
						<title>x7mk3z6x</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L884,0L884,3L921,3L921,4L1055,4L1055,5L1103,5L1103,6L1111,6L1111,7L1119,7L1119,8L1149,8L1149,9L1150,9L1150,8L1399,8L1399,8L1556,8L1556,9L1663,9L1663,10L1698,10L1698,10L1805,10L1805,12L1846,12L1846,13L1874,13L1874,14L1883,14L1883,14L1969,14L1969,14L1971,14L1971,14L1980,14L1980,14L1982,14L1982,14L1986,14L1986,14L1994,14L1994,14L1995,14L1995,13L2001,13L2001,13L2003,13L2003,13L2007,13L2007,12L2016,12L2016,12L2034,12L2034,12L2049,12L2049,12L2049,12" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L921,0L921,3L1055,3L1055,4L1103,4L1103,4L1111,4L1111,5L1119,5L1119,5L1149,5L1149,5L1399,5L1399,5L1556,5L1556,5L1663,5L1663,5L1698,5L1698,5L1805,5L1805,5L1846,5L1846,5L1874,5L1874,6L1883,6L1883,6L1969,6L1969,6L1971,6L1971,6L1980,6L1980,6L1982,6L1982,6L1986,6L1986,6L1994,6L1994,6L2001,6L2001,6L2003,6L2003,6L2016,6L2016,6L2034,6L2034,6L2049,6L2049,6L2049,6" tabindex="0">
						<title>xk39ok68</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L1055,0L1055,2L1103,2L1103,2L1111,2L1111,3L1112,3L1112,2L1119,2L1119,2L1149,2L1149,2L1399,2L1399,2L1556,2L1556,2L1663,2L1663,2L1698,2L1698,2L1805,2L1805,2L1846,2L1846,2L1874,2L1874,3L1883,3L1883,3L1969,3L1969,3L1971,3L1971,3L1980,3L1980,3L1982,3L1982,3L1986,3L1986,3L1994,3L1994,3L2001,3L2001,3L2003,3L2003,3L2016,3L2016,3L2034,3L2034,3L2049,3L2049,3L2049,3" tabindex="0">
						<title>jm3y0go8</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L1103,0L1103,5L1111,5L1111,6L1119,6L1119,6L1133,6L1133,7L1149,7L1149,7L1399,7L1399,7L1556,7L1556,7L1663,7L1663,7L1698,7L1698,7L1805,7L1805,7L1846,7L1846,7L1874,7L1874,8L1883,8L1883,8L1969,8L1969,8L1971,8L1971,8L1980,8L1980,8L1982,8L1982,8L1986,8L1986,8L1994,8L1994,8L2001,8L2001,8L2003,8L2003,8L2016,8L2016,8L2034,8L2034,8L2049,8L2049,8L2049,8" tabindex="0">
						<title>joovynnj</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L1111,0L1111,2L1112,2L1112,4L1119,4L1119,4L1149,4L1149,4L1399,4L1399,4L1556,4L1556,4L1663,4L1663,4L1698,4L1698,4L1805,4L1805,4L1846,4L1846,4L1874,4L1874,5L1883,5L1883,5L1969,5L1969,5L1971,5L1971,5L1980,5L1980,5L1982,5L1982,5L1986,5L1986,5L1994,5L1994,5L2001,5L2001,5L2003,5L2003,5L2016,5L2016,5L2034,5L2034,5L2049,5L2049,5L2049,5" tabindex="0">
						<title>8640og3j</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L1119,0L1119,7L1133,7L1133,6L1149,6L1149,6L1399,6L1399,6L1556,6L1556,6L1663,6L1663,6L1698,6L1698,6L1805,6L1805,6L1846,6L1846,6L1874,6L1874,7L1883,7L1883,7L1969,7L1969,7L1971,7L1971,7L1980,7L1980,7L1982,7L1982,7L1986,7L1986,7L1994,7L1994,7L2001,7L2001,7L2003,7L2003,7L2016,7L2016,7L2034,7L2034,7L2049,7L2049,7L2049,7" tabindex="0">
						<title>8q6k30oj</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L1149,0L1149,8L1150,8L1150,11L1399,11L1399,11L1556,11L1556,12L1663,12L1663,13L1698,13L1698,14L1805,14L1805,16L1846,16L1846,17L1874,17L1874,18L1883,18L1883,19L1969,19L1969,19L1971,19L1971,19L1980,19L1980,19L1982,19L1982,19L1986,19L1986,19L1994,19L1994,19L1995,19L1995,18L2001,18L2001,18L2003,18L2003,18L2007,18L2007,17L2015,17L2015,16L2016,16L2016,16L2034,16L2034,16L2049,16L2049,17L2049,17" tabindex="0">
						<title>8wlq9g3j</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L1399,0L1399,13L1418,13L1418,15L1556,15L1556,16L1663,16L1663,17L1698,17L1698,18L1805,18L1805,20L1846,20L1846,21L1874,21L1874,22L1883,22L1883,23L1969,23L1969,24L1971,24L1971,25L1975,25L1975,24L1980,24L1980,24L1981,24L1981,23L1982,23L1982,24L1986,24L1986,25L1994,25L1994,25L2001,25L2001,25L2003,25L2003,26L2005,26L2005,25L2007,25L2007,24L2015,24L2015,23L2016,23L2016,23L2034,23L2034,23L2048,23L2048,34L2049,34L2049,35L2049,35" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L1556,0L1556,8L1663,8L1663,8L1698,8L1698,8L1805,8L1805,8L1846,8L1846,9L1874,9L1874,10L1883,10L1883,10L1969,10L1969,10L1971,10L1971,10L1980,10L1980,10L1982,10L1982,10L1986,10L1986,10L1994,10L1994,10L1995,10L1995,9L2001,9L2001,9L2003,9L2003,9L2016,9L2016,9L2034,9L2034,9L2049,9L2049,9L2049,9" tabindex="0">
						<title>xkpw7g6j</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L1663,0L1663,9L1698,9L1698,9L1805,9L1805,10L1846,10L1846,11L1874,11L1874,12L1883,12L1883,12L1969,12L1969,12L1971,12L1971,12L1980,12L1980,12L1982,12L1982,12L1986,12L1986,12L1994,12L1994,12L1995,12L1995,11L2001,11L2001,11L2003,11L2003,11L2016,11L2016,11L2034,11L2034,11L2049,11L2049,11L2049,11" tabindex="0">
						<title>jm62e748</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L1698,0L1698,12L1805,12L1805,14L1846,14L1846,15L1874,15L1874,16L1883,16L1883,16L1969,16L1969,16L1971,16L1971,15L1980,15L1980,15L1982,15L1982,15L1986,15L1986,15L1994,15L1994,15L1995,15L1995,14L2001,14L2001,14L2003,14L2003,14L2007,14L2007,13L2016,13L2016,13L2034,13L2034,13L2049,13L2049,13L2049,13" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L1805,0L1805,11L1846,11L1846,12L1874,12L1874,13L1883,13L1883,13L1969,13L1969,13L1971,13L1971,13L1980,13L1980,13L1982,13L1982,13L1986,13L1986,13L1994,13L1994,13L1995,13L1995,12L2001,12L2001,12L2003,12L2003,12L2007,12L2007,30L2015,30L2015,29L2016,29L2016,29L2018,29L2018,28L2034,28L2034,29L2048,29L2048,28L2049,28L2049,29L2049,29" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L1805,0L1805,9L1846,9L1846,10L1874,10L1874,11L1883,11L1883,11L1969,11L1969,11L1971,11L1971,11L1980,11L1980,11L1982,11L1982,11L1986,11L1986,11L1994,11L1994,11L1995,11L1995,10L2001,10L2001,10L2003,10L2003,10L2016,10L2016,10L2034,10L2034,10L2049,10L2049,10L2049,10" tabindex="0">
						<title>81p5l538</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L1846,0L1846,8L1874,8L1874,9L1883,9L1883,9L1969,9L1969,9L1971,9L1971,9L1980,9L1980,9L1982,9L1982,9L1986,9L1986,9L1994,9L1994,9L1995,9L1995,24L2001,24L2001,24L2003,24L2003,25L2005,25L2005,24L2007,24L2007,23L2015,23L2015,22L2016,22L2016,22L2034,22L2034,22L2049,22L2049,23L2049,23" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L1874,0L1874,1L1883,1L1883,1L1969,1L1969,1L1971,1L1971,1L1980,1L1980,1L1982,1L1982,1L1986,1L1986,1L1994,1L1994,1L2001,1L2001,1L2003,1L2003,1L2016,1L2016,1L2034,1L2034,1L2049,1L2049,1L2049,1" tabindex="0">
						<title>x7mnw5qx</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L1883,0L1883,17L1969,17L1969,17L1971,17L1971,16L1980,16L1980,16L1982,16L1982,16L1986,16L1986,16L1994,16L1994,16L1995,16L1995,15L2001,15L2001,15L2003,15L2003,15L2007,15L2007,14L2015,14L2015,28L2016,28L2016,28L2018,28L2018,31L2020,31L2020,31L2034,31L2034,32L2048,32L2048,31L2049,31L2049,32L2049,32" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L1969,0L1969,21L1971,21L1971,22L1975,22L1975,25L1980,25L1980,26L1982,26L1982,27L1986,27L1986,27L1994,27L1994,29L2001,29L2001,30L2003,30L2003,31L2016,31L2016,31L2018,31L2018,30L2034,30L2034,31L2048,31L2048,30L2049,30L2049,31L2049,31" tabindex="0">
						<title>jo19m63x</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L1971,0L1971,21L1980,21L1980,21L1981,21L1981,25L1982,25L1982,26L1986,26L1986,28L1994,28L1994,30L2001,30L2001,31L2002,31L2002,31L2003,31L2003,32L2016,32L2016,32L2017,32L2017,33L2018,33L2018,33L2034,33L2034,34L2048,34L2048,33L2049,33L2049,34L2049,34" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L1980,0L1980,25L1981,25L1981,24L1982,24L1982,25L1986,25L1986,26L1994,26L1994,28L2001,28L2001,29L2003,29L2003,30L2007,30L2007,29L2014,29L2014,29L2015,29L2015,30L2016,30L2016,30L2018,30L2018,29L2034,29L2034,30L2048,30L2048,29L2049,29L2049,30L2049,30" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L1982,0L1982,23L1986,23L1986,24L1994,24L1994,24L1995,24L1995,23L2001,23L2001,23L2003,23L2003,24L2005,24L2005,23L2007,23L2007,22L2015,22L2015,21L2016,21L2016,21L2034,21L2034,21L2049,21L2049,22L2049,22" tabindex="0">
						<title>8ezz22d8</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L1986,0L1986,23L1994,23L1994,23L1995,23L1995,22L2001,22L2001,22L2003,22L2003,23L2005,23L2005,22L2007,22L2007,21L2015,21L2015,20L2016,20L2016,20L2034,20L2034,20L2049,20L2049,21L2049,21" tabindex="0">
						<title>8d99qlox</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L1994,0L1994,27L2001,27L2001,28L2003,28L2003,29L2007,29L2007,28L2015,28L2015,27L2016,27L2016,27L2017,27L2017,26L2034,26L2034,27L2044,27L2044,26L2048,26L2048,25L2049,25L2049,26L2049,26" tabindex="0">
						<title>j4w7mevx</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L1994,0L1994,26L2001,26L2001,27L2003,27L2003,28L2007,28L2007,27L2015,27L2015,26L2016,26L2016,26L2017,26L2017,25L2034,25L2034,25L2048,25L2048,24L2049,24L2049,25L2049,25" tabindex="0">
						<title>j9yl9qox</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L2001,0L2001,26L2003,26L2003,27L2007,27L2007,26L2015,26L2015,25L2016,25L2016,25L2017,25L2017,27L2034,27L2034,28L2048,28L2048,27L2049,27L2049,28L2049,28" tabindex="0">
						<title>j2pmdqp8</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L2003,0L2003,21L2005,21L2005,26L2007,26L2007,25L2015,25L2015,24L2016,24L2016,24L2034,24L2034,24L2048,24L2048,23L2049,23L2049,24L2049,24" tabindex="0">
						<title>867ednpj</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L2016,0L2016,33L2017,33L2017,32L2034,32L2034,33L2048,33L2048,32L2049,32L2049,33L2049,33" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L2034,0L2034,26L2042,26L2042,26L2044,26L2044,27L2048,27L2048,26L2049,26L2049,27L2049,27" tabindex="0">
						<title>81v3d938</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L2049,0L2049,16L2049,16" tabindex="0">
						<title>8gzloyyj</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
