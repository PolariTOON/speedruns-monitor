<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Rank by player for leaderboard l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-04-09</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-09-29</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">49</text>
		</svg>
		<svg viewBox="0 0 2730 49" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 49) scale(1 -1)" style="--count: 49;">
				<g>
					<rect x="0" y="0" width="2730" height="49"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,1L0,1L0,0L9,0L9,1L771,1L771,2L773,2L773,3L959,3L959,5L989,5L989,6L1054,6L1054,7L1156,7L1156,8L1437,8L1437,9L1447,9L1447,10L1514,10L1514,11L1612,11L1612,12L1675,12L1675,13L1708,13L1708,14L1751,14L1751,15L1761,15L1761,16L1779,16L1779,17L1787,17L1787,18L1964,18L1964,19L1987,19L1987,20L2033,20L2033,21L2097,21L2097,22L2122,22L2122,23L2140,23L2140,24L2215,24L2215,25L2226,25L2226,26L2261,26L2261,27L2347,27L2347,28L2349,28L2349,29L2365,29L2365,30L2373,30L2373,31L2374,31L2374,32L2495,32L2495,33L2531,33L2531,34L2593,34L2593,35L2603,35L2603,36L2648,36L2648,37L2650,37L2650,38L2651,38L2651,39L2662,39L2662,40L2663,40L2663,41L2677,41L2677,42L2681,42L2681,43L2716,43L2716,45L2722,45L2722,46L2724,46L2724,47L2730,47L2730,48L2730,48" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,2L9,2L9,0L771,0L771,1L773,1L773,2L959,2L959,4L989,4L989,5L1054,5L1054,6L1156,6L1156,7L1514,7L1514,8L1675,8L1675,9L1710,9L1710,10L1751,10L1751,11L1761,11L1761,12L1779,12L1779,13L1787,13L1787,14L1964,14L1964,15L1987,15L1987,16L2033,16L2033,17L2097,17L2097,18L2122,18L2122,19L2140,19L2140,20L2226,20L2226,21L2261,21L2261,22L2347,22L2347,23L2365,23L2365,24L2373,24L2373,25L2374,25L2374,26L2495,26L2495,27L2531,27L2531,28L2593,28L2593,29L2603,29L2603,30L2648,30L2648,31L2650,31L2650,32L2651,32L2651,33L2662,33L2662,34L2663,34L2663,35L2677,35L2677,36L2681,36L2681,37L2716,37L2716,39L2724,39L2724,40L2730,40L2730,41L2730,41" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,3L771,3L771,0L773,0L773,1L959,1L959,3L989,3L989,4L1054,4L1054,5L1156,5L1156,6L1514,6L1514,7L1675,7L1675,8L1751,8L1751,9L1779,9L1779,10L2122,10L2122,11L2140,11L2140,12L2226,12L2226,13L2261,13L2261,14L2365,14L2365,15L2374,15L2374,17L2495,17L2495,18L2531,18L2531,19L2555,19L2555,20L2603,20L2603,21L2640,21L2640,22L2648,22L2648,23L2650,23L2650,24L2651,24L2651,25L2662,25L2662,26L2677,26L2677,27L2681,27L2681,28L2722,28L2722,29L2724,29L2724,30L2730,30L2730,31L2730,31" tabindex="0">
						<title>8146r4r8</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,4L773,4L773,0L959,0L959,1L960,1L960,0L989,0L989,1L1054,1L1054,2L1514,2L1514,3L1675,3L1675,4L2141,4L2141,5L2374,5L2374,6L2531,6L2531,7L2637,7L2637,7L2640,7L2640,8L2648,8L2648,9L2669,9L2669,10L2681,10L2681,11L2730,11L2730,12L2730,12" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,5L959,5L959,2L989,2L989,3L1054,3L1054,4L1156,4L1156,5L1514,5L1514,6L1675,6L1675,7L2140,7L2140,8L2374,8L2374,10L2531,10L2531,11L2603,11L2603,12L2640,12L2640,13L2648,13L2648,14L2650,14L2650,15L2662,15L2662,16L2681,16L2681,17L2724,17L2724,18L2730,18L2730,19L2730,19" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,6L959,6L959,0L960,0L960,1L973,1L973,1L989,1L989,2L1054,2L1054,3L1514,3L1514,4L1675,4L1675,5L2141,5L2141,6L2374,6L2374,7L2531,7L2531,8L2640,8L2640,9L2648,9L2648,10L2662,10L2662,11L2669,11L2669,12L2681,12L2681,13L2730,13L2730,14L2730,14" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,7L989,7L989,0L1054,0L1054,1L1055,1L1055,1L1514,1L1514,2L1675,2L1675,3L2141,3L2141,4L2374,4L2374,5L2531,5L2531,6L2640,6L2640,7L2648,7L2648,8L2669,8L2669,9L2681,9L2681,10L2730,10L2730,11L2730,11" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,8L1054,8L1054,0L1095,0L1095,0L1675,0L1675,1L2141,1L2141,2L2531,2L2531,3L2640,3L2640,4L2669,4L2669,5L2681,5L2681,6L2712,6L2712,7L2730,7L2730,8L2730,8" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,9L1156,9L1156,4L1514,4L1514,5L1675,5L1675,6L2140,6L2140,7L2374,7L2374,9L2531,9L2531,10L2604,10L2604,11L2640,11L2640,12L2648,12L2648,13L2650,13L2650,14L2662,14L2662,15L2681,15L2681,16L2730,16L2730,17L2730,17" tabindex="0">
						<title>jnzen32j</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,10L1437,10L1437,8L1514,8L1514,9L1675,9L1675,10L1710,10L1710,11L1751,11L1751,12L1761,12L1761,13L1779,13L1779,14L1787,14L1787,15L1964,15L1964,16L1987,16L1987,17L2033,17L2033,18L2097,18L2097,19L2122,19L2122,20L2140,20L2140,21L2215,21L2215,22L2226,22L2226,23L2261,23L2261,24L2347,24L2347,25L2349,25L2349,26L2365,26L2365,27L2373,27L2373,28L2374,28L2374,29L2495,29L2495,30L2531,30L2531,31L2593,31L2593,32L2603,32L2603,33L2648,33L2648,34L2650,34L2650,35L2651,35L2651,36L2662,36L2662,37L2663,37L2663,38L2677,38L2677,39L2681,39L2681,40L2716,40L2716,42L2724,42L2724,43L2730,43L2730,44L2730,44" tabindex="0">
						<title>jpo31408</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,11L1447,11L1447,9L1514,9L1514,10L1612,10L1612,11L1675,11L1675,12L1708,12L1708,13L1751,13L1751,14L1761,14L1761,15L1779,15L1779,16L1787,16L1787,17L1964,17L1964,18L1987,18L1987,19L2033,19L2033,20L2097,20L2097,21L2122,21L2122,22L2140,22L2140,23L2215,23L2215,24L2226,24L2226,25L2261,25L2261,26L2347,26L2347,27L2349,27L2349,28L2365,28L2365,29L2373,29L2373,30L2374,30L2374,31L2495,31L2495,32L2531,32L2531,33L2593,33L2593,34L2603,34L2603,35L2648,35L2648,36L2650,36L2650,37L2651,37L2651,38L2662,38L2662,39L2663,39L2663,40L2677,40L2677,41L2681,41L2681,42L2716,42L2716,44L2724,44L2724,45L2730,45L2730,46L2730,46" tabindex="0">
						<title>j96025rj</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,12L1514,12L1514,1L1675,1L1675,2L2141,2L2141,3L2374,3L2374,4L2531,4L2531,5L2640,5L2640,6L2669,6L2669,7L2681,7L2681,8L2712,8L2712,9L2730,9L2730,10L2730,10" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,13L1612,13L1612,10L1675,10L1675,11L1710,11L1710,12L1751,12L1751,13L1761,13L1761,14L1779,14L1779,15L1787,15L1787,16L1964,16L1964,17L1987,17L1987,18L2033,18L2033,19L2097,19L2097,20L2122,20L2122,21L2140,21L2140,22L2215,22L2215,23L2226,23L2226,24L2261,24L2261,25L2347,25L2347,26L2349,26L2349,27L2365,27L2365,28L2373,28L2373,29L2374,29L2374,30L2495,30L2495,31L2531,31L2531,32L2593,32L2593,33L2603,33L2603,34L2648,34L2648,35L2650,35L2650,36L2651,36L2651,37L2662,37L2662,38L2663,38L2663,39L2677,39L2677,40L2681,40L2681,41L2716,41L2716,43L2724,43L2724,44L2730,44L2730,45L2730,45" tabindex="0">
						<title>8q6oyroj</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,14L1675,14L1675,0L2138,0L2138,0L2139,0L2139,0L2647,0L2647,1L2665,1L2665,0L2730,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,15L1708,15L1708,12L1710,12L1710,9L1751,9L1751,10L1761,10L1761,11L1779,11L1779,12L1787,12L1787,13L1964,13L1964,14L1995,14L1995,15L2033,15L2033,16L2122,16L2122,17L2140,17L2140,18L2226,18L2226,19L2261,19L2261,20L2347,20L2347,21L2365,21L2365,22L2374,22L2374,23L2495,23L2495,24L2531,24L2531,25L2555,25L2555,26L2593,26L2593,27L2603,27L2603,28L2648,28L2648,29L2650,29L2650,30L2651,30L2651,31L2662,31L2662,32L2663,32L2663,33L2677,33L2677,34L2681,34L2681,35L2716,35L2716,36L2722,36L2722,37L2724,37L2724,38L2730,38L2730,39L2730,39" tabindex="0">
						<title>8w02m0vj</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,16L1751,16L1751,8L1779,8L1779,9L2122,9L2122,10L2140,10L2140,11L2226,11L2226,12L2261,12L2261,13L2365,13L2365,14L2374,14L2374,16L2495,16L2495,17L2531,17L2531,18L2555,18L2555,19L2603,19L2603,20L2640,20L2640,21L2648,21L2648,22L2650,22L2650,23L2651,23L2651,24L2662,24L2662,25L2677,25L2677,26L2681,26L2681,27L2722,27L2722,28L2724,28L2724,29L2730,29L2730,30L2730,30" tabindex="0">
						<title>x3m3kle8</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,17L1761,17L1761,10L1779,10L1779,11L1787,11L1787,12L1995,12L1995,13L2033,13L2033,14L2122,14L2122,15L2140,15L2140,16L2226,16L2226,17L2261,17L2261,18L2347,18L2347,19L2365,19L2365,20L2374,20L2374,21L2495,21L2495,22L2531,22L2531,23L2555,23L2555,24L2593,24L2593,25L2603,25L2603,26L2648,26L2648,27L2650,27L2650,28L2651,28L2651,29L2662,29L2662,30L2663,30L2663,31L2677,31L2677,32L2681,32L2681,33L2716,33L2716,34L2722,34L2722,35L2724,35L2724,36L2730,36L2730,37L2730,37" tabindex="0">
						<title>x76y1lyj</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,18L1779,18L1779,8L2123,8L2123,9L2226,9L2226,10L2261,10L2261,11L2365,11L2365,12L2374,12L2374,14L2495,14L2495,15L2531,15L2531,16L2555,16L2555,17L2603,17L2603,18L2640,18L2640,19L2648,19L2648,20L2650,20L2650,21L2651,21L2651,22L2662,22L2662,23L2681,23L2681,24L2722,24L2722,25L2724,25L2724,26L2730,26L2730,27L2730,27" tabindex="0">
						<title>jongn6l8</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,19L1787,19L1787,11L2122,11L2122,12L2140,12L2140,13L2226,13L2226,14L2261,14L2261,15L2365,15L2365,16L2374,16L2374,8L2531,8L2531,9L2604,9L2604,10L2640,10L2640,11L2648,11L2648,12L2650,12L2650,13L2659,13L2659,12L2662,12L2662,13L2681,13L2681,14L2730,14L2730,15L2730,15" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,20L1964,20L1964,13L1995,13L1995,14L2033,14L2033,15L2122,15L2122,16L2140,16L2140,17L2226,17L2226,18L2261,18L2261,19L2347,19L2347,20L2365,20L2365,21L2374,21L2374,22L2495,22L2495,23L2531,23L2531,24L2555,24L2555,25L2593,25L2593,26L2603,26L2603,27L2648,27L2648,28L2650,28L2650,29L2651,29L2651,30L2662,30L2662,31L2663,31L2663,32L2677,32L2677,33L2681,33L2681,34L2716,34L2716,35L2722,35L2722,36L2724,36L2724,37L2730,37L2730,38L2730,38" tabindex="0">
						<title>81mke9p8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,21L1987,21L1987,15L1995,15L1995,12L2033,12L2033,13L2122,13L2122,14L2140,14L2140,15L2226,15L2226,16L2261,16L2261,17L2347,17L2347,18L2365,18L2365,19L2374,19L2374,20L2495,20L2495,21L2531,21L2531,22L2555,22L2555,23L2593,23L2593,24L2603,24L2603,25L2648,25L2648,26L2650,26L2650,27L2651,27L2651,28L2662,28L2662,29L2663,29L2663,30L2677,30L2677,31L2681,31L2681,32L2716,32L2716,33L2722,33L2722,34L2724,34L2724,35L2730,35L2730,36L2730,36" tabindex="0">
						<title>8v02q3nx</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,22L2033,22L2033,12L2122,12L2122,13L2140,13L2140,14L2226,14L2226,15L2261,15L2261,16L2365,16L2365,17L2374,17L2374,18L2495,18L2495,19L2531,19L2531,20L2555,20L2555,21L2603,21L2603,22L2640,22L2640,23L2648,23L2648,24L2650,24L2650,25L2651,25L2651,26L2662,26L2662,27L2677,27L2677,28L2681,28L2681,29L2722,29L2722,30L2724,30L2724,31L2730,31L2730,32L2730,32" tabindex="0">
						<title>xkpzggmj</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,23L2097,23L2097,17L2122,17L2122,18L2140,18L2140,19L2226,19L2226,20L2261,20L2261,21L2347,21L2347,22L2365,22L2365,23L2374,23L2374,24L2495,24L2495,25L2531,25L2531,26L2555,26L2555,27L2593,27L2593,28L2603,28L2603,29L2648,29L2648,30L2650,30L2650,31L2651,31L2651,32L2662,32L2662,33L2663,33L2663,34L2677,34L2677,35L2681,35L2681,36L2716,36L2716,38L2724,38L2724,39L2730,39L2730,40L2730,40" tabindex="0">
						<title>81mdk058</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,24L2122,24L2122,9L2123,9L2123,8L2140,8L2140,6L2141,6L2141,1L2531,1L2531,2L2648,2L2648,3L2669,3L2669,4L2681,4L2681,5L2730,5L2730,7L2730,7" tabindex="0">
						<title>jokvnml8</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,25L2140,25L2140,10L2226,10L2226,11L2261,11L2261,12L2365,12L2365,13L2374,13L2374,15L2495,15L2495,16L2531,16L2531,17L2555,17L2555,18L2603,18L2603,19L2640,19L2640,20L2648,20L2648,21L2650,21L2650,22L2651,22L2651,23L2662,23L2662,24L2677,24L2677,25L2681,25L2681,26L2722,26L2722,27L2724,27L2724,28L2730,28L2730,29L2730,29" tabindex="0">
						<title>jpyn610j</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,26L2215,26L2215,21L2226,21L2226,22L2261,22L2261,23L2347,23L2347,24L2365,24L2365,25L2373,25L2373,26L2374,26L2374,27L2495,27L2495,28L2531,28L2531,29L2593,29L2593,30L2603,30L2603,31L2648,31L2648,32L2650,32L2650,33L2651,33L2651,34L2662,34L2662,35L2663,35L2663,36L2677,36L2677,37L2681,37L2681,38L2716,38L2716,40L2724,40L2724,41L2730,41L2730,42L2730,42" tabindex="0">
						<title>j465mqd8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,27L2226,27L2226,9L2374,9L2374,11L2531,11L2531,12L2603,12L2603,13L2640,13L2640,14L2648,14L2648,15L2650,15L2650,16L2662,16L2662,17L2681,17L2681,18L2724,18L2724,19L2730,19L2730,20L2730,20" tabindex="0">
						<title>8dpl6o58</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,28L2261,28L2261,10L2365,10L2365,11L2374,11L2374,13L2495,13L2495,14L2531,14L2531,15L2555,15L2555,16L2603,16L2603,17L2640,17L2640,18L2648,18L2648,19L2650,19L2650,20L2651,20L2651,21L2662,21L2662,22L2681,22L2681,23L2722,23L2722,24L2724,24L2724,25L2730,25L2730,26L2730,26" tabindex="0">
						<title>81mln2r8</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,29L2347,29L2347,17L2365,17L2365,18L2374,18L2374,19L2495,19L2495,20L2531,20L2531,21L2555,21L2555,22L2593,22L2593,23L2603,23L2603,24L2648,24L2648,25L2650,25L2650,26L2651,26L2651,27L2662,27L2662,28L2677,28L2677,29L2681,29L2681,30L2716,30L2716,31L2722,31L2722,32L2724,32L2724,33L2730,33L2730,34L2730,34" tabindex="0">
						<title>j0ewnqw8</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,30L2349,30L2349,25L2365,25L2365,26L2373,26L2373,27L2374,27L2374,28L2495,28L2495,29L2531,29L2531,30L2593,30L2593,31L2603,31L2603,32L2648,32L2648,33L2650,33L2650,34L2651,34L2651,35L2662,35L2662,36L2663,36L2663,37L2677,37L2677,38L2681,38L2681,39L2716,39L2716,41L2724,41L2724,42L2730,42L2730,43L2730,43" tabindex="0">
						<title>j0ewpzw8</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,31L2365,31L2365,10L2374,10L2374,12L2531,12L2531,13L2555,13L2555,14L2603,14L2603,15L2640,15L2640,16L2648,16L2648,17L2650,17L2650,18L2651,18L2651,19L2662,19L2662,20L2681,20L2681,21L2722,21L2722,22L2724,22L2724,23L2730,23L2730,24L2730,24" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,32L2373,32L2373,24L2374,24L2374,25L2495,25L2495,26L2531,26L2531,27L2555,27L2555,13L2603,13L2603,14L2640,14L2640,15L2648,15L2648,16L2650,16L2650,17L2662,17L2662,18L2681,18L2681,19L2724,19L2724,20L2730,20L2730,21L2730,21" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,33L2374,33L2374,3L2531,3L2531,4L2640,4L2640,5L2669,5L2669,6L2681,6L2681,7L2712,7L2712,8L2730,8L2730,9L2730,9" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,34L2495,34L2495,13L2531,13L2531,14L2555,14L2555,15L2603,15L2603,16L2640,16L2640,17L2648,17L2648,18L2650,18L2650,19L2651,19L2651,20L2662,20L2662,21L2681,21L2681,22L2722,22L2722,23L2724,23L2724,24L2730,24L2730,25L2730,25" tabindex="0">
						<title>x3pk7pk8</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,35L2531,35L2531,1L2647,1L2647,0L2648,0L2648,0L2665,0L2665,1L2730,1" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,36L2593,36L2593,22L2603,22L2603,23L2640,23L2640,3L2648,3L2648,2L2653,2L2653,2L2665,2L2665,2L2730,2" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,37L2603,37L2603,11L2604,11L2604,9L2640,9L2640,10L2648,10L2648,11L2650,11L2650,12L2659,12L2659,13L2662,13L2662,14L2681,14L2681,15L2730,15L2730,16L2730,16" tabindex="0">
						<title>j4wv50mx</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,38L2648,38L2648,7L2669,7L2669,8L2681,8L2681,9L2712,9L2712,6L2730,6L2730,4L2730,4" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,39L2650,39L2650,11L2662,11L2662,12L2669,12L2669,3L2730,3" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,40L2651,40L2651,18L2662,18L2662,19L2681,19L2681,20L2724,20L2724,21L2730,21L2730,22L2730,22" tabindex="0">
						<title>8v09p45x</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,41L2662,41L2662,10L2669,10L2669,11L2681,11L2681,12L2730,12L2730,13L2730,13" tabindex="0">
						<title>j2pmdqp8</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,42L2663,42L2663,29L2677,29L2677,30L2681,30L2681,31L2716,31L2716,32L2722,32L2722,33L2724,33L2724,34L2730,34L2730,35L2730,35" tabindex="0">
						<title>jn15mm18</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,43L2677,43L2677,24L2681,24L2681,25L2722,25L2722,26L2724,26L2724,27L2730,27L2730,28L2730,28" tabindex="0">
						<title>jn10z6d8</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,44L2681,44L2681,4L2730,4L2730,5L2730,5" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,45L2716,45L2716,37L2722,37L2722,21L2724,21L2724,22L2730,22L2730,23L2730,23" tabindex="0">
						<title>x7g52m6x</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,46L2716,46L2716,30L2722,30L2722,31L2724,31L2724,32L2730,32L2730,33L2730,33" tabindex="0">
						<title>8gzloyyj</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,47L2722,47L2722,45L2724,45L2724,46L2730,46L2730,47L2730,47" tabindex="0">
						<title>8wgzrelx</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,48L2724,48L2724,17L2730,17L2730,18L2730,18" tabindex="0">
						<title>j9y9geox</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,49L2730,49L2730,6L2730,6" tabindex="0">
						<title>j595m2qx</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
