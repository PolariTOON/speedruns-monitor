<svg xmlns="http://www.w3.org/2000/svg" lang="en" style="color-scheme: dark light;">
	<title>Rank by player for leaderboard l_495zlx39-9d8eewld-2lgr793n.gq7jzvvq</title>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject &gt; div {
			position: absolute;
			left: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg {
			width: calc(100% - 40px);
			height: calc(100% - 40px);
			margin: 20px;
			padding: 10px;
			border: 1px dashed var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%">
		<svg viewBox="0 0 2374 31" preserveAspectRatio="none" overflow="visible">
			<g transform="scale(1 -1)" transform-origin="center center" style="--count: 32;">
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,0L9,0L9,1L771,1L771,2L773,2L773,3L959,3L959,5L989,5L989,6L1054,6L1054,7L1156,7L1156,8L1437,8L1437,9L1447,9L1447,10L1514,10L1514,11L1612,11L1612,12L1675,12L1675,13L1708,13L1708,14L1751,14L1751,15L1761,15L1761,16L1779,16L1779,17L1787,17L1787,18L1964,18L1964,19L1987,19L1987,20L2033,20L2033,21L2097,21L2097,22L2122,22L2122,23L2140,23L2140,24L2215,24L2215,25L2226,25L2226,26L2261,26L2261,27L2347,27L2347,28L2349,28L2349,29L2373,29L2373,30L2374,30L2374,31L2374,31" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,1L9,1L9,0L771,0L771,1L773,1L773,2L959,2L959,4L989,4L989,5L1054,5L1054,6L1156,6L1156,7L1514,7L1514,8L1675,8L1675,9L1710,9L1710,10L1751,10L1751,11L1761,11L1761,12L1779,12L1779,13L1787,13L1787,14L1964,14L1964,15L1987,15L1987,16L2033,16L2033,17L2097,17L2097,18L2122,18L2122,19L2140,19L2140,20L2226,20L2226,21L2261,21L2261,22L2347,22L2347,23L2373,23L2373,24L2374,24L2374,25L2374,25" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,2L771,2L771,0L773,0L773,1L959,1L959,3L989,3L989,4L1054,4L1054,5L1156,5L1156,6L1514,6L1514,7L1675,7L1675,8L1751,8L1751,9L1779,9L1779,10L2122,10L2122,11L2140,11L2140,12L2226,12L2226,13L2261,13L2261,14L2374,14L2374,16L2374,16" tabindex="0">
						<title>8146r4r8</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L773,3L773,0L959,0L959,1L960,1L960,0L989,0L989,1L1054,1L1054,2L1514,2L1514,3L1675,3L1675,4L2141,4L2141,5L2374,5L2374,6L2374,6" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,4L959,4L959,2L989,2L989,3L1054,3L1054,4L1156,4L1156,5L1514,5L1514,6L1675,6L1675,7L2140,7L2140,8L2374,8L2374,10L2374,10" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,5L959,5L959,0L960,0L960,1L973,1L973,1L989,1L989,2L1054,2L1054,3L1514,3L1514,4L1675,4L1675,5L2141,5L2141,6L2374,6L2374,7L2374,7" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,6L989,6L989,0L1054,0L1054,1L1055,1L1055,1L1514,1L1514,2L1675,2L1675,3L2141,3L2141,4L2374,4L2374,5L2374,5" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,7L1054,7L1054,0L1095,0L1095,0L1675,0L1675,1L2141,1L2141,2L2374,2" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,8L1156,8L1156,4L1514,4L1514,5L1675,5L1675,6L2140,6L2140,7L2374,7L2374,9L2374,9" tabindex="0">
						<title>jnzen32j</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,9L1437,9L1437,8L1514,8L1514,9L1675,9L1675,10L1710,10L1710,11L1751,11L1751,12L1761,12L1761,13L1779,13L1779,14L1787,14L1787,15L1964,15L1964,16L1987,16L1987,17L2033,17L2033,18L2097,18L2097,19L2122,19L2122,20L2140,20L2140,21L2215,21L2215,22L2226,22L2226,23L2261,23L2261,24L2347,24L2347,25L2349,25L2349,26L2373,26L2373,27L2374,27L2374,28L2374,28" tabindex="0">
						<title>jpo31408</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,10L1447,10L1447,9L1514,9L1514,10L1612,10L1612,11L1675,11L1675,12L1708,12L1708,13L1751,13L1751,14L1761,14L1761,15L1779,15L1779,16L1787,16L1787,17L1964,17L1964,18L1987,18L1987,19L2033,19L2033,20L2097,20L2097,21L2122,21L2122,22L2140,22L2140,23L2215,23L2215,24L2226,24L2226,25L2261,25L2261,26L2347,26L2347,27L2349,27L2349,28L2373,28L2373,29L2374,29L2374,30L2374,30" tabindex="0">
						<title>j96025rj</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,11L1514,11L1514,1L1675,1L1675,2L2141,2L2141,3L2374,3L2374,4L2374,4" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,12L1612,12L1612,10L1675,10L1675,11L1710,11L1710,12L1751,12L1751,13L1761,13L1761,14L1779,14L1779,15L1787,15L1787,16L1964,16L1964,17L1987,17L1987,18L2033,18L2033,19L2097,19L2097,20L2122,20L2122,21L2140,21L2140,22L2215,22L2215,23L2226,23L2226,24L2261,24L2261,25L2347,25L2347,26L2349,26L2349,27L2373,27L2373,28L2374,28L2374,29L2374,29" tabindex="0">
						<title>8q6oyroj</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,13L1675,13L1675,0L2138,0L2138,0L2139,0L2139,0L2374,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,14L1708,14L1708,12L1710,12L1710,9L1751,9L1751,10L1761,10L1761,11L1779,11L1779,12L1787,12L1787,13L1964,13L1964,14L1995,14L1995,15L2033,15L2033,16L2122,16L2122,17L2140,17L2140,18L2226,18L2226,19L2261,19L2261,20L2347,20L2347,21L2374,21L2374,22L2374,22" tabindex="0">
						<title>8w02m0vj</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,15L1751,15L1751,8L1779,8L1779,9L2122,9L2122,10L2140,10L2140,11L2226,11L2226,12L2261,12L2261,13L2374,13L2374,15L2374,15" tabindex="0">
						<title>x3m3kle8</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,16L1761,16L1761,10L1779,10L1779,11L1787,11L1787,12L1995,12L1995,13L2033,13L2033,14L2122,14L2122,15L2140,15L2140,16L2226,16L2226,17L2261,17L2261,18L2347,18L2347,19L2374,19L2374,20L2374,20" tabindex="0">
						<title>x76y1lyj</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,17L1779,17L1779,8L2123,8L2123,9L2226,9L2226,10L2261,10L2261,11L2374,11L2374,13L2374,13" tabindex="0">
						<title>jongn6l8</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,18L1787,18L1787,11L2122,11L2122,12L2140,12L2140,13L2226,13L2226,14L2261,14L2261,15L2374,15L2374,8L2374,8" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,19L1964,19L1964,13L1995,13L1995,14L2033,14L2033,15L2122,15L2122,16L2140,16L2140,17L2226,17L2226,18L2261,18L2261,19L2347,19L2347,20L2374,20L2374,21L2374,21" tabindex="0">
						<title>81mke9p8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,20L1987,20L1987,15L1995,15L1995,12L2033,12L2033,13L2122,13L2122,14L2140,14L2140,15L2226,15L2226,16L2261,16L2261,17L2347,17L2347,18L2374,18L2374,19L2374,19" tabindex="0">
						<title>8v02q3nx</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,21L2033,21L2033,12L2122,12L2122,13L2140,13L2140,14L2226,14L2226,15L2261,15L2261,16L2374,16L2374,17L2374,17" tabindex="0">
						<title>xkpzggmj</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,22L2097,22L2097,17L2122,17L2122,18L2140,18L2140,19L2226,19L2226,20L2261,20L2261,21L2347,21L2347,22L2374,22L2374,23L2374,23" tabindex="0">
						<title>81mdk058</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,23L2122,23L2122,9L2123,9L2123,8L2140,8L2140,6L2141,6L2141,1L2374,1" tabindex="0">
						<title>jokvnml8</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,24L2140,24L2140,10L2226,10L2226,11L2261,11L2261,12L2374,12L2374,14L2374,14" tabindex="0">
						<title>jpyn610j</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,25L2215,25L2215,21L2226,21L2226,22L2261,22L2261,23L2347,23L2347,24L2373,24L2373,25L2374,25L2374,26L2374,26" tabindex="0">
						<title>j465mqd8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,26L2226,26L2226,9L2374,9L2374,11L2374,11" tabindex="0">
						<title>8dpl6o58</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,27L2261,27L2261,10L2374,10L2374,12L2374,12" tabindex="0">
						<title>81mln2r8</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,28L2347,28L2347,17L2374,17L2374,18L2374,18" tabindex="0">
						<title>j0ewnqw8</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,29L2349,29L2349,25L2373,25L2373,26L2374,26L2374,27L2374,27" tabindex="0">
						<title>j0ewpzw8</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,30L2373,30L2373,23L2374,23L2374,24L2374,24" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,31L2374,31L2374,3L2374,3" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
