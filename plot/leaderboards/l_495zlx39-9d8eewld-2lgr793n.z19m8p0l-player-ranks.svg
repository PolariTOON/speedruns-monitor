<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Rank by player for leaderboard l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-04-09</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-30</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">54</text>
		</svg>
		<svg viewBox="0 0 2700 54" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 54) scale(1 -1)" style="--count: 54;">
				<g>
					<rect x="0" y="0" width="2700" height="54"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,1L0,1L0,0L92,0L92,1L773,1L773,2L956,2L956,3L959,3L959,4L979,4L979,5L983,5L983,6L988,6L988,7L1436,7L1436,8L1507,8L1507,9L1516,9L1516,10L1581,10L1581,11L1706,11L1706,12L1707,12L1707,13L1710,13L1710,14L1714,14L1714,15L1801,15L1801,16L1808,16L1808,17L1954,17L1954,18L2071,18L2071,19L2216,19L2216,20L2221,20L2221,21L2223,21L2223,22L2244,22L2244,23L2339,23L2339,24L2347,24L2347,25L2365,25L2365,26L2373,26L2373,27L2412,27L2412,28L2414,28L2414,29L2433,29L2433,30L2438,30L2438,31L2528,31L2528,32L2532,32L2532,33L2540,33L2540,34L2542,34L2542,35L2581,35L2581,36L2626,36L2626,37L2642,37L2642,38L2647,38L2647,39L2648,39L2648,40L2651,40L2651,41L2662,41L2662,42L2664,42L2664,43L2665,43L2665,44L2672,44L2672,45L2681,45L2681,46L2686,46L2686,47L2687,47L2687,48L2694,48L2694,50L2698,50L2698,51L2700,51L2700,53L2700,53" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,2L92,2L92,0L928,0L928,1L956,1L956,2L987,2L987,3L988,3L988,5L1507,5L1507,6L1517,6L1517,7L1808,7L1808,8L2221,8L2221,9L2244,9L2244,10L2339,10L2339,11L2365,11L2365,12L2414,12L2414,13L2528,13L2528,14L2557,14L2557,15L2581,15L2581,16L2626,16L2626,17L2648,17L2648,18L2651,18L2651,19L2662,19L2662,20L2665,20L2665,21L2672,21L2672,22L2681,22L2681,23L2686,23L2686,25L2698,25L2698,26L2700,26L2700,27L2700,27" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,3L773,3L773,1L858,1L858,1L928,1L928,0L956,0L956,1L987,1L987,2L988,2L988,4L1507,4L1507,5L1808,5L1808,6L2221,6L2221,7L2311,7L2311,8L2339,8L2339,9L2365,9L2365,10L2414,10L2414,11L2528,11L2528,12L2557,12L2557,13L2581,13L2581,14L2626,14L2626,15L2637,15L2637,7L2651,7L2651,8L2665,8L2665,9L2682,9L2682,10L2698,10L2698,11L2700,11" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,4L956,4L956,0L987,0L987,1L988,1L988,3L1425,3L1425,0L1508,0L1508,1L1509,1L1509,0L1538,0L1538,1L1540,1L1540,0L1808,0L1808,1L2649,1L2649,3L2651,3L2651,4L2678,4L2678,5L2698,5L2698,6L2700,6" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,5L959,5L959,3L979,3L979,4L983,4L983,5L987,5L987,0L988,0L988,1L1013,1L1013,2L1425,2L1425,3L1507,3L1507,4L1808,4L1808,5L2311,5L2311,6L2339,6L2339,7L2365,7L2365,8L2557,8L2557,9L2570,9L2570,10L2581,10L2581,11L2626,11L2626,12L2637,12L2637,13L2648,13L2648,14L2651,14L2651,15L2667,15L2667,16L2681,16L2681,17L2686,17L2686,18L2698,18L2698,19L2700,19L2700,20L2700,20" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,6L979,6L979,3L983,3L983,4L987,4L987,5L988,5L988,6L1016,6L1016,6L1507,6L1507,7L1517,7L1517,8L1808,8L1808,9L2221,9L2221,10L2244,10L2244,11L2339,11L2339,12L2365,12L2365,13L2414,13L2414,14L2528,14L2528,15L2557,15L2557,16L2581,16L2581,17L2626,17L2626,18L2648,18L2648,19L2651,19L2651,20L2662,20L2662,21L2665,21L2665,22L2672,22L2672,23L2681,23L2681,24L2686,24L2686,26L2694,26L2694,27L2698,27L2698,28L2700,28L2700,30L2700,30" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,7L983,7L983,3L987,3L987,4L988,4L988,2L1013,2L1013,0L1021,0L1021,1L1425,1L1425,2L1507,2L1507,3L1808,3L1808,4L2311,4L2311,5L2570,5L2570,6L2581,6L2581,7L2626,7L2626,8L2637,8L2637,9L2648,9L2648,10L2651,10L2651,11L2667,11L2667,13L2681,13L2681,14L2698,14L2698,15L2700,15L2700,16L2700,16" tabindex="0">
						<title>814zn7l8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,8L988,8L988,0L998,0L998,0L1013,0L1013,1L1021,1L1021,0L1425,0L1425,1L1507,1L1507,2L1808,2L1808,3L2405,3L2405,4L2570,4L2570,5L2626,5L2626,6L2634,6L2634,7L2637,7L2637,8L2648,8L2648,9L2651,9L2651,10L2682,10L2682,11L2698,11L2698,12L2700,12" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,9L1436,9L1436,7L1507,7L1507,8L1516,8L1516,9L1706,9L1706,10L1707,10L1707,11L1710,11L1710,12L1714,12L1714,13L1801,13L1801,14L1808,14L1808,15L1954,15L1954,16L2221,16L2221,17L2223,17L2223,18L2225,18L2225,19L2244,19L2244,20L2339,20L2339,21L2347,21L2347,22L2365,22L2365,23L2373,23L2373,24L2412,24L2412,25L2414,25L2414,26L2433,26L2433,27L2438,27L2438,28L2528,28L2528,29L2532,29L2532,30L2540,30L2540,31L2542,31L2542,32L2581,32L2581,33L2626,33L2626,34L2642,34L2642,35L2647,35L2647,36L2648,36L2648,37L2651,37L2651,38L2662,38L2662,39L2664,39L2664,40L2665,40L2665,41L2672,41L2672,42L2681,42L2681,43L2686,43L2686,44L2687,44L2687,45L2694,45L2694,47L2698,47L2698,48L2700,48L2700,50L2700,50" tabindex="0">
						<title>jpo31408</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,10L1507,10L1507,1L1508,1L1508,0L1509,0L1509,1L1538,1L1538,0L1540,0L1540,1L1808,1L1808,2L2649,2L2649,4L2651,4L2651,5L2678,5L2678,6L2698,6L2698,7L2700,7" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,11L1516,11L1516,8L1517,8L1517,6L1808,6L1808,7L2221,7L2221,8L2244,8L2244,9L2339,9L2339,10L2365,10L2365,11L2414,11L2414,12L2528,12L2528,13L2557,13L2557,14L2581,14L2581,15L2626,15L2626,16L2648,16L2648,17L2651,17L2651,18L2662,18L2662,19L2665,19L2665,20L2672,20L2672,21L2681,21L2681,22L2686,22L2686,24L2698,24L2698,25L2700,25L2700,26L2700,26" tabindex="0">
						<title>866k6d38</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,12L1581,12L1581,10L1706,10L1706,11L1707,11L1707,12L1710,12L1710,13L1714,13L1714,14L1801,14L1801,15L1808,15L1808,16L1954,16L1954,17L2216,17L2216,18L2221,18L2221,19L2223,19L2223,20L2225,20L2225,15L2244,15L2244,16L2274,16L2274,12L2339,12L2339,13L2347,13L2347,14L2365,14L2365,15L2373,15L2373,16L2412,16L2412,17L2414,17L2414,18L2438,18L2438,19L2528,19L2528,20L2542,20L2542,21L2581,21L2581,22L2626,22L2626,23L2648,23L2648,24L2651,24L2651,25L2662,25L2662,26L2665,26L2665,27L2672,27L2672,28L2681,28L2681,29L2686,29L2686,31L2694,31L2694,33L2698,33L2698,34L2700,34L2700,36L2700,36" tabindex="0">
						<title>j0gyekmx</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,13L1706,13L1706,9L1707,9L1707,10L1710,10L1710,11L1714,11L1714,12L1801,12L1801,13L1808,13L1808,14L2221,14L2221,15L2223,15L2223,16L2225,16L2225,17L2244,17L2244,18L2339,18L2339,19L2347,19L2347,20L2365,20L2365,21L2373,21L2373,22L2412,22L2412,23L2414,23L2414,24L2433,24L2433,25L2438,25L2438,26L2528,26L2528,27L2532,27L2532,28L2540,28L2540,29L2542,29L2542,30L2581,30L2581,31L2626,31L2626,32L2642,32L2642,33L2647,33L2647,34L2648,34L2648,35L2651,35L2651,36L2662,36L2662,37L2664,37L2664,38L2665,38L2665,39L2672,39L2672,40L2681,40L2681,41L2686,41L2686,42L2687,42L2687,43L2694,43L2694,45L2698,45L2698,46L2700,46L2700,48L2700,48" tabindex="0">
						<title>8g0ezgyx</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,14L1707,14L1707,9L1710,9L1710,10L1714,10L1714,11L1801,11L1801,12L1808,12L1808,13L2221,13L2221,14L2223,14L2223,15L2225,15L2225,16L2244,16L2244,17L2339,17L2339,18L2347,18L2347,19L2365,19L2365,20L2373,20L2373,21L2412,21L2412,22L2414,22L2414,23L2433,23L2433,24L2438,24L2438,25L2528,25L2528,26L2532,26L2532,27L2540,27L2540,28L2542,28L2542,29L2581,29L2581,30L2626,30L2626,31L2642,31L2642,32L2647,32L2647,33L2648,33L2648,34L2651,34L2651,35L2662,35L2662,36L2664,36L2664,37L2665,37L2665,38L2672,38L2672,39L2681,39L2681,40L2686,40L2686,41L2687,41L2687,42L2694,42L2694,44L2698,44L2698,45L2700,45L2700,47L2700,47" tabindex="0">
						<title>8lonqn28</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,15L1710,15L1710,9L1714,9L1714,10L1808,10L1808,11L2221,11L2221,12L2244,12L2244,13L2274,13L2274,14L2339,14L2339,15L2347,15L2347,16L2365,16L2365,17L2373,17L2373,18L2412,18L2412,19L2414,19L2414,20L2433,20L2433,21L2438,21L2438,22L2528,22L2528,23L2532,23L2532,24L2540,24L2540,25L2542,25L2542,26L2581,26L2581,27L2626,27L2626,28L2642,28L2642,29L2647,29L2647,30L2648,30L2648,31L2651,31L2651,32L2662,32L2662,33L2664,33L2664,34L2665,34L2665,35L2672,35L2672,36L2681,36L2681,37L2686,37L2686,38L2687,38L2687,39L2694,39L2694,41L2698,41L2698,42L2700,42L2700,44L2700,44" tabindex="0">
						<title>8qoz5eoj</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,16L1714,16L1714,9L1808,9L1808,10L2221,10L2221,11L2244,11L2244,12L2274,12L2274,13L2339,13L2339,14L2347,14L2347,15L2365,15L2365,16L2373,16L2373,17L2412,17L2412,18L2414,18L2414,19L2438,19L2438,20L2528,20L2528,21L2542,21L2542,22L2581,22L2581,23L2626,23L2626,24L2647,24L2647,25L2648,25L2648,26L2651,26L2651,27L2662,27L2662,28L2664,28L2664,29L2665,29L2665,30L2672,30L2672,31L2681,31L2681,32L2686,32L2686,33L2694,33L2694,35L2698,35L2698,36L2700,36L2700,38L2700,38" tabindex="0">
						<title>8w02wmvj</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,17L1801,17L1801,11L1808,11L1808,12L2221,12L2221,13L2244,13L2244,14L2274,14L2274,15L2339,15L2339,16L2347,16L2347,17L2365,17L2365,18L2373,18L2373,19L2412,19L2412,20L2414,20L2414,21L2433,21L2433,22L2438,22L2438,23L2528,23L2528,24L2532,24L2532,25L2540,25L2540,26L2542,26L2542,27L2581,27L2581,28L2626,28L2626,29L2642,29L2642,30L2647,30L2647,31L2648,31L2648,32L2651,32L2651,33L2662,33L2662,34L2664,34L2664,35L2665,35L2665,36L2672,36L2672,37L2681,37L2681,38L2686,38L2686,39L2687,39L2687,40L2694,40L2694,42L2698,42L2698,43L2700,43L2700,45L2700,45" tabindex="0">
						<title>8rle6yd8</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,18L1808,18L1808,0L1864,0L1864,0L2649,0L2649,1L2650,1L2650,2L2651,2L2651,3L2675,3L2675,0L2700,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,19L1954,19L1954,15L2221,15L2221,16L2223,16L2223,17L2225,17L2225,18L2244,18L2244,19L2339,19L2339,20L2347,20L2347,21L2365,21L2365,22L2373,22L2373,23L2412,23L2412,24L2414,24L2414,25L2433,25L2433,26L2438,26L2438,27L2528,27L2528,28L2532,28L2532,29L2540,29L2540,30L2542,30L2542,31L2581,31L2581,32L2626,32L2626,33L2642,33L2642,34L2647,34L2647,35L2648,35L2648,36L2651,36L2651,37L2662,37L2662,38L2664,38L2664,39L2665,39L2665,40L2672,40L2672,41L2681,41L2681,42L2686,42L2686,43L2687,43L2687,44L2694,44L2694,46L2698,46L2698,47L2700,47L2700,49L2700,49" tabindex="0">
						<title>jng9el48</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,20L2071,20L2071,18L2216,18L2216,19L2221,19L2221,20L2223,20L2223,21L2244,21L2244,22L2339,22L2339,23L2347,23L2347,24L2365,24L2365,25L2373,25L2373,26L2412,26L2412,27L2414,27L2414,28L2433,28L2433,29L2438,29L2438,30L2528,30L2528,31L2532,31L2532,32L2540,32L2540,33L2542,33L2542,34L2581,34L2581,35L2626,35L2626,36L2642,36L2642,37L2647,37L2647,38L2648,38L2648,39L2651,39L2651,40L2662,40L2662,41L2664,41L2664,42L2665,42L2665,43L2672,43L2672,44L2681,44L2681,45L2686,45L2686,46L2687,46L2687,47L2694,47L2694,49L2698,49L2698,50L2700,50L2700,52L2700,52" tabindex="0">
						<title>x77ee56x</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,21L2216,21L2216,17L2221,17L2221,18L2223,18L2223,19L2225,19L2225,20L2244,20L2244,21L2339,21L2339,22L2347,22L2347,23L2365,23L2365,24L2373,24L2373,25L2412,25L2412,26L2414,26L2414,27L2433,27L2433,28L2438,28L2438,29L2528,29L2528,30L2532,30L2532,31L2540,31L2540,32L2542,32L2542,33L2581,33L2581,34L2626,34L2626,35L2642,35L2642,36L2647,36L2647,37L2648,37L2648,38L2651,38L2651,39L2662,39L2662,40L2664,40L2664,41L2665,41L2665,42L2672,42L2672,43L2681,43L2681,44L2686,44L2686,45L2687,45L2687,46L2694,46L2694,48L2698,48L2698,49L2700,49L2700,51L2700,51" tabindex="0">
						<title>j465mqd8</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,22L2221,22L2221,6L2311,6L2311,7L2339,7L2339,8L2365,8L2365,9L2557,9L2557,10L2570,10L2570,11L2581,11L2581,12L2626,12L2626,13L2637,13L2637,14L2648,14L2648,15L2651,15L2651,16L2667,16L2667,17L2672,17L2672,18L2681,18L2681,19L2686,19L2686,21L2698,21L2698,22L2700,22L2700,23L2700,23" tabindex="0">
						<title>8dpl6o58</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,23L2223,23L2223,14L2244,14L2244,15L2274,15L2274,16L2339,16L2339,17L2347,17L2347,18L2365,18L2365,19L2373,19L2373,20L2412,20L2412,21L2414,21L2414,22L2433,22L2433,23L2438,23L2438,24L2528,24L2528,25L2532,25L2532,26L2540,26L2540,27L2542,27L2542,28L2581,28L2581,29L2626,29L2626,30L2642,30L2642,31L2647,31L2647,32L2648,32L2648,33L2651,33L2651,34L2662,34L2662,35L2664,35L2664,36L2665,36L2665,37L2672,37L2672,38L2681,38L2681,39L2686,39L2686,40L2687,40L2687,41L2694,41L2694,43L2698,43L2698,44L2700,44L2700,46L2700,46" tabindex="0">
						<title>x3w99yqj</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,24L2244,24L2244,8L2311,8L2311,4L2405,4L2405,3L2626,3L2626,4L2636,4L2636,5L2651,5L2651,6L2665,6L2665,7L2678,7L2678,8L2698,8L2698,9L2700,9" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,25L2339,25L2339,6L2570,6L2570,7L2581,7L2581,8L2626,8L2626,9L2637,9L2637,10L2648,10L2648,11L2651,11L2651,12L2667,12L2667,14L2681,14L2681,15L2698,15L2698,16L2700,16L2700,17L2700,17" tabindex="0">
						<title>jm62e748</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,26L2347,26L2347,13L2365,13L2365,14L2373,14L2373,15L2412,15L2412,16L2414,16L2414,17L2528,17L2528,18L2542,18L2542,19L2581,19L2581,20L2626,20L2626,21L2648,21L2648,22L2651,22L2651,23L2662,23L2662,24L2665,24L2665,25L2672,25L2672,26L2681,26L2681,27L2686,27L2686,29L2694,29L2694,31L2698,31L2698,32L2700,32L2700,34L2700,34" tabindex="0">
						<title>j0ewnqw8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,27L2365,27L2365,7L2570,7L2570,8L2581,8L2581,9L2626,9L2626,10L2637,10L2637,11L2648,11L2648,12L2651,12L2651,13L2667,13L2667,15L2681,15L2681,16L2686,16L2686,17L2698,17L2698,18L2700,18L2700,19L2700,19" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,28L2373,28L2373,14L2414,14L2414,15L2528,15L2528,16L2557,16L2557,8L2570,8L2570,9L2581,9L2581,10L2626,10L2626,11L2637,11L2637,12L2648,12L2648,13L2651,13L2651,14L2667,14L2667,11L2681,11L2681,12L2682,12L2682,13L2698,13L2698,14L2700,14" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,29L2412,29L2412,15L2414,15L2414,16L2528,16L2528,17L2581,17L2581,18L2626,18L2626,19L2648,19L2648,20L2651,20L2651,21L2662,21L2662,22L2665,22L2665,23L2672,23L2672,24L2681,24L2681,25L2686,25L2686,27L2694,27L2694,28L2698,28L2698,29L2700,29L2700,31L2700,31" tabindex="0">
						<title>j9vz7vrx</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,30L2414,30L2414,10L2557,10L2557,11L2570,11L2570,12L2581,12L2581,13L2626,13L2626,14L2637,14L2637,15L2648,15L2648,16L2651,16L2651,17L2667,17L2667,18L2672,18L2672,19L2681,19L2681,20L2686,20L2686,22L2698,22L2698,23L2700,23L2700,24L2700,24" tabindex="0">
						<title>8rl97mw8</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,31L2433,31L2433,20L2438,20L2438,21L2528,21L2528,22L2542,22L2542,23L2581,23L2581,24L2626,24L2626,25L2647,25L2647,26L2648,26L2648,27L2651,27L2651,28L2662,28L2662,29L2664,29L2664,30L2665,30L2665,31L2672,31L2672,32L2681,32L2681,33L2686,33L2686,34L2694,34L2694,36L2698,36L2698,37L2700,37L2700,39L2700,39" tabindex="0">
						<title>j2prvwp8</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,32L2438,32L2438,18L2528,18L2528,19L2542,19L2542,20L2581,20L2581,21L2626,21L2626,22L2648,22L2648,23L2651,23L2651,24L2662,24L2662,25L2665,25L2665,26L2672,26L2672,27L2681,27L2681,28L2686,28L2686,30L2694,30L2694,32L2698,32L2698,33L2700,33L2700,35L2700,35" tabindex="0">
						<title>8qpvqnwx</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,33L2528,33L2528,11L2557,11L2557,12L2570,12L2570,4L2626,4L2626,5L2634,5L2634,6L2651,6L2651,7L2665,7L2665,8L2678,8L2678,4L2681,4L2681,4L2698,4L2698,5L2700,5" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,34L2532,34L2532,23L2540,23L2540,24L2542,24L2542,25L2581,25L2581,26L2626,26L2626,27L2642,27L2642,28L2647,28L2647,29L2648,29L2648,30L2651,30L2651,31L2662,31L2662,32L2664,32L2664,33L2665,33L2665,34L2672,34L2672,35L2681,35L2681,36L2686,36L2686,37L2687,37L2687,38L2694,38L2694,40L2698,40L2698,41L2700,41L2700,43L2700,43" tabindex="0">
						<title>j9ve5wox</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,35L2540,35L2540,23L2542,23L2542,24L2581,24L2581,25L2626,25L2626,26L2642,26L2642,27L2647,27L2647,28L2648,28L2648,29L2651,29L2651,30L2662,30L2662,31L2664,31L2664,32L2665,32L2665,33L2672,33L2672,34L2681,34L2681,35L2686,35L2686,36L2687,36L2687,37L2694,37L2694,39L2698,39L2698,40L2700,40L2700,42L2700,42" tabindex="0">
						<title>j9vw0ewx</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,36L2542,36L2542,18L2581,18L2581,19L2626,19L2626,20L2648,20L2648,21L2651,21L2651,22L2662,22L2662,23L2665,23L2665,24L2672,24L2672,25L2681,25L2681,26L2686,26L2686,28L2694,28L2694,30L2698,30L2698,31L2700,31L2700,33L2700,33" tabindex="0">
						<title>8w7p6k4x</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,37L2581,37L2581,6L2626,6L2626,7L2634,7L2634,5L2636,5L2636,3L2649,3L2649,2L2650,2L2650,1L2651,1L2651,0L2665,0L2665,0L2675,0L2675,1L2700,1" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,38L2626,38L2626,3L2636,3L2636,4L2649,4L2649,0L2651,0L2651,1L2675,1L2675,2L2700,2" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,39L2642,39L2642,26L2647,26L2647,27L2648,27L2648,28L2651,28L2651,29L2662,29L2662,30L2664,30L2664,31L2665,31L2665,32L2672,32L2672,33L2681,33L2681,34L2686,34L2686,35L2694,35L2694,37L2698,37L2698,38L2700,38L2700,40L2700,40" tabindex="0">
						<title>8r667zw8</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,40L2647,40L2647,24L2648,24L2648,25L2651,25L2651,26L2662,26L2662,27L2664,27L2664,28L2665,28L2665,29L2672,29L2672,30L2681,30L2681,31L2686,31L2686,16L2698,16L2698,17L2700,17L2700,18L2700,18" tabindex="0">
						<title>x7ggd6rx</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,41L2648,41L2648,8L2651,8L2651,9L2665,9L2665,6L2678,6L2678,7L2698,7L2698,8L2700,8" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,42L2651,42L2651,2L2675,2L2675,3L2698,3L2698,4L2700,4" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,43L2662,43L2662,18L2665,18L2665,19L2667,19L2667,12L2681,12L2681,13L2682,13L2682,9L2698,9L2698,10L2700,10" tabindex="0">
						<title>j2pmdqp8</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,44L2664,44L2664,27L2665,27L2665,28L2672,28L2672,29L2681,29L2681,30L2686,30L2686,32L2694,32L2694,34L2698,34L2698,35L2700,35L2700,37L2700,37" tabindex="0">
						<title>jn15mm18</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,45L2665,45L2665,18L2667,18L2667,19L2672,19L2672,20L2681,20L2681,21L2686,21L2686,23L2698,23L2698,24L2700,24L2700,25L2700,25" tabindex="0">
						<title>j0164l3x</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,46L2672,46L2672,17L2681,17L2681,18L2686,18L2686,19L2698,19L2698,20L2700,20L2700,21L2700,21" tabindex="0">
						<title>j01wv4rx</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,47L2681,47L2681,11L2682,11L2682,12L2698,12L2698,13L2700,13" tabindex="0">
						<title>jm0r7048</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,48L2686,48L2686,20L2698,20L2698,21L2700,21L2700,22L2700,22" tabindex="0">
						<title>81v3d938</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,49L2687,49L2687,36L2694,36L2694,38L2698,38L2698,39L2700,39L2700,41L2700,41" tabindex="0">
						<title>8gzkpr2j</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,50L2694,50L2694,26L2698,26L2698,27L2700,27L2700,29L2700,29" tabindex="0">
						<title>8gzn56rj</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,51L2694,51L2694,29L2698,29L2698,30L2700,30L2700,32L2700,32" tabindex="0">
						<title>8v7p0yv8</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,52L2698,52L2698,3L2700,3" tabindex="0">
						<title>86pek6wj</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path d="M0,53L2700,53L2700,28L2700,28" tabindex="0">
						<title>xkzy0d7x</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,54L2700,54L2700,15L2700,15" tabindex="0">
						<title>8d951qgx</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
