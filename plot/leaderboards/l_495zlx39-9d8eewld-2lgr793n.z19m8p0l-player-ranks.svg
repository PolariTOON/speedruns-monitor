<svg xmlns="http://www.w3.org/2000/svg" lang="en" style="color-scheme: dark light;">
	<title>Rank by player for leaderboard l_495zlx39-9d8eewld-2lgr793n.z19m8p0l</title>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject &gt; div {
			position: absolute;
			left: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg {
			width: calc(100% - 40px);
			height: calc(100% - 40px);
			margin: 20px;
			padding: 10px;
			border: 1px dashed var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const data = await importDataScript(`https://www.speedrun.com/api/v2/GetGameData?gameId=${gameId}`, signal);
										const levels = Object.fromEntries(data.levels.map((level) =&gt; {
											return [
												level.id,
												{
													id: level.id,
													name: level.name,
												},
											];
										}));
										const categories = Object.fromEntries(data.categories.map((category) =&gt; {
											return [
												category.id,
												{
													id: category.id,
													name: category.name,
												},
											];
										}));
										const variables = Object.fromEntries(data.variables.map((variable) =&gt; {
											return [
												variable.id,
												{
													id: variable.id,
													name: variable.name,
													values: {
														values: Object.fromEntries(data.values.filter((value) =&gt; {
															return value.variableId === variable.id;
														}).map((value) =&gt; {
															return [
																value.id,
																{
																	id: value.id,
																	label: value.name,
																},
															];
														})),
													},
													"is-subcategory": variable.isSubcategory,
												},
											];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%">
		<svg viewBox="0 0 2438 30" preserveAspectRatio="none" overflow="visible">
			<g transform="scale(1 -1)" transform-origin="center center" style="--count: 31;">
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,0L92,0L92,1L773,1L773,2L956,2L956,3L959,3L959,4L979,4L979,5L983,5L983,6L988,6L988,7L1436,7L1436,8L1507,8L1507,9L1516,9L1516,10L1581,10L1581,11L1706,11L1706,12L1707,12L1707,13L1710,13L1710,14L1714,14L1714,15L1801,15L1801,16L1808,16L1808,17L1954,17L1954,18L2071,18L2071,19L2216,19L2216,20L2221,20L2221,21L2223,21L2223,22L2244,22L2244,23L2339,23L2339,24L2347,24L2347,25L2373,25L2373,26L2412,26L2412,27L2414,27L2414,28L2433,28L2433,29L2438,29L2438,30L2438,30" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,1L92,1L92,0L928,0L928,1L956,1L956,2L987,2L987,3L988,3L988,5L1507,5L1507,6L1517,6L1517,7L1808,7L1808,8L2221,8L2221,9L2244,9L2244,10L2339,10L2339,11L2414,11L2414,12L2438,12" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,2L773,2L773,1L858,1L858,1L928,1L928,0L956,0L956,1L987,1L987,2L988,2L988,4L1507,4L1507,5L1808,5L1808,6L2221,6L2221,7L2311,7L2311,8L2339,8L2339,9L2414,9L2414,10L2438,10" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L956,3L956,0L987,0L987,1L988,1L988,3L1425,3L1425,0L1508,0L1508,1L1509,1L1509,0L1538,0L1538,1L1540,1L1540,0L1808,0L1808,1L2438,1" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,4L959,4L959,3L979,3L979,4L983,4L983,5L987,5L987,0L988,0L988,1L1013,1L1013,2L1425,2L1425,3L1507,3L1507,4L1808,4L1808,5L2311,5L2311,6L2339,6L2339,7L2438,7" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,5L979,5L979,3L983,3L983,4L987,4L987,5L988,5L988,6L1016,6L1016,6L1507,6L1507,7L1517,7L1517,8L1808,8L1808,9L2221,9L2221,10L2244,10L2244,11L2339,11L2339,12L2414,12L2414,13L2438,13" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,6L983,6L983,3L987,3L987,4L988,4L988,2L1013,2L1013,0L1021,0L1021,1L1425,1L1425,2L1507,2L1507,3L1808,3L1808,4L2311,4L2311,5L2438,5" tabindex="0">
						<title>814zn7l8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,7L988,7L988,0L998,0L998,0L1013,0L1013,1L1021,1L1021,0L1425,0L1425,1L1507,1L1507,2L1808,2L1808,3L2405,3L2405,4L2438,4" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,8L1436,8L1436,7L1507,7L1507,8L1516,8L1516,9L1706,9L1706,10L1707,10L1707,11L1710,11L1710,12L1714,12L1714,13L1801,13L1801,14L1808,14L1808,15L1954,15L1954,16L2221,16L2221,17L2223,17L2223,18L2225,18L2225,19L2244,19L2244,20L2339,20L2339,21L2347,21L2347,22L2373,22L2373,23L2412,23L2412,24L2414,24L2414,25L2433,25L2433,26L2438,26L2438,27L2438,27" tabindex="0">
						<title>jpo31408</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,9L1507,9L1507,1L1508,1L1508,0L1509,0L1509,1L1538,1L1538,0L1540,0L1540,1L1808,1L1808,2L2438,2" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,10L1516,10L1516,8L1517,8L1517,6L1808,6L1808,7L2221,7L2221,8L2244,8L2244,9L2339,9L2339,10L2414,10L2414,11L2438,11" tabindex="0">
						<title>866k6d38</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,11L1581,11L1581,10L1706,10L1706,11L1707,11L1707,12L1710,12L1710,13L1714,13L1714,14L1801,14L1801,15L1808,15L1808,16L1954,16L1954,17L2216,17L2216,18L2221,18L2221,19L2223,19L2223,20L2225,20L2225,15L2244,15L2244,16L2274,16L2274,12L2339,12L2339,13L2347,13L2347,14L2373,14L2373,15L2412,15L2412,16L2414,16L2414,17L2438,17L2438,18L2438,18" tabindex="0">
						<title>j0gyekmx</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,12L1706,12L1706,9L1707,9L1707,10L1710,10L1710,11L1714,11L1714,12L1801,12L1801,13L1808,13L1808,14L2221,14L2221,15L2223,15L2223,16L2225,16L2225,17L2244,17L2244,18L2339,18L2339,19L2347,19L2347,20L2373,20L2373,21L2412,21L2412,22L2414,22L2414,23L2433,23L2433,24L2438,24L2438,25L2438,25" tabindex="0">
						<title>8g0ezgyx</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,13L1707,13L1707,9L1710,9L1710,10L1714,10L1714,11L1801,11L1801,12L1808,12L1808,13L2221,13L2221,14L2223,14L2223,15L2225,15L2225,16L2244,16L2244,17L2339,17L2339,18L2347,18L2347,19L2373,19L2373,20L2412,20L2412,21L2414,21L2414,22L2433,22L2433,23L2438,23L2438,24L2438,24" tabindex="0">
						<title>8lonqn28</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,14L1710,14L1710,9L1714,9L1714,10L1808,10L1808,11L2221,11L2221,12L2244,12L2244,13L2274,13L2274,14L2339,14L2339,15L2347,15L2347,16L2373,16L2373,17L2412,17L2412,18L2414,18L2414,19L2433,19L2433,20L2438,20L2438,21L2438,21" tabindex="0">
						<title>8qoz5eoj</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,15L1714,15L1714,9L1808,9L1808,10L2221,10L2221,11L2244,11L2244,12L2274,12L2274,13L2339,13L2339,14L2347,14L2347,15L2373,15L2373,16L2412,16L2412,17L2414,17L2414,18L2438,18L2438,19L2438,19" tabindex="0">
						<title>8w02wmvj</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,16L1801,16L1801,11L1808,11L1808,12L2221,12L2221,13L2244,13L2244,14L2274,14L2274,15L2339,15L2339,16L2347,16L2347,17L2373,17L2373,18L2412,18L2412,19L2414,19L2414,20L2433,20L2433,21L2438,21L2438,22L2438,22" tabindex="0">
						<title>8rle6yd8</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,17L1808,17L1808,0L2438,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,18L1954,18L1954,15L2221,15L2221,16L2223,16L2223,17L2225,17L2225,18L2244,18L2244,19L2339,19L2339,20L2347,20L2347,21L2373,21L2373,22L2412,22L2412,23L2414,23L2414,24L2433,24L2433,25L2438,25L2438,26L2438,26" tabindex="0">
						<title>jng9el48</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,19L2071,19L2071,18L2216,18L2216,19L2221,19L2221,20L2223,20L2223,21L2244,21L2244,22L2339,22L2339,23L2347,23L2347,24L2373,24L2373,25L2412,25L2412,26L2414,26L2414,27L2433,27L2433,28L2438,28L2438,29L2438,29" tabindex="0">
						<title>x77ee56x</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,20L2216,20L2216,17L2221,17L2221,18L2223,18L2223,19L2225,19L2225,20L2244,20L2244,21L2339,21L2339,22L2347,22L2347,23L2373,23L2373,24L2412,24L2412,25L2414,25L2414,26L2433,26L2433,27L2438,27L2438,28L2438,28" tabindex="0">
						<title>j465mqd8</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,21L2221,21L2221,6L2311,6L2311,7L2339,7L2339,8L2438,8" tabindex="0">
						<title>8dpl6o58</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,22L2223,22L2223,14L2244,14L2244,15L2274,15L2274,16L2339,16L2339,17L2347,17L2347,18L2373,18L2373,19L2412,19L2412,20L2414,20L2414,21L2433,21L2433,22L2438,22L2438,23L2438,23" tabindex="0">
						<title>x3w99yqj</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,23L2244,23L2244,8L2311,8L2311,4L2405,4L2405,3L2438,3" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,24L2339,24L2339,6L2438,6" tabindex="0">
						<title>jm62e748</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,25L2347,25L2347,13L2373,13L2373,14L2412,14L2412,15L2414,15L2414,16L2438,16" tabindex="0">
						<title>j0ewnqw8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,26L2373,26L2373,13L2414,13L2414,14L2438,14" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,27L2412,27L2412,14L2414,14L2414,15L2438,15" tabindex="0">
						<title>j9vz7vrx</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,28L2414,28L2414,9L2438,9" tabindex="0">
						<title>8rl97mw8</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,29L2433,29L2433,19L2438,19L2438,20L2438,20" tabindex="0">
						<title>j2prvwp8</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,30L2438,30L2438,17L2438,17" tabindex="0">
						<title>8qpvqnwx</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
