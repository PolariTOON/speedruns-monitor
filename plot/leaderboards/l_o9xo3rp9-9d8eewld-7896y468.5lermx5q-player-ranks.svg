<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Rank by player for leaderboard l_o9xo3rp9-9d8eewld-7896y468.5lermx5q</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-03-09</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-29</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">38</text>
		</svg>
		<svg viewBox="0 0 2730 38" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 38) scale(1 -1)" style="--count: 39;">
				<g>
					<rect x="0" y="0" width="2730" height="38"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,0L11,0L11,1L33,1L33,0L35,0L35,1L46,1L46,2L804,2L804,3L805,3L805,4L851,4L851,5L967,5L967,6L985,6L985,7L987,7L987,8L994,8L994,9L1013,9L1013,10L1088,10L1088,11L1559,11L1559,12L1583,12L1583,13L1625,13L1625,14L1731,14L1731,15L1738,15L1738,16L1797,16L1797,17L1855,17L1855,18L1879,18L1879,19L1990,19L1990,20L2037,20L2037,21L2059,21L2059,22L2187,22L2187,23L2351,23L2351,24L2548,24L2548,25L2567,25L2567,26L2568,26L2568,27L2569,27L2569,28L2600,28L2600,29L2665,29L2665,30L2669,30L2669,31L2694,31L2694,33L2699,33L2699,34L2700,34L2700,35L2705,35L2705,36L2709,36L2709,37L2726,37L2726,38L2730,38" tabindex="0">
						<title>qj2pq1p8</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,1L11,1L11,0L33,0L33,1L35,1L35,0L46,0L46,1L804,1L804,2L805,2L805,3L851,3L851,4L967,4L967,5L985,5L985,6L987,6L987,7L994,7L994,8L1013,8L1013,9L1088,9L1088,10L1559,10L1559,11L1583,11L1583,12L1625,12L1625,13L1731,13L1731,14L1738,14L1738,15L1797,15L1797,16L1855,16L1855,17L1879,17L1879,18L1990,18L1990,19L2037,19L2037,20L2187,20L2187,21L2351,21L2351,22L2548,22L2548,23L2567,23L2567,24L2568,24L2568,25L2569,25L2569,26L2600,26L2600,27L2665,27L2665,28L2669,28L2669,29L2694,29L2694,31L2699,31L2699,32L2700,32L2700,33L2705,33L2705,34L2709,34L2709,35L2726,35L2726,36L2730,36" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,2L46,2L46,0L786,0L786,0L987,0L987,1L1013,1L1013,3L1088,3L1088,4L1559,4L1559,5L1583,5L1583,6L1731,6L1731,7L2037,7L2037,8L2187,8L2187,9L2351,9L2351,10L2567,10L2567,11L2568,11L2568,12L2569,12L2569,13L2662,13L2662,14L2665,14L2665,15L2669,15L2669,16L2694,16L2694,18L2699,18L2699,19L2700,19L2700,20L2705,20L2705,21L2709,21L2709,22L2730,22" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L804,3L804,1L805,1L805,2L851,2L851,3L967,3L967,4L985,4L985,5L987,5L987,6L994,6L994,7L1013,7L1013,8L1559,8L1559,9L1583,9L1583,10L1731,10L1731,11L1738,11L1738,12L1797,12L1797,13L1855,13L1855,14L1879,14L1879,15L1990,15L1990,16L2037,16L2037,17L2187,17L2187,18L2351,18L2351,19L2548,19L2548,20L2567,20L2567,21L2568,21L2568,22L2569,22L2569,23L2600,23L2600,24L2665,24L2665,25L2669,25L2669,26L2694,26L2694,28L2699,28L2699,29L2700,29L2700,30L2705,30L2705,31L2709,31L2709,32L2726,32L2726,33L2730,33" tabindex="0">
						<title>xz9y0z08</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,4L805,4L805,1L851,1L851,2L965,2L965,1L967,1L967,2L987,2L987,3L1013,3L1013,4L1088,4L1088,5L1559,5L1559,6L1583,6L1583,7L1731,7L1731,8L2037,8L2037,9L2187,9L2187,10L2351,10L2351,11L2567,11L2567,12L2568,12L2568,13L2569,13L2569,14L2662,14L2662,11L2665,11L2665,12L2669,12L2669,13L2699,13L2699,14L2700,14L2700,15L2705,15L2705,16L2709,16L2709,17L2730,17" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,5L851,5L851,1L965,1L965,2L967,2L967,3L987,3L987,4L1009,4L1009,5L1013,5L1013,6L1095,6L1095,7L1559,7L1559,8L1583,8L1583,9L1731,9L1731,10L1738,10L1738,11L1797,11L1797,12L1855,12L1855,13L2037,13L2037,14L2187,14L2187,15L2351,15L2351,16L2548,16L2548,17L2567,17L2567,18L2568,18L2568,19L2569,19L2569,20L2600,20L2600,21L2665,21L2665,22L2669,22L2669,23L2694,23L2694,25L2699,25L2699,26L2700,26L2700,27L2705,27L2705,28L2709,28L2709,29L2726,29L2726,30L2730,30" tabindex="0">
						<title>8146r4r8</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,6L967,6L967,1L987,1L987,2L1013,2L1013,1L1014,1L1014,1L1018,1L1018,0L1454,0L1454,1L1559,1L1559,2L1731,2L1731,3L1734,3L1734,4L2037,4L2037,5L2351,5L2351,6L2567,6L2567,7L2568,7L2568,8L2603,8L2603,9L2665,9L2665,10L2669,10L2669,11L2699,11L2699,12L2700,12L2700,13L2705,13L2705,14L2709,14L2709,15L2730,15" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,7L985,7L985,4L987,4L987,5L994,5L994,6L1013,6L1013,7L1095,7L1095,6L1559,6L1559,7L1583,7L1583,8L1731,8L1731,9L1797,9L1797,10L1855,10L1855,11L2037,11L2037,12L2187,12L2187,13L2351,13L2351,14L2548,14L2548,15L2567,15L2567,16L2568,16L2568,17L2569,17L2569,18L2600,18L2600,19L2665,19L2665,20L2669,20L2669,21L2694,21L2694,23L2699,23L2699,24L2700,24L2700,25L2705,25L2705,26L2709,26L2709,27L2726,27L2726,28L2730,28" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,8L987,8L987,0L1013,0L1013,2L1088,2L1088,3L1454,3L1454,0L1731,0L1731,1L1734,1L1734,2L2037,2L2037,3L2567,3L2567,4L2568,4L2568,5L2665,5L2665,6L2669,6L2669,7L2699,7L2699,8L2700,8L2700,9L2705,9L2705,10L2730,10L2730,11L2730,11" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,9L994,9L994,5L1009,5L1009,4L1013,4L1013,5L1088,5L1088,2L1454,2L1454,3L1559,3L1559,4L1731,4L1731,5L1734,5L1734,6L2037,6L2037,7L2351,7L2351,8L2512,8L2512,9L2567,9L2567,10L2568,10L2568,11L2662,11L2662,12L2665,12L2665,13L2669,13L2669,14L2699,14L2699,15L2700,15L2700,16L2705,16L2705,17L2709,17L2709,18L2730,18" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,10L1013,10L1013,0L1014,0L1014,0L1018,0L1018,1L1454,1L1454,2L1559,2L1559,3L1731,3L1731,4L1734,4L1734,5L2037,5L2037,6L2351,6L2351,7L2567,7L2567,8L2568,8L2568,9L2603,9L2603,10L2665,10L2665,11L2669,11L2669,12L2699,12L2699,13L2700,13L2700,14L2705,14L2705,15L2709,15L2709,16L2730,16" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,11L1088,11L1088,9L1559,9L1559,10L1583,10L1583,11L1731,11L1731,12L1738,12L1738,13L1797,13L1797,14L1855,14L1855,15L1879,15L1879,16L1990,16L1990,17L2037,17L2037,18L2187,18L2187,19L2351,19L2351,20L2548,20L2548,21L2567,21L2567,22L2568,22L2568,23L2569,23L2569,24L2600,24L2600,25L2665,25L2665,26L2669,26L2669,27L2694,27L2694,29L2699,29L2699,30L2700,30L2700,31L2705,31L2705,32L2709,32L2709,33L2726,33L2726,34L2730,34" tabindex="0">
						<title>8grypo7x</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,12L1559,12L1559,1L1731,1L1731,2L1734,2L1734,3L2037,3L2037,4L2567,4L2567,5L2568,5L2568,6L2665,6L2665,7L2669,7L2669,8L2699,8L2699,9L2700,9L2700,10L2705,10L2705,11L2709,11L2709,12L2730,12L2730,13L2730,13" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,13L1583,13L1583,5L1731,5L1731,6L1734,6L1734,0L1740,0L1740,1L2665,1L2665,2L2669,2L2669,3L2699,3L2699,4L2700,4L2700,5L2705,5L2705,6L2709,6L2709,7L2730,7L2730,8L2730,8" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,14L1625,14L1625,12L1731,12L1731,13L1738,13L1738,14L1797,14L1797,15L1855,15L1855,16L1879,16L1879,17L1990,17L1990,18L2037,18L2037,19L2187,19L2187,20L2351,20L2351,21L2548,21L2548,22L2567,22L2567,23L2568,23L2568,24L2569,24L2569,25L2600,25L2600,26L2665,26L2665,27L2669,27L2669,28L2694,28L2694,30L2699,30L2699,31L2700,31L2700,32L2705,32L2705,33L2709,33L2709,34L2726,34L2726,35L2730,35" tabindex="0">
						<title>xyo51mzj</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,15L1731,15L1731,0L1734,0L1734,1L1740,1L1740,0L1847,0L1847,0L1853,0L1853,0L2700,0L2700,1L2702,1L2702,0L2730,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,16L1738,16L1738,10L1797,10L1797,11L1855,11L1855,12L2037,12L2037,13L2187,13L2187,14L2351,14L2351,15L2548,15L2548,16L2567,16L2567,17L2568,17L2568,18L2569,18L2569,19L2600,19L2600,20L2665,20L2665,21L2669,21L2669,22L2694,22L2694,24L2699,24L2699,25L2700,25L2700,26L2705,26L2705,27L2709,27L2709,28L2726,28L2726,29L2730,29" tabindex="0">
						<title>8lonqn28</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,17L1797,17L1797,9L1855,9L1855,10L2037,10L2037,11L2187,11L2187,12L2351,12L2351,13L2567,13L2567,14L2568,14L2568,15L2569,15L2569,16L2665,16L2665,17L2669,17L2669,18L2694,18L2694,20L2699,20L2699,21L2700,21L2700,22L2705,22L2705,23L2709,23L2709,24L2726,24L2726,25L2730,25" tabindex="0">
						<title>xk1oze6j</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,18L1855,18L1855,9L2037,9L2037,10L2187,10L2187,11L2351,11L2351,12L2567,12L2567,13L2568,13L2568,14L2569,14L2569,15L2665,15L2665,16L2669,16L2669,17L2694,17L2694,19L2699,19L2699,20L2700,20L2700,21L2705,21L2705,22L2709,22L2709,23L2726,23L2726,24L2730,24" tabindex="0">
						<title>8g072p2x</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,19L1879,19L1879,14L1990,14L1990,15L2037,15L2037,16L2187,16L2187,17L2351,17L2351,18L2548,18L2548,19L2567,19L2567,20L2568,20L2568,21L2569,21L2569,22L2600,22L2600,23L2665,23L2665,24L2669,24L2669,25L2694,25L2694,27L2699,27L2699,28L2700,28L2700,29L2705,29L2705,30L2709,30L2709,31L2726,31L2726,32L2730,32" tabindex="0">
						<title>8ew394p8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,20L1990,20L1990,14L2037,14L2037,15L2187,15L2187,16L2351,16L2351,17L2548,17L2548,18L2567,18L2567,19L2568,19L2568,20L2569,20L2569,21L2600,21L2600,22L2665,22L2665,23L2669,23L2669,24L2694,24L2694,26L2699,26L2699,27L2700,27L2700,28L2705,28L2705,29L2709,29L2709,30L2726,30L2726,31L2730,31" tabindex="0">
						<title>8ew371p8</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,21L2037,21L2037,2L2567,2L2567,3L2568,3L2568,4L2665,4L2665,5L2669,5L2669,6L2699,6L2699,7L2700,7L2700,8L2705,8L2705,9L2730,9L2730,10L2730,10" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,22L2059,22L2059,21L2187,21L2187,22L2351,22L2351,23L2548,23L2548,24L2567,24L2567,25L2568,25L2568,26L2569,26L2569,27L2600,27L2600,28L2665,28L2665,29L2669,29L2669,30L2694,30L2694,32L2699,32L2699,33L2700,33L2700,34L2705,34L2705,35L2709,35L2709,36L2726,36L2726,37L2730,37" tabindex="0">
						<title>jp6yqok8</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,23L2187,23L2187,8L2351,8L2351,9L2512,9L2512,8L2567,8L2567,9L2568,9L2568,10L2581,10L2581,10L2603,10L2603,8L2665,8L2665,9L2669,9L2669,10L2699,10L2699,11L2700,11L2700,12L2705,12L2705,13L2709,13L2709,14L2730,14L2730,6L2730,6" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,24L2351,24L2351,5L2567,5L2567,6L2568,6L2568,7L2665,7L2665,8L2669,8L2669,9L2699,9L2699,10L2700,10L2700,11L2705,11L2705,12L2709,12L2709,13L2730,13L2730,14L2730,14" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,25L2548,25L2548,14L2567,14L2567,15L2568,15L2568,16L2569,16L2569,17L2665,17L2665,18L2669,18L2669,19L2694,19L2694,21L2699,21L2699,22L2700,22L2700,23L2705,23L2705,24L2709,24L2709,25L2726,25L2726,26L2730,26" tabindex="0">
						<title>8eor5y7j</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,26L2567,26L2567,2L2568,2L2568,3L2665,3L2665,4L2669,4L2669,5L2699,5L2699,6L2700,6L2700,7L2705,7L2705,8L2730,8L2730,9L2730,9" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,27L2568,27L2568,2L2665,2L2665,3L2669,3L2669,4L2699,4L2699,5L2700,5L2700,6L2705,6L2705,7L2709,7L2709,2L2730,2" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,28L2569,28L2569,12L2662,12L2662,13L2665,13L2665,14L2669,14L2669,15L2694,15L2694,17L2699,17L2699,18L2700,18L2700,19L2705,19L2705,20L2709,20L2709,21L2730,21" tabindex="0">
						<title>j2pzvvp8</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,29L2600,29L2600,18L2665,18L2665,19L2669,19L2669,20L2694,20L2694,22L2699,22L2699,23L2700,23L2700,24L2705,24L2705,25L2709,25L2709,26L2726,26L2726,27L2730,27" tabindex="0">
						<title>8r6739q8</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,30L2665,30L2665,1L2669,1L2669,2L2700,2L2700,0L2701,0L2701,0L2702,0L2702,1L2730,1" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,31L2669,31L2669,1L2700,1L2700,2L2709,2L2709,3L2730,3" tabindex="0">
						<title>jo19m63x</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,32L2694,32L2694,15L2699,15L2699,16L2700,16L2700,17L2705,17L2705,18L2709,18L2709,19L2730,19" tabindex="0">
						<title>j2pmdqp8</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,33L2694,33L2694,16L2699,16L2699,17L2700,17L2700,18L2705,18L2705,19L2709,19L2709,20L2730,20" tabindex="0">
						<title>x7ggd6rx</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,34L2699,34L2699,3L2700,3L2700,4L2705,4L2705,5L2709,5L2709,6L2730,6L2730,7L2730,7" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,35L2700,35L2700,3L2709,3L2709,4L2730,4" tabindex="0">
						<title>86pek6wj</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,36L2705,36L2705,4L2709,4L2709,5L2730,5" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,37L2709,37L2709,11L2730,11L2730,12L2730,12" tabindex="0">
						<title>8eeod1p8</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,38L2726,38L2726,23L2730,23" tabindex="0">
						<title>8gzn56rj</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
