<svg xmlns="http://www.w3.org/2000/svg" lang="en" style="color-scheme: dark light;">
	<title>Rank by player for leaderboard xd17x94d-9l71pv4l.zqo20y2l</title>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2020-01-20</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2023-04-14</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">32</text>
		</svg>
		<svg viewBox="0 0 1180 32" preserveAspectRatio="none" overflow="visible">
			<g transform="scale(1 -1)" transform-origin="center center" style="--count: 33;">
				<g>
					<rect x="0" y="0" width="1180" height="32"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,0L97,0L97,0L135,0L135,0L146,0L146,0L148,0L148,1L151,1L151,2L221,2L221,3L222,3L222,3L255,3L255,0L282,0L282,0L310,0L310,1L311,1L311,0L361,0L361,0L399,0L399,1L400,1L400,0L401,0L401,1L434,1L434,0L438,0L438,1L516,1L516,1L534,1L534,0L1180,0L1180,1L1180,1" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,1L101,1L101,1L146,1L146,1L148,1L148,0L152,0L152,1L221,1L221,2L222,2L222,0L224,0L224,1L255,1L255,2L283,2L283,3L286,3L286,2L316,2L316,3L318,3L318,3L345,3L345,4L354,4L354,5L367,5L367,6L528,6L528,3L530,3L530,3L1001,3L1001,4L1014,4L1014,5L1180,5" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,2L148,2L148,2L151,2L151,1L152,1L152,0L155,0L155,0L164,0L164,0L221,0L221,1L222,1L222,2L255,2L255,3L283,3L283,4L342,4L342,5L345,5L345,6L367,6L367,4L528,4L528,5L893,5L893,6L960,6L960,7L974,7L974,8L1180,8" tabindex="0">
						<title>8146r4r8</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,3L221,3L221,0L222,0L222,1L224,1L224,0L255,0L255,1L283,1L283,2L286,2L286,3L316,3L316,1L399,1L399,2L1001,2L1001,3L1014,3L1014,4L1180,4" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,4L283,4L283,1L286,1L286,1L310,1L310,0L311,0L311,1L316,1L316,2L399,2L399,0L400,0L400,1L401,1L401,0L434,0L434,1L438,1L438,0L441,0L441,0L534,0L534,1L1180,1L1180,2L1180,2" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,5L324,5L324,5L336,5L336,6L342,6L342,7L345,7L345,8L349,8L349,9L359,9L359,10L362,10L362,11L482,11L482,12L516,12L516,13L518,13L518,14L706,14L706,16L735,16L735,17L738,17L738,18L800,18L800,19L837,19L837,20L869,20L869,21L893,21L893,22L905,22L905,23L912,23L912,24L922,24L922,25L945,25L945,26L1180,26" tabindex="0">
						<title>8l099l78</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,6L328,6L328,6L336,6L336,7L342,7L342,8L345,8L345,9L349,9L349,10L359,10L359,11L362,11L362,12L371,12L371,13L405,13L405,14L482,14L482,15L516,15L516,16L518,16L518,17L625,17L625,18L706,18L706,20L735,20L735,21L738,21L738,22L800,22L800,23L837,23L837,24L869,24L869,25L893,25L893,26L905,26L905,27L912,27L912,28L922,28L922,29L945,29L945,30L951,30L951,31L953,31L953,32L1180,32" tabindex="0">
						<title>j511dgw8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,7L336,7L336,5L342,5L342,6L345,6L345,7L349,7L349,8L362,8L362,9L482,9L482,10L516,10L516,11L708,11L708,12L800,12L800,13L869,13L869,14L893,14L893,15L922,15L922,16L945,16L945,17L1180,17" tabindex="0">
						<title>j5w0pqzj</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,8L342,8L342,4L345,4L345,5L354,5L354,3L528,3L528,4L893,4L893,5L1001,5L1001,7L1180,7" tabindex="0">
						<title>814zn7l8</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,9L345,9L345,3L354,3L354,4L367,4L367,5L528,5L528,6L893,6L893,7L960,7L960,8L974,8L974,9L1180,9" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,10L349,10L349,7L362,7L362,8L451,8L451,7L518,7L518,8L535,8L535,7L549,7L549,8L893,8L893,9L960,9L960,10L974,10L974,11L1180,11" tabindex="0">
						<title>8qr3e7dj</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,11L359,11L359,9L362,9L362,10L482,10L482,11L516,11L516,12L706,12L706,13L800,13L800,14L869,14L869,15L893,15L893,16L922,16L922,17L945,17L945,18L1180,18" tabindex="0">
						<title>8gr0en1x</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,12L362,12L362,7L451,7L451,8L517,8L517,9L708,9L708,10L869,10L869,11L893,11L893,12L896,12L896,13L931,13L931,14L949,14L949,15L1180,15" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,13L371,13L371,12L415,12L415,13L482,13L482,14L516,14L516,15L518,15L518,16L625,16L625,17L706,17L706,19L735,19L735,20L738,20L738,21L800,21L800,22L837,22L837,23L869,23L869,24L893,24L893,25L905,25L905,26L912,26L912,27L922,27L922,28L945,28L945,29L953,29L953,30L1180,30" tabindex="0">
						<title>j4rp9rv8</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,14L405,14L405,13L415,13L415,12L482,12L482,13L516,13L516,14L518,14L518,15L625,15L625,16L706,16L706,18L735,18L735,19L738,19L738,20L800,20L800,21L837,21L837,22L869,22L869,23L893,23L893,24L905,24L905,25L912,25L912,26L922,26L922,27L945,27L945,28L953,28L953,29L1180,29" tabindex="0">
						<title>8wl24d4j</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,15L482,15L482,9L516,9L516,10L708,10L708,11L869,11L869,12L893,12L893,13L896,13L896,10L960,10L960,6L974,6L974,7L995,7L995,6L1001,6L1001,5L1014,5L1014,2L1024,2L1024,3L1180,3" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,16L516,16L516,9L517,9L517,8L518,8L518,7L535,7L535,8L549,8L549,7L893,7L893,8L960,8L960,9L974,9L974,10L1180,10" tabindex="0">
						<title>jnzen32j</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,17L518,17L518,13L706,13L706,14L800,14L800,15L869,15L869,16L893,16L893,17L922,17L922,18L945,18L945,19L1180,19" tabindex="0">
						<title>8vo5rv5x</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,18L625,18L625,15L706,15L706,17L735,17L735,18L738,18L738,19L800,19L800,20L837,20L837,21L869,21L869,22L893,22L893,23L905,23L905,24L912,24L912,25L922,25L922,26L945,26L945,27L953,27L953,28L1180,28" tabindex="0">
						<title>x3mv1m78</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,19L706,19L706,12L708,12L708,9L893,9L893,10L896,10L896,11L931,11L931,12L949,12L949,13L1180,13" tabindex="0">
						<title>j5v07yg8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,20L706,20L706,15L735,15L735,16L738,16L738,17L800,17L800,18L837,18L837,19L869,19L869,20L893,20L893,21L905,21L905,22L912,22L912,23L922,23L922,24L945,24L945,25L1180,25" tabindex="0">
						<title>8e642kdj</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,21L735,21L735,15L800,15L800,16L869,16L869,17L893,17L893,18L922,18L922,19L945,19L945,20L1180,20" tabindex="0">
						<title>xkmw53mj</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,22L738,22L738,16L800,16L800,17L837,17L837,18L869,18L869,19L893,19L893,20L905,20L905,21L922,21L922,22L945,22L945,23L1180,23" tabindex="0">
						<title>81q1433j</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,23L800,23L800,12L869,12L869,13L893,13L893,14L922,14L922,15L945,15L945,16L1180,16" tabindex="0">
						<title>x72652r8</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,24L837,24L837,17L869,17L869,18L893,18L893,19L922,19L922,20L945,20L945,21L1180,21" tabindex="0">
						<title>8lpmq72j</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,25L869,25L869,10L893,10L893,11L896,11L896,12L931,12L931,13L949,13L949,14L1180,14" tabindex="0">
						<title>j9rwqy7j</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,26L893,26L893,4L1001,4L1001,6L1180,6" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,27L905,27L905,20L922,20L922,21L945,21L945,22L1180,22" tabindex="0">
						<title>8l3yvor8</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,28L912,28L912,22L922,22L922,23L945,23L945,24L1180,24" tabindex="0">
						<title>j0grn39x</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,29L922,29L922,14L931,14L931,11L974,11L974,6L995,6L995,7L1001,7L1001,2L1014,2L1014,3L1024,3L1024,2L1180,2L1180,0L1180,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,30L945,30L945,15L949,15L949,12L1180,12" tabindex="0">
						<title>8w0knvqj</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,31L951,31L951,30L953,30L953,31L1180,31" tabindex="0">
						<title>jmzpn34x</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,32L953,32L953,27L1180,27" tabindex="0">
						<title>jnpzmz18</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
