<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Rank by player for leaderboard l_r9gn1qpd-9d8eewld-0nwoqwkl.21g82pnl</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-01-09</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-22</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">56</text>
		</svg>
		<svg viewBox="0 0 2782 56" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 56) scale(1 -1)" style="--count: 56;">
				<g>
					<rect x="0" y="0" width="2782" height="56"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,1L0,1L0,0L9,0L9,1L58,1L58,0L98,0L98,1L863,1L863,2L1026,2L1026,3L1049,3L1049,4L1372,4L1372,5L1522,5L1522,6L1565,6L1565,7L1640,7L1640,8L1793,8L1793,9L1862,9L1862,10L1892,10L1892,11L2084,11L2084,13L2160,13L2160,14L2172,14L2172,15L2334,15L2334,16L2378,16L2378,17L2406,17L2406,18L2428,18L2428,19L2498,19L2498,20L2581,20L2581,22L2582,22L2582,23L2647,23L2647,24L2658,24L2658,25L2684,25L2684,26L2701,26L2701,27L2733,27L2733,28L2750,28L2750,29L2752,29L2752,30L2753,30L2753,31L2754,31L2754,32L2759,32L2759,33L2766,33L2766,34L2782,34" tabindex="0">
						<title>qj2pq1p8</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,2L9,2L9,0L58,0L58,1L98,1L98,2L863,2L863,3L1026,3L1026,4L1049,4L1049,5L1372,5L1372,6L1522,6L1522,7L1565,7L1565,8L1640,8L1640,9L1674,9L1674,10L1687,10L1687,11L1715,11L1715,12L1793,12L1793,13L1892,13L1892,14L1951,14L1951,15L2084,15L2084,17L2160,17L2160,18L2172,18L2172,19L2334,19L2334,20L2378,20L2378,21L2406,21L2406,22L2428,22L2428,23L2498,23L2498,24L2581,24L2581,26L2582,26L2582,27L2647,27L2647,28L2658,28L2658,29L2684,29L2684,30L2701,30L2701,31L2733,31L2733,32L2750,32L2750,33L2752,33L2752,34L2753,34L2753,35L2754,35L2754,36L2759,36L2759,37L2766,37L2766,38L2782,38" tabindex="0">
						<title>0jm3onz8</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,3L72,3L72,2L98,2L98,3L863,3L863,4L1026,4L1026,5L1049,5L1049,6L1372,6L1372,7L1522,7L1522,8L1565,8L1565,9L1620,9L1620,10L1640,10L1640,11L1661,11L1661,12L1687,12L1687,13L1715,13L1715,14L1793,14L1793,15L1892,15L1892,16L1897,16L1897,17L1951,17L1951,18L2009,18L2009,19L2084,19L2084,21L2160,21L2160,22L2172,22L2172,23L2334,23L2334,24L2378,24L2378,25L2406,25L2406,26L2428,26L2428,27L2498,27L2498,28L2548,28L2548,29L2581,29L2581,31L2582,31L2582,32L2647,32L2647,33L2653,33L2653,34L2658,34L2658,35L2684,35L2684,36L2701,36L2701,37L2733,37L2733,38L2750,38L2750,39L2752,39L2752,40L2753,40L2753,41L2754,41L2754,42L2759,42L2759,43L2766,43L2766,44L2782,44" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,4L98,4L98,0L843,0L843,0L1372,0L1372,1L1577,1L1577,2L1640,2L1640,3L1892,3L1892,4L2084,4L2084,5L2452,5L2452,6L2581,6L2581,7L2582,7L2582,8L2647,8L2647,9L2685,9L2685,10L2720,10L2720,11L2730,11L2730,12L2753,12L2753,13L2759,13L2759,14L2776,14L2776,15L2782,15L2782,16L2782,16" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,5L582,5L582,4L863,4L863,5L1026,5L1026,6L1049,6L1049,7L1372,7L1372,8L1522,8L1522,9L1565,9L1565,10L1620,10L1620,11L1640,11L1640,12L1661,12L1661,13L1687,13L1687,14L1715,14L1715,15L1793,15L1793,16L1842,16L1842,17L1892,17L1892,18L1897,18L1897,19L1951,19L1951,20L2009,20L2009,21L2084,21L2084,23L2160,23L2160,24L2166,24L2166,25L2261,25L2261,26L2334,26L2334,27L2378,27L2378,28L2406,28L2406,29L2428,29L2428,30L2498,30L2498,31L2548,31L2548,32L2581,32L2581,34L2582,34L2582,35L2647,35L2647,36L2653,36L2653,37L2658,37L2658,38L2669,38L2669,39L2684,39L2684,40L2701,40L2701,41L2717,41L2717,42L2733,42L2733,43L2741,43L2741,44L2750,44L2750,45L2752,45L2752,46L2753,46L2753,47L2754,47L2754,48L2759,48L2759,49L2766,49L2766,50L2782,50" tabindex="0">
						<title>j9rlkzoj</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,6L863,6L863,1L929,1L929,1L1372,1L1372,2L1577,2L1577,3L1640,3L1640,4L1892,4L1892,5L2084,5L2084,6L2452,6L2452,7L2581,7L2581,8L2582,8L2582,9L2647,9L2647,10L2685,10L2685,11L2720,11L2720,7L2730,7L2730,8L2765,8L2765,9L2776,9L2776,10L2782,10" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,7L1026,7L1026,2L1049,2L1049,3L1372,3L1372,4L1522,4L1522,5L1565,5L1565,6L1640,6L1640,7L1892,7L1892,8L2084,8L2084,9L2334,9L2334,10L2406,10L2406,11L2460,11L2460,12L2498,12L2498,13L2581,13L2581,14L2582,14L2582,15L2647,15L2647,16L2684,16L2684,17L2701,17L2701,18L2730,18L2730,19L2733,19L2733,20L2750,20L2750,21L2752,21L2752,22L2753,22L2753,23L2759,23L2759,24L2766,24L2766,25L2782,25" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,8L1049,8L1049,2L1372,2L1372,3L1522,3L1522,4L1577,4L1577,5L1640,5L1640,6L1892,6L1892,7L2084,7L2084,8L2334,8L2334,9L2463,9L2463,10L2581,10L2581,11L2582,11L2582,12L2647,12L2647,13L2685,13L2685,14L2701,14L2701,15L2730,15L2730,16L2750,16L2750,17L2752,17L2752,18L2753,18L2753,19L2759,19L2759,20L2782,20" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,9L1372,9L1372,0L1592,0L1592,1L1640,1L1640,2L1892,2L1892,3L2084,3L2084,4L2452,4L2452,5L2581,5L2581,6L2582,6L2582,7L2647,7L2647,8L2720,8L2720,9L2730,9L2730,10L2759,10L2759,11L2776,11L2776,12L2782,12L2782,13L2782,13" tabindex="0">
						<title>814zn7l8</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,10L1522,10L1522,3L1577,3L1577,4L1640,4L1640,5L1892,5L1892,6L2084,6L2084,7L2334,7L2334,8L2463,8L2463,9L2581,9L2581,10L2582,10L2582,11L2647,11L2647,12L2685,12L2685,13L2701,13L2701,14L2730,14L2730,15L2750,15L2750,16L2752,16L2752,17L2753,17L2753,18L2759,18L2759,19L2782,19" tabindex="0">
						<title>81qlgylj</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,11L1550,11L1550,10L1565,10L1565,11L1620,11L1620,12L1640,12L1640,13L1661,13L1661,14L1687,14L1687,15L1715,15L1715,16L1793,16L1793,17L1842,17L1842,18L1892,18L1892,19L1897,19L1897,20L1951,20L1951,21L2009,21L2009,22L2084,22L2084,24L2160,24L2160,25L2166,25L2166,26L2261,26L2261,27L2334,27L2334,28L2378,28L2378,29L2406,29L2406,30L2428,30L2428,31L2498,31L2498,32L2548,32L2548,33L2581,33L2581,35L2582,35L2582,36L2647,36L2647,37L2653,37L2653,38L2658,38L2658,39L2669,39L2669,40L2684,40L2684,41L2701,41L2701,42L2717,42L2717,43L2733,43L2733,44L2741,44L2741,45L2750,45L2750,46L2752,46L2752,47L2753,47L2753,48L2754,48L2754,49L2759,49L2759,50L2766,50L2766,51L2778,51L2778,52L2782,52" tabindex="0">
						<title>j956o5n8</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,12L1565,12L1565,5L1577,5L1577,1L1592,1L1592,0L1640,0L1640,1L1892,1L1892,2L2084,2L2084,3L2452,3L2452,4L2581,4L2581,5L2582,5L2582,6L2647,6L2647,7L2720,7L2720,8L2730,8L2730,9L2759,9L2759,10L2776,10L2776,11L2782,11L2782,12L2782,12" tabindex="0">
						<title>xk3m6d68</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,13L1620,13L1620,9L1640,9L1640,10L1674,10L1674,9L1687,9L1687,10L1715,10L1715,11L1793,11L1793,12L1892,12L1892,13L1951,13L1951,14L2084,14L2084,16L2160,16L2160,17L2172,17L2172,18L2334,18L2334,19L2378,19L2378,20L2406,20L2406,21L2428,21L2428,22L2498,22L2498,23L2581,23L2581,25L2582,25L2582,26L2647,26L2647,27L2658,27L2658,28L2684,28L2684,29L2701,29L2701,30L2733,30L2733,31L2750,31L2750,32L2752,32L2752,33L2753,33L2753,34L2754,34L2754,35L2759,35L2759,36L2766,36L2766,37L2782,37" tabindex="0">
						<title>x7wer7v8</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,14L1640,14L1640,0L1892,0L1892,1L2084,1L2084,2L2452,2L2452,3L2581,3L2581,4L2582,4L2582,5L2647,5L2647,6L2730,6L2730,7L2765,7L2765,8L2776,8L2776,9L2782,9" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,15L1661,15L1661,11L1687,11L1687,12L1715,12L1715,13L1793,13L1793,14L1892,14L1892,15L1897,15L1897,16L1951,16L1951,17L2084,17L2084,19L2160,19L2160,20L2172,20L2172,21L2334,21L2334,22L2378,22L2378,23L2406,23L2406,24L2428,24L2428,25L2498,25L2498,26L2581,26L2581,28L2582,28L2582,29L2647,29L2647,30L2658,30L2658,31L2684,31L2684,32L2701,32L2701,33L2733,33L2733,34L2750,34L2750,35L2752,35L2752,36L2753,36L2753,37L2754,37L2754,38L2759,38L2759,39L2766,39L2766,40L2782,40" tabindex="0">
						<title>j0grn39x</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,16L1673,16L1673,15L1687,15L1687,16L1715,16L1715,17L1793,17L1793,18L1842,18L1842,19L1892,19L1892,20L1897,20L1897,21L1951,21L1951,22L2009,22L2009,23L2049,23L2049,24L2084,24L2084,26L2160,26L2160,27L2166,27L2166,28L2261,28L2261,29L2334,29L2334,30L2378,30L2378,31L2406,31L2406,32L2428,32L2428,33L2498,33L2498,34L2548,34L2548,35L2581,35L2581,37L2582,37L2582,38L2647,38L2647,39L2653,39L2653,40L2658,40L2658,41L2669,41L2669,42L2684,42L2684,43L2701,43L2701,44L2717,44L2717,45L2733,45L2733,46L2741,46L2741,47L2750,47L2750,48L2752,48L2752,49L2753,49L2753,50L2754,50L2754,51L2759,51L2759,52L2766,52L2766,53L2778,53L2778,54L2782,54" tabindex="0">
						<title>xz13gmrj</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,17L1687,17L1687,9L1715,9L1715,10L1793,10L1793,11L1862,11L1862,8L1892,8L1892,9L2084,9L2084,10L2160,10L2160,11L2172,11L2172,12L2334,12L2334,13L2406,13L2406,14L2498,14L2498,15L2581,15L2581,17L2582,17L2582,18L2647,18L2647,19L2658,19L2658,20L2684,20L2684,21L2701,21L2701,22L2730,22L2730,23L2733,23L2733,24L2750,24L2750,25L2752,25L2752,26L2753,26L2753,27L2754,27L2754,28L2759,28L2759,29L2766,29L2766,30L2782,30" tabindex="0">
						<title>xk1oze6j</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,18L1715,18L1715,9L1793,9L1793,10L1862,10L1862,11L1892,11L1892,12L1951,12L1951,13L2084,13L2084,15L2160,15L2160,16L2172,16L2172,17L2334,17L2334,18L2378,18L2378,19L2406,19L2406,20L2428,20L2428,21L2498,21L2498,22L2581,22L2581,24L2582,24L2582,25L2647,25L2647,26L2658,26L2658,27L2684,27L2684,28L2701,28L2701,29L2733,29L2733,30L2750,30L2750,31L2752,31L2752,32L2753,32L2753,33L2754,33L2754,34L2759,34L2759,35L2766,35L2766,36L2782,36" tabindex="0">
						<title>x766z2rj</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,19L1793,19L1793,8L1862,8L1862,9L1892,9L1892,10L2084,10L2084,12L2160,12L2160,13L2172,13L2172,14L2334,14L2334,15L2378,15L2378,16L2406,16L2406,17L2498,17L2498,18L2581,18L2581,20L2582,20L2582,21L2647,21L2647,22L2658,22L2658,23L2684,23L2684,24L2701,24L2701,25L2730,25L2730,26L2733,26L2733,27L2750,27L2750,28L2752,28L2752,29L2753,29L2753,30L2754,30L2754,31L2759,31L2759,32L2766,32L2766,33L2782,33" tabindex="0">
						<title>8w0275lj</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,20L1842,20L1842,16L1892,16L1892,17L1897,17L1897,18L1951,18L1951,19L2009,19L2009,20L2084,20L2084,22L2160,22L2160,23L2166,23L2166,24L2261,24L2261,25L2334,25L2334,26L2378,26L2378,27L2406,27L2406,28L2428,28L2428,29L2498,29L2498,30L2548,30L2548,31L2581,31L2581,33L2582,33L2582,34L2647,34L2647,35L2653,35L2653,36L2658,36L2658,37L2669,37L2669,38L2684,38L2684,39L2701,39L2701,40L2733,40L2733,41L2741,41L2741,42L2750,42L2750,43L2752,43L2752,44L2753,44L2753,45L2754,45L2754,46L2759,46L2759,47L2766,47L2766,48L2782,48" tabindex="0">
						<title>8ewm6dd8</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,21L1892,21L1892,0L2084,0L2084,1L2098,1L2098,0L2778,0L2778,0L2782,0" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,22L1897,22L1897,15L1951,15L1951,16L2084,16L2084,18L2160,18L2160,19L2172,19L2172,20L2334,20L2334,21L2378,21L2378,22L2406,22L2406,23L2428,23L2428,24L2498,24L2498,25L2581,25L2581,27L2582,27L2582,28L2647,28L2647,29L2658,29L2658,30L2684,30L2684,31L2701,31L2701,32L2733,32L2733,33L2750,33L2750,34L2752,34L2752,35L2753,35L2753,36L2754,36L2754,37L2759,37L2759,38L2766,38L2766,39L2782,39" tabindex="0">
						<title>810z203x</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,23L1951,23L1951,12L2084,12L2084,14L2160,14L2160,15L2172,15L2172,16L2334,16L2334,17L2378,17L2378,18L2406,18L2406,19L2428,19L2428,20L2498,20L2498,21L2581,21L2581,23L2582,23L2582,24L2647,24L2647,25L2658,25L2658,26L2684,26L2684,27L2701,27L2701,28L2733,28L2733,29L2750,29L2750,30L2752,30L2752,31L2753,31L2753,32L2754,32L2754,33L2759,33L2759,34L2766,34L2766,35L2782,35" tabindex="0">
						<title>xk1wl26j</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,24L2009,24L2009,18L2084,18L2084,20L2160,20L2160,21L2172,21L2172,22L2334,22L2334,23L2378,23L2378,24L2406,24L2406,25L2428,25L2428,26L2498,26L2498,27L2581,27L2581,29L2582,29L2582,30L2647,30L2647,31L2658,31L2658,32L2684,32L2684,33L2701,33L2701,34L2733,34L2733,35L2750,35L2750,36L2752,36L2752,37L2753,37L2753,38L2754,38L2754,39L2759,39L2759,40L2766,40L2766,41L2782,41" tabindex="0">
						<title>j9k252w8</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,25L2043,25L2043,24L2049,24L2049,25L2084,25L2084,27L2160,27L2160,28L2166,28L2166,29L2261,29L2261,30L2334,30L2334,31L2378,31L2378,32L2406,32L2406,33L2428,33L2428,34L2498,34L2498,35L2548,35L2548,36L2581,36L2581,38L2582,38L2582,39L2647,39L2647,40L2653,40L2653,41L2658,41L2658,42L2669,42L2669,43L2684,43L2684,44L2701,44L2701,45L2717,45L2717,46L2733,46L2733,47L2741,47L2741,48L2750,48L2750,49L2752,49L2752,50L2753,50L2753,51L2754,51L2754,52L2759,52L2759,53L2766,53L2766,54L2778,54L2778,55L2782,55" tabindex="0">
						<title>jon6e378</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,26L2049,26L2049,23L2084,23L2084,25L2160,25L2160,26L2166,26L2166,27L2261,27L2261,28L2334,28L2334,29L2378,29L2378,30L2406,30L2406,31L2428,31L2428,32L2498,32L2498,33L2548,33L2548,34L2581,34L2581,36L2582,36L2582,37L2647,37L2647,38L2653,38L2653,39L2658,39L2658,40L2669,40L2669,41L2684,41L2684,42L2701,42L2701,43L2717,43L2717,44L2733,44L2733,45L2741,45L2741,46L2750,46L2750,47L2752,47L2752,48L2753,48L2753,49L2754,49L2754,50L2759,50L2759,51L2766,51L2766,52L2778,52L2778,53L2782,53" tabindex="0">
						<title>8g2med1j</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,27L2084,27L2084,0L2098,0L2098,1L2581,1L2581,2L2582,2L2582,3L2647,3L2647,4L2758,4L2758,5L2776,5L2776,6L2782,6" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,28L2084,28L2084,11L2160,11L2160,12L2172,12L2172,13L2334,13L2334,14L2406,14L2406,15L2498,15L2498,16L2581,16L2581,18L2582,18L2582,19L2647,19L2647,20L2658,20L2658,21L2684,21L2684,22L2701,22L2701,23L2730,23L2730,24L2733,24L2733,25L2750,25L2750,26L2752,26L2752,27L2753,27L2753,28L2754,28L2754,29L2759,29L2759,30L2766,30L2766,31L2782,31" tabindex="0">
						<title>j2qq3mlj</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,29L2160,29L2160,10L2172,10L2172,11L2219,11L2219,11L2334,11L2334,12L2406,12L2406,13L2435,13L2435,12L2456,12L2456,12L2460,12L2460,11L2463,11L2463,8L2581,8L2581,9L2582,9L2582,10L2647,10L2647,11L2685,11L2685,12L2701,12L2701,13L2730,13L2730,14L2750,14L2750,15L2752,15L2752,16L2753,16L2753,17L2759,17L2759,18L2782,18L2782,11L2782,11" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,30L2166,30L2166,23L2172,23L2172,10L2334,10L2334,11L2406,11L2406,12L2435,12L2435,13L2498,13L2498,14L2581,14L2581,15L2582,15L2582,16L2647,16L2647,17L2658,17L2658,18L2684,18L2684,19L2701,19L2701,20L2730,20L2730,21L2733,21L2733,22L2750,22L2750,23L2752,23L2752,24L2753,24L2753,25L2754,25L2754,26L2759,26L2759,27L2766,27L2766,28L2782,28" tabindex="0">
						<title>8v0m9e5x</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,31L2261,31L2261,24L2334,24L2334,25L2378,25L2378,26L2406,26L2406,27L2428,27L2428,28L2498,28L2498,29L2548,29L2548,30L2581,30L2581,32L2582,32L2582,33L2647,33L2647,34L2653,34L2653,35L2658,35L2658,36L2684,36L2684,37L2701,37L2701,38L2733,38L2733,39L2741,39L2741,40L2750,40L2750,41L2752,41L2752,42L2753,42L2753,43L2754,43L2754,44L2759,44L2759,45L2766,45L2766,46L2782,46" tabindex="0">
						<title>86rz9rw8</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,32L2334,32L2334,7L2452,7L2452,2L2581,2L2581,3L2582,3L2582,4L2647,4L2647,5L2758,5L2758,6L2765,6L2765,7L2776,7L2776,8L2782,8" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,33L2378,33L2378,15L2406,15L2406,16L2498,16L2498,17L2581,17L2581,19L2582,19L2582,20L2647,20L2647,21L2658,21L2658,22L2684,22L2684,23L2701,23L2701,24L2730,24L2730,25L2733,25L2733,26L2750,26L2750,27L2752,27L2752,28L2753,28L2753,29L2754,29L2754,30L2759,30L2759,31L2766,31L2766,32L2782,32" tabindex="0">
						<title>8r1g0owj</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,34L2406,34L2406,10L2463,10L2463,11L2581,11L2581,12L2582,12L2582,13L2647,13L2647,14L2685,14L2685,15L2701,15L2701,16L2730,16L2730,17L2750,17L2750,18L2752,18L2752,19L2753,19L2753,20L2759,20L2759,21L2782,21" tabindex="0">
						<title>x3p3rkk8</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,35L2428,35L2428,18L2498,18L2498,19L2581,19L2581,21L2582,21L2582,22L2647,22L2647,23L2658,23L2658,24L2684,24L2684,25L2701,25L2701,26L2730,26L2730,6L2758,6L2758,3L2782,3" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,36L2498,36L2498,12L2581,12L2581,13L2582,13L2582,14L2647,14L2647,15L2684,15L2684,16L2701,16L2701,17L2730,17L2730,18L2750,18L2750,19L2752,19L2752,20L2753,20L2753,21L2759,21L2759,22L2782,22" tabindex="0">
						<title>jpz7kp0x</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,37L2548,37L2548,28L2581,28L2581,30L2582,30L2582,31L2647,31L2647,32L2658,32L2658,33L2684,33L2684,34L2701,34L2701,35L2733,35L2733,36L2750,36L2750,37L2752,37L2752,38L2753,38L2753,39L2754,39L2754,40L2759,40L2759,41L2766,41L2766,42L2782,42" tabindex="0">
						<title>8vrdr1nx</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,38L2581,38L2581,16L2582,16L2582,17L2647,17L2647,18L2658,18L2658,19L2684,19L2684,20L2701,20L2701,21L2730,21L2730,22L2733,22L2733,23L2750,23L2750,24L2752,24L2752,25L2753,25L2753,26L2754,26L2754,27L2759,27L2759,28L2766,28L2766,29L2782,29" tabindex="0">
						<title>j2p712o8</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,39L2581,39L2581,1L2582,1L2582,2L2782,2" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,40L2582,40L2582,1L2782,1" tabindex="0">
						<title>8g2pg71j</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,41L2647,41L2647,3L2758,3L2758,4L2782,4" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,42L2653,42L2653,33L2658,33L2658,34L2684,34L2684,35L2701,35L2701,36L2733,36L2733,37L2750,37L2750,38L2752,38L2752,39L2753,39L2753,40L2754,40L2754,41L2759,41L2759,42L2766,42L2766,43L2782,43" tabindex="0">
						<title>81pg9mr8</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,43L2658,43L2658,17L2684,17L2684,18L2701,18L2701,19L2730,19L2730,20L2733,20L2733,21L2750,21L2750,22L2752,22L2752,23L2753,23L2753,24L2759,24L2759,25L2766,25L2766,26L2782,26" tabindex="0">
						<title>8r6739q8</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,44L2669,44L2669,37L2684,37L2684,38L2701,38L2701,39L2733,39L2733,40L2741,40L2741,41L2750,41L2750,42L2752,42L2752,43L2753,43L2753,44L2754,44L2754,45L2759,45L2759,46L2766,46L2766,47L2782,47" tabindex="0">
						<title>81vq0e38</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,45L2684,45L2684,15L2685,15L2685,9L2720,9L2720,10L2730,10L2730,11L2753,11L2753,12L2759,12L2759,13L2776,13L2776,14L2782,14L2782,15L2782,15" tabindex="0">
						<title>j4v29mdj</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,46L2701,46L2701,12L2730,12L2730,13L2752,13L2752,14L2753,14L2753,15L2759,15L2759,16L2776,16L2776,5L2782,5" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,47L2717,47L2717,41L2733,41L2733,42L2741,42L2741,43L2750,43L2750,44L2752,44L2752,45L2753,45L2753,46L2754,46L2754,47L2759,47L2759,48L2766,48L2766,49L2782,49" tabindex="0">
						<title>x7g7ngyx</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,48L2733,48L2733,19L2750,19L2750,20L2752,20L2752,21L2753,21L2753,22L2759,22L2759,23L2782,23" tabindex="0">
						<title>8g5l7n2j</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,49L2741,49L2741,39L2750,39L2750,40L2752,40L2752,41L2753,41L2753,42L2754,42L2754,43L2759,43L2759,44L2766,44L2766,45L2782,45" tabindex="0">
						<title>x7g22qrx</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,50L2750,50L2750,14L2752,14L2752,15L2753,15L2753,16L2759,16L2759,17L2782,17L2782,18L2782,18" tabindex="0">
						<title>xz55p24x</title>
					</path>
				</g>
				<g style="--index: 50;">
					<path d="M0,51L2752,51L2752,13L2753,13L2753,14L2759,14L2759,15L2776,15L2776,16L2782,16L2782,17L2782,17" tabindex="0">
						<title>86pek6wj</title>
					</path>
				</g>
				<g style="--index: 51;">
					<path d="M0,52L2753,52L2753,11L2759,11L2759,12L2760,12L2760,12L2776,12L2776,13L2782,13L2782,14L2782,14" tabindex="0">
						<title>x7ggd6rx</title>
					</path>
				</g>
				<g style="--index: 52;">
					<path d="M0,53L2754,53L2754,25L2759,25L2759,26L2766,26L2766,27L2782,27" tabindex="0">
						<title>j2pmdqp8</title>
					</path>
				</g>
				<g style="--index: 53;">
					<path d="M0,54L2759,54L2759,9L2765,9L2765,6L2776,6L2776,7L2782,7" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 54;">
					<path d="M0,55L2766,55L2766,24L2782,24" tabindex="0">
						<title>81vel658</title>
					</path>
				</g>
				<g style="--index: 55;">
					<path d="M0,56L2778,56L2778,51L2782,51" tabindex="0">
						<title>jm069qo8</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
