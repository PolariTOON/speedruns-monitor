<svg xmlns="http://www.w3.org/2000/svg" lang="en">
	<title>Score by player for leaderboard l_o9xo3rp9-9d8eewld-7896y468.rqvpey7q</title>
	<metadata>
		<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width" />
		<meta xmlns="http://www.w3.org/1999/xhtml" name="color-scheme" content="dark light" />
	</metadata>
	<style>
		*,
		::before,
		::after {
			box-sizing: border-box;
		}
		:root {
			background: var(--canvas-background);
			color: var(--canvas-foreground);
			fill: var(--canvas-background);
			stroke: var(--canvas-foreground);
			stroke-linejoin: round;
			stroke-linecap: round;
		}
		foreignObject {
			pointer-events: none;
		}
		foreignObject::before,
		foreignObject::after {
			content: "";
			position: absolute;
			z-index: 1;
			left: 20px;
			bottom: 20px;
			pointer-events: auto;
		}
		foreignObject::before {
			width: calc(100% - 40px);
			height: calc(20px + var(--date-size) * 1px);
		}
		foreignObject::after {
			width: calc(20px + var(--value-size) * 1px);
			height: calc(100% - 40px);
		}
		foreignObject &gt; div {
			position: absolute;
			z-index: 4;
			right: 0;
			top: 0;
			margin: 20px;
			border: 1px solid var(--canvas-foreground);
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			transition: opacity 1s;
			pointer-events: auto;
		}
		foreignObject:is(:hover, :focus-within) &gt; div:not(:hover, :focus-within) {
			opacity: 0;
			pointer-events: none;
		}
		foreignObject &gt; div &gt; p {
			margin: 0;
		}
		label {
			display: table;
			border-collapse: separate;
			border-spacing: 10px;
			direction: rtl;
		}
		progress,
		input[type="checkbox"] {
			display: table-cell;
			width: 16px;
			height: 16px;
			margin: 2px;
			accent-color: var(--canvas-foreground);
			vertical-align: top;
			direction: ltr;
		}
		progress + span,
		input[type="checkbox"] + span {
			display: table-cell;
			vertical-align: top;
			direction: ltr;
		}
		input[type="checkbox"]:not(:disabled):is(:hover, :focus-within) + span {
			text-decoration: underline;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			position: absolute;
			z-index: 2;
			margin: 0;
			padding: 10px;
			background: var(--highlighted);
			font: 16px / 1.25 serif;
			font-weight: bold;
			pointer-events: auto;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg + svg {
			border-top: 1px solid #0000;
			border-bottom: 1px solid var(--canvas-foreground);
		}
		foreignObject &gt; svg:first-of-type + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px dashed #0000;
		}
		foreignObject &gt; svg:first-of-type,
		foreignObject &gt; svg:first-of-type + svg {
			width: calc(20px + var(--date-size) * 1px);
			height: 42px;
			bottom: 20px;
		}
		foreignObject &gt; svg:first-of-type {
			left: calc(40px + var(--value-size) * 1px);
			transform: rotate(90deg) translate(-100%, 0);
			transform-origin: left bottom;
		}
		foreignObject &gt; svg:first-of-type + svg {
			right: 20px;
			transform: rotate(90deg) translate(0, 100%);
			transform-origin: right bottom;
		}
		foreignObject &gt; svg:first-of-type + svg + svg,
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			width: calc(20px + var(--value-size) * 1px);
			height: 42px;
			left: 20px;
		}
		foreignObject &gt; svg:first-of-type + svg + svg {
			bottom: calc(40px + var(--date-size) * 1px);
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg {
			top: 20px;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg &gt; text,
		foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text {
			fill: var(--canvas-foreground);
			stroke: none;
		}
		foreignObject &gt; svg:first-of-type &gt; text,
		foreignObject &gt; svg:first-of-type + svg &gt; text {
			cursor: vertical-text;
		}
		foreignObject &gt; svg:first-of-type + svg + svg + svg + svg {
			position: relative;
			z-index: 3;
			width: calc(100% - 60px - var(--value-size) * 1px);
			height: calc(100% - 60px - var(--date-size) * 1px);
			margin: 20px 20px calc(40px + var(--date-size) * 1px) calc(40px + var(--value-size) * 1px);
			border-left: 1px solid var(--canvas-foreground);
			border-right: 1px dashed var(--canvas-foreground);
			border-top: 1px dashed var(--canvas-foreground);
			border-bottom: 1px solid var(--canvas-foreground);
			background: var(--canvas-background);
			pointer-events: auto;
		}
		g &gt; rect {
			vector-effect: non-scaling-stroke;
			fill: var(--highlighted);
			stroke: none;
		}
		g &gt; rect[tabindex] {
			fill: var(--tier, #0000);
			cursor: help;
		}
		g &gt; rect[tabindex][data-tier="diamond"] {
			--tier: var(--diamond);
		}
		g &gt; rect[tabindex][data-tier="gold"] {
			--tier: var(--gold);
		}
		g &gt; rect[tabindex][data-tier="silver"] {
			--tier: var(--silver);
		}
		g &gt; rect[tabindex][data-tier="bronze"] {
			--tier: var(--bronze);
		}
		g &gt; path[tabindex] {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: hsl(calc(var(--index) / var(--count) * 360), 50%, 50%);
			cursor: help;
		}
		g:is(:hover, :focus-within) &gt; path[tabindex] {
			stroke: var(--canvas-foreground);
		}
		g &gt; path[tabindex]:is(:hover, :focus-within) {
			outline: 0;
		}
		g &gt; path[tabindex]:first-of-type {
			stroke-width: 2;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) {
			stroke-width: 4;
		}
		g &gt; path[tabindex]:first-of-type:not(:last-of-type) {
			stroke-dasharray: 4 8;
		}
		g &gt; path[tabindex]:first-of-type + rect {
			fill: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect {
			fill: var(--highlighted);
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] {
			stroke-width: 8;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) {
			stroke-width: 16;
		}
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex] + line + line {
			vector-effect: non-scaling-stroke;
			fill: none;
			stroke: none;
			stroke-width: 2;
			stroke-dasharray: 4 8;
			pointer-events: none;
		}
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) + rect + path[tabindex] + line + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line,
		g &gt; path[tabindex]:first-of-type:is(:hover, :focus-within) ~ path[tabindex]:last-of-type + line + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line,
		g &gt; path[tabindex]:first-of-type ~ path[tabindex]:is(:hover, :focus-within) + line + line {
			stroke: var(--faded);
		}
		@media (prefers-color-scheme: dark) {
			:root {
				--canvas-background: #000;
				--canvas-foreground: #ccc;
				--diamond: #0363;
				--gold: #6303;
				--silver: #3633;
				--bronze: #6363;
				--highlighted: #6663;
				--faded: #9993;
			}
		}
		@media (prefers-color-scheme: light) {
			:root {
				--canvas-background: #fff;
				--canvas-foreground: #333;
				--diamond: #9cf3;
				--gold: #fc93;
				--silver: #9c93;
				--bronze: #c9c3;
				--highlighted: #9993;
				--faded: #6663;
			}
		}
	</style>
	<script>
		"use strict";
		{
			const script = document.currentScript;
			const documentUrl = location.href;
			const scope = new URL("../../", documentUrl).pathname;
			const playersKey = `${scope}#players`;
			const leaderboardsKey = `${scope}#leaderboards`;
			const sessionKey = `${scope}#session`;
			const lockKey = `${scope}#lock`;
			async function importDataScript(dataScriptUrl, signal) {
				signal.throwIfAborted();
				if (documentUrl.protocol !== "file:") {
					const response = await fetch(dataScriptUrl, {
						signal,
					});
					if (!response.ok) {
						throw new Error(response.statusText);
					}
					const data = await response.json();
					return data;
				}
				return await new Promise((resolve, reject) =&gt; {
					const name = `callback${Math.random() * 2 ** 53}`;
					let called = false;
					let data = null;
					function callback(value) {
						if (!called) {
							called = true;
							data = value;
						}
					}
					window[name] = callback;
					const dataScript = document.createElementNS("http://www.w3.org/2000/svg", "script");
					dataScript.href = `${dataScriptUrl}&amp;callback=${name}`;
					function handleAbort(event) {
						delete window[name];
						dataScript.removeEventListener("error", handleError);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const reason = signal.reason;
						reject(reason);
					}
					function handleError(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("load", handleLoad);
						dataScript.remove();
						const error = event.error;
						reject(error);
					}
					function handleLoad(event) {
						delete window[name];
						signal.removeEventListener("abort", handleAbort);
						dataScript.removeEventListener("error", handleError);
						dataScript.remove();
						resolve(data);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					dataScript.addEventListener("error", handleError, {
						once: true,
					});
					dataScript.addEventListener("load", handleLoad, {
						once: true,
					});
					script.after(dataScript);
				});
			}
			async function waitForTimeout(delay, signal) {
				signal.throwIfAborted();
				return await new Promise((resolve, reject) =&gt; {
					let timeout = null;
					function handleAbort() {
						clearTimeout(timeout);
						const reason = signal.reason;
						reject(reason);
					}
					function handleTimeout() {
						signal.removeEventListener("abort", handleAbort);
						resolve(delay);
					}
					signal.addEventListener("abort", handleAbort, {
						once: true,
					});
					timeout = setTimeout(handleTimeout, delay);
				});
			}
			window.addEventListener("pageshow", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully restored page from cache`);
				} else {
					console.log(`Unsuccessfully restored page from cache`);
				}
			});
			window.addEventListener("pagehide", (event) =&gt; {
				if (event.persisted) {
					console.log(`Successfully saved page to cache`);
				} else {
					console.log(`Unsuccessfully saved page to cache`);
				}
			});
			window.addEventListener("pageshow", async (event) =&gt; {
				const rootTitleElement = document.querySelector("title");
				const rootTitleContent = rootTitleElement.textContent;
				const pathTitleElements = Array.from(document.querySelectorAll("g &gt; path[tabindex]:first-of-type &gt; title"));
				const pathTitleContents = pathTitleElements.map((pathTitleElement) =&gt; {
					const pathTitleContent = pathTitleElement.textContent;
					return pathTitleContent;
				});
				const foreignObject = document.querySelector("foreignObject");
				const div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
				div.dir = "ltr";
				const p = document.createElementNS("http://www.w3.org/1999/xhtml", "p");
				const label = document.createElementNS("http://www.w3.org/1999/xhtml", "label");
				const progress = document.createElementNS("http://www.w3.org/1999/xhtml", "progress");
				label.append(progress);
				const span = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
				span.textContent = "Loading names";
				label.append(span);
				p.append(label);
				div.append(p);
				foreignObject.prepend(div);
				let lock = false;
				let session = null;
				const broadcastChannel = new BroadcastChannel(sessionKey);
				const abortController = new AbortController();
				const signal = abortController.signal;
				const abort = abortController.abort.bind(abortController);
				const {promise, resolve} = Promise.withResolvers();
				broadcastChannel.addEventListener("message", (event) =&gt; {
					const data = event.data;
					const type = data.type;
					switch (type) {
						case "request": {
							if (lock &amp;&amp; signal.aborted) {
								broadcastChannel.postMessage({
									type: "response",
									session,
								});
							}
							break;
						}
						case "response": {
							if (!signal.aborted) {
								session = data.session;
								if (session != null) {
									const {players, leaderboards} = session;
									try {
										const cachedPlayers = JSON.stringify(players);
										const cachedLeaderboards = JSON.stringify(leaderboards);
										sessionStorage.setItem(playersKey, cachedPlayers);
										sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
									} catch {}
									console.log(`Successfully loaded names from peer`);
									abort();
									resolve();
								} else {
									console.log(`Unsuccessfully loaded names from peer`);
									abort();
									resolve();
								}
							}
							break;
						}
					}
				});
				try {
					const cachedPlayers = sessionStorage.getItem(playersKey);
					const cachedLeaderboards = sessionStorage.getItem(leaderboardsKey);
					if (cachedPlayers == null || cachedLeaderboards == null) {
						throw new Error();
					}
					const players = JSON.parse(cachedPlayers);
					const leaderboards = JSON.parse(cachedLeaderboards);
					session = {players, leaderboards};
				} catch {}
				if (session != null) {
					broadcastChannel.postMessage({
						type: "response",
						session,
					});
					console.log(`Successfully loaded names from local`);
					abort();
					resolve();
				} else {
					broadcastChannel.postMessage({
						type: "request",
					});
					console.log(`Unsuccessfully loaded names from local`);
				}
				(async () =&gt; {
					for (;;) {
						await navigator.locks.request(lockKey, async () =&gt; {
							lock = true;
							console.log(`Acquired lock`);
							if (!signal.aborted) {
								try {
									const players = Object.create(null);
									const leaderboards = Object.create(null);
									const games = ["9d3rrxyd", "w6jl2ned"];
									for (const gameId of games) {
										const {data} = await importDataScript(`https://www.speedrun.com/api/v1/games/${gameId}?embed=categories,levels,variables`, signal);
										const versions = data.variables.data.find((variable) =&gt; {
											return variable.name === "Version";
										});
										const levels = Object.fromEntries(data.levels.data.map((level) =&gt; {
											return [level.id, level];
										}));
										const categories = Object.fromEntries(data.categories.data.map((category) =&gt; {
											return [category.id, category];
										}));
										const variables = Object.fromEntries(data.variables.data.map((variable) =&gt; {
											return [variable.id, variable];
										}));
										console.log(`Got game`);
										await waitForTimeout(800, signal);
										const slice = 200;
										for (let offset = 0;; offset += slice) {
											const {data, pagination} = await importDataScript(`https://www.speedrun.com/api/v1/runs?game=${gameId}&amp;orderby=date&amp;direction=asc&amp;embed=players&amp;offset=${offset}&amp;max=${slice}`, signal);
											const {size} = pagination;
											if (size === 0) {
												break;
											}
											for (const run of data) {
												const status = run.status.status;
												if (status == null || status === "new") {
													continue;
												}
												const player = run.players.data[0].rel === "user" ? run.players.data[0].id : "814p2558";
												const playerName = run.players.data[0].rel === "user" ? run.players.data[0].names.international : "anonymous";
												players[player] ??= playerName;
												const level = run.level;
												const category = run.category;
												const values = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return `-${variable}.${value}`;
												});
												const leaderboard = `${level != null ? `l_${level}-` : ""}${category}${values.join("")}`;
												const levelName = run.level != null ? levels[run.level]?.name ?? null : null;
												const categoryName = categories[run.category]?.name ?? null;
												const valueNames = Object.entries(run.values).filter(([variable]) =&gt; {
													return variables[variable]?.["is-subcategory"] ?? false;
												}).map(([variable, value]) =&gt; {
													return variables[variable]?.values.values[value]?.label ?? null;
												}).filter((valueName) =&gt; {
													return valueName != null;
												});
												const leaderboardName = `${levelName != null ? `${levelName}: ` : ""}${categoryName ?? ""}${values.length !== 0 ? ` - ${valueNames.join(", ")}` : ""}`;
												leaderboards[leaderboard] ??= leaderboardName;
											}
											console.log(`Got runs ${offset}-${offset + size - 1}`);
											await waitForTimeout(800, signal);
										}
									}
									session = {players, leaderboards};
								} catch {}
								if (!signal.aborted) {
									if (session != null) {
										const {players, leaderboards} = session;
										try {
											const cachedPlayers = JSON.stringify(players);
											const cachedLeaderboards = JSON.stringify(leaderboards);
											sessionStorage.setItem(playersKey, cachedPlayers);
											sessionStorage.setItem(leaderboardsKey, cachedLeaderboards);
										} catch {}
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Successfully loaded names from remote`);
										abort();
										resolve();
									} else {
										broadcastChannel.postMessage({
											type: "response",
											session,
										});
										console.log(`Unsuccessfully loaded names from remote`);
										abort();
										resolve();
									}
								}
							}
							await new Promise((resolve) =&gt; {
								window.addEventListener("beforeunload", () =&gt; {
									resolve();
								}, {
									once: true,
								});
							});
						});
						lock = false;
						console.log(`Released lock`);
						await new Promise((resolve) =&gt; {
							window.addEventListener("pagehide", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
						await new Promise((resolve) =&gt;{
							window.addEventListener("pageshow", () =&gt; {
								resolve();
							}, {
								once: true,
							});
						});
					}
				})();
				await promise;
				if (session == null) {
					const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
					input.type = "checkbox";
					input.autocomplete = "off";
					input.disabled = true;
					input.indeterminate = true;
					progress.replaceWith(input);
					span.textContent = "Unavailable names";
					return;
				}
				const {players, leaderboards} = session;
				const hasPlayerRoot = rootTitleContent.includes(" for player");
				const hasLeaderboardRoot = rootTitleContent.includes(" for leaderboard");
				const rootTitle = {
					element: rootTitleElement,
					contentWithIds: rootTitleContent,
					contentWithNames: hasPlayerRoot ? rootTitleContent.replace(/ for player ([0-9_a-z]+)/, ($0, $1) =&gt; {
						return ` for player ${players[$1] ?? $1}`;
					}) : hasLeaderboardRoot ? rootTitleContent.replace(/ for leaderboard ((?:l_[0-9_a-z]+-)?[0-9_a-z]+(-[0-9_a-z]+\.[0-9_a-z]+)*)/, ($0, $1) =&gt; {
						return ` for leaderboard ${leaderboards[$1] ?? $1}`;
					}) : rootTitleContent,
				};
				const hasPlayerPaths = rootTitleContent.includes(" by player");
				const hasLeaderboardPaths = rootTitleContent.includes(" by leaderboard");
				const pathTitles = pathTitleElements.map((pathTitleElement, k) =&gt; {
					const pathTitleContent = pathTitleContents[k];
					const pathTitle = {
						element: pathTitleElement,
						contentWithIds: pathTitleContent,
						contentWithNames: hasPlayerPaths ? players[pathTitleContent] ?? pathTitleContent : hasLeaderboardPaths ? leaderboards[pathTitleContent] ?? pathTitleContent : pathTitleContent,
					};
					return pathTitle;
				});
				const input = document.createElementNS("http://www.w3.org/1999/xhtml", "input");
				input.type = "checkbox";
				input.autocomplete = "off";
				input.addEventListener("change", () =&gt; {
					input.disabled = true;
					if (input.checked) {
						rootTitle.element.textContent = rootTitle.contentWithNames;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithNames;
						}
					} else {
						rootTitle.element.textContent = rootTitle.contentWithIds;
						for (const pathTitle of pathTitles) {
							pathTitle.element.textContent = pathTitle.contentWithIds;
						}
					}
					input.disabled = false;
				});
				progress.replaceWith(input);
				span.textContent = "Reveal names";
			}, {
				once: true,
			});
		}
	</script>
	<script>
		"use strict";
		{
			document.addEventListener("DOMContentLoaded", (event) =&gt; {
				const minDateText = document.querySelector("foreignObject &gt; svg:first-of-type &gt; text");
				const maxDateText = document.querySelector("foreignObject &gt; svg:first-of-type + svg &gt; text");
				const startX = Math.round(Date.parse(minDateText.textContent) / 86400000);
				function xToDate(x) {
					const datetime = new Date((startX + x) * 86400000);
					const year = `${datetime.getUTCFullYear()}`.padStart(4, "0");
					const month = `${datetime.getUTCMonth() + 1}`.padStart(2, "0");
					const day = `${datetime.getUTCDate()}`.padStart(2, "0");
					const date = `${year}-${month}-${day}`;
					const size = date.length * 10;
					return {date, size};
				}
				function setMinDate(x) {
					const {date, size} = xToDate(Math.floor(x));
					minDateText.textLength.baseVal.value = size;
					minDateText.textContent = date;
				}
				function setMaxDate(x) {
					const {date, size} = xToDate(Math.ceil(x));
					maxDateText.textLength.baseVal.value = size;
					maxDateText.textContent = date;
				}
				const minValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg &gt; text");
				const maxValueText = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg &gt; text");
				const timed = minValueText.textContent.includes(":");
				function yToValue(y) {
					if (timed) {
						const minutes = `${(y - y % 6000) / 6000}`.padStart(2, "0");
						const seconds = `${(y - y % 100) / 100 % 60}`.padStart(2, "0");
						const centiseconds = `${y % 100}`.padStart(2, "0");
						const value = `${minutes}:${seconds}.${centiseconds}`;
						const size = value.length * 10;
						return {value, size};
					} else {
						const value = `${y}`;
						const size = value.length * 10;
						return {value, size};
					}
				}
				function setMinValue(y) {
					const {value, size} = yToValue(Math.floor(y));
					minValueText.textLength.baseVal.value = size;
					minValueText.textContent = value;
				}
				function setMaxValue(y) {
					const {value, size} = yToValue(Math.ceil(y));
					maxValueText.textLength.baseVal.value = size;
					maxValueText.textContent = value;
				}
				const svg = document.querySelector("foreignObject &gt; svg:first-of-type + svg + svg + svg + svg");
				svg.tabIndex = -1;
				svg.style.setProperty("outline", "0");
				if (CSS.supports("overflow-clip-margin", "8px")) {
					svg.style.setProperty("overflow", "clip");
					svg.style.setProperty("overflow-clip-margin", "8px");
				}
				svg.style.setProperty("touch-action", "none");
				const {x: baseX, y: baseY, width: baseWidth, height: baseHeight} = svg.viewBox.baseVal;
				let pointerCount = 0;
				const pointers = Object.create(null);
				const xPointerIds = [];
				const yPointerIds = [];
				let x = null;
				let y = null;
				let width = null;
				let height = null;
				svg.addEventListener("pointerdown", (event) =&gt; {
					const {pointerId} = event;
					if (pointerId in pointers) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.setPointerCapture(pointerId);
					++pointerCount;
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId] = {
						offsetX,
						offsetY,
					};
					xPointerIds.splice(xPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetX &lt;= offsetX;
					}) + 1, 0, pointerId);
					yPointerIds.splice(yPointerIds.findLastIndex((pointerId) =&gt; {
						return pointers[pointerId].offsetY &lt;= offsetY;
					}) + 1, 0, pointerId);
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					width = Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth);
					height = Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight);
					x = Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX);
					y = Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY);
				});
				svg.addEventListener("pointerup", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					svg.releasePointerCapture(pointerId);
					--pointerCount;
					delete pointers[pointerId];
					xPointerIds.splice(xPointerIds.lastIndexOf(pointerId), 1);
					yPointerIds.splice(yPointerIds.lastIndexOf(pointerId), 1);
					const minOffsetX = pointerCount !== 0 ? pointers[xPointerIds[0]].offsetX : null;
					const minOffsetY = pointerCount !== 0 ? pointers[yPointerIds[0]].offsetY : null;
					const maxClientWidth = pointerCount !== 0 ? pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX : null;
					const maxClientHeight = pointerCount !== 0 ? pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY : null;
					width = pointerCount !== 0 ? Math.min(maxClientWidth / svg.clientWidth * animWidth, baseWidth) : null;
					height = pointerCount !== 0 ? Math.min(maxClientHeight / svg.clientHeight * animHeight, baseHeight) : null;
					x = pointerCount !== 0 ? Math.max(Math.min(animX + minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth), baseX) : null;
					y = pointerCount !== 0 ? Math.max(Math.min(animY + minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight), baseY) : null;
				});
				svg.addEventListener("pointermove", (event) =&gt; {
					const {pointerId} = event;
					if (!(pointerId in pointers)) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					event.preventDefault();
					const offsetX = event.offsetX;
					const offsetY = event.offsetY;
					pointers[pointerId].offsetX = offsetX;
					pointers[pointerId].offsetY = offsetY;
					const oldXIndex = xPointerIds.lastIndexOf(pointerId);
					let newXIndex = oldXIndex;
					while (newXIndex &gt; 0 &amp;&amp; pointers[xPointerIds[newXIndex - 1]].offsetX &gt; offsetX) {
						--newXIndex;
					}
					xPointerIds.copyWithin(newXIndex + 1, newXIndex, oldXIndex);
					xPointerIds[newXIndex] = pointerId;
					while (newXIndex &lt; pointerCount - 1 &amp;&amp; pointers[xPointerIds[newXIndex + 1]].offsetX &lt; offsetX) {
						++newXIndex;
					}
					xPointerIds.copyWithin(oldXIndex, oldXIndex + 1, newXIndex + 1);
					xPointerIds[newXIndex] = pointerId;
					const oldYIndex = yPointerIds.lastIndexOf(pointerId);
					let newYIndex = oldYIndex;
					while (newYIndex &gt; 0 &amp;&amp; pointers[yPointerIds[newYIndex - 1]].offsetY &gt; offsetY) {
						--newYIndex;
					}
					yPointerIds.copyWithin(newYIndex + 1, newYIndex, oldYIndex);
					yPointerIds[newYIndex] = pointerId;
					while (newYIndex &lt; pointerCount - 1 &amp;&amp; pointers[yPointerIds[newYIndex + 1]].offsetY &lt; offsetY) {
						++newYIndex;
					}
					yPointerIds.copyWithin(oldYIndex, oldYIndex + 1, newYIndex + 1);
					yPointerIds[newYIndex] = pointerId;
					const minOffsetX = pointers[xPointerIds[0]].offsetX;
					const minOffsetY = pointers[yPointerIds[0]].offsetY;
					const maxClientWidth = pointers[xPointerIds[pointerCount - 1]].offsetX - minOffsetX;
					const maxClientHeight = pointers[yPointerIds[pointerCount - 1]].offsetY - minOffsetY;
					animWidth = width === 0 ? animWidth : maxClientWidth === 0 ? baseWidth : Math.min(svg.clientWidth / maxClientWidth * width, baseWidth);
					animHeight = height === 0 ? animHeight : maxClientHeight === 0 ? baseHeight : Math.min(svg.clientHeight / maxClientHeight * height, baseHeight);
					animX = Math.max(Math.min(x - minOffsetX / svg.clientWidth * animWidth, baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(y - minOffsetY / svg.clientHeight * animHeight, baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
				const zoomIntensity = 1.25;
				svg.addEventListener("wheel", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					if (!ctrlKey) {
						const vectorX = (shiftKey ? event.deltaY : event.deltaX) / svg.clientWidth * animWidth;
						const vectorY = (shiftKey ? 0 : event.deltaY) / svg.clientHeight * animHeight;
						animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
						animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
						svg.viewBox.baseVal.x = animX;
						svg.viewBox.baseVal.y = animY;
						setMinDate(animX);
						setMaxDate(animX + animWidth);
						setMinValue(baseY * 2 + baseHeight - animHeight - animY);
						setMaxValue(baseY * 2 + baseHeight - animY);
						return;
					}
					const ratioX = zoomIntensity ** Math.sign(shiftKey ? event.deltaY : event.deltaX);
					const ratioY = zoomIntensity ** Math.sign(shiftKey ? 0 : event.deltaY);
					const positionX = Math.max(0, Math.min(event.offsetX / svg.clientWidth, 1)) * animWidth;
					const positionY = Math.max(0, Math.min(event.offsetY / svg.clientHeight, 1)) * animHeight;
					animWidth = Math.min(animWidth * ratioX, baseWidth);
					animHeight = Math.min(animHeight * ratioY, baseHeight);
					animX = Math.max(Math.min(animX + positionX * (1 - ratioX), baseX + baseWidth - animWidth), baseX);
					animY = Math.max(Math.min(animY + positionY * (1 - ratioY), baseY + baseHeight - animHeight), baseY);
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					svg.viewBox.baseVal.width = animWidth;
					svg.viewBox.baseVal.height = animHeight;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				}, {
					passive: false,
				});
				svg.addEventListener("keydown", (event) =&gt; {
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					const {ctrlKey, shiftKey} = event;
					switch (event.code) {
						case "Space": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "Equal":
						case "NumpadAdd":
						case "Minus":
						case "NumpadSubtract": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.code === "Minus" || event.code === "NumpadSubtract" ? zoomIntensity : 1 / zoomIntensity;
							if (!shiftKey) {
								animHeight = Math.min(animHeight * ratio, baseHeight);
								animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "Digit0":
						case "Numpad0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							if (!shiftKey) {
								animY = baseY;
								animHeight = baseHeight;
								svg.viewBox.baseVal.y = animY;
								svg.viewBox.baseVal.height = animHeight;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
							animX = baseX;
							animWidth = baseWidth;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.width = animWidth;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
					}
					switch (event.key) {
						case "ArrowRight": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = 50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowLeft": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorX = -50 / svg.clientWidth * animWidth;
							animX = Math.max(Math.min(animX + vectorX, baseX + baseWidth - animWidth), baseX);
							svg.viewBox.baseVal.x = animX;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							return;
						}
						case "ArrowDown": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = 50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "End": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY + baseHeight - animHeight;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "ArrowUp": {
							if (!ctrlKey) {
								event.preventDefault();
								if (pointerCount !== 0) {
									return;
								}
								const vectorY = -50 / svg.clientHeight * animHeight;
								animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
								svg.viewBox.baseVal.y = animY;
								setMinValue(baseY * 2 + baseHeight - animHeight - animY);
								setMaxValue(baseY * 2 + baseHeight - animY);
								return;
							}
						}
						case "Home": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animY = baseY;
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "PageDown":
						case "PageUp":
						case " ": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const vectorY = event.key === "PageUp" || event.key === " " &amp;&amp; shiftKey ? -animHeight : animHeight;
							animY = Math.max(Math.min(animY + vectorY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.y = animY;
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "+":
						case "-": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							const ratio = event.key === "-" ? 1 / zoomIntensity : zoomIntensity;
							animWidth = Math.min(animWidth * ratio, baseWidth);
							animHeight = Math.min(animHeight * ratio, baseHeight);
							animX = Math.max(Math.min(animX, baseX + baseWidth - animWidth), baseX);
							animY = Math.max(Math.min(animY, baseY + baseHeight - animHeight), baseY);
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
						case "0": {
							event.preventDefault();
							if (pointerCount !== 0) {
								return;
							}
							animX = baseX;
							animY = baseY;
							animWidth = baseWidth;
							animHeight = baseHeight;
							svg.viewBox.baseVal.x = animX;
							svg.viewBox.baseVal.y = animY;
							svg.viewBox.baseVal.width = animWidth;
							svg.viewBox.baseVal.height = animHeight;
							setMinDate(animX);
							setMaxDate(animX + animWidth);
							setMinValue(baseY * 2 + baseHeight - animHeight - animY);
							setMaxValue(baseY * 2 + baseHeight - animY);
							return;
						}
					}
				});
				svg.addEventListener("focusin", (event) =&gt; {
					if (!event.target.matches(":focus-visible")) {
						return;
					}
					event.preventDefault();
					if (pointerCount !== 0) {
						return;
					}
					let {x: animX, y: animY, width: animWidth, height: animHeight} = svg.viewBox.baseVal;
					let {x, y, width, height} = event.target.getBBox();
					width = Math.round(width);
					height = Math.round(height);
					x = Math.round(x);
					y = baseY * 2 + baseHeight - height - Math.round(y);
					if (x + width &lt; animX) {
						animX = x;
						if (width &gt; animWidth) {
							animX += (width - animWidth) / 2;
						}
					} else if (x &gt; animX + animWidth) {
						animX = x + width - animWidth;
						if (width &gt; animWidth) {
							animX -= (width - animWidth) / 2;
						}
					}
					if (y + height &lt; animY) {
						animY = y;
						if (height &gt; animHeight) {
							animY += (height - animHeight) / 2;
						}
					} else if (y &gt; animY + animHeight) {
						animY = y + height - animHeight;
						if (height &gt; animHeight) {
							animY -= (height - animHeight) / 2;
						}
					}
					svg.viewBox.baseVal.x = animX;
					svg.viewBox.baseVal.y = animY;
					setMinDate(animX);
					setMaxDate(animX + animWidth);
					setMinValue(baseY * 2 + baseHeight - animHeight - animY);
					setMaxValue(baseY * 2 + baseHeight - animY);
				});
			}, {
				once: true,
			});
		}
	</script>
	<foreignObject x="0" y="0" width="100%" height="100%" style="--date-size: 100; --value-size: 20;">
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2018-01-15</text>
		</svg>
		<svg viewBox="0 0 100 20">
			<text x="50" y="10" dx="0" dy="2" textLength="100" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">2025-08-31</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="10" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">0</text>
		</svg>
		<svg viewBox="0 0 20 20">
			<text x="10" y="10" dx="0" dy="2" textLength="20" lengthAdjust="spacingAndGlyphs" text-anchor="middle" dominant-baseline="middle">50</text>
		</svg>
		<svg viewBox="0 0 2785 50" preserveAspectRatio="none" overflow="visible">
			<g transform="translate(0 50) scale(1 -1)" style="--count: 50;">
				<g>
					<rect x="0" y="0" width="2785" height="50"/>
				</g>
				<g style="--index: 0;">
					<path d="M0,0L0,0L0,1L2,1L2,2L66,2L66,3L99,3L99,3L734,3L734,4L860,4L860,4L1033,4L1033,4L1047,4L1047,4L1080,4L1080,4L1138,4L1138,4L1141,4L1141,4L1478,4L1478,4L1532,4L1532,4L1600,4L1600,4L1618,4L1618,5L1636,5L1636,5L1637,5L1637,5L1658,5L1658,6L1664,6L1664,7L1694,7L1694,7L1699,7L1699,8L1767,8L1767,8L1773,8L1773,8L1880,8L1880,8L1932,8L1932,8L2007,8L2007,8L2201,8L2201,8L2240,8L2240,8L2297,8L2297,8L2300,8L2300,9L2336,9L2336,9L2404,9L2404,9L2408,9L2408,9L2431,9L2431,9L2449,9L2449,9L2616,9L2616,9L2620,9L2620,9L2653,9L2653,9L2655,9L2655,9L2710,9L2710,9L2714,9L2714,9L2722,9L2722,9L2750,9L2750,9L2751,9L2751,9L2770,9L2770,10L2778,10L2778,11L2785,11L2785,11L2785,11" tabindex="0">
						<title>5j5gggn8</title>
					</path>
				</g>
				<g style="--index: 1;">
					<path d="M0,0L2,0L2,1L66,1L66,2L99,2L99,2L734,2L734,3L860,3L860,3L1033,3L1033,3L1047,3L1047,3L1080,3L1080,3L1138,3L1138,3L1141,3L1141,3L1478,3L1478,3L1532,3L1532,3L1600,3L1600,3L1618,3L1618,3L1636,3L1636,3L1637,3L1637,3L1658,3L1658,3L1664,3L1664,4L1694,4L1694,4L1699,4L1699,5L1767,5L1767,5L1773,5L1773,5L1880,5L1880,5L1932,5L1932,5L2007,5L2007,5L2201,5L2201,5L2240,5L2240,5L2297,5L2297,5L2300,5L2300,6L2336,6L2336,6L2404,6L2404,6L2408,6L2408,6L2431,6L2431,6L2449,6L2449,6L2616,6L2616,6L2620,6L2620,6L2653,6L2653,6L2655,6L2655,6L2710,6L2710,6L2714,6L2714,6L2722,6L2722,6L2750,6L2750,6L2751,6L2751,6L2770,6L2770,7L2778,7L2778,8L2785,8L2785,8L2785,8" tabindex="0">
						<title>qj2pq1p8</title>
					</path>
				</g>
				<g style="--index: 2;">
					<path d="M0,0L66,0L66,1L99,1L99,1L734,1L734,1L860,1L860,1L1033,1L1033,1L1047,1L1047,1L1080,1L1080,1L1138,1L1138,1L1141,1L1141,1L1478,1L1478,1L1532,1L1532,1L1600,1L1600,1L1618,1L1618,1L1636,1L1636,1L1637,1L1637,1L1658,1L1658,1L1664,1L1664,1L1694,1L1694,1L1699,1L1699,1L1767,1L1767,1L1773,1L1773,1L1880,1L1880,1L1932,1L1932,1L2007,1L2007,1L2201,1L2201,1L2240,1L2240,1L2297,1L2297,1L2300,1L2300,1L2336,1L2336,1L2404,1L2404,1L2408,1L2408,1L2431,1L2431,1L2449,1L2449,1L2616,1L2616,1L2620,1L2620,1L2653,1L2653,1L2655,1L2655,1L2710,1L2710,1L2714,1L2714,1L2722,1L2722,1L2750,1L2750,1L2751,1L2751,1L2770,1L2770,2L2778,2L2778,3L2785,3L2785,3L2785,3" tabindex="0">
						<title>18qg9ndx</title>
					</path>
				</g>
				<g style="--index: 3;">
					<path d="M0,0L99,0L99,4L734,4L734,5L860,5L860,6L1006,6L1006,5L1033,5L1033,6L1047,6L1047,7L1080,7L1080,7L1082,7L1082,6L1138,6L1138,6L1141,6L1141,7L1473,7L1473,6L1478,6L1478,7L1532,7L1532,7L1600,7L1600,8L1618,8L1618,9L1636,9L1636,10L1637,10L1637,11L1658,11L1658,12L1664,12L1664,13L1694,13L1694,13L1699,13L1699,14L1767,14L1767,15L1773,15L1773,15L1880,15L1880,16L1932,16L1932,17L2007,17L2007,17L2201,17L2201,17L2240,17L2240,18L2297,18L2297,19L2300,19L2300,20L2336,20L2336,20L2404,20L2404,20L2408,20L2408,21L2409,21L2409,20L2431,20L2431,20L2449,20L2449,20L2565,20L2565,19L2616,19L2616,19L2620,19L2620,19L2653,19L2653,20L2655,20L2655,20L2710,20L2710,20L2714,20L2714,20L2722,20L2722,20L2750,20L2750,20L2751,20L2751,21L2770,21L2770,22L2778,22L2778,23L2785,23L2785,23L2785,23" tabindex="0">
						<title>y8dgoe98</title>
					</path>
				</g>
				<g style="--index: 4;">
					<path d="M0,0L734,0L734,2L860,2L860,2L1033,2L1033,2L1047,2L1047,2L1080,2L1080,2L1138,2L1138,2L1141,2L1141,2L1478,2L1478,2L1532,2L1532,2L1600,2L1600,2L1618,2L1618,2L1636,2L1636,2L1637,2L1637,2L1658,2L1658,2L1664,2L1664,3L1694,3L1694,3L1699,3L1699,3L1767,3L1767,3L1773,3L1773,3L1880,3L1880,3L1932,3L1932,3L2007,3L2007,3L2201,3L2201,3L2240,3L2240,3L2297,3L2297,3L2300,3L2300,4L2336,4L2336,4L2404,4L2404,4L2408,4L2408,4L2431,4L2431,4L2449,4L2449,4L2616,4L2616,4L2620,4L2620,4L2653,4L2653,4L2655,4L2655,4L2710,4L2710,4L2714,4L2714,4L2722,4L2722,4L2750,4L2750,4L2751,4L2751,4L2770,4L2770,5L2778,5L2778,6L2785,6L2785,6L2785,6" tabindex="0">
						<title>j9rlkzoj</title>
					</path>
				</g>
				<g style="--index: 5;">
					<path d="M0,0L860,0L860,5L862,5L862,5L1006,5L1006,6L1033,6L1033,7L1047,7L1047,8L1080,8L1080,9L1082,9L1082,8L1138,8L1138,8L1141,8L1141,9L1473,9L1473,8L1478,8L1478,9L1532,9L1532,10L1533,10L1533,9L1600,9L1600,10L1618,10L1618,11L1636,11L1636,12L1637,12L1637,13L1658,13L1658,14L1664,14L1664,15L1694,15L1694,15L1699,15L1699,16L1767,16L1767,17L1773,17L1773,17L1880,17L1880,18L1932,18L1932,19L2007,19L2007,19L2201,19L2201,20L2240,20L2240,21L2297,21L2297,22L2300,22L2300,23L2306,23L2306,22L2336,22L2336,22L2404,22L2404,22L2408,22L2408,23L2409,23L2409,22L2431,22L2431,22L2449,22L2449,22L2608,22L2608,21L2616,21L2616,21L2620,21L2620,21L2653,21L2653,22L2655,22L2655,22L2710,22L2710,22L2714,22L2714,22L2715,22L2715,31L2722,31L2722,31L2750,31L2750,31L2751,31L2751,32L2770,32L2770,34L2778,34L2778,35L2785,35L2785,36L2785,36" tabindex="0">
						<title>x356nrej</title>
					</path>
				</g>
				<g style="--index: 6;">
					<path d="M0,0L1033,0L1033,5L1047,5L1047,6L1080,6L1080,6L1082,6L1082,5L1138,5L1138,5L1141,5L1141,6L1148,6L1148,6L1473,6L1473,5L1478,5L1478,5L1532,5L1532,5L1600,5L1600,6L1618,6L1618,7L1636,7L1636,7L1637,7L1637,8L1658,8L1658,9L1664,9L1664,10L1694,10L1694,10L1699,10L1699,11L1767,11L1767,11L1773,11L1773,11L1880,11L1880,11L1932,11L1932,12L2007,12L2007,12L2201,12L2201,12L2240,12L2240,13L2297,13L2297,14L2300,14L2300,15L2336,15L2336,15L2404,15L2404,15L2408,15L2408,15L2431,15L2431,15L2449,15L2449,15L2565,15L2565,14L2616,14L2616,14L2620,14L2620,14L2653,14L2653,14L2655,14L2655,14L2710,14L2710,14L2714,14L2714,14L2722,14L2722,14L2750,14L2750,14L2751,14L2751,14L2770,14L2770,15L2778,15L2778,16L2785,16L2785,16L2785,16" tabindex="0">
						<title>j0np7or8</title>
					</path>
				</g>
				<g style="--index: 7;">
					<path d="M0,0L1047,0L1047,9L1080,9L1080,10L1138,10L1138,10L1141,10L1141,11L1166,11L1166,11L1167,11L1167,12L1478,12L1478,13L1532,13L1532,14L1593,14L1593,13L1600,13L1600,14L1618,14L1618,15L1636,15L1636,16L1637,16L1637,17L1658,17L1658,18L1664,18L1664,19L1694,19L1694,19L1699,19L1699,20L1767,20L1767,21L1773,21L1773,22L1880,22L1880,23L1932,23L1932,24L2007,24L2007,25L2201,25L2201,26L2240,26L2240,27L2297,27L2297,28L2300,28L2300,29L2336,29L2336,30L2404,30L2404,30L2408,30L2408,31L2430,31L2430,30L2431,30L2431,31L2449,31L2449,32L2616,32L2616,32L2620,32L2620,32L2653,32L2653,33L2655,33L2655,33L2710,33L2710,34L2714,34L2714,34L2722,34L2722,34L2750,34L2750,34L2751,34L2751,35L2770,35L2770,37L2778,37L2778,38L2781,38L2781,37L2785,37L2785,38L2785,38" tabindex="0">
						<title>xkon93k8</title>
					</path>
				</g>
				<g style="--index: 8;">
					<path d="M0,0L1047,0L1047,5L1080,5L1080,5L1082,5L1082,9L1138,9L1138,9L1141,9L1141,10L1476,10L1476,9L1478,9L1478,10L1532,10L1532,11L1536,11L1536,10L1600,10L1600,11L1618,11L1618,12L1636,12L1636,13L1637,13L1637,14L1658,14L1658,15L1664,15L1664,16L1694,16L1694,16L1699,16L1699,17L1767,17L1767,18L1773,18L1773,19L1880,19L1880,20L1932,20L1932,21L2007,21L2007,21L2201,21L2201,22L2240,22L2240,23L2297,23L2297,24L2300,24L2300,25L2306,25L2306,24L2336,24L2336,24L2404,24L2404,24L2408,24L2408,25L2409,25L2409,24L2431,24L2431,25L2449,25L2449,26L2608,26L2608,25L2616,25L2616,25L2620,25L2620,25L2653,25L2653,26L2655,26L2655,26L2710,26L2710,26L2714,26L2714,26L2715,26L2715,25L2722,25L2722,25L2750,25L2750,25L2751,25L2751,26L2770,26L2770,27L2778,27L2778,28L2785,28L2785,29L2785,29" tabindex="0">
						<title>x7q00668</title>
					</path>
				</g>
				<g style="--index: 9;">
					<path d="M0,0L1080,0L1080,8L1082,8L1082,7L1138,7L1138,7L1141,7L1141,8L1473,8L1473,7L1478,7L1478,8L1532,8L1532,8L1600,8L1600,9L1618,9L1618,10L1636,10L1636,11L1637,11L1637,12L1658,12L1658,13L1664,13L1664,14L1694,14L1694,14L1699,14L1699,15L1767,15L1767,16L1773,16L1773,16L1880,16L1880,17L1932,17L1932,18L2007,18L2007,18L2201,18L2201,18L2240,18L2240,19L2297,19L2297,20L2300,20L2300,21L2336,21L2336,21L2404,21L2404,21L2408,21L2408,22L2409,22L2409,21L2431,21L2431,21L2449,21L2449,21L2608,21L2608,20L2616,20L2616,20L2620,20L2620,20L2653,20L2653,21L2655,21L2655,21L2710,21L2710,21L2714,21L2714,21L2722,21L2722,21L2750,21L2750,21L2751,21L2751,22L2770,22L2770,23L2778,23L2778,24L2785,24L2785,24L2785,24" tabindex="0">
						<title>86ngl5wx</title>
					</path>
				</g>
				<g style="--index: 10;">
					<path d="M0,0L1138,0L1138,11L1141,11L1141,12L1166,12L1166,12L1167,12L1167,11L1478,11L1478,12L1532,12L1532,13L1593,13L1593,14L1600,14L1600,15L1618,15L1618,16L1636,16L1636,17L1637,17L1637,18L1658,18L1658,19L1664,19L1664,20L1694,20L1694,21L1699,21L1699,22L1767,22L1767,23L1773,23L1773,24L1880,24L1880,25L1932,25L1932,26L2007,26L2007,27L2047,27L2047,26L2201,26L2201,27L2240,27L2240,28L2297,28L2297,29L2300,29L2300,30L2336,30L2336,31L2404,31L2404,31L2408,31L2408,32L2431,32L2431,33L2449,33L2449,34L2616,34L2616,34L2620,34L2620,35L2639,35L2639,34L2653,34L2653,35L2655,35L2655,36L2708,36L2708,35L2710,35L2710,36L2714,36L2714,36L2722,36L2722,37L2750,37L2750,37L2751,37L2751,39L2758,39L2758,38L2770,38L2770,40L2778,40L2778,41L2785,41L2785,42L2785,42" tabindex="0">
						<title>j2yr9lp8</title>
					</path>
				</g>
				<g style="--index: 11;">
					<path d="M0,0L1141,0L1141,5L1473,5L1473,9L1476,9L1476,10L1478,10L1478,11L1532,11L1532,12L1600,12L1600,13L1618,13L1618,14L1636,14L1636,15L1637,15L1637,16L1658,16L1658,17L1664,17L1664,18L1694,18L1694,18L1699,18L1699,19L1767,19L1767,20L1773,20L1773,21L1880,21L1880,22L1932,22L1932,23L2007,23L2007,23L2201,23L2201,24L2240,24L2240,25L2297,25L2297,26L2300,26L2300,27L2306,27L2306,26L2336,26L2336,26L2404,26L2404,26L2408,26L2408,27L2409,27L2409,26L2431,26L2431,27L2449,27L2449,28L2598,28L2598,30L2608,30L2608,29L2616,29L2616,29L2620,29L2620,29L2653,29L2653,30L2655,30L2655,30L2710,30L2710,31L2714,31L2714,31L2715,31L2715,30L2722,30L2722,30L2750,30L2750,30L2751,30L2751,31L2770,31L2770,33L2778,33L2778,34L2785,34L2785,35L2785,35" tabindex="0">
						<title>8grypo7x</title>
					</path>
				</g>
				<g style="--index: 12;">
					<path d="M0,0L1478,0L1478,6L1532,6L1532,6L1600,6L1600,7L1618,7L1618,8L1636,8L1636,8L1637,8L1637,9L1658,9L1658,10L1664,10L1664,11L1694,11L1694,11L1699,11L1699,12L1767,12L1767,12L1773,12L1773,12L1880,12L1880,13L1932,13L1932,14L2007,14L2007,14L2201,14L2201,14L2240,14L2240,15L2297,15L2297,16L2300,16L2300,17L2336,17L2336,17L2404,17L2404,17L2408,17L2408,17L2431,17L2431,17L2449,17L2449,17L2565,17L2565,16L2616,16L2616,16L2620,16L2620,16L2653,16L2653,16L2655,16L2655,16L2710,16L2710,16L2714,16L2714,16L2722,16L2722,16L2750,16L2750,16L2751,16L2751,16L2770,16L2770,17L2778,17L2778,18L2785,18L2785,18L2785,18" tabindex="0">
						<title>8g5g6g1j</title>
					</path>
				</g>
				<g style="--index: 13;">
					<path d="M0,0L1532,0L1532,9L1533,9L1533,10L1536,10L1536,11L1600,11L1600,12L1618,12L1618,13L1636,13L1636,14L1637,14L1637,15L1658,15L1658,16L1664,16L1664,17L1694,17L1694,17L1699,17L1699,18L1767,18L1767,19L1773,19L1773,20L1880,20L1880,21L1932,21L1932,22L2007,22L2007,22L2201,22L2201,23L2240,23L2240,24L2297,24L2297,25L2300,25L2300,26L2306,26L2306,25L2336,25L2336,25L2404,25L2404,25L2408,25L2408,26L2409,26L2409,25L2431,25L2431,26L2449,26L2449,27L2608,27L2608,26L2616,26L2616,26L2620,26L2620,26L2653,26L2653,27L2655,27L2655,27L2710,27L2710,27L2714,27L2714,27L2715,27L2715,26L2722,26L2722,26L2750,26L2750,26L2751,26L2751,27L2770,27L2770,29L2778,29L2778,30L2785,30L2785,31L2785,31" tabindex="0">
						<title>8w1d07qx</title>
					</path>
				</g>
				<g style="--index: 14;">
					<path d="M0,0L1600,0L1600,5L1618,5L1618,6L1636,6L1636,6L1637,6L1637,6L1658,6L1658,7L1664,7L1664,8L1694,8L1694,8L1699,8L1699,9L1767,9L1767,9L1773,9L1773,9L1880,9L1880,9L1932,9L1932,10L2007,10L2007,10L2201,10L2201,10L2240,10L2240,10L2297,10L2297,10L2300,10L2300,11L2336,11L2336,11L2404,11L2404,11L2408,11L2408,11L2431,11L2431,11L2449,11L2449,11L2616,11L2616,11L2620,11L2620,11L2653,11L2653,11L2655,11L2655,11L2710,11L2710,11L2714,11L2714,11L2722,11L2722,11L2750,11L2750,11L2751,11L2751,11L2770,11L2770,12L2778,12L2778,13L2785,13L2785,13L2785,13" tabindex="0">
						<title>8r36oog8</title>
					</path>
				</g>
				<g style="--index: 15;">
					<path d="M0,0L1618,0L1618,4L1636,4L1636,4L1637,4L1637,4L1658,4L1658,4L1664,4L1664,5L1694,5L1694,5L1699,5L1699,6L1767,6L1767,6L1773,6L1773,6L1880,6L1880,6L1932,6L1932,6L2007,6L2007,6L2201,6L2201,6L2240,6L2240,6L2297,6L2297,6L2300,6L2300,7L2336,7L2336,7L2404,7L2404,7L2408,7L2408,7L2431,7L2431,7L2449,7L2449,7L2616,7L2616,7L2620,7L2620,7L2653,7L2653,7L2655,7L2655,7L2710,7L2710,7L2714,7L2714,7L2722,7L2722,7L2750,7L2750,7L2751,7L2751,7L2770,7L2770,8L2778,8L2778,9L2785,9L2785,9L2785,9" tabindex="0">
						<title>8gmn55y8</title>
					</path>
				</g>
				<g style="--index: 16;">
					<path d="M0,0L1636,0L1636,9L1637,9L1637,10L1658,10L1658,11L1664,11L1664,12L1694,12L1694,12L1699,12L1699,13L1767,13L1767,14L1773,14L1773,14L1880,14L1880,15L1932,15L1932,16L2007,16L2007,16L2201,16L2201,16L2240,16L2240,17L2297,17L2297,18L2300,18L2300,19L2336,19L2336,19L2404,19L2404,19L2408,19L2408,20L2409,20L2409,19L2431,19L2431,19L2449,19L2449,19L2565,19L2565,18L2616,18L2616,18L2620,18L2620,18L2653,18L2653,19L2655,19L2655,19L2710,19L2710,19L2714,19L2714,19L2722,19L2722,19L2750,19L2750,19L2751,19L2751,19L2770,19L2770,20L2778,20L2778,21L2785,21L2785,21L2785,21" tabindex="0">
						<title>j4235d5x</title>
					</path>
				</g>
				<g style="--index: 17;">
					<path d="M0,0L1637,0L1637,7L1658,7L1658,8L1664,8L1664,9L1694,9L1694,9L1699,9L1699,10L1767,10L1767,10L1773,10L1773,10L1880,10L1880,10L1932,10L1932,11L2007,11L2007,11L2201,11L2201,11L2240,11L2240,12L2297,12L2297,13L2300,13L2300,14L2336,14L2336,14L2404,14L2404,14L2408,14L2408,14L2431,14L2431,14L2449,14L2449,14L2565,14L2565,13L2616,13L2616,13L2620,13L2620,13L2653,13L2653,13L2655,13L2655,13L2710,13L2710,13L2714,13L2714,13L2722,13L2722,13L2750,13L2750,13L2751,13L2751,13L2770,13L2770,14L2778,14L2778,15L2785,15L2785,15L2785,15" tabindex="0">
						<title>xk3knqk8</title>
					</path>
				</g>
				<g style="--index: 18;">
					<path d="M0,0L1658,0L1658,5L1664,5L1664,6L1694,6L1694,6L1699,6L1699,7L1767,7L1767,7L1773,7L1773,7L1880,7L1880,7L1932,7L1932,7L2007,7L2007,7L2201,7L2201,7L2240,7L2240,7L2297,7L2297,7L2300,7L2300,8L2336,8L2336,8L2404,8L2404,8L2408,8L2408,8L2431,8L2431,8L2449,8L2449,8L2616,8L2616,8L2620,8L2620,8L2653,8L2653,8L2655,8L2655,8L2710,8L2710,8L2714,8L2714,8L2722,8L2722,8L2750,8L2750,8L2751,8L2751,8L2770,8L2770,9L2778,9L2778,10L2785,10L2785,10L2785,10" tabindex="0">
						<title>8dgdoo58</title>
					</path>
				</g>
				<g style="--index: 19;">
					<path d="M0,0L1664,0L1664,2L1694,2L1694,2L1699,2L1699,2L1767,2L1767,2L1773,2L1773,2L1880,2L1880,2L1932,2L1932,2L2007,2L2007,2L2201,2L2201,2L2240,2L2240,2L2297,2L2297,2L2300,2L2300,3L2336,3L2336,3L2404,3L2404,3L2408,3L2408,3L2431,3L2431,3L2449,3L2449,3L2616,3L2616,3L2620,3L2620,3L2653,3L2653,3L2655,3L2655,3L2710,3L2710,3L2714,3L2714,3L2722,3L2722,3L2750,3L2750,3L2751,3L2751,3L2770,3L2770,4L2778,4L2778,5L2785,5L2785,5L2785,5" tabindex="0">
						<title>x7wpmr68</title>
					</path>
				</g>
				<g style="--index: 20;">
					<path d="M0,0L1694,0L1694,20L1699,20L1699,21L1767,21L1767,22L1773,22L1773,23L1880,23L1880,24L1932,24L1932,25L2007,25L2007,26L2047,26L2047,27L2201,27L2201,28L2240,28L2240,29L2297,29L2297,30L2300,30L2300,31L2336,31L2336,32L2404,32L2404,33L2405,33L2405,32L2406,32L2406,32L2408,32L2408,33L2410,33L2410,34L2431,34L2431,35L2449,35L2449,36L2616,36L2616,37L2620,37L2620,38L2653,38L2653,39L2655,39L2655,40L2710,40L2710,41L2714,41L2714,42L2722,42L2722,43L2750,43L2750,43L2751,43L2751,45L2757,45L2757,44L2758,44L2758,43L2770,43L2770,45L2772,45L2772,44L2773,44L2773,47L2778,47L2778,49L2785,49L2785,50L2785,50" tabindex="0">
						<title>jn2m23wj</title>
					</path>
				</g>
				<g style="--index: 21;">
					<path d="M0,0L1699,0L1699,4L1767,4L1767,4L1773,4L1773,4L1880,4L1880,4L1932,4L1932,4L2007,4L2007,4L2201,4L2201,4L2240,4L2240,4L2297,4L2297,4L2300,4L2300,5L2336,5L2336,5L2404,5L2404,5L2408,5L2408,5L2431,5L2431,5L2449,5L2449,5L2616,5L2616,5L2620,5L2620,5L2653,5L2653,5L2655,5L2655,5L2710,5L2710,5L2714,5L2714,5L2722,5L2722,5L2750,5L2750,5L2751,5L2751,5L2770,5L2770,6L2778,6L2778,7L2785,7L2785,7L2785,7" tabindex="0">
						<title>8rl3eog8</title>
					</path>
				</g>
				<g style="--index: 22;">
					<path d="M0,0L1767,0L1767,13L1773,13L1773,13L1880,13L1880,14L1932,14L1932,15L2007,15L2007,15L2201,15L2201,15L2240,15L2240,16L2297,16L2297,17L2300,17L2300,18L2336,18L2336,18L2404,18L2404,18L2408,18L2408,18L2431,18L2431,18L2449,18L2449,18L2565,18L2565,17L2616,17L2616,17L2620,17L2620,17L2653,17L2653,18L2655,18L2655,18L2710,18L2710,18L2714,18L2714,18L2722,18L2722,18L2750,18L2750,18L2751,18L2751,18L2770,18L2770,19L2778,19L2778,20L2785,20L2785,20L2785,20" tabindex="0">
						<title>8ewg6np8</title>
					</path>
				</g>
				<g style="--index: 23;">
					<path d="M0,0L1773,0L1773,18L1880,18L1880,19L1932,19L1932,20L2007,20L2007,20L2201,20L2201,21L2240,21L2240,22L2297,22L2297,23L2300,23L2300,24L2306,24L2306,23L2336,23L2336,23L2404,23L2404,23L2408,23L2408,24L2409,24L2409,23L2431,23L2431,24L2449,24L2449,25L2608,25L2608,24L2616,24L2616,24L2620,24L2620,24L2653,24L2653,25L2655,25L2655,25L2710,25L2710,25L2714,25L2714,25L2715,25L2715,24L2722,24L2722,24L2750,24L2750,24L2751,24L2751,25L2770,25L2770,26L2778,26L2778,27L2785,27L2785,28L2785,28" tabindex="0">
						<title>xk1oze6j</title>
					</path>
				</g>
				<g style="--index: 24;">
					<path d="M0,0L1880,0L1880,12L1932,12L1932,13L2007,13L2007,13L2201,13L2201,13L2240,13L2240,14L2297,14L2297,15L2300,15L2300,16L2336,16L2336,16L2404,16L2404,16L2408,16L2408,16L2431,16L2431,16L2449,16L2449,16L2565,16L2565,15L2616,15L2616,15L2620,15L2620,15L2653,15L2653,15L2655,15L2655,15L2710,15L2710,15L2714,15L2714,15L2722,15L2722,15L2750,15L2750,15L2751,15L2751,15L2770,15L2770,16L2778,16L2778,17L2785,17L2785,17L2785,17" tabindex="0">
						<title>x3wz4ykj</title>
					</path>
				</g>
				<g style="--index: 25;">
					<path d="M0,0L1932,0L1932,9L2007,9L2007,9L2201,9L2201,9L2240,9L2240,9L2297,9L2297,9L2300,9L2300,10L2336,10L2336,10L2404,10L2404,10L2408,10L2408,10L2431,10L2431,10L2449,10L2449,10L2616,10L2616,10L2620,10L2620,10L2653,10L2653,10L2655,10L2655,10L2710,10L2710,10L2714,10L2714,10L2722,10L2722,10L2750,10L2750,10L2751,10L2751,10L2770,10L2770,11L2778,11L2778,12L2785,12L2785,12L2785,12" tabindex="0">
						<title>8ew394p8</title>
					</path>
				</g>
				<g style="--index: 26;">
					<path d="M0,0L2007,0L2007,24L2201,24L2201,25L2240,25L2240,26L2297,26L2297,27L2300,27L2300,28L2336,28L2336,29L2404,29L2404,29L2408,29L2408,30L2430,30L2430,29L2431,29L2431,30L2449,30L2449,31L2616,31L2616,31L2620,31L2620,31L2653,31L2653,32L2655,32L2655,32L2710,32L2710,33L2714,33L2714,33L2722,33L2722,33L2750,33L2750,33L2751,33L2751,34L2770,34L2770,36L2778,36L2778,37L2781,37L2781,36L2785,36L2785,37L2785,37" tabindex="0">
						<title>x3wdlvkj</title>
					</path>
				</g>
				<g style="--index: 27;">
					<path d="M0,0L2201,0L2201,19L2240,19L2240,20L2297,20L2297,21L2300,21L2300,22L2306,22L2306,27L2336,27L2336,27L2404,27L2404,27L2408,27L2408,28L2409,28L2409,27L2431,27L2431,28L2449,28L2449,29L2598,29L2598,28L2608,28L2608,27L2616,27L2616,27L2620,27L2620,27L2653,27L2653,28L2655,28L2655,28L2710,28L2710,28L2714,28L2714,28L2715,28L2715,27L2722,27L2722,27L2750,27L2750,27L2751,27L2751,28L2770,28L2770,30L2778,30L2778,31L2785,31L2785,32L2785,32" tabindex="0">
						<title>8dpl6o58</title>
					</path>
				</g>
				<g style="--index: 28;">
					<path d="M0,0L2240,0L2240,11L2297,11L2297,12L2300,12L2300,13L2336,13L2336,13L2404,13L2404,13L2408,13L2408,13L2431,13L2431,13L2449,13L2449,13L2565,13L2565,20L2608,20L2608,30L2616,30L2616,30L2620,30L2620,30L2653,30L2653,31L2655,31L2655,31L2710,31L2710,32L2714,32L2714,32L2722,32L2722,32L2750,32L2750,32L2751,32L2751,33L2770,33L2770,35L2778,35L2778,36L2781,36L2781,40L2785,40L2785,41L2785,41" tabindex="0">
						<title>8w3l21qj</title>
					</path>
				</g>
				<g style="--index: 29;">
					<path d="M0,0L2297,0L2297,11L2300,11L2300,12L2336,12L2336,12L2404,12L2404,12L2408,12L2408,12L2431,12L2431,12L2449,12L2449,12L2616,12L2616,12L2620,12L2620,12L2653,12L2653,12L2655,12L2655,12L2710,12L2710,12L2714,12L2714,12L2722,12L2722,12L2750,12L2750,12L2751,12L2751,12L2770,12L2770,13L2778,13L2778,14L2785,14L2785,14L2785,14" tabindex="0">
						<title>j46k93w8</title>
					</path>
				</g>
				<g style="--index: 30;">
					<path d="M0,0L2300,0L2300,2L2336,2L2336,2L2404,2L2404,2L2408,2L2408,2L2431,2L2431,2L2449,2L2449,2L2616,2L2616,2L2620,2L2620,2L2653,2L2653,2L2655,2L2655,2L2710,2L2710,2L2714,2L2714,2L2722,2L2722,2L2750,2L2750,2L2751,2L2751,2L2770,2L2770,3L2778,3L2778,4L2785,4L2785,4L2785,4" tabindex="0">
						<title>j465mqd8</title>
					</path>
				</g>
				<g style="--index: 31;">
					<path d="M0,0L2336,0L2336,28L2404,28L2404,28L2408,28L2408,29L2409,29L2409,28L2431,28L2431,29L2449,29L2449,30L2598,30L2598,29L2608,29L2608,28L2616,28L2616,28L2620,28L2620,28L2653,28L2653,29L2655,29L2655,29L2710,29L2710,29L2714,29L2714,29L2715,29L2715,28L2722,28L2722,28L2750,28L2750,28L2751,28L2751,29L2770,29L2770,31L2778,31L2778,32L2785,32L2785,33L2785,33" tabindex="0">
						<title>8v0mryvx</title>
					</path>
				</g>
				<g style="--index: 32;">
					<path d="M0,0L2404,0L2404,32L2405,32L2405,33L2406,33L2406,33L2407,33L2407,33L2408,33L2408,34L2410,34L2410,33L2431,33L2431,34L2449,34L2449,35L2616,35L2616,36L2620,36L2620,37L2653,37L2653,38L2655,38L2655,39L2710,39L2710,40L2714,40L2714,41L2719,41L2719,40L2722,40L2722,41L2750,41L2750,41L2751,41L2751,43L2757,43L2757,42L2758,42L2758,41L2770,41L2770,43L2772,43L2772,42L2778,42L2778,43L2785,43L2785,44L2785,44" tabindex="0">
						<title>86rpw3p8</title>
					</path>
				</g>
				<g style="--index: 33;">
					<path d="M0,0L2408,0L2408,19L2409,19L2409,29L2410,29L2410,29L2430,29L2430,31L2431,31L2431,32L2449,32L2449,33L2616,33L2616,33L2620,33L2620,33L2653,33L2653,34L2655,34L2655,34L2710,34L2710,35L2714,35L2714,35L2722,35L2722,36L2750,36L2750,36L2751,36L2751,38L2758,38L2758,37L2770,37L2770,39L2778,39L2778,40L2781,40L2781,39L2785,39L2785,40L2785,40" tabindex="0">
						<title>j467y458</title>
					</path>
				</g>
				<g style="--index: 34;">
					<path d="M0,0L2431,0L2431,23L2449,23L2449,24L2608,24L2608,23L2616,23L2616,23L2620,23L2620,23L2653,23L2653,24L2655,24L2655,24L2710,24L2710,24L2714,24L2714,24L2715,24L2715,23L2722,23L2722,23L2750,23L2750,23L2751,23L2751,24L2770,24L2770,25L2778,25L2778,26L2785,26L2785,27L2785,27" tabindex="0">
						<title>j0ewnqw8</title>
					</path>
				</g>
				<g style="--index: 35;">
					<path d="M0,0L2449,0L2449,23L2608,23L2608,22L2616,22L2616,22L2620,22L2620,22L2653,22L2653,23L2655,23L2655,23L2710,23L2710,23L2714,23L2714,23L2715,23L2715,22L2722,22L2722,22L2750,22L2750,22L2751,22L2751,23L2770,23L2770,24L2778,24L2778,25L2785,25L2785,26L2785,26" tabindex="0">
						<title>0jmw6wex</title>
					</path>
				</g>
				<g style="--index: 36;">
					<path d="M0,0L2616,0L2616,35L2620,35L2620,36L2653,36L2653,37L2655,37L2655,38L2710,38L2710,39L2714,39L2714,39L2718,39L2718,38L2722,38L2722,39L2750,39L2750,39L2751,39L2751,41L2758,41L2758,40L2770,40L2770,42L2772,42L2772,41L2778,41L2778,42L2785,42L2785,43L2785,43" tabindex="0">
						<title>81pdyqq8</title>
					</path>
				</g>
				<g style="--index: 37;">
					<path d="M0,0L2620,0L2620,34L2639,34L2639,35L2653,35L2653,36L2655,36L2655,37L2708,37L2708,36L2710,36L2710,37L2714,37L2714,37L2722,37L2722,38L2750,38L2750,38L2751,38L2751,40L2758,40L2758,39L2770,39L2770,41L2772,41L2772,47L2773,47L2773,46L2778,46L2778,47L2785,47L2785,48L2785,48" tabindex="0">
						<title>8gop7k2x</title>
					</path>
				</g>
				<g style="--index: 38;">
					<path d="M0,0L2653,0L2653,17L2655,17L2655,17L2710,17L2710,17L2714,17L2714,17L2722,17L2722,17L2750,17L2750,17L2751,17L2751,17L2770,17L2770,18L2778,18L2778,19L2785,19L2785,19L2785,19" tabindex="0">
						<title>8r6739q8</title>
					</path>
				</g>
				<g style="--index: 39;">
					<path d="M0,0L2655,0L2655,35L2708,35L2708,37L2710,37L2710,38L2714,38L2714,38L2718,38L2718,39L2722,39L2722,40L2750,40L2750,40L2751,40L2751,42L2757,42L2757,46L2759,46L2759,46L2770,46L2770,48L2772,48L2772,48L2773,48L2773,48L2778,48L2778,48L2785,48L2785,49L2785,49" tabindex="0">
						<title>j2p4pel8</title>
					</path>
				</g>
				<g style="--index: 40;">
					<path d="M0,0L2710,0L2710,30L2714,30L2714,30L2715,30L2715,29L2722,29L2722,29L2750,29L2750,29L2751,29L2751,30L2770,30L2770,32L2778,32L2778,33L2785,33L2785,34L2785,34" tabindex="0">
						<title>xkpw7g6j</title>
					</path>
				</g>
				<g style="--index: 41;">
					<path d="M0,0L2714,0L2714,40L2719,40L2719,41L2722,41L2722,42L2750,42L2750,42L2751,42L2751,44L2757,44L2757,43L2758,43L2758,42L2770,42L2770,44L2772,44L2772,43L2778,43L2778,44L2785,44L2785,45L2785,45" tabindex="0">
						<title>8r617k38</title>
					</path>
				</g>
				<g style="--index: 42;">
					<path d="M0,0L2722,0L2722,35L2750,35L2750,35L2751,35L2751,36L2770,36L2770,38L2778,38L2778,39L2781,39L2781,38L2785,38L2785,39L2785,39" tabindex="0">
						<title>8qpl62dx</title>
					</path>
				</g>
				<g style="--index: 43;">
					<path d="M0,0L2750,0L2750,44L2751,44L2751,46L2757,46L2757,45L2770,45L2770,47L2772,47L2772,46L2773,46L2773,45L2778,45L2778,46L2785,46L2785,47L2785,47" tabindex="0">
						<title>jo1zrpnx</title>
					</path>
				</g>
				<g style="--index: 44;">
					<path d="M0,0L2751,0L2751,37L2758,37L2758,44L2770,44L2770,46L2772,46L2772,45L2773,45L2773,44L2778,44L2778,45L2785,45L2785,46L2785,46" tabindex="0">
						<title>86pek6wj</title>
					</path>
				</g>
				<g style="--index: 45;">
					<path d="M0,0L2751,0L2751,20L2770,20L2770,21L2778,21L2778,22L2785,22L2785,22L2785,22" tabindex="0">
						<title>x7gz6krx</title>
					</path>
				</g>
				<g style="--index: 46;">
					<path d="M0,0L2770,0L2770,1L2778,1L2778,2L2785,2L2785,2L2785,2" tabindex="0">
						<title>j4wozgdx</title>
					</path>
				</g>
				<g style="--index: 47;">
					<path d="M0,0L2770,0L2770,28L2778,28L2778,29L2785,29L2785,30L2785,30" tabindex="0">
						<title>j2pmdqp8</title>
					</path>
				</g>
				<g style="--index: 48;">
					<path d="M0,0L2778,0L2778,1L2785,1L2785,1L2785,1" tabindex="0">
						<title>j01don3x</title>
					</path>
				</g>
				<g style="--index: 49;">
					<path d="M0,0L2785,0L2785,25L2785,25" tabindex="0">
						<title>8gzn56rj</title>
					</path>
				</g>
			</g>
		</svg>
	</foreignObject>
</svg>
